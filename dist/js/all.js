"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

!function (t) {
  "function" == typeof define && define.amd ? define(t) : t();
}(function () {
  "use strict";
  /** @license
     * jsPDF - PDF Document creation from JavaScript
     * Version 1.5.3 Built on 2018-12-27T14:11:42.696Z
     *                      CommitID d93d28db14
     *
     * Copyright (c) 2010-2016 James Hall <james@parall.ax>, https://github.com/MrRio/jsPDF
     *               2010 Aaron Spike, https://github.com/acspike
     *               2012 Willow Systems Corporation, willow-systems.com
     *               2012 Pablo Hess, https://github.com/pablohess
     *               2012 Florian Jenett, https://github.com/fjenett
     *               2013 Warren Weckesser, https://github.com/warrenweckesser
     *               2013 Youssef Beddad, https://github.com/lifof
     *               2013 Lee Driscoll, https://github.com/lsdriscoll
     *               2013 Stefan Slonevskiy, https://github.com/stefslon
     *               2013 Jeremy Morel, https://github.com/jmorel
     *               2013 Christoph Hartmann, https://github.com/chris-rock
     *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria
     *               2014 James Makes, https://github.com/dollaruw
     *               2014 Diego Casorran, https://github.com/diegocr
     *               2014 Steven Spungin, https://github.com/Flamenco
     *               2014 Kenneth Glassey, https://github.com/Gavvers
     *
     * Licensed under the MIT License
     *
     * Contributor(s):
     *    siefkenj, ahwolf, rickygu, Midnith, saintclair, eaparango,
     *    kim3er, mfo, alnorth, Flamenco
     */

  function se(t) {
    return (se = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (t) {
      return _typeof(t);
    } : function (t) {
      return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : _typeof(t);
    })(t);
  }

  !function (t) {
    if ("object" !== se(t.console)) {
      t.console = {};

      for (var e, n, r = t.console, i = function i() {}, o = ["memory"], a = "assert,clear,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn".split(","); e = o.pop();) {
        r[e] || (r[e] = {});
      }

      for (; n = a.pop();) {
        r[n] || (r[n] = i);
      }
    }

    var s,
        l,
        h,
        u,
        c = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    void 0 === t.btoa && (t.btoa = function (t) {
      var e,
          n,
          r,
          i,
          o,
          a = 0,
          s = 0,
          l = "",
          h = [];
      if (!t) return t;

      for (; e = (o = t.charCodeAt(a++) << 16 | t.charCodeAt(a++) << 8 | t.charCodeAt(a++)) >> 18 & 63, n = o >> 12 & 63, r = o >> 6 & 63, i = 63 & o, h[s++] = c.charAt(e) + c.charAt(n) + c.charAt(r) + c.charAt(i), a < t.length;) {
        ;
      }

      l = h.join("");
      var u = t.length % 3;
      return (u ? l.slice(0, u - 3) : l) + "===".slice(u || 3);
    }), void 0 === t.atob && (t.atob = function (t) {
      var e,
          n,
          r,
          i,
          o,
          a,
          s = 0,
          l = 0,
          h = [];
      if (!t) return t;

      for (t += ""; e = (a = c.indexOf(t.charAt(s++)) << 18 | c.indexOf(t.charAt(s++)) << 12 | (i = c.indexOf(t.charAt(s++))) << 6 | (o = c.indexOf(t.charAt(s++)))) >> 16 & 255, n = a >> 8 & 255, r = 255 & a, h[l++] = 64 == i ? String.fromCharCode(e) : 64 == o ? String.fromCharCode(e, n) : String.fromCharCode(e, n, r), s < t.length;) {
        ;
      }

      return h.join("");
    }), Array.prototype.map || (Array.prototype.map = function (t) {
      if (null == this || "function" != typeof t) throw new TypeError();

      for (var e = Object(this), n = e.length >>> 0, r = new Array(n), i = 1 < arguments.length ? arguments[1] : void 0, o = 0; o < n; o++) {
        o in e && (r[o] = t.call(i, e[o], o, e));
      }

      return r;
    }), Array.isArray || (Array.isArray = function (t) {
      return "[object Array]" === Object.prototype.toString.call(t);
    }), Array.prototype.forEach || (Array.prototype.forEach = function (t, e) {
      if (null == this || "function" != typeof t) throw new TypeError();

      for (var n = Object(this), r = n.length >>> 0, i = 0; i < r; i++) {
        i in n && t.call(e, n[i], i, n);
      }
    }), Array.prototype.find || Object.defineProperty(Array.prototype, "find", {
      value: function value(t) {
        if (null == this) throw new TypeError('"this" is null or not defined');
        var e = Object(this),
            n = e.length >>> 0;
        if ("function" != typeof t) throw new TypeError("predicate must be a function");

        for (var r = arguments[1], i = 0; i < n;) {
          var o = e[i];
          if (t.call(r, o, i, e)) return o;
          i++;
        }
      },
      configurable: !0,
      writable: !0
    }), Object.keys || (Object.keys = (s = Object.prototype.hasOwnProperty, l = !{
      toString: null
    }.propertyIsEnumerable("toString"), u = (h = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"]).length, function (t) {
      if ("object" !== se(t) && ("function" != typeof t || null === t)) throw new TypeError();
      var e,
          n,
          r = [];

      for (e in t) {
        s.call(t, e) && r.push(e);
      }

      if (l) for (n = 0; n < u; n++) {
        s.call(t, h[n]) && r.push(h[n]);
      }
      return r;
    })), "function" != typeof Object.assign && (Object.assign = function (t) {
      if (null == t) throw new TypeError("Cannot convert undefined or null to object");
      t = Object(t);

      for (var e = 1; e < arguments.length; e++) {
        var n = arguments[e];
        if (null != n) for (var r in n) {
          Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);
        }
      }

      return t;
    }), String.prototype.trim || (String.prototype.trim = function () {
      return this.replace(/^\s+|\s+$/g, "");
    }), String.prototype.trimLeft || (String.prototype.trimLeft = function () {
      return this.replace(/^\s+/g, "");
    }), String.prototype.trimRight || (String.prototype.trimRight = function () {
      return this.replace(/\s+$/g, "");
    }), Number.isInteger = Number.isInteger || function (t) {
      return "number" == typeof t && isFinite(t) && Math.floor(t) === t;
    };
  }("undefined" != typeof self && self || "undefined" != typeof window && window || "undefined" != typeof global && global || Function('return typeof this === "object" && this.content')() || Function("return this")());

  var t,
      e,
      n,
      _,
      l,
      F,
      P,
      p,
      d,
      k,
      a,
      o,
      s,
      h,
      u,
      c,
      r,
      i,
      f,
      g,
      m,
      y,
      v,
      w,
      b,
      x,
      I,
      C,
      B,
      N,
      L,
      A,
      S,
      j,
      E,
      M,
      O,
      q,
      T,
      R,
      D,
      U,
      z,
      H,
      W,
      V,
      G,
      Y,
      J,
      X,
      K,
      Z,
      Q,
      $,
      tt,
      et,
      nt,
      rt,
      it,
      ot,
      at,
      st,
      lt = function (ie) {
    function oe(o) {
      if ("object" !== se(o)) throw new Error("Invalid Context passed to initialize PubSub (jsPDF-module)");
      var a = {};
      this.subscribe = function (t, e, n) {
        if (n = n || !1, "string" != typeof t || "function" != typeof e || "boolean" != typeof n) throw new Error("Invalid arguments passed to PubSub.subscribe (jsPDF-module)");
        a.hasOwnProperty(t) || (a[t] = {});
        var r = Math.random().toString(35);
        return a[t][r] = [e, !!n], r;
      }, this.unsubscribe = function (t) {
        for (var e in a) {
          if (a[e][t]) return delete a[e][t], 0 === Object.keys(a[e]).length && delete a[e], !0;
        }

        return !1;
      }, this.publish = function (t) {
        if (a.hasOwnProperty(t)) {
          var e = Array.prototype.slice.call(arguments, 1),
              n = [];

          for (var r in a[t]) {
            var i = a[t][r];

            try {
              i[0].apply(o, e);
            } catch (t) {
              ie.console && console.error("jsPDF PubSub Error", t.message, t);
            }

            i[1] && n.push(r);
          }

          n.length && n.forEach(this.unsubscribe);
        }
      }, this.getTopics = function () {
        return a;
      };
    }

    function ae(t, e, i, n) {
      var r = {},
          o = [],
          a = 1;
      "object" === se(t) && (t = (r = t).orientation, e = r.unit || e, i = r.format || i, n = r.compress || r.compressPdf || n, o = r.filters || (!0 === n ? ["FlateEncode"] : o), a = "number" == typeof r.userUnit ? Math.abs(r.userUnit) : 1), e = e || "mm", t = ("" + (t || "P")).toLowerCase();
      var s = r.putOnlyUsedFonts || !0,
          K = {},
          l = {
        internal: {},
        __private__: {}
      };
      l.__private__.PubSub = oe;

      var h = "1.3",
          u = l.__private__.getPdfVersion = function () {
        return h;
      },
          c = (l.__private__.setPdfVersion = function (t) {
        h = t;
      }, {
        a0: [2383.94, 3370.39],
        a1: [1683.78, 2383.94],
        a2: [1190.55, 1683.78],
        a3: [841.89, 1190.55],
        a4: [595.28, 841.89],
        a5: [419.53, 595.28],
        a6: [297.64, 419.53],
        a7: [209.76, 297.64],
        a8: [147.4, 209.76],
        a9: [104.88, 147.4],
        a10: [73.7, 104.88],
        b0: [2834.65, 4008.19],
        b1: [2004.09, 2834.65],
        b2: [1417.32, 2004.09],
        b3: [1000.63, 1417.32],
        b4: [708.66, 1000.63],
        b5: [498.9, 708.66],
        b6: [354.33, 498.9],
        b7: [249.45, 354.33],
        b8: [175.75, 249.45],
        b9: [124.72, 175.75],
        b10: [87.87, 124.72],
        c0: [2599.37, 3676.54],
        c1: [1836.85, 2599.37],
        c2: [1298.27, 1836.85],
        c3: [918.43, 1298.27],
        c4: [649.13, 918.43],
        c5: [459.21, 649.13],
        c6: [323.15, 459.21],
        c7: [229.61, 323.15],
        c8: [161.57, 229.61],
        c9: [113.39, 161.57],
        c10: [79.37, 113.39],
        dl: [311.81, 623.62],
        letter: [612, 792],
        "government-letter": [576, 756],
        legal: [612, 1008],
        "junior-legal": [576, 360],
        ledger: [1224, 792],
        tabloid: [792, 1224],
        "credit-card": [153, 243]
      }),
          f = (l.__private__.getPageFormats = function () {
        return c;
      }, l.__private__.getPageFormat = function (t) {
        return c[t];
      });

      "string" == typeof i && (i = f(i)), i = i || f("a4");

      var p,
          Z = l.f2 = l.__private__.f2 = function (t) {
        if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.f2");
        return t.toFixed(2);
      },
          Q = l.__private__.f3 = function (t) {
        if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.f3");
        return t.toFixed(3);
      },
          d = "00000000000000000000000000000000",
          g = l.__private__.getFileId = function () {
        return d;
      },
          m = l.__private__.setFileId = function (t) {
        return t = t || "12345678901234567890123456789012".split("").map(function () {
          return "ABCDEF0123456789".charAt(Math.floor(16 * Math.random()));
        }).join(""), d = t;
      };

      l.setFileId = function (t) {
        return m(t), this;
      }, l.getFileId = function () {
        return g();
      };

      var y = l.__private__.convertDateToPDFDate = function (t) {
        var e = t.getTimezoneOffset(),
            n = e < 0 ? "+" : "-",
            r = Math.floor(Math.abs(e / 60)),
            i = Math.abs(e % 60),
            o = [n, P(r), "'", P(i), "'"].join("");
        return ["D:", t.getFullYear(), P(t.getMonth() + 1), P(t.getDate()), P(t.getHours()), P(t.getMinutes()), P(t.getSeconds()), o].join("");
      },
          v = l.__private__.convertPDFDateToDate = function (t) {
        var e = parseInt(t.substr(2, 4), 10),
            n = parseInt(t.substr(6, 2), 10) - 1,
            r = parseInt(t.substr(8, 2), 10),
            i = parseInt(t.substr(10, 2), 10),
            o = parseInt(t.substr(12, 2), 10),
            a = parseInt(t.substr(14, 2), 10);
        parseInt(t.substr(16, 2), 10), parseInt(t.substr(20, 2), 10);
        return new Date(e, n, r, i, o, a, 0);
      },
          w = l.__private__.setCreationDate = function (t) {
        var e;
        if (void 0 === t && (t = new Date()), "object" === se(t) && "[object Date]" === Object.prototype.toString.call(t)) e = y(t);else {
          if (!/^D:(20[0-2][0-9]|203[0-7]|19[7-9][0-9])(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[0-9]|[1-5][0-9])(\+0[0-9]|\+1[0-4]|\-0[0-9]|\-1[0-1])\'(0[0-9]|[1-5][0-9])\'?$/.test(t)) throw new Error("Invalid argument passed to jsPDF.setCreationDate");
          e = t;
        }
        return p = e;
      },
          b = l.__private__.getCreationDate = function (t) {
        var e = p;
        return "jsDate" === t && (e = v(p)), e;
      };

      l.setCreationDate = function (t) {
        return w(t), this;
      }, l.getCreationDate = function (t) {
        return b(t);
      };

      var x,
          N,
          L,
          A,
          S,
          $,
          _,
          F,
          P = l.__private__.padd2 = function (t) {
        return ("0" + parseInt(t)).slice(-2);
      },
          k = !1,
          I = [],
          C = [],
          B = 0,
          tt = (l.__private__.setCustomOutputDestination = function (t) {
        N = t;
      }, l.__private__.resetCustomOutputDestination = function (t) {
        N = void 0;
      }, l.__private__.out = function (t) {
        var e;
        return t = "string" == typeof t ? t : t.toString(), (e = void 0 === N ? k ? I[x] : C : N).push(t), k || (B += t.length + 1), e;
      }),
          j = l.__private__.write = function (t) {
        return tt(1 === arguments.length ? t.toString() : Array.prototype.join.call(arguments, " "));
      },
          E = l.__private__.getArrayBuffer = function (t) {
        for (var e = t.length, n = new ArrayBuffer(e), r = new Uint8Array(n); e--;) {
          r[e] = t.charCodeAt(e);
        }

        return n;
      },
          M = [["Helvetica", "helvetica", "normal", "WinAnsiEncoding"], ["Helvetica-Bold", "helvetica", "bold", "WinAnsiEncoding"], ["Helvetica-Oblique", "helvetica", "italic", "WinAnsiEncoding"], ["Helvetica-BoldOblique", "helvetica", "bolditalic", "WinAnsiEncoding"], ["Courier", "courier", "normal", "WinAnsiEncoding"], ["Courier-Bold", "courier", "bold", "WinAnsiEncoding"], ["Courier-Oblique", "courier", "italic", "WinAnsiEncoding"], ["Courier-BoldOblique", "courier", "bolditalic", "WinAnsiEncoding"], ["Times-Roman", "times", "normal", "WinAnsiEncoding"], ["Times-Bold", "times", "bold", "WinAnsiEncoding"], ["Times-Italic", "times", "italic", "WinAnsiEncoding"], ["Times-BoldItalic", "times", "bolditalic", "WinAnsiEncoding"], ["ZapfDingbats", "zapfdingbats", "normal", null], ["Symbol", "symbol", "normal", null]],
          et = (l.__private__.getStandardFonts = function (t) {
        return M;
      }, r.fontSize || 16),
          O = (l.__private__.setFontSize = l.setFontSize = function (t) {
        return et = t, this;
      }, l.__private__.getFontSize = l.getFontSize = function () {
        return et;
      }),
          nt = r.R2L || !1,
          q = (l.__private__.setR2L = l.setR2L = function (t) {
        return nt = t, this;
      }, l.__private__.getR2L = l.getR2L = function (t) {
        return nt;
      }, l.__private__.setZoomMode = function (t) {
        var e = [void 0, null, "fullwidth", "fullheight", "fullpage", "original"];
        if (/^\d*\.?\d*\%$/.test(t)) L = t;else if (isNaN(t)) {
          if (-1 === e.indexOf(t)) throw new Error('zoom must be Integer (e.g. 2), a percentage Value (e.g. 300%) or fullwidth, fullheight, fullpage, original. "' + t + '" is not recognized.');
          L = t;
        } else L = parseInt(t, 10);
      }),
          T = (l.__private__.getZoomMode = function () {
        return L;
      }, l.__private__.setPageMode = function (t) {
        if (-1 == [void 0, null, "UseNone", "UseOutlines", "UseThumbs", "FullScreen"].indexOf(t)) throw new Error('Page mode must be one of UseNone, UseOutlines, UseThumbs, or FullScreen. "' + t + '" is not recognized.');
        A = t;
      }),
          R = (l.__private__.getPageMode = function () {
        return A;
      }, l.__private__.setLayoutMode = function (t) {
        if (-1 == [void 0, null, "continuous", "single", "twoleft", "tworight", "two"].indexOf(t)) throw new Error('Layout mode must be one of continuous, single, twoleft, tworight. "' + t + '" is not recognized.');
        S = t;
      }),
          D = (l.__private__.getLayoutMode = function () {
        return S;
      }, l.__private__.setDisplayMode = l.setDisplayMode = function (t, e, n) {
        return q(t), R(e), T(n), this;
      }, {
        title: "",
        subject: "",
        author: "",
        keywords: "",
        creator: ""
      }),
          U = (l.__private__.getDocumentProperty = function (t) {
        if (-1 === Object.keys(D).indexOf(t)) throw new Error("Invalid argument passed to jsPDF.getDocumentProperty");
        return D[t];
      }, l.__private__.getDocumentProperties = function (t) {
        return D;
      }, l.__private__.setDocumentProperties = l.setProperties = l.setDocumentProperties = function (t) {
        for (var e in D) {
          D.hasOwnProperty(e) && t[e] && (D[e] = t[e]);
        }

        return this;
      }, l.__private__.setDocumentProperty = function (t, e) {
        if (-1 === Object.keys(D).indexOf(t)) throw new Error("Invalid arguments passed to jsPDF.setDocumentProperty");
        return D[t] = e;
      }, 0),
          z = [],
          rt = {},
          H = {},
          W = 0,
          V = [],
          G = [],
          it = new oe(l),
          Y = r.hotfixes || [],
          J = l.__private__.newObject = function () {
        var t = X();
        return ot(t, !0), t;
      },
          X = l.__private__.newObjectDeferred = function () {
        return z[++U] = function () {
          return B;
        }, U;
      },
          ot = function ot(t, e) {
        return e = "boolean" == typeof e && e, z[t] = B, e && tt(t + " 0 obj"), t;
      },
          at = l.__private__.newAdditionalObject = function () {
        var t = {
          objId: X(),
          content: ""
        };
        return G.push(t), t;
      },
          st = X(),
          lt = X(),
          ht = l.__private__.decodeColorString = function (t) {
        var e = t.split(" ");

        if (2 === e.length && ("g" === e[1] || "G" === e[1])) {
          var n = parseFloat(e[0]);
          e = [n, n, n, "r"];
        }

        for (var r = "#", i = 0; i < 3; i++) {
          r += ("0" + Math.floor(255 * parseFloat(e[i])).toString(16)).slice(-2);
        }

        return r;
      },
          ut = l.__private__.encodeColorString = function (t) {
        var e;
        "string" == typeof t && (t = {
          ch1: t
        });
        var n = t.ch1,
            r = t.ch2,
            i = t.ch3,
            o = t.ch4,
            a = (t.precision, "draw" === t.pdfColorType ? ["G", "RG", "K"] : ["g", "rg", "k"]);

        if ("string" == typeof n && "#" !== n.charAt(0)) {
          var s = new RGBColor(n);
          if (s.ok) n = s.toHex();else if (!/^\d*\.?\d*$/.test(n)) throw new Error('Invalid color "' + n + '" passed to jsPDF.encodeColorString.');
        }

        if ("string" == typeof n && /^#[0-9A-Fa-f]{3}$/.test(n) && (n = "#" + n[1] + n[1] + n[2] + n[2] + n[3] + n[3]), "string" == typeof n && /^#[0-9A-Fa-f]{6}$/.test(n)) {
          var l = parseInt(n.substr(1), 16);
          n = l >> 16 & 255, r = l >> 8 & 255, i = 255 & l;
        }

        if (void 0 === r || void 0 === o && n === r && r === i) {
          if ("string" == typeof n) e = n + " " + a[0];else switch (t.precision) {
            case 2:
              e = Z(n / 255) + " " + a[0];
              break;

            case 3:
            default:
              e = Q(n / 255) + " " + a[0];
          }
        } else if (void 0 === o || "object" === se(o)) {
          if (o && !isNaN(o.a) && 0 === o.a) return e = ["1.000", "1.000", "1.000", a[1]].join(" ");
          if ("string" == typeof n) e = [n, r, i, a[1]].join(" ");else switch (t.precision) {
            case 2:
              e = [Z(n / 255), Z(r / 255), Z(i / 255), a[1]].join(" ");
              break;

            default:
            case 3:
              e = [Q(n / 255), Q(r / 255), Q(i / 255), a[1]].join(" ");
          }
        } else if ("string" == typeof n) e = [n, r, i, o, a[2]].join(" ");else switch (t.precision) {
          case 2:
            e = [Z(n / 255), Z(r / 255), Z(i / 255), Z(o / 255), a[2]].join(" ");
            break;

          case 3:
          default:
            e = [Q(n / 255), Q(r / 255), Q(i / 255), Q(o / 255), a[2]].join(" ");
        }
        return e;
      },
          ct = l.__private__.getFilters = function () {
        return o;
      },
          ft = l.__private__.putStream = function (t) {
        var e = (t = t || {}).data || "",
            n = t.filters || ct(),
            r = t.alreadyAppliedFilters || [],
            i = t.addLength1 || !1,
            o = e.length,
            a = {};
        !0 === n && (n = ["FlateEncode"]);
        var s = t.additionalKeyValues || [],
            l = (a = void 0 !== ae.API.processDataByFilters ? ae.API.processDataByFilters(e, n) : {
          data: e,
          reverseChain: []
        }).reverseChain + (Array.isArray(r) ? r.join(" ") : r.toString());
        0 !== a.data.length && (s.push({
          key: "Length",
          value: a.data.length
        }), !0 === i && s.push({
          key: "Length1",
          value: o
        })), 0 != l.length && (l.split("/").length - 1 == 1 ? s.push({
          key: "Filter",
          value: l
        }) : s.push({
          key: "Filter",
          value: "[" + l + "]"
        })), tt("<<");

        for (var h = 0; h < s.length; h++) {
          tt("/" + s[h].key + " " + s[h].value);
        }

        tt(">>"), 0 !== a.data.length && (tt("stream"), tt(a.data), tt("endstream"));
      },
          pt = l.__private__.putPage = function (t) {
        t.mediaBox;
        var e = t.number,
            n = t.data,
            r = t.objId,
            i = t.contentsObjId;
        ot(r, !0);
        V[x].mediaBox.topRightX, V[x].mediaBox.bottomLeftX, V[x].mediaBox.topRightY, V[x].mediaBox.bottomLeftY;
        tt("<</Type /Page"), tt("/Parent " + t.rootDictionaryObjId + " 0 R"), tt("/Resources " + t.resourceDictionaryObjId + " 0 R"), tt("/MediaBox [" + parseFloat(Z(t.mediaBox.bottomLeftX)) + " " + parseFloat(Z(t.mediaBox.bottomLeftY)) + " " + Z(t.mediaBox.topRightX) + " " + Z(t.mediaBox.topRightY) + "]"), null !== t.cropBox && tt("/CropBox [" + Z(t.cropBox.bottomLeftX) + " " + Z(t.cropBox.bottomLeftY) + " " + Z(t.cropBox.topRightX) + " " + Z(t.cropBox.topRightY) + "]"), null !== t.bleedBox && tt("/BleedBox [" + Z(t.bleedBox.bottomLeftX) + " " + Z(t.bleedBox.bottomLeftY) + " " + Z(t.bleedBox.topRightX) + " " + Z(t.bleedBox.topRightY) + "]"), null !== t.trimBox && tt("/TrimBox [" + Z(t.trimBox.bottomLeftX) + " " + Z(t.trimBox.bottomLeftY) + " " + Z(t.trimBox.topRightX) + " " + Z(t.trimBox.topRightY) + "]"), null !== t.artBox && tt("/ArtBox [" + Z(t.artBox.bottomLeftX) + " " + Z(t.artBox.bottomLeftY) + " " + Z(t.artBox.topRightX) + " " + Z(t.artBox.topRightY) + "]"), "number" == typeof t.userUnit && 1 !== t.userUnit && tt("/UserUnit " + t.userUnit), it.publish("putPage", {
          objId: r,
          pageContext: V[e],
          pageNumber: e,
          page: n
        }), tt("/Contents " + i + " 0 R"), tt(">>"), tt("endobj");
        var o = n.join("\n");
        return ot(i, !0), ft({
          data: o,
          filters: ct()
        }), tt("endobj"), r;
      },
          dt = l.__private__.putPages = function () {
        var t,
            e,
            n = [];

        for (t = 1; t <= W; t++) {
          V[t].objId = X(), V[t].contentsObjId = X();
        }

        for (t = 1; t <= W; t++) {
          n.push(pt({
            number: t,
            data: I[t],
            objId: V[t].objId,
            contentsObjId: V[t].contentsObjId,
            mediaBox: V[t].mediaBox,
            cropBox: V[t].cropBox,
            bleedBox: V[t].bleedBox,
            trimBox: V[t].trimBox,
            artBox: V[t].artBox,
            userUnit: V[t].userUnit,
            rootDictionaryObjId: st,
            resourceDictionaryObjId: lt
          }));
        }

        ot(st, !0), tt("<</Type /Pages");
        var r = "/Kids [";

        for (e = 0; e < W; e++) {
          r += n[e] + " 0 R ";
        }

        tt(r + "]"), tt("/Count " + W), tt(">>"), tt("endobj"), it.publish("postPutPages");
      },
          gt = function gt() {
        !function () {
          for (var t in rt) {
            rt.hasOwnProperty(t) && (!1 === s || !0 === s && K.hasOwnProperty(t)) && (e = rt[t], it.publish("putFont", {
              font: e,
              out: tt,
              newObject: J,
              putStream: ft
            }), !0 !== e.isAlreadyPutted && (e.objectNumber = J(), tt("<<"), tt("/Type /Font"), tt("/BaseFont /" + e.postScriptName), tt("/Subtype /Type1"), "string" == typeof e.encoding && tt("/Encoding /" + e.encoding), tt("/FirstChar 32"), tt("/LastChar 255"), tt(">>"), tt("endobj")));
          }

          var e;
        }(), it.publish("putResources"), ot(lt, !0), tt("<<"), function () {
          for (var t in tt("/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]"), tt("/Font <<"), rt) {
            rt.hasOwnProperty(t) && (!1 === s || !0 === s && K.hasOwnProperty(t)) && tt("/" + t + " " + rt[t].objectNumber + " 0 R");
          }

          tt(">>"), tt("/XObject <<"), it.publish("putXobjectDict"), tt(">>");
        }(), tt(">>"), tt("endobj"), it.publish("postPutResources");
      },
          mt = function mt(t, e, n) {
        H.hasOwnProperty(e) || (H[e] = {}), H[e][n] = t;
      },
          yt = function yt(t, e, n, r, i) {
        i = i || !1;
        var o = "F" + (Object.keys(rt).length + 1).toString(10),
            a = {
          id: o,
          postScriptName: t,
          fontName: e,
          fontStyle: n,
          encoding: r,
          isStandardFont: i,
          metadata: {}
        };
        return it.publish("addFont", {
          font: a,
          instance: this
        }), void 0 !== o && (rt[o] = a, mt(o, e, n)), o;
      },
          vt = l.__private__.pdfEscape = l.pdfEscape = function (t, e) {
        return function (t, e) {
          var n, r, i, o, a, s, l, h, u;

          if (i = (e = e || {}).sourceEncoding || "Unicode", a = e.outputEncoding, (e.autoencode || a) && rt[$].metadata && rt[$].metadata[i] && rt[$].metadata[i].encoding && (o = rt[$].metadata[i].encoding, !a && rt[$].encoding && (a = rt[$].encoding), !a && o.codePages && (a = o.codePages[0]), "string" == typeof a && (a = o[a]), a)) {
            for (l = !1, s = [], n = 0, r = t.length; n < r; n++) {
              (h = a[t.charCodeAt(n)]) ? s.push(String.fromCharCode(h)) : s.push(t[n]), s[n].charCodeAt(0) >> 8 && (l = !0);
            }

            t = s.join("");
          }

          for (n = t.length; void 0 === l && 0 !== n;) {
            t.charCodeAt(n - 1) >> 8 && (l = !0), n--;
          }

          if (!l) return t;

          for (s = e.noBOM ? [] : [254, 255], n = 0, r = t.length; n < r; n++) {
            if ((u = (h = t.charCodeAt(n)) >> 8) >> 8) throw new Error("Character at position " + n + " of string '" + t + "' exceeds 16bits. Cannot be encoded into UCS-2 BE");
            s.push(u), s.push(h - (u << 8));
          }

          return String.fromCharCode.apply(void 0, s);
        }(t, e).replace(/\\/g, "\\\\").replace(/\(/g, "\\(").replace(/\)/g, "\\)");
      },
          wt = l.__private__.beginPage = function (t, e) {
        var n,
            r = "string" == typeof e && e.toLowerCase();

        if ("string" == typeof t && (n = f(t.toLowerCase())) && (t = n[0], e = n[1]), Array.isArray(t) && (e = t[1], t = t[0]), (isNaN(t) || isNaN(e)) && (t = i[0], e = i[1]), r) {
          switch (r.substr(0, 1)) {
            case "l":
              t < e && (r = "s");
              break;

            case "p":
              e < t && (r = "s");
          }

          "s" === r && (n = t, t = e, e = n);
        }

        (14400 < t || 14400 < e) && (console.warn("A page in a PDF can not be wider or taller than 14400 userUnit. jsPDF limits the width/height to 14400"), t = Math.min(14400, t), e = Math.min(14400, e)), i = [t, e], k = !0, I[++W] = [], V[W] = {
          objId: 0,
          contentsObjId: 0,
          userUnit: Number(a),
          artBox: null,
          bleedBox: null,
          cropBox: null,
          trimBox: null,
          mediaBox: {
            bottomLeftX: 0,
            bottomLeftY: 0,
            topRightX: Number(t),
            topRightY: Number(e)
          }
        }, xt(W);
      },
          bt = function bt() {
        wt.apply(this, arguments), Dt(Rt), tt(Jt), 0 !== te && tt(te + " J"), 0 !== ne && tt(ne + " j"), it.publish("addPage", {
          pageNumber: W
        });
      },
          xt = function xt(t) {
        0 < t && t <= W && (x = t);
      },
          Nt = l.__private__.getNumberOfPages = l.getNumberOfPages = function () {
        return I.length - 1;
      },
          Lt = function Lt(t, e, n) {
        var r,
            i = void 0;
        return n = n || {}, t = void 0 !== t ? t : rt[$].fontName, e = void 0 !== e ? e : rt[$].fontStyle, r = t.toLowerCase(), void 0 !== H[r] && void 0 !== H[r][e] ? i = H[r][e] : void 0 !== H[t] && void 0 !== H[t][e] ? i = H[t][e] : !1 === n.disableWarning && console.warn("Unable to look up font label for font '" + t + "', '" + e + "'. Refer to getFontList() for available fonts."), i || n.noFallback || null == (i = H.times[e]) && (i = H.times.normal), i;
      },
          At = l.__private__.putInfo = function () {
        for (var t in J(), tt("<<"), tt("/Producer (jsPDF " + ae.version + ")"), D) {
          D.hasOwnProperty(t) && D[t] && tt("/" + t.substr(0, 1).toUpperCase() + t.substr(1) + " (" + vt(D[t]) + ")");
        }

        tt("/CreationDate (" + p + ")"), tt(">>"), tt("endobj");
      },
          St = l.__private__.putCatalog = function (t) {
        var e = (t = t || {}).rootDictionaryObjId || st;

        switch (J(), tt("<<"), tt("/Type /Catalog"), tt("/Pages " + e + " 0 R"), L || (L = "fullwidth"), L) {
          case "fullwidth":
            tt("/OpenAction [3 0 R /FitH null]");
            break;

          case "fullheight":
            tt("/OpenAction [3 0 R /FitV null]");
            break;

          case "fullpage":
            tt("/OpenAction [3 0 R /Fit]");
            break;

          case "original":
            tt("/OpenAction [3 0 R /XYZ null null 1]");
            break;

          default:
            var n = "" + L;
            "%" === n.substr(n.length - 1) && (L = parseInt(L) / 100), "number" == typeof L && tt("/OpenAction [3 0 R /XYZ null null " + Z(L) + "]");
        }

        switch (S || (S = "continuous"), S) {
          case "continuous":
            tt("/PageLayout /OneColumn");
            break;

          case "single":
            tt("/PageLayout /SinglePage");
            break;

          case "two":
          case "twoleft":
            tt("/PageLayout /TwoColumnLeft");
            break;

          case "tworight":
            tt("/PageLayout /TwoColumnRight");
        }

        A && tt("/PageMode /" + A), it.publish("putCatalog"), tt(">>"), tt("endobj");
      },
          _t = l.__private__.putTrailer = function () {
        tt("trailer"), tt("<<"), tt("/Size " + (U + 1)), tt("/Root " + U + " 0 R"), tt("/Info " + (U - 1) + " 0 R"), tt("/ID [ <" + d + "> <" + d + "> ]"), tt(">>");
      },
          Ft = l.__private__.putHeader = function () {
        tt("%PDF-" + h), tt("%ºß¬à");
      },
          Pt = l.__private__.putXRef = function () {
        var t = 1,
            e = "0000000000";

        for (tt("xref"), tt("0 " + (U + 1)), tt("0000000000 65535 f "), t = 1; t <= U; t++) {
          "function" == typeof z[t] ? tt((e + z[t]()).slice(-10) + " 00000 n ") : void 0 !== z[t] ? tt((e + z[t]).slice(-10) + " 00000 n ") : tt("0000000000 00000 n ");
        }
      },
          kt = l.__private__.buildDocument = function () {
        k = !1, B = U = 0, C = [], z = [], G = [], st = X(), lt = X(), it.publish("buildDocument"), Ft(), dt(), function () {
          it.publish("putAdditionalObjects");

          for (var t = 0; t < G.length; t++) {
            var e = G[t];
            ot(e.objId, !0), tt(e.content), tt("endobj");
          }

          it.publish("postPutAdditionalObjects");
        }(), gt(), At(), St();
        var t = B;
        return Pt(), _t(), tt("startxref"), tt("" + t), tt("%%EOF"), k = !0, C.join("\n");
      },
          It = l.__private__.getBlob = function (t) {
        return new Blob([E(t)], {
          type: "application/pdf"
        });
      },
          Ct = l.output = l.__private__.output = ((F = function F(t, e) {
        e = e || {};
        var n = kt();

        switch ("string" == typeof e ? e = {
          filename: e
        } : e.filename = e.filename || "generated.pdf", t) {
          case void 0:
            return n;

          case "save":
            l.save(e.filename);
            break;

          case "arraybuffer":
            return E(n);

          case "blob":
            return It(n);

          case "bloburi":
          case "bloburl":
            if (void 0 !== ie.URL && "function" == typeof ie.URL.createObjectURL) return ie.URL && ie.URL.createObjectURL(It(n)) || void 0;
            console.warn("bloburl is not supported by your system, because URL.createObjectURL is not supported by your browser.");
            break;

          case "datauristring":
          case "dataurlstring":
            return "data:application/pdf;filename=" + e.filename + ";base64," + btoa(n);

          case "dataurlnewwindow":
            var r = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe src="' + this.output("datauristring") + '"></iframe></body></html>',
                i = ie.open();
            if (null !== i && i.document.write(r), i || "undefined" == typeof safari) return i;

          case "datauri":
          case "dataurl":
            return ie.document.location.href = "data:application/pdf;filename=" + e.filename + ";base64," + btoa(n);

          default:
            return null;
        }
      }).foo = function () {
        try {
          return F.apply(this, arguments);
        } catch (t) {
          var e = t.stack || "";
          ~e.indexOf(" at ") && (e = e.split(" at ")[1]);
          var n = "Error in function " + e.split("\n")[0].split("<")[0] + ": " + t.message;
          if (!ie.console) throw new Error(n);
          ie.console.error(n, t), ie.alert && alert(n);
        }
      }, (F.foo.bar = F).foo),
          Bt = function Bt(t) {
        return !0 === Array.isArray(Y) && -1 < Y.indexOf(t);
      };

      switch (e) {
        case "pt":
          _ = 1;
          break;

        case "mm":
          _ = 72 / 25.4;
          break;

        case "cm":
          _ = 72 / 2.54;
          break;

        case "in":
          _ = 72;
          break;

        case "px":
          _ = 1 == Bt("px_scaling") ? .75 : 96 / 72;
          break;

        case "pc":
        case "em":
          _ = 12;
          break;

        case "ex":
          _ = 6;
          break;

        default:
          throw new Error("Invalid unit: " + e);
      }

      w(), m();

      var jt = l.__private__.getPageInfo = function (t) {
        if (isNaN(t) || t % 1 != 0) throw new Error("Invalid argument passed to jsPDF.getPageInfo");
        return {
          objId: V[t].objId,
          pageNumber: t,
          pageContext: V[t]
        };
      },
          Et = l.__private__.getPageInfoByObjId = function (t) {
        for (var e in V) {
          if (V[e].objId === t) break;
        }

        if (isNaN(t) || t % 1 != 0) throw new Error("Invalid argument passed to jsPDF.getPageInfoByObjId");
        return jt(e);
      },
          Mt = l.__private__.getCurrentPageInfo = function () {
        return {
          objId: V[x].objId,
          pageNumber: x,
          pageContext: V[x]
        };
      };

      l.addPage = function () {
        return bt.apply(this, arguments), this;
      }, l.setPage = function () {
        return xt.apply(this, arguments), this;
      }, l.insertPage = function (t) {
        return this.addPage(), this.movePage(x, t), this;
      }, l.movePage = function (t, e) {
        if (e < t) {
          for (var n = I[t], r = V[t], i = t; e < i; i--) {
            I[i] = I[i - 1], V[i] = V[i - 1];
          }

          I[e] = n, V[e] = r, this.setPage(e);
        } else if (t < e) {
          for (n = I[t], r = V[t], i = t; i < e; i++) {
            I[i] = I[i + 1], V[i] = V[i + 1];
          }

          I[e] = n, V[e] = r, this.setPage(e);
        }

        return this;
      }, l.deletePage = function () {
        return function (t) {
          0 < t && t <= W && (I.splice(t, 1), --W < x && (x = W), this.setPage(x));
        }.apply(this, arguments), this;
      };
      l.__private__.text = l.text = function (t, e, n, i) {
        var r;
        "number" != typeof t || "number" != typeof e || "string" != typeof n && !Array.isArray(n) || (r = n, n = e, e = t, t = r);
        var o = arguments[3],
            a = arguments[4],
            s = arguments[5];
        if ("object" === se(o) && null !== o || ("string" == typeof a && (s = a, a = null), "string" == typeof o && (s = o, o = null), "number" == typeof o && (a = o, o = null), i = {
          flags: o,
          angle: a,
          align: s
        }), (o = o || {}).noBOM = o.noBOM || !0, o.autoencode = o.autoencode || !0, isNaN(e) || isNaN(n) || null == t) throw new Error("Invalid arguments passed to jsPDF.text");
        if (0 === t.length) return c;
        var l,
            h = "",
            u = "number" == typeof i.lineHeightFactor ? i.lineHeightFactor : Tt,
            c = i.scope || this;

        function f(t) {
          for (var e, n = t.concat(), r = [], i = n.length; i--;) {
            "string" == typeof (e = n.shift()) ? r.push(e) : Array.isArray(t) && 1 === e.length ? r.push(e[0]) : r.push([e[0], e[1], e[2]]);
          }

          return r;
        }

        function p(t, e) {
          var n;
          if ("string" == typeof t) n = e(t)[0];else if (Array.isArray(t)) {
            for (var r, i, o = t.concat(), a = [], s = o.length; s--;) {
              "string" == typeof (r = o.shift()) ? a.push(e(r)[0]) : Array.isArray(r) && "string" === r[0] && (i = e(r[0], r[1], r[2]), a.push([i[0], i[1], i[2]]));
            }

            n = a;
          }
          return n;
        }

        var d = !1,
            g = !0;
        if ("string" == typeof t) d = !0;else if (Array.isArray(t)) {
          for (var m, y = t.concat(), v = [], w = y.length; w--;) {
            ("string" != typeof (m = y.shift()) || Array.isArray(m) && "string" != typeof m[0]) && (g = !1);
          }

          d = g;
        }
        if (!1 === d) throw new Error('Type of text must be string or Array. "' + t + '" is not recognized.');
        var b = rt[$].encoding;
        "WinAnsiEncoding" !== b && "StandardEncoding" !== b || (t = p(t, function (t, e, n) {
          return [(r = t, r = r.split("\t").join(Array(i.TabLen || 9).join(" ")), vt(r, o)), e, n];
          var r;
        })), "string" == typeof t && (t = t.match(/[\r?\n]/) ? t.split(/\r\n|\r|\n/g) : [t]);
        var x = et / c.internal.scaleFactor,
            N = x * (Tt - 1);

        switch (i.baseline) {
          case "bottom":
            n -= N;
            break;

          case "top":
            n += x - N;
            break;

          case "hanging":
            n += x - 2 * N;
            break;

          case "middle":
            n += x / 2 - N;
        }

        0 < (O = i.maxWidth || 0) && ("string" == typeof t ? t = c.splitTextToSize(t, O) : "[object Array]" === Object.prototype.toString.call(t) && (t = c.splitTextToSize(t.join(" "), O)));
        var L = {
          text: t,
          x: e,
          y: n,
          options: i,
          mutex: {
            pdfEscape: vt,
            activeFontKey: $,
            fonts: rt,
            activeFontSize: et
          }
        };
        it.publish("preProcessText", L), t = L.text;
        a = (i = L.options).angle;
        var A = c.internal.scaleFactor,
            S = [];

        if (a) {
          a *= Math.PI / 180;

          var _ = Math.cos(a),
              F = Math.sin(a);

          S = [Z(_), Z(F), Z(-1 * F), Z(_)];
        }

        void 0 !== (M = i.charSpace) && (h += Q(M * A) + " Tc\n");
        i.lang;
        var P = -1,
            k = void 0 !== i.renderingMode ? i.renderingMode : i.stroke,
            I = c.internal.getCurrentPageInfo().pageContext;

        switch (k) {
          case 0:
          case !1:
          case "fill":
            P = 0;
            break;

          case 1:
          case !0:
          case "stroke":
            P = 1;
            break;

          case 2:
          case "fillThenStroke":
            P = 2;
            break;

          case 3:
          case "invisible":
            P = 3;
            break;

          case 4:
          case "fillAndAddForClipping":
            P = 4;
            break;

          case 5:
          case "strokeAndAddPathForClipping":
            P = 5;
            break;

          case 6:
          case "fillThenStrokeAndAddToPathForClipping":
            P = 6;
            break;

          case 7:
          case "addToPathForClipping":
            P = 7;
        }

        var C = void 0 !== I.usedRenderingMode ? I.usedRenderingMode : -1;
        -1 !== P ? h += P + " Tr\n" : -1 !== C && (h += "0 Tr\n"), -1 !== P && (I.usedRenderingMode = P);
        s = i.align || "left";
        var B = et * u,
            j = c.internal.pageSize.getWidth(),
            E = (A = c.internal.scaleFactor, rt[$]),
            M = i.charSpace || Qt,
            O = i.maxWidth || 0,
            q = (o = {}, []);

        if ("[object Array]" === Object.prototype.toString.call(t)) {
          var T, R;
          v = f(t);
          "left" !== s && (R = v.map(function (t) {
            return c.getStringUnitWidth(t, {
              font: E,
              charSpace: M,
              fontSize: et
            }) * et / A;
          }));
          var D,
              U = Math.max.apply(Math, R),
              z = 0;

          if ("right" === s) {
            e -= R[0], t = [];
            var H = 0;

            for (w = v.length; H < w; H++) {
              U - R[H], T = 0 === H ? (D = Wt(e), Vt(n)) : (D = (z - R[H]) * A, -B), t.push([v[H], D, T]), z = R[H];
            }
          } else if ("center" === s) {
            e -= R[0] / 2, t = [];

            for (H = 0, w = v.length; H < w; H++) {
              (U - R[H]) / 2, T = 0 === H ? (D = Wt(e), Vt(n)) : (D = (z - R[H]) / 2 * A, -B), t.push([v[H], D, T]), z = R[H];
            }
          } else if ("left" === s) {
            t = [];

            for (H = 0, w = v.length; H < w; H++) {
              T = 0 === H ? Vt(n) : -B, D = 0 === H ? Wt(e) : 0, t.push(v[H]);
            }
          } else {
            if ("justify" !== s) throw new Error('Unrecognized alignment option, use "left", "center", "right" or "justify".');
            t = [];

            for (O = 0 !== O ? O : j, H = 0, w = v.length; H < w; H++) {
              T = 0 === H ? Vt(n) : -B, D = 0 === H ? Wt(e) : 0, H < w - 1 && q.push(((O - R[H]) / (v[H].split(" ").length - 1) * A).toFixed(2)), t.push([v[H], D, T]);
            }
          }
        }

        !0 === ("boolean" == typeof i.R2L ? i.R2L : nt) && (t = p(t, function (t, e, n) {
          return [t.split("").reverse().join(""), e, n];
        }));
        L = {
          text: t,
          x: e,
          y: n,
          options: i,
          mutex: {
            pdfEscape: vt,
            activeFontKey: $,
            fonts: rt,
            activeFontSize: et
          }
        };
        it.publish("postProcessText", L), t = L.text, l = L.mutex.isHex;
        v = f(t);
        t = [];
        var W,
            V,
            G,
            Y = 0,
            J = (w = v.length, "");

        for (H = 0; H < w; H++) {
          J = "", Array.isArray(v[H]) ? (W = parseFloat(v[H][1]), V = parseFloat(v[H][2]), G = (l ? "<" : "(") + v[H][0] + (l ? ">" : ")"), Y = 1) : (W = Wt(e), V = Vt(n), G = (l ? "<" : "(") + v[H] + (l ? ">" : ")")), void 0 !== q && void 0 !== q[H] && (J = q[H] + " Tw\n"), 0 !== S.length && 0 === H ? t.push(J + S.join(" ") + " " + W.toFixed(2) + " " + V.toFixed(2) + " Tm\n" + G) : 1 === Y || 0 === Y && 0 === H ? t.push(J + W.toFixed(2) + " " + V.toFixed(2) + " Td\n" + G) : t.push(J + G);
        }

        t = 0 === Y ? t.join(" Tj\nT* ") : t.join(" Tj\n"), t += " Tj\n";
        var X = "BT\n/" + $ + " " + et + " Tf\n" + (et * u).toFixed(2) + " TL\n" + Kt + "\n";
        return X += h, X += t, tt(X += "ET"), K[$] = !0, c;
      }, l.__private__.lstext = l.lstext = function (t, e, n, r) {
        return console.warn("jsPDF.lstext is deprecated"), this.text(t, e, n, {
          charSpace: r
        });
      }, l.__private__.clip = l.clip = function (t) {
        tt("evenodd" === t ? "W*" : "W"), tt("n");
      }, l.__private__.clip_fixed = l.clip_fixed = function (t) {
        console.log("clip_fixed is deprecated"), l.clip(t);
      };

      var Ot = l.__private__.isValidStyle = function (t) {
        var e = !1;
        return -1 !== [void 0, null, "S", "F", "DF", "FD", "f", "f*", "B", "B*"].indexOf(t) && (e = !0), e;
      },
          qt = l.__private__.getStyle = function (t) {
        var e = "S";
        return "F" === t ? e = "f" : "FD" === t || "DF" === t ? e = "B" : "f" !== t && "f*" !== t && "B" !== t && "B*" !== t || (e = t), e;
      };

      l.__private__.line = l.line = function (t, e, n, r) {
        if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r)) throw new Error("Invalid arguments passed to jsPDF.line");
        return this.lines([[n - t, r - e]], t, e);
      }, l.__private__.lines = l.lines = function (t, e, n, r, i, o) {
        var a, s, l, h, u, c, f, p, d, g, m, y;
        if ("number" == typeof t && (y = n, n = e, e = t, t = y), r = r || [1, 1], o = o || !1, isNaN(e) || isNaN(n) || !Array.isArray(t) || !Array.isArray(r) || !Ot(i) || "boolean" != typeof o) throw new Error("Invalid arguments passed to jsPDF.lines");

        for (tt(Q(Wt(e)) + " " + Q(Vt(n)) + " m "), a = r[0], s = r[1], h = t.length, g = e, m = n, l = 0; l < h; l++) {
          2 === (u = t[l]).length ? (g = u[0] * a + g, m = u[1] * s + m, tt(Q(Wt(g)) + " " + Q(Vt(m)) + " l")) : (c = u[0] * a + g, f = u[1] * s + m, p = u[2] * a + g, d = u[3] * s + m, g = u[4] * a + g, m = u[5] * s + m, tt(Q(Wt(c)) + " " + Q(Vt(f)) + " " + Q(Wt(p)) + " " + Q(Vt(d)) + " " + Q(Wt(g)) + " " + Q(Vt(m)) + " c"));
        }

        return o && tt(" h"), null !== i && tt(qt(i)), this;
      }, l.__private__.rect = l.rect = function (t, e, n, r, i) {
        if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r) || !Ot(i)) throw new Error("Invalid arguments passed to jsPDF.rect");
        return tt([Z(Wt(t)), Z(Vt(e)), Z(n * _), Z(-r * _), "re"].join(" ")), null !== i && tt(qt(i)), this;
      }, l.__private__.triangle = l.triangle = function (t, e, n, r, i, o, a) {
        if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r) || isNaN(i) || isNaN(o) || !Ot(a)) throw new Error("Invalid arguments passed to jsPDF.triangle");
        return this.lines([[n - t, r - e], [i - n, o - r], [t - i, e - o]], t, e, [1, 1], a, !0), this;
      }, l.__private__.roundedRect = l.roundedRect = function (t, e, n, r, i, o, a) {
        if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r) || isNaN(i) || isNaN(o) || !Ot(a)) throw new Error("Invalid arguments passed to jsPDF.roundedRect");
        var s = 4 / 3 * (Math.SQRT2 - 1);
        return this.lines([[n - 2 * i, 0], [i * s, 0, i, o - o * s, i, o], [0, r - 2 * o], [0, o * s, -i * s, o, -i, o], [2 * i - n, 0], [-i * s, 0, -i, -o * s, -i, -o], [0, 2 * o - r], [0, -o * s, i * s, -o, i, -o]], t + i, e, [1, 1], a), this;
      }, l.__private__.ellipse = l.ellipse = function (t, e, n, r, i) {
        if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r) || !Ot(i)) throw new Error("Invalid arguments passed to jsPDF.ellipse");
        var o = 4 / 3 * (Math.SQRT2 - 1) * n,
            a = 4 / 3 * (Math.SQRT2 - 1) * r;
        return tt([Z(Wt(t + n)), Z(Vt(e)), "m", Z(Wt(t + n)), Z(Vt(e - a)), Z(Wt(t + o)), Z(Vt(e - r)), Z(Wt(t)), Z(Vt(e - r)), "c"].join(" ")), tt([Z(Wt(t - o)), Z(Vt(e - r)), Z(Wt(t - n)), Z(Vt(e - a)), Z(Wt(t - n)), Z(Vt(e)), "c"].join(" ")), tt([Z(Wt(t - n)), Z(Vt(e + a)), Z(Wt(t - o)), Z(Vt(e + r)), Z(Wt(t)), Z(Vt(e + r)), "c"].join(" ")), tt([Z(Wt(t + o)), Z(Vt(e + r)), Z(Wt(t + n)), Z(Vt(e + a)), Z(Wt(t + n)), Z(Vt(e)), "c"].join(" ")), null !== i && tt(qt(i)), this;
      }, l.__private__.circle = l.circle = function (t, e, n, r) {
        if (isNaN(t) || isNaN(e) || isNaN(n) || !Ot(r)) throw new Error("Invalid arguments passed to jsPDF.circle");
        return this.ellipse(t, e, n, n, r);
      };
      l.setFont = function (t, e) {
        return $ = Lt(t, e, {
          disableWarning: !1
        }), this;
      }, l.setFontStyle = l.setFontType = function (t) {
        return $ = Lt(void 0, t), this;
      };

      l.__private__.getFontList = l.getFontList = function () {
        var t,
            e,
            n,
            r = {};

        for (t in H) {
          if (H.hasOwnProperty(t)) for (e in r[t] = n = [], H[t]) {
            H[t].hasOwnProperty(e) && n.push(e);
          }
        }

        return r;
      };

      l.addFont = function (t, e, n, r) {
        yt.call(this, t, e, n, r = r || "Identity-H");
      };

      var Tt,
          Rt = r.lineWidth || .200025,
          Dt = l.__private__.setLineWidth = l.setLineWidth = function (t) {
        return tt((t * _).toFixed(2) + " w"), this;
      },
          Ut = (l.__private__.setLineDash = ae.API.setLineDash = function (t, e) {
        if (t = t || [], e = e || 0, isNaN(e) || !Array.isArray(t)) throw new Error("Invalid arguments passed to jsPDF.setLineDash");
        return t = t.map(function (t) {
          return (t * _).toFixed(3);
        }).join(" "), e = parseFloat((e * _).toFixed(3)), tt("[" + t + "] " + e + " d"), this;
      }, l.__private__.getLineHeight = l.getLineHeight = function () {
        return et * Tt;
      }),
          zt = (Ut = l.__private__.getLineHeight = l.getLineHeight = function () {
        return et * Tt;
      }, l.__private__.setLineHeightFactor = l.setLineHeightFactor = function (t) {
        return "number" == typeof (t = t || 1.15) && (Tt = t), this;
      }),
          Ht = l.__private__.getLineHeightFactor = l.getLineHeightFactor = function () {
        return Tt;
      };

      zt(r.lineHeight);

      var Wt = l.__private__.getHorizontalCoordinate = function (t) {
        return t * _;
      },
          Vt = l.__private__.getVerticalCoordinate = function (t) {
        return V[x].mediaBox.topRightY - V[x].mediaBox.bottomLeftY - t * _;
      },
          Gt = l.__private__.getHorizontalCoordinateString = function (t) {
        return Z(t * _);
      },
          Yt = l.__private__.getVerticalCoordinateString = function (t) {
        return Z(V[x].mediaBox.topRightY - V[x].mediaBox.bottomLeftY - t * _);
      },
          Jt = r.strokeColor || "0 G",
          Xt = (l.__private__.getStrokeColor = l.getDrawColor = function () {
        return ht(Jt);
      }, l.__private__.setStrokeColor = l.setDrawColor = function (t, e, n, r) {
        return Jt = ut({
          ch1: t,
          ch2: e,
          ch3: n,
          ch4: r,
          pdfColorType: "draw",
          precision: 2
        }), tt(Jt), this;
      }, r.fillColor || "0 g"),
          Kt = (l.__private__.getFillColor = l.getFillColor = function () {
        return ht(Xt);
      }, l.__private__.setFillColor = l.setFillColor = function (t, e, n, r) {
        return Xt = ut({
          ch1: t,
          ch2: e,
          ch3: n,
          ch4: r,
          pdfColorType: "fill",
          precision: 2
        }), tt(Xt), this;
      }, r.textColor || "0 g"),
          Zt = l.__private__.getTextColor = l.getTextColor = function () {
        return ht(Kt);
      },
          Qt = (l.__private__.setTextColor = l.setTextColor = function (t, e, n, r) {
        return Kt = ut({
          ch1: t,
          ch2: e,
          ch3: n,
          ch4: r,
          pdfColorType: "text",
          precision: 3
        }), this;
      }, r.charSpace || 0),
          $t = l.__private__.getCharSpace = l.getCharSpace = function () {
        return Qt;
      },
          te = (l.__private__.setCharSpace = l.setCharSpace = function (t) {
        if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.setCharSpace");
        return Qt = t, this;
      }, 0);

      l.CapJoinStyles = {
        0: 0,
        butt: 0,
        but: 0,
        miter: 0,
        1: 1,
        round: 1,
        rounded: 1,
        circle: 1,
        2: 2,
        projecting: 2,
        project: 2,
        square: 2,
        bevel: 2
      };

      l.__private__.setLineCap = l.setLineCap = function (t) {
        var e = l.CapJoinStyles[t];
        if (void 0 === e) throw new Error("Line cap style of '" + t + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
        return tt((te = e) + " J"), this;
      };

      var ee,
          ne = 0;
      l.__private__.setLineJoin = l.setLineJoin = function (t) {
        var e = l.CapJoinStyles[t];
        if (void 0 === e) throw new Error("Line join style of '" + t + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
        return tt((ne = e) + " j"), this;
      }, l.__private__.setMiterLimit = l.setMiterLimit = function (t) {
        if (t = t || 0, isNaN(t)) throw new Error("Invalid argument passed to jsPDF.setMiterLimit");
        return ee = parseFloat(Z(t * _)), tt(ee + " M"), this;
      };

      for (var re in l.save = function (r, t) {
        if (r = r || "generated.pdf", (t = t || {}).returnPromise = t.returnPromise || !1, !1 !== t.returnPromise) return new Promise(function (t, e) {
          try {
            var n = le(It(kt()), r);
            "function" == typeof le.unload && ie.setTimeout && setTimeout(le.unload, 911), t(n);
          } catch (t) {
            e(t.message);
          }
        });
        le(It(kt()), r), "function" == typeof le.unload && ie.setTimeout && setTimeout(le.unload, 911);
      }, ae.API) {
        ae.API.hasOwnProperty(re) && ("events" === re && ae.API.events.length ? function (t, e) {
          var n, r, i;

          for (i = e.length - 1; -1 !== i; i--) {
            n = e[i][0], r = e[i][1], t.subscribe.apply(t, [n].concat("function" == typeof r ? [r] : r));
          }
        }(it, ae.API.events) : l[re] = ae.API[re]);
      }

      return l.internal = {
        pdfEscape: vt,
        getStyle: qt,
        getFont: function getFont() {
          return rt[Lt.apply(l, arguments)];
        },
        getFontSize: O,
        getCharSpace: $t,
        getTextColor: Zt,
        getLineHeight: Ut,
        getLineHeightFactor: Ht,
        write: j,
        getHorizontalCoordinate: Wt,
        getVerticalCoordinate: Vt,
        getCoordinateString: Gt,
        getVerticalCoordinateString: Yt,
        collections: {},
        newObject: J,
        newAdditionalObject: at,
        newObjectDeferred: X,
        newObjectDeferredBegin: ot,
        getFilters: ct,
        putStream: ft,
        events: it,
        scaleFactor: _,
        pageSize: {
          getWidth: function getWidth() {
            return (V[x].mediaBox.topRightX - V[x].mediaBox.bottomLeftX) / _;
          },
          setWidth: function setWidth(t) {
            V[x].mediaBox.topRightX = t * _ + V[x].mediaBox.bottomLeftX;
          },
          getHeight: function getHeight() {
            return (V[x].mediaBox.topRightY - V[x].mediaBox.bottomLeftY) / _;
          },
          setHeight: function setHeight(t) {
            V[x].mediaBox.topRightY = t * _ + V[x].mediaBox.bottomLeftY;
          }
        },
        output: Ct,
        getNumberOfPages: Nt,
        pages: I,
        out: tt,
        f2: Z,
        f3: Q,
        getPageInfo: jt,
        getPageInfoByObjId: Et,
        getCurrentPageInfo: Mt,
        getPDFVersion: u,
        hasHotfix: Bt
      }, Object.defineProperty(l.internal.pageSize, "width", {
        get: function get() {
          return (V[x].mediaBox.topRightX - V[x].mediaBox.bottomLeftX) / _;
        },
        set: function set(t) {
          V[x].mediaBox.topRightX = t * _ + V[x].mediaBox.bottomLeftX;
        },
        enumerable: !0,
        configurable: !0
      }), Object.defineProperty(l.internal.pageSize, "height", {
        get: function get() {
          return (V[x].mediaBox.topRightY - V[x].mediaBox.bottomLeftY) / _;
        },
        set: function set(t) {
          V[x].mediaBox.topRightY = t * _ + V[x].mediaBox.bottomLeftY;
        },
        enumerable: !0,
        configurable: !0
      }), function (t) {
        for (var e = 0, n = M.length; e < n; e++) {
          var r = yt(t[e][0], t[e][1], t[e][2], M[e][3], !0);
          K[r] = !0;
          var i = t[e][0].split("-");
          mt(r, i[0], i[1] || "");
        }

        it.publish("addFonts", {
          fonts: rt,
          dictionary: H
        });
      }(M), $ = "F1", bt(i, t), it.publish("initialized"), l;
    }

    return ae.API = {
      events: []
    }, ae.version = "1.5.3", "function" == typeof define && define.amd ? define("jsPDF", function () {
      return ae;
    }) : "undefined" != typeof module && module.exports ? (module.exports = ae, module.exports.jsPDF = ae) : ie.jsPDF = ae, ae;
  }("undefined" != typeof self && self || "undefined" != typeof window && window || "undefined" != typeof global && global || Function('return typeof this === "object" && this.content')() || Function("return this")());
  /**
     * @license
     * Copyright (c) 2016 Alexander Weidt,
     * https://github.com/BiggA94
     * 
     * Licensed under the MIT License. http://opensource.org/licenses/mit-license
     */


  (function (t, e) {
    var A,
        n = 1,
        S = function S(t) {
      return t.replace(/\\/g, "\\\\").replace(/\(/g, "\\(").replace(/\)/g, "\\)");
    },
        y = function y(t) {
      return t.replace(/\\\\/g, "\\").replace(/\\\(/g, "(").replace(/\\\)/g, ")");
    },
        _ = function _(t) {
      if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.f2");
      return t.toFixed(2);
    },
        s = function s(t) {
      if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.f2");
      return t.toFixed(5);
    };

    t.__acroform__ = {};

    var r = function r(t, e) {
      t.prototype = Object.create(e.prototype), t.prototype.constructor = t;
    },
        v = function v(t) {
      return t * n;
    },
        w = function w(t) {
      return t / n;
    },
        l = function l(t) {
      var e = new j(),
          n = Y.internal.getHeight(t) || 0,
          r = Y.internal.getWidth(t) || 0;
      return e.BBox = [0, 0, Number(_(r)), Number(_(n))], e;
    },
        i = t.__acroform__.setBit = function (t, e) {
      if (t = t || 0, e = e || 0, isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBit");
      return t |= 1 << e;
    },
        o = t.__acroform__.clearBit = function (t, e) {
      if (t = t || 0, e = e || 0, isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBit");
      return t &= ~(1 << e);
    },
        a = t.__acroform__.getBit = function (t, e) {
      if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBit");
      return 0 == (t & 1 << e) ? 0 : 1;
    },
        b = t.__acroform__.getBitForPdf = function (t, e) {
      if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBitForPdf");
      return a(t, e - 1);
    },
        x = t.__acroform__.setBitForPdf = function (t, e) {
      if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBitForPdf");
      return i(t, e - 1);
    },
        N = t.__acroform__.clearBitForPdf = function (t, e, n) {
      if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBitForPdf");
      return o(t, e - 1);
    },
        c = t.__acroform__.calculateCoordinates = function (t) {
      var e = this.internal.getHorizontalCoordinate,
          n = this.internal.getVerticalCoordinate,
          r = t[0],
          i = t[1],
          o = t[2],
          a = t[3],
          s = {};
      return s.lowerLeft_X = e(r) || 0, s.lowerLeft_Y = n(i + a) || 0, s.upperRight_X = e(r + o) || 0, s.upperRight_Y = n(i) || 0, [Number(_(s.lowerLeft_X)), Number(_(s.lowerLeft_Y)), Number(_(s.upperRight_X)), Number(_(s.upperRight_Y))];
    },
        f = function f(t) {
      if (t.appearanceStreamContent) return t.appearanceStreamContent;

      if (t.V || t.DV) {
        var e = [],
            n = t.V || t.DV,
            r = h(t, n),
            i = A.internal.getFont(t.fontName, t.fontStyle).id;
        e.push("/Tx BMC"), e.push("q"), e.push("BT"), e.push(A.__private__.encodeColorString(t.color)), e.push("/" + i + " " + _(r.fontSize) + " Tf"), e.push("1 0 0 1 0 0 Tm"), e.push(r.text), e.push("ET"), e.push("Q"), e.push("EMC");
        var o = new l(t);
        return o.stream = e.join("\n"), o;
      }
    },
        h = function h(i, t) {
      var e = i.maxFontSize || 12,
          n = (i.fontName, {
        text: "",
        fontSize: ""
      }),
          o = (t = ")" == (t = "(" == t.substr(0, 1) ? t.substr(1) : t).substr(t.length - 1) ? t.substr(0, t.length - 1) : t).split(" "),
          r = (A.__private__.encodeColorString(i.color), e),
          a = Y.internal.getHeight(i) || 0;
      a = a < 0 ? -a : a;
      var s = Y.internal.getWidth(i) || 0;
      s = s < 0 ? -s : s;

      var l = function l(t, e, n) {
        if (t + 1 < o.length) {
          var r = e + " " + o[t + 1];
          return F(r, i, n).width <= s - 4;
        }

        return !1;
      };

      r++;

      t: for (;;) {
        t = "";
        var h = F("3", i, --r).height,
            u = i.multiline ? a - r : (a - h) / 2,
            c = -2,
            f = u += 2,
            p = 0,
            d = 0,
            g = 0;

        if (r <= 0) {
          t = "(...) Tj\n", t += "% Width of Text: " + F(t, i, r = 12).width + ", FieldWidth:" + s + "\n";
          break;
        }

        g = F(o[0] + " ", i, r).width;
        var m = "",
            y = 0;

        for (var v in o) {
          if (o.hasOwnProperty(v)) {
            m = " " == (m += o[v] + " ").substr(m.length - 1) ? m.substr(0, m.length - 1) : m;
            var w = parseInt(v);
            g = F(m + " ", i, r).width;
            var b = l(w, m, r),
                x = v >= o.length - 1;

            if (b && !x) {
              m += " ";
              continue;
            }

            if (b || x) {
              if (x) d = w;else if (i.multiline && a < (h + 2) * (y + 2) + 2) continue t;
            } else {
              if (!i.multiline) continue t;
              if (a < (h + 2) * (y + 2) + 2) continue t;
              d = w;
            }

            for (var N = "", L = p; L <= d; L++) {
              N += o[L] + " ";
            }

            switch (N = " " == N.substr(N.length - 1) ? N.substr(0, N.length - 1) : N, g = F(N, i, r).width, i.textAlign) {
              case "right":
                c = s - g - 2;
                break;

              case "center":
                c = (s - g) / 2;
                break;

              case "left":
              default:
                c = 2;
            }

            t += _(c) + " " + _(f) + " Td\n", t += "(" + S(N) + ") Tj\n", t += -_(c) + " 0 Td\n", f = -(r + 2), g = 0, p = d + 1, y++, m = "";
          } else ;
        }

        break;
      }

      return n.text = t, n.fontSize = r, n;
    },
        F = function F(t, e, n) {
      var r = A.internal.getFont(e.fontName, e.fontStyle),
          i = A.getStringUnitWidth(t, {
        font: r,
        fontSize: parseFloat(n),
        charSpace: 0
      }) * parseFloat(n);
      return {
        height: A.getStringUnitWidth("3", {
          font: r,
          fontSize: parseFloat(n),
          charSpace: 0
        }) * parseFloat(n) * 1.5,
        width: i
      };
    },
        u = {
      fields: [],
      xForms: [],
      acroFormDictionaryRoot: null,
      printedOut: !1,
      internal: null,
      isInitialized: !1
    },
        p = function p() {
      A.internal.acroformPlugin.acroFormDictionaryRoot.objId = void 0;
      var t = A.internal.acroformPlugin.acroFormDictionaryRoot.Fields;

      for (var e in t) {
        if (t.hasOwnProperty(e)) {
          var n = t[e];
          n.objId = void 0, n.hasAnnotation && d.call(A, n);
        }
      }
    },
        d = function d(t) {
      var e = {
        type: "reference",
        object: t
      };
      void 0 === A.internal.getPageInfo(t.page).pageContext.annotations.find(function (t) {
        return t.type === e.type && t.object === e.object;
      }) && A.internal.getPageInfo(t.page).pageContext.annotations.push(e);
    },
        g = function g() {
      if (void 0 === A.internal.acroformPlugin.acroFormDictionaryRoot) throw new Error("putCatalogCallback: Root missing.");
      A.internal.write("/AcroForm " + A.internal.acroformPlugin.acroFormDictionaryRoot.objId + " 0 R");
    },
        m = function m() {
      A.internal.events.unsubscribe(A.internal.acroformPlugin.acroFormDictionaryRoot._eventID), delete A.internal.acroformPlugin.acroFormDictionaryRoot._eventID, A.internal.acroformPlugin.printedOut = !0;
    },
        L = function L(t) {
      var e = !t;
      t || (A.internal.newObjectDeferredBegin(A.internal.acroformPlugin.acroFormDictionaryRoot.objId, !0), A.internal.acroformPlugin.acroFormDictionaryRoot.putStream());
      t = t || A.internal.acroformPlugin.acroFormDictionaryRoot.Kids;

      for (var n in t) {
        if (t.hasOwnProperty(n)) {
          var r = t[n],
              i = [],
              o = r.Rect;

          if (r.Rect && (r.Rect = c.call(this, r.Rect)), A.internal.newObjectDeferredBegin(r.objId, !0), r.DA = Y.createDefaultAppearanceStream(r), "object" === se(r) && "function" == typeof r.getKeyValueListForStream && (i = r.getKeyValueListForStream()), r.Rect = o, r.hasAppearanceStream && !r.appearanceStreamContent) {
            var a = f.call(this, r);
            i.push({
              key: "AP",
              value: "<</N " + a + ">>"
            }), A.internal.acroformPlugin.xForms.push(a);
          }

          if (r.appearanceStreamContent) {
            var s = "";

            for (var l in r.appearanceStreamContent) {
              if (r.appearanceStreamContent.hasOwnProperty(l)) {
                var h = r.appearanceStreamContent[l];
                if (s += "/" + l + " ", s += "<<", 1 <= Object.keys(h).length || Array.isArray(h)) for (var n in h) {
                  var u;
                  if (h.hasOwnProperty(n)) "function" == typeof (u = h[n]) && (u = u.call(this, r)), s += "/" + n + " " + u + " ", 0 <= A.internal.acroformPlugin.xForms.indexOf(u) || A.internal.acroformPlugin.xForms.push(u);
                } else "function" == typeof (u = h) && (u = u.call(this, r)), s += "/" + n + " " + u, 0 <= A.internal.acroformPlugin.xForms.indexOf(u) || A.internal.acroformPlugin.xForms.push(u);
                s += ">>";
              }
            }

            i.push({
              key: "AP",
              value: "<<\n" + s + ">>"
            });
          }

          A.internal.putStream({
            additionalKeyValues: i
          }), A.internal.out("endobj");
        }
      }

      e && P.call(this, A.internal.acroformPlugin.xForms);
    },
        P = function P(t) {
      for (var e in t) {
        if (t.hasOwnProperty(e)) {
          var n = e,
              r = t[e];
          A.internal.newObjectDeferredBegin(r && r.objId, !0), "object" === se(r) && "function" == typeof r.putStream && r.putStream(), delete t[n];
        }
      }
    },
        k = function k() {
      if (void 0 !== this.internal && (void 0 === this.internal.acroformPlugin || !1 === this.internal.acroformPlugin.isInitialized)) {
        if (A = this, M.FieldNum = 0, this.internal.acroformPlugin = JSON.parse(JSON.stringify(u)), this.internal.acroformPlugin.acroFormDictionaryRoot) throw new Error("Exception while creating AcroformDictionary");
        n = A.internal.scaleFactor, A.internal.acroformPlugin.acroFormDictionaryRoot = new E(), A.internal.acroformPlugin.acroFormDictionaryRoot._eventID = A.internal.events.subscribe("postPutResources", m), A.internal.events.subscribe("buildDocument", p), A.internal.events.subscribe("putCatalog", g), A.internal.events.subscribe("postPutPages", L), A.internal.acroformPlugin.isInitialized = !0;
      }
    },
        I = t.__acroform__.arrayToPdfArray = function (t) {
      if (Array.isArray(t)) {
        for (var e = "[", n = 0; n < t.length; n++) {
          switch (0 !== n && (e += " "), se(t[n])) {
            case "boolean":
            case "number":
            case "object":
              e += t[n].toString();
              break;

            case "string":
              "/" !== t[n].substr(0, 1) ? e += "(" + S(t[n].toString()) + ")" : e += t[n].toString();
          }
        }

        return e += "]";
      }

      throw new Error("Invalid argument passed to jsPDF.__acroform__.arrayToPdfArray");
    };

    var C = function C(t) {
      return (t = t || "").toString(), t = "(" + S(t) + ")";
    },
        B = function B() {
      var e;
      Object.defineProperty(this, "objId", {
        configurable: !0,
        get: function get() {
          if (e || (e = A.internal.newObjectDeferred()), !e) throw new Error("AcroFormPDFObject: Couldn't create Object ID");
          return e;
        },
        set: function set(t) {
          e = t;
        }
      });
    };

    B.prototype.toString = function () {
      return this.objId + " 0 R";
    }, B.prototype.putStream = function () {
      var t = this.getKeyValueListForStream();
      A.internal.putStream({
        data: this.stream,
        additionalKeyValues: t
      }), A.internal.out("endobj");
    }, B.prototype.getKeyValueListForStream = function () {
      return function (t) {
        var e = [],
            n = Object.getOwnPropertyNames(t).filter(function (t) {
          return "content" != t && "appearanceStreamContent" != t && "_" != t.substring(0, 1);
        });

        for (var r in n) {
          if (!1 === Object.getOwnPropertyDescriptor(t, n[r]).configurable) {
            var i = n[r],
                o = t[i];
            o && (Array.isArray(o) ? e.push({
              key: i,
              value: I(o)
            }) : o instanceof B ? e.push({
              key: i,
              value: o.objId + " 0 R"
            }) : "function" != typeof o && e.push({
              key: i,
              value: o
            }));
          }
        }

        return e;
      }(this);
    };

    var j = function j() {
      B.call(this), Object.defineProperty(this, "Type", {
        value: "/XObject",
        configurable: !1,
        writeable: !0
      }), Object.defineProperty(this, "Subtype", {
        value: "/Form",
        configurable: !1,
        writeable: !0
      }), Object.defineProperty(this, "FormType", {
        value: 1,
        configurable: !1,
        writeable: !0
      });
      var e,
          n = [];
      Object.defineProperty(this, "BBox", {
        configurable: !1,
        writeable: !0,
        get: function get() {
          return n;
        },
        set: function set(t) {
          n = t;
        }
      }), Object.defineProperty(this, "Resources", {
        value: "2 0 R",
        configurable: !1,
        writeable: !0
      }), Object.defineProperty(this, "stream", {
        enumerable: !1,
        configurable: !0,
        set: function set(t) {
          e = t.trim();
        },
        get: function get() {
          return e || null;
        }
      });
    };

    r(j, B);

    var E = function E() {
      B.call(this);
      var e,
          t = [];
      Object.defineProperty(this, "Kids", {
        enumerable: !1,
        configurable: !0,
        get: function get() {
          return 0 < t.length ? t : void 0;
        }
      }), Object.defineProperty(this, "Fields", {
        enumerable: !1,
        configurable: !1,
        get: function get() {
          return t;
        }
      }), Object.defineProperty(this, "DA", {
        enumerable: !1,
        configurable: !1,
        get: function get() {
          if (e) return "(" + e + ")";
        },
        set: function set(t) {
          e = t;
        }
      });
    };

    r(E, B);

    var M = function t() {
      B.call(this);
      var e = 4;
      Object.defineProperty(this, "F", {
        enumerable: !1,
        configurable: !1,
        get: function get() {
          return e;
        },
        set: function set(t) {
          if (isNaN(t)) throw new Error('Invalid value "' + t + '" for attribute F supplied.');
          e = t;
        }
      }), Object.defineProperty(this, "showWhenPrinted", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(e, 3));
        },
        set: function set(t) {
          !0 === Boolean(t) ? this.F = x(e, 3) : this.F = N(e, 3);
        }
      });
      var n = 0;
      Object.defineProperty(this, "Ff", {
        enumerable: !1,
        configurable: !1,
        get: function get() {
          return n;
        },
        set: function set(t) {
          if (isNaN(t)) throw new Error('Invalid value "' + t + '" for attribute Ff supplied.');
          n = t;
        }
      });
      var r = [];
      Object.defineProperty(this, "Rect", {
        enumerable: !1,
        configurable: !1,
        get: function get() {
          if (0 !== r.length) return r;
        },
        set: function set(t) {
          r = void 0 !== t ? t : [];
        }
      }), Object.defineProperty(this, "x", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return !r || isNaN(r[0]) ? 0 : w(r[0]);
        },
        set: function set(t) {
          r[0] = v(t);
        }
      }), Object.defineProperty(this, "y", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return !r || isNaN(r[1]) ? 0 : w(r[1]);
        },
        set: function set(t) {
          r[1] = v(t);
        }
      }), Object.defineProperty(this, "width", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return !r || isNaN(r[2]) ? 0 : w(r[2]);
        },
        set: function set(t) {
          r[2] = v(t);
        }
      }), Object.defineProperty(this, "height", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return !r || isNaN(r[3]) ? 0 : w(r[3]);
        },
        set: function set(t) {
          r[3] = v(t);
        }
      });
      var i = "";
      Object.defineProperty(this, "FT", {
        enumerable: !0,
        configurable: !1,
        get: function get() {
          return i;
        },
        set: function set(t) {
          switch (t) {
            case "/Btn":
            case "/Tx":
            case "/Ch":
            case "/Sig":
              i = t;
              break;

            default:
              throw new Error('Invalid value "' + t + '" for attribute FT supplied.');
          }
        }
      });
      var o = null;
      Object.defineProperty(this, "T", {
        enumerable: !0,
        configurable: !1,
        get: function get() {
          if (!o || o.length < 1) {
            if (this instanceof H) return;
            o = "FieldObject" + t.FieldNum++;
          }

          return "(" + S(o) + ")";
        },
        set: function set(t) {
          o = t.toString();
        }
      }), Object.defineProperty(this, "fieldName", {
        configurable: !0,
        enumerable: !0,
        get: function get() {
          return o;
        },
        set: function set(t) {
          o = t;
        }
      });
      var a = "helvetica";
      Object.defineProperty(this, "fontName", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return a;
        },
        set: function set(t) {
          a = t;
        }
      });
      var s = "normal";
      Object.defineProperty(this, "fontStyle", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return s;
        },
        set: function set(t) {
          s = t;
        }
      });
      var l = 0;
      Object.defineProperty(this, "fontSize", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return w(l);
        },
        set: function set(t) {
          l = v(t);
        }
      });
      var h = 50;
      Object.defineProperty(this, "maxFontSize", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return w(h);
        },
        set: function set(t) {
          h = v(t);
        }
      });
      var u = "black";
      Object.defineProperty(this, "color", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return u;
        },
        set: function set(t) {
          u = t;
        }
      });
      var c = "/F1 0 Tf 0 g";
      Object.defineProperty(this, "DA", {
        enumerable: !0,
        configurable: !1,
        get: function get() {
          if (!(!c || this instanceof H || this instanceof V)) return C(c);
        },
        set: function set(t) {
          t = t.toString(), c = t;
        }
      });
      var f = null;
      Object.defineProperty(this, "DV", {
        enumerable: !1,
        configurable: !1,
        get: function get() {
          if (f) return this instanceof D == !1 ? C(f) : f;
        },
        set: function set(t) {
          t = t.toString(), f = this instanceof D == !1 ? "(" === t.substr(0, 1) ? y(t.substr(1, t.length - 2)) : y(t) : t;
        }
      }), Object.defineProperty(this, "defaultValue", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return this instanceof D == !0 ? y(f.substr(1, f.length - 1)) : f;
        },
        set: function set(t) {
          t = t.toString(), f = this instanceof D == !0 ? "/" + t : t;
        }
      });
      var p = null;
      Object.defineProperty(this, "V", {
        enumerable: !1,
        configurable: !1,
        get: function get() {
          if (p) return this instanceof D == !1 ? C(p) : p;
        },
        set: function set(t) {
          t = t.toString(), p = this instanceof D == !1 ? "(" === t.substr(0, 1) ? y(t.substr(1, t.length - 2)) : y(t) : t;
        }
      }), Object.defineProperty(this, "value", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return this instanceof D == !0 ? y(p.substr(1, p.length - 1)) : p;
        },
        set: function set(t) {
          t = t.toString(), p = this instanceof D == !0 ? "/" + t : t;
        }
      }), Object.defineProperty(this, "hasAnnotation", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return this.Rect;
        }
      }), Object.defineProperty(this, "Type", {
        enumerable: !0,
        configurable: !1,
        get: function get() {
          return this.hasAnnotation ? "/Annot" : null;
        }
      }), Object.defineProperty(this, "Subtype", {
        enumerable: !0,
        configurable: !1,
        get: function get() {
          return this.hasAnnotation ? "/Widget" : null;
        }
      });
      var d,
          g = !1;
      Object.defineProperty(this, "hasAppearanceStream", {
        enumerable: !0,
        configurable: !0,
        writeable: !0,
        get: function get() {
          return g;
        },
        set: function set(t) {
          t = Boolean(t), g = t;
        }
      }), Object.defineProperty(this, "page", {
        enumerable: !0,
        configurable: !0,
        writeable: !0,
        get: function get() {
          if (d) return d;
        },
        set: function set(t) {
          d = t;
        }
      }), Object.defineProperty(this, "readOnly", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 1));
        },
        set: function set(t) {
          !0 === Boolean(t) ? this.Ff = x(this.Ff, 1) : this.Ff = N(this.Ff, 1);
        }
      }), Object.defineProperty(this, "required", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 2));
        },
        set: function set(t) {
          !0 === Boolean(t) ? this.Ff = x(this.Ff, 2) : this.Ff = N(this.Ff, 2);
        }
      }), Object.defineProperty(this, "noExport", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 3));
        },
        set: function set(t) {
          !0 === Boolean(t) ? this.Ff = x(this.Ff, 3) : this.Ff = N(this.Ff, 3);
        }
      });
      var m = null;
      Object.defineProperty(this, "Q", {
        enumerable: !0,
        configurable: !1,
        get: function get() {
          if (null !== m) return m;
        },
        set: function set(t) {
          if (-1 === [0, 1, 2].indexOf(t)) throw new Error('Invalid value "' + t + '" for attribute Q supplied.');
          m = t;
        }
      }), Object.defineProperty(this, "textAlign", {
        get: function get() {
          var t = "left";

          switch (m) {
            case 0:
            default:
              t = "left";
              break;

            case 1:
              t = "center";
              break;

            case 2:
              t = "right";
          }

          return t;
        },
        configurable: !0,
        enumerable: !0,
        set: function set(t) {
          switch (t) {
            case "right":
            case 2:
              m = 2;
              break;

            case "center":
            case 1:
              m = 1;
              break;

            case "left":
            case 0:
            default:
              m = 0;
          }
        }
      });
    };

    r(M, B);

    var O = function O() {
      M.call(this), this.FT = "/Ch", this.V = "()", this.fontName = "zapfdingbats";
      var e = 0;
      Object.defineProperty(this, "TI", {
        enumerable: !0,
        configurable: !1,
        get: function get() {
          return e;
        },
        set: function set(t) {
          e = t;
        }
      }), Object.defineProperty(this, "topIndex", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return e;
        },
        set: function set(t) {
          e = t;
        }
      });
      var r = [];
      Object.defineProperty(this, "Opt", {
        enumerable: !0,
        configurable: !1,
        get: function get() {
          return I(r);
        },
        set: function set(t) {
          var e, n;
          n = [], "string" == typeof (e = t) && (n = function (t, e, n) {
            n || (n = 1);

            for (var r, i = []; r = e.exec(t);) {
              i.push(r[n]);
            }

            return i;
          }(e, /\((.*?)\)/g)), r = n;
        }
      }), this.getOptions = function () {
        return r;
      }, this.setOptions = function (t) {
        r = t, this.sort && r.sort();
      }, this.addOption = function (t) {
        t = (t = t || "").toString(), r.push(t), this.sort && r.sort();
      }, this.removeOption = function (t, e) {
        for (e = e || !1, t = (t = t || "").toString(); -1 !== r.indexOf(t) && (r.splice(r.indexOf(t), 1), !1 !== e);) {
          ;
        }
      }, Object.defineProperty(this, "combo", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 18));
        },
        set: function set(t) {
          !0 === Boolean(t) ? this.Ff = x(this.Ff, 18) : this.Ff = N(this.Ff, 18);
        }
      }), Object.defineProperty(this, "edit", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 19));
        },
        set: function set(t) {
          !0 === this.combo && (!0 === Boolean(t) ? this.Ff = x(this.Ff, 19) : this.Ff = N(this.Ff, 19));
        }
      }), Object.defineProperty(this, "sort", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 20));
        },
        set: function set(t) {
          !0 === Boolean(t) ? (this.Ff = x(this.Ff, 20), r.sort()) : this.Ff = N(this.Ff, 20);
        }
      }), Object.defineProperty(this, "multiSelect", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 22));
        },
        set: function set(t) {
          !0 === Boolean(t) ? this.Ff = x(this.Ff, 22) : this.Ff = N(this.Ff, 22);
        }
      }), Object.defineProperty(this, "doNotSpellCheck", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 23));
        },
        set: function set(t) {
          !0 === Boolean(t) ? this.Ff = x(this.Ff, 23) : this.Ff = N(this.Ff, 23);
        }
      }), Object.defineProperty(this, "commitOnSelChange", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 27));
        },
        set: function set(t) {
          !0 === Boolean(t) ? this.Ff = x(this.Ff, 27) : this.Ff = N(this.Ff, 27);
        }
      }), this.hasAppearanceStream = !1;
    };

    r(O, M);

    var q = function q() {
      O.call(this), this.fontName = "helvetica", this.combo = !1;
    };

    r(q, O);

    var T = function T() {
      q.call(this), this.combo = !0;
    };

    r(T, q);

    var R = function R() {
      T.call(this), this.edit = !0;
    };

    r(R, T);

    var D = function D() {
      M.call(this), this.FT = "/Btn", Object.defineProperty(this, "noToggleToOff", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 15));
        },
        set: function set(t) {
          !0 === Boolean(t) ? this.Ff = x(this.Ff, 15) : this.Ff = N(this.Ff, 15);
        }
      }), Object.defineProperty(this, "radio", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 16));
        },
        set: function set(t) {
          !0 === Boolean(t) ? this.Ff = x(this.Ff, 16) : this.Ff = N(this.Ff, 16);
        }
      }), Object.defineProperty(this, "pushButton", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 17));
        },
        set: function set(t) {
          !0 === Boolean(t) ? this.Ff = x(this.Ff, 17) : this.Ff = N(this.Ff, 17);
        }
      }), Object.defineProperty(this, "radioIsUnison", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 26));
        },
        set: function set(t) {
          !0 === Boolean(t) ? this.Ff = x(this.Ff, 26) : this.Ff = N(this.Ff, 26);
        }
      });
      var e,
          n = {};
      Object.defineProperty(this, "MK", {
        enumerable: !1,
        configurable: !1,
        get: function get() {
          if (0 !== Object.keys(n).length) {
            var t,
                e = [];

            for (t in e.push("<<"), n) {
              e.push("/" + t + " (" + n[t] + ")");
            }

            return e.push(">>"), e.join("\n");
          }
        },
        set: function set(t) {
          "object" === se(t) && (n = t);
        }
      }), Object.defineProperty(this, "caption", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return n.CA || "";
        },
        set: function set(t) {
          "string" == typeof t && (n.CA = t);
        }
      }), Object.defineProperty(this, "AS", {
        enumerable: !1,
        configurable: !1,
        get: function get() {
          return e;
        },
        set: function set(t) {
          e = t;
        }
      }), Object.defineProperty(this, "appearanceState", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return e.substr(1, e.length - 1);
        },
        set: function set(t) {
          e = "/" + t;
        }
      });
    };

    r(D, M);

    var U = function U() {
      D.call(this), this.pushButton = !0;
    };

    r(U, D);

    var z = function z() {
      D.call(this), this.radio = !0, this.pushButton = !1;
      var e = [];
      Object.defineProperty(this, "Kids", {
        enumerable: !0,
        configurable: !1,
        get: function get() {
          return e;
        },
        set: function set(t) {
          e = void 0 !== t ? t : [];
        }
      });
    };

    r(z, D);

    var H = function H() {
      var e, n;
      M.call(this), Object.defineProperty(this, "Parent", {
        enumerable: !1,
        configurable: !1,
        get: function get() {
          return e;
        },
        set: function set(t) {
          e = t;
        }
      }), Object.defineProperty(this, "optionName", {
        enumerable: !1,
        configurable: !0,
        get: function get() {
          return n;
        },
        set: function set(t) {
          n = t;
        }
      });
      var r,
          i = {};
      Object.defineProperty(this, "MK", {
        enumerable: !1,
        configurable: !1,
        get: function get() {
          var t,
              e = [];

          for (t in e.push("<<"), i) {
            e.push("/" + t + " (" + i[t] + ")");
          }

          return e.push(">>"), e.join("\n");
        },
        set: function set(t) {
          "object" === se(t) && (i = t);
        }
      }), Object.defineProperty(this, "caption", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return i.CA || "";
        },
        set: function set(t) {
          "string" == typeof t && (i.CA = t);
        }
      }), Object.defineProperty(this, "AS", {
        enumerable: !1,
        configurable: !1,
        get: function get() {
          return r;
        },
        set: function set(t) {
          r = t;
        }
      }), Object.defineProperty(this, "appearanceState", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return r.substr(1, r.length - 1);
        },
        set: function set(t) {
          r = "/" + t;
        }
      }), this.optionName = name, this.caption = "l", this.appearanceState = "Off", this._AppearanceType = Y.RadioButton.Circle, this.appearanceStreamContent = this._AppearanceType.createAppearanceStream(name);
    };

    r(H, M), z.prototype.setAppearance = function (t) {
      if (!("createAppearanceStream" in t && "getCA" in t)) throw new Error("Couldn't assign Appearance to RadioButton. Appearance was Invalid!");

      for (var e in this.Kids) {
        if (this.Kids.hasOwnProperty(e)) {
          var n = this.Kids[e];
          n.appearanceStreamContent = t.createAppearanceStream(n.optionName), n.caption = t.getCA();
        }
      }
    }, z.prototype.createOption = function (t) {
      this.Kids.length;
      var e = new H();
      return e.Parent = this, e.optionName = t, this.Kids.push(e), J.call(this, e), e;
    };

    var W = function W() {
      D.call(this), this.fontName = "zapfdingbats", this.caption = "3", this.appearanceState = "On", this.value = "On", this.textAlign = "center", this.appearanceStreamContent = Y.CheckBox.createAppearanceStream();
    };

    r(W, D);

    var V = function V() {
      M.call(this), this.FT = "/Tx", Object.defineProperty(this, "multiline", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 13));
        },
        set: function set(t) {
          !0 === Boolean(t) ? this.Ff = x(this.Ff, 13) : this.Ff = N(this.Ff, 13);
        }
      }), Object.defineProperty(this, "fileSelect", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 21));
        },
        set: function set(t) {
          !0 === Boolean(t) ? this.Ff = x(this.Ff, 21) : this.Ff = N(this.Ff, 21);
        }
      }), Object.defineProperty(this, "doNotSpellCheck", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 23));
        },
        set: function set(t) {
          !0 === Boolean(t) ? this.Ff = x(this.Ff, 23) : this.Ff = N(this.Ff, 23);
        }
      }), Object.defineProperty(this, "doNotScroll", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 24));
        },
        set: function set(t) {
          !0 === Boolean(t) ? this.Ff = x(this.Ff, 24) : this.Ff = N(this.Ff, 24);
        }
      }), Object.defineProperty(this, "comb", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 25));
        },
        set: function set(t) {
          !0 === Boolean(t) ? this.Ff = x(this.Ff, 25) : this.Ff = N(this.Ff, 25);
        }
      }), Object.defineProperty(this, "richText", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 26));
        },
        set: function set(t) {
          !0 === Boolean(t) ? this.Ff = x(this.Ff, 26) : this.Ff = N(this.Ff, 26);
        }
      });
      var e = null;
      Object.defineProperty(this, "MaxLen", {
        enumerable: !0,
        configurable: !1,
        get: function get() {
          return e;
        },
        set: function set(t) {
          e = t;
        }
      }), Object.defineProperty(this, "maxLength", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return e;
        },
        set: function set(t) {
          Number.isInteger(t) && (e = t);
        }
      }), Object.defineProperty(this, "hasAppearanceStream", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return this.V || this.DV;
        }
      });
    };

    r(V, M);

    var G = function G() {
      V.call(this), Object.defineProperty(this, "password", {
        enumerable: !0,
        configurable: !0,
        get: function get() {
          return Boolean(b(this.Ff, 14));
        },
        set: function set(t) {
          !0 === Boolean(t) ? this.Ff = x(this.Ff, 14) : this.Ff = N(this.Ff, 14);
        }
      }), this.password = !0;
    };

    r(G, V);
    var Y = {
      CheckBox: {
        createAppearanceStream: function createAppearanceStream() {
          return {
            N: {
              On: Y.CheckBox.YesNormal
            },
            D: {
              On: Y.CheckBox.YesPushDown,
              Off: Y.CheckBox.OffPushDown
            }
          };
        },
        YesPushDown: function YesPushDown(t) {
          var e = l(t),
              n = [],
              r = A.internal.getFont(t.fontName, t.fontStyle).id,
              i = A.__private__.encodeColorString(t.color),
              o = h(t, t.caption);

          return n.push("0.749023 g"), n.push("0 0 " + _(Y.internal.getWidth(t)) + " " + _(Y.internal.getHeight(t)) + " re"), n.push("f"), n.push("BMC"), n.push("q"), n.push("0 0 1 rg"), n.push("/" + r + " " + _(o.fontSize) + " Tf " + i), n.push("BT"), n.push(o.text), n.push("ET"), n.push("Q"), n.push("EMC"), e.stream = n.join("\n"), e;
        },
        YesNormal: function YesNormal(t) {
          var e = l(t),
              n = A.internal.getFont(t.fontName, t.fontStyle).id,
              r = A.__private__.encodeColorString(t.color),
              i = [],
              o = Y.internal.getHeight(t),
              a = Y.internal.getWidth(t),
              s = h(t, t.caption);

          return i.push("1 g"), i.push("0 0 " + _(a) + " " + _(o) + " re"), i.push("f"), i.push("q"), i.push("0 0 1 rg"), i.push("0 0 " + _(a - 1) + " " + _(o - 1) + " re"), i.push("W"), i.push("n"), i.push("0 g"), i.push("BT"), i.push("/" + n + " " + _(s.fontSize) + " Tf " + r), i.push(s.text), i.push("ET"), i.push("Q"), e.stream = i.join("\n"), e;
        },
        OffPushDown: function OffPushDown(t) {
          var e = l(t),
              n = [];
          return n.push("0.749023 g"), n.push("0 0 " + _(Y.internal.getWidth(t)) + " " + _(Y.internal.getHeight(t)) + " re"), n.push("f"), e.stream = n.join("\n"), e;
        }
      },
      RadioButton: {
        Circle: {
          createAppearanceStream: function createAppearanceStream(t) {
            var e = {
              D: {
                Off: Y.RadioButton.Circle.OffPushDown
              },
              N: {}
            };
            return e.N[t] = Y.RadioButton.Circle.YesNormal, e.D[t] = Y.RadioButton.Circle.YesPushDown, e;
          },
          getCA: function getCA() {
            return "l";
          },
          YesNormal: function YesNormal(t) {
            var e = l(t),
                n = [],
                r = Y.internal.getWidth(t) <= Y.internal.getHeight(t) ? Y.internal.getWidth(t) / 4 : Y.internal.getHeight(t) / 4;
            r = Number((.9 * r).toFixed(5));
            var i = Y.internal.Bezier_C,
                o = Number((r * i).toFixed(5));
            return n.push("q"), n.push("1 0 0 1 " + s(Y.internal.getWidth(t) / 2) + " " + s(Y.internal.getHeight(t) / 2) + " cm"), n.push(r + " 0 m"), n.push(r + " " + o + " " + o + " " + r + " 0 " + r + " c"), n.push("-" + o + " " + r + " -" + r + " " + o + " -" + r + " 0 c"), n.push("-" + r + " -" + o + " -" + o + " -" + r + " 0 -" + r + " c"), n.push(o + " -" + r + " " + r + " -" + o + " " + r + " 0 c"), n.push("f"), n.push("Q"), e.stream = n.join("\n"), e;
          },
          YesPushDown: function YesPushDown(t) {
            var e = l(t),
                n = [],
                r = Y.internal.getWidth(t) <= Y.internal.getHeight(t) ? Y.internal.getWidth(t) / 4 : Y.internal.getHeight(t) / 4,
                i = (r = Number((.9 * r).toFixed(5)), Number((2 * r).toFixed(5))),
                o = Number((i * Y.internal.Bezier_C).toFixed(5)),
                a = Number((r * Y.internal.Bezier_C).toFixed(5));
            return n.push("0.749023 g"), n.push("q"), n.push("1 0 0 1 " + s(Y.internal.getWidth(t) / 2) + " " + s(Y.internal.getHeight(t) / 2) + " cm"), n.push(i + " 0 m"), n.push(i + " " + o + " " + o + " " + i + " 0 " + i + " c"), n.push("-" + o + " " + i + " -" + i + " " + o + " -" + i + " 0 c"), n.push("-" + i + " -" + o + " -" + o + " -" + i + " 0 -" + i + " c"), n.push(o + " -" + i + " " + i + " -" + o + " " + i + " 0 c"), n.push("f"), n.push("Q"), n.push("0 g"), n.push("q"), n.push("1 0 0 1 " + s(Y.internal.getWidth(t) / 2) + " " + s(Y.internal.getHeight(t) / 2) + " cm"), n.push(r + " 0 m"), n.push(r + " " + a + " " + a + " " + r + " 0 " + r + " c"), n.push("-" + a + " " + r + " -" + r + " " + a + " -" + r + " 0 c"), n.push("-" + r + " -" + a + " -" + a + " -" + r + " 0 -" + r + " c"), n.push(a + " -" + r + " " + r + " -" + a + " " + r + " 0 c"), n.push("f"), n.push("Q"), e.stream = n.join("\n"), e;
          },
          OffPushDown: function OffPushDown(t) {
            var e = l(t),
                n = [],
                r = Y.internal.getWidth(t) <= Y.internal.getHeight(t) ? Y.internal.getWidth(t) / 4 : Y.internal.getHeight(t) / 4,
                i = (r = Number((.9 * r).toFixed(5)), Number((2 * r).toFixed(5))),
                o = Number((i * Y.internal.Bezier_C).toFixed(5));
            return n.push("0.749023 g"), n.push("q"), n.push("1 0 0 1 " + s(Y.internal.getWidth(t) / 2) + " " + s(Y.internal.getHeight(t) / 2) + " cm"), n.push(i + " 0 m"), n.push(i + " " + o + " " + o + " " + i + " 0 " + i + " c"), n.push("-" + o + " " + i + " -" + i + " " + o + " -" + i + " 0 c"), n.push("-" + i + " -" + o + " -" + o + " -" + i + " 0 -" + i + " c"), n.push(o + " -" + i + " " + i + " -" + o + " " + i + " 0 c"), n.push("f"), n.push("Q"), e.stream = n.join("\n"), e;
          }
        },
        Cross: {
          createAppearanceStream: function createAppearanceStream(t) {
            var e = {
              D: {
                Off: Y.RadioButton.Cross.OffPushDown
              },
              N: {}
            };
            return e.N[t] = Y.RadioButton.Cross.YesNormal, e.D[t] = Y.RadioButton.Cross.YesPushDown, e;
          },
          getCA: function getCA() {
            return "8";
          },
          YesNormal: function YesNormal(t) {
            var e = l(t),
                n = [],
                r = Y.internal.calculateCross(t);
            return n.push("q"), n.push("1 1 " + _(Y.internal.getWidth(t) - 2) + " " + _(Y.internal.getHeight(t) - 2) + " re"), n.push("W"), n.push("n"), n.push(_(r.x1.x) + " " + _(r.x1.y) + " m"), n.push(_(r.x2.x) + " " + _(r.x2.y) + " l"), n.push(_(r.x4.x) + " " + _(r.x4.y) + " m"), n.push(_(r.x3.x) + " " + _(r.x3.y) + " l"), n.push("s"), n.push("Q"), e.stream = n.join("\n"), e;
          },
          YesPushDown: function YesPushDown(t) {
            var e = l(t),
                n = Y.internal.calculateCross(t),
                r = [];
            return r.push("0.749023 g"), r.push("0 0 " + _(Y.internal.getWidth(t)) + " " + _(Y.internal.getHeight(t)) + " re"), r.push("f"), r.push("q"), r.push("1 1 " + _(Y.internal.getWidth(t) - 2) + " " + _(Y.internal.getHeight(t) - 2) + " re"), r.push("W"), r.push("n"), r.push(_(n.x1.x) + " " + _(n.x1.y) + " m"), r.push(_(n.x2.x) + " " + _(n.x2.y) + " l"), r.push(_(n.x4.x) + " " + _(n.x4.y) + " m"), r.push(_(n.x3.x) + " " + _(n.x3.y) + " l"), r.push("s"), r.push("Q"), e.stream = r.join("\n"), e;
          },
          OffPushDown: function OffPushDown(t) {
            var e = l(t),
                n = [];
            return n.push("0.749023 g"), n.push("0 0 " + _(Y.internal.getWidth(t)) + " " + _(Y.internal.getHeight(t)) + " re"), n.push("f"), e.stream = n.join("\n"), e;
          }
        }
      },
      createDefaultAppearanceStream: function createDefaultAppearanceStream(t) {
        var e = A.internal.getFont(t.fontName, t.fontStyle).id,
            n = A.__private__.encodeColorString(t.color);

        return "/" + e + " " + t.fontSize + " Tf " + n;
      }
    };
    Y.internal = {
      Bezier_C: .551915024494,
      calculateCross: function calculateCross(t) {
        var e = Y.internal.getWidth(t),
            n = Y.internal.getHeight(t),
            r = Math.min(e, n);
        return {
          x1: {
            x: (e - r) / 2,
            y: (n - r) / 2 + r
          },
          x2: {
            x: (e - r) / 2 + r,
            y: (n - r) / 2
          },
          x3: {
            x: (e - r) / 2,
            y: (n - r) / 2
          },
          x4: {
            x: (e - r) / 2 + r,
            y: (n - r) / 2 + r
          }
        };
      }
    }, Y.internal.getWidth = function (t) {
      var e = 0;
      return "object" === se(t) && (e = v(t.Rect[2])), e;
    }, Y.internal.getHeight = function (t) {
      var e = 0;
      return "object" === se(t) && (e = v(t.Rect[3])), e;
    };

    var J = t.addField = function (t) {
      if (k.call(this), !(t instanceof M)) throw new Error("Invalid argument passed to jsPDF.addField.");
      return function (t) {
        A.internal.acroformPlugin.printedOut && (A.internal.acroformPlugin.printedOut = !1, A.internal.acroformPlugin.acroFormDictionaryRoot = null), A.internal.acroformPlugin.acroFormDictionaryRoot || k.call(A), A.internal.acroformPlugin.acroFormDictionaryRoot.Fields.push(t);
      }.call(this, t), t.page = A.internal.getCurrentPageInfo().pageNumber, this;
    };

    t.addButton = function (t) {
      if (t instanceof D == !1) throw new Error("Invalid argument passed to jsPDF.addButton.");
      return J.call(this, t);
    }, t.addTextField = function (t) {
      if (t instanceof V == !1) throw new Error("Invalid argument passed to jsPDF.addTextField.");
      return J.call(this, t);
    }, t.addChoiceField = function (t) {
      if (t instanceof O == !1) throw new Error("Invalid argument passed to jsPDF.addChoiceField.");
      return J.call(this, t);
    };
    "object" == se(e) && void 0 === e.ChoiceField && void 0 === e.ListBox && void 0 === e.ComboBox && void 0 === e.EditBox && void 0 === e.Button && void 0 === e.PushButton && void 0 === e.RadioButton && void 0 === e.CheckBox && void 0 === e.TextField && void 0 === e.PasswordField ? (e.ChoiceField = O, e.ListBox = q, e.ComboBox = T, e.EditBox = R, e.Button = D, e.PushButton = U, e.RadioButton = z, e.CheckBox = W, e.TextField = V, e.PasswordField = G, e.AcroForm = {
      Appearance: Y
    }) : console.warn("AcroForm-Classes are not populated into global-namespace, because the class-Names exist already."), t.AcroFormChoiceField = O, t.AcroFormListBox = q, t.AcroFormComboBox = T, t.AcroFormEditBox = R, t.AcroFormButton = D, t.AcroFormPushButton = U, t.AcroFormRadioButton = z, t.AcroFormCheckBox = W, t.AcroFormTextField = V, t.AcroFormPasswordField = G, t.AcroFormAppearance = Y, t.AcroForm = {
      ChoiceField: O,
      ListBox: q,
      ComboBox: T,
      EditBox: R,
      Button: D,
      PushButton: U,
      RadioButton: z,
      CheckBox: W,
      TextField: V,
      PasswordField: G,
      Appearance: Y
    };
  })((window.tmp = lt).API, "undefined" != typeof window && window || "undefined" != typeof global && global),
  /** @license
     * jsPDF addImage plugin
     * Copyright (c) 2012 Jason Siefken, https://github.com/siefkenj/
     *               2013 Chris Dowling, https://github.com/gingerchris
     *               2013 Trinh Ho, https://github.com/ineedfat
     *               2013 Edwin Alejandro Perez, https://github.com/eaparango
     *               2013 Norah Smith, https://github.com/burnburnrocket
     *               2014 Diego Casorran, https://github.com/diegocr
     *               2014 James Robb, https://github.com/jamesbrobb
     *
     * 
     */
  function (x) {
    var N = "addImage_",
        l = {
      PNG: [[137, 80, 78, 71]],
      TIFF: [[77, 77, 0, 42], [73, 73, 42, 0]],
      JPEG: [[255, 216, 255, 224, void 0, void 0, 74, 70, 73, 70, 0], [255, 216, 255, 225, void 0, void 0, 69, 120, 105, 102, 0, 0]],
      JPEG2000: [[0, 0, 0, 12, 106, 80, 32, 32]],
      GIF87a: [[71, 73, 70, 56, 55, 97]],
      GIF89a: [[71, 73, 70, 56, 57, 97]],
      BMP: [[66, 77], [66, 65], [67, 73], [67, 80], [73, 67], [80, 84]]
    },
        h = x.getImageFileTypeByImageData = function (t, e) {
      var n, r;
      e = e || "UNKNOWN";
      var i,
          o,
          a,
          s = "UNKNOWN";

      for (a in x.isArrayBufferView(t) && (t = x.arrayBufferToBinaryString(t)), l) {
        for (i = l[a], n = 0; n < i.length; n += 1) {
          for (o = !0, r = 0; r < i[n].length; r += 1) {
            if (void 0 !== i[n][r] && i[n][r] !== t.charCodeAt(r)) {
              o = !1;
              break;
            }
          }

          if (!0 === o) {
            s = a;
            break;
          }
        }
      }

      return "UNKNOWN" === s && "UNKNOWN" !== e && (console.warn('FileType of Image not recognized. Processing image as "' + e + '".'), s = e), s;
    },
        n = function t(e) {
      for (var n = this.internal.newObject(), r = this.internal.write, i = this.internal.putStream, o = (0, this.internal.getFilters)(); -1 !== o.indexOf("FlateEncode");) {
        o.splice(o.indexOf("FlateEncode"), 1);
      }

      e.n = n;
      var a = [];

      if (a.push({
        key: "Type",
        value: "/XObject"
      }), a.push({
        key: "Subtype",
        value: "/Image"
      }), a.push({
        key: "Width",
        value: e.w
      }), a.push({
        key: "Height",
        value: e.h
      }), e.cs === this.color_spaces.INDEXED ? a.push({
        key: "ColorSpace",
        value: "[/Indexed /DeviceRGB " + (e.pal.length / 3 - 1) + " " + ("smask" in e ? n + 2 : n + 1) + " 0 R]"
      }) : (a.push({
        key: "ColorSpace",
        value: "/" + e.cs
      }), e.cs === this.color_spaces.DEVICE_CMYK && a.push({
        key: "Decode",
        value: "[1 0 1 0 1 0 1 0]"
      })), a.push({
        key: "BitsPerComponent",
        value: e.bpc
      }), "dp" in e && a.push({
        key: "DecodeParms",
        value: "<<" + e.dp + ">>"
      }), "trns" in e && e.trns.constructor == Array) {
        for (var s = "", l = 0, h = e.trns.length; l < h; l++) {
          s += e.trns[l] + " " + e.trns[l] + " ";
        }

        a.push({
          key: "Mask",
          value: "[" + s + "]"
        });
      }

      "smask" in e && a.push({
        key: "SMask",
        value: n + 1 + " 0 R"
      });
      var u = void 0 !== e.f ? ["/" + e.f] : void 0;

      if (i({
        data: e.data,
        additionalKeyValues: a,
        alreadyAppliedFilters: u
      }), r("endobj"), "smask" in e) {
        var c = "/Predictor " + e.p + " /Colors 1 /BitsPerComponent " + e.bpc + " /Columns " + e.w,
            f = {
          w: e.w,
          h: e.h,
          cs: "DeviceGray",
          bpc: e.bpc,
          dp: c,
          data: e.smask
        };
        "f" in e && (f.f = e.f), t.call(this, f);
      }

      e.cs === this.color_spaces.INDEXED && (this.internal.newObject(), i({
        data: this.arrayBufferToBinaryString(new Uint8Array(e.pal))
      }), r("endobj"));
    },
        L = function L() {
      var t = this.internal.collections[N + "images"];

      for (var e in t) {
        n.call(this, t[e]);
      }
    },
        A = function A() {
      var t,
          e = this.internal.collections[N + "images"],
          n = this.internal.write;

      for (var r in e) {
        n("/I" + (t = e[r]).i, t.n, "0", "R");
      }
    },
        S = function S(t) {
      return "function" == typeof x["process" + t.toUpperCase()];
    },
        _ = function _(t) {
      return "object" === se(t) && 1 === t.nodeType;
    },
        F = function F(t, e) {
      if ("IMG" === t.nodeName && t.hasAttribute("src")) {
        var n = "" + t.getAttribute("src");
        if (0 === n.indexOf("data:image/")) return unescape(n);
        var r = x.loadFile(n);
        if (void 0 !== r) return btoa(r);
      }

      if ("CANVAS" === t.nodeName) {
        var i = t;
        return t.toDataURL("image/jpeg", 1);
      }

      (i = document.createElement("canvas")).width = t.clientWidth || t.width, i.height = t.clientHeight || t.height;
      var o = i.getContext("2d");
      if (!o) throw "addImage requires canvas to be supported by browser.";
      return o.drawImage(t, 0, 0, i.width, i.height), i.toDataURL("png" == ("" + e).toLowerCase() ? "image/png" : "image/jpeg");
    },
        P = function P(t, e) {
      var n;
      if (e) for (var r in e) {
        if (t === e[r].alias) {
          n = e[r];
          break;
        }
      }
      return n;
    };

    x.color_spaces = {
      DEVICE_RGB: "DeviceRGB",
      DEVICE_GRAY: "DeviceGray",
      DEVICE_CMYK: "DeviceCMYK",
      CAL_GREY: "CalGray",
      CAL_RGB: "CalRGB",
      LAB: "Lab",
      ICC_BASED: "ICCBased",
      INDEXED: "Indexed",
      PATTERN: "Pattern",
      SEPARATION: "Separation",
      DEVICE_N: "DeviceN"
    }, x.decode = {
      DCT_DECODE: "DCTDecode",
      FLATE_DECODE: "FlateDecode",
      LZW_DECODE: "LZWDecode",
      JPX_DECODE: "JPXDecode",
      JBIG2_DECODE: "JBIG2Decode",
      ASCII85_DECODE: "ASCII85Decode",
      ASCII_HEX_DECODE: "ASCIIHexDecode",
      RUN_LENGTH_DECODE: "RunLengthDecode",
      CCITT_FAX_DECODE: "CCITTFaxDecode"
    }, x.image_compression = {
      NONE: "NONE",
      FAST: "FAST",
      MEDIUM: "MEDIUM",
      SLOW: "SLOW"
    }, x.sHashCode = function (t) {
      var e,
          n = 0;
      if (0 === (t = t || "").length) return n;

      for (e = 0; e < t.length; e++) {
        n = (n << 5) - n + t.charCodeAt(e), n |= 0;
      }

      return n;
    }, x.isString = function (t) {
      return "string" == typeof t;
    }, x.validateStringAsBase64 = function (t) {
      (t = t || "").toString().trim();
      var e = !0;
      return 0 === t.length && (e = !1), t.length % 4 != 0 && (e = !1), !1 === /^[A-Za-z0-9+\/]+$/.test(t.substr(0, t.length - 2)) && (e = !1), !1 === /^[A-Za-z0-9\/][A-Za-z0-9+\/]|[A-Za-z0-9+\/]=|==$/.test(t.substr(-2)) && (e = !1), e;
    }, x.extractInfoFromBase64DataURI = function (t) {
      return /^data:([\w]+?\/([\w]+?));\S*;*base64,(.+)$/g.exec(t);
    }, x.extractImageFromDataUrl = function (t) {
      var e = (t = t || "").split("base64,"),
          n = null;

      if (2 === e.length) {
        var r = /^data:(\w*\/\w*);*(charset=[\w=-]*)*;*$/.exec(e[0]);
        Array.isArray(r) && (n = {
          mimeType: r[1],
          charset: r[2],
          data: e[1]
        });
      }

      return n;
    }, x.supportsArrayBuffer = function () {
      return "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array;
    }, x.isArrayBuffer = function (t) {
      return !!this.supportsArrayBuffer() && t instanceof ArrayBuffer;
    }, x.isArrayBufferView = function (t) {
      return !!this.supportsArrayBuffer() && "undefined" != typeof Uint32Array && (t instanceof Int8Array || t instanceof Uint8Array || "undefined" != typeof Uint8ClampedArray && t instanceof Uint8ClampedArray || t instanceof Int16Array || t instanceof Uint16Array || t instanceof Int32Array || t instanceof Uint32Array || t instanceof Float32Array || t instanceof Float64Array);
    }, x.binaryStringToUint8Array = function (t) {
      for (var e = t.length, n = new Uint8Array(e), r = 0; r < e; r++) {
        n[r] = t.charCodeAt(r);
      }

      return n;
    }, x.arrayBufferToBinaryString = function (t) {
      if ("function" == typeof atob) return atob(this.arrayBufferToBase64(t));
    }, x.arrayBufferToBase64 = function (t) {
      for (var e, n = "", r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", i = new Uint8Array(t), o = i.byteLength, a = o % 3, s = o - a, l = 0; l < s; l += 3) {
        n += r[(16515072 & (e = i[l] << 16 | i[l + 1] << 8 | i[l + 2])) >> 18] + r[(258048 & e) >> 12] + r[(4032 & e) >> 6] + r[63 & e];
      }

      return 1 == a ? n += r[(252 & (e = i[s])) >> 2] + r[(3 & e) << 4] + "==" : 2 == a && (n += r[(64512 & (e = i[s] << 8 | i[s + 1])) >> 10] + r[(1008 & e) >> 4] + r[(15 & e) << 2] + "="), n;
    }, x.createImageInfo = function (t, e, n, r, i, o, a, s, l, h, u, c, f) {
      var p = {
        alias: s,
        w: e,
        h: n,
        cs: r,
        bpc: i,
        i: a,
        data: t
      };
      return o && (p.f = o), l && (p.dp = l), h && (p.trns = h), u && (p.pal = u), c && (p.smask = c), f && (p.p = f), p;
    }, x.addImage = function (t, e, n, r, i, o, a, s, l) {
      var h = "";

      if ("string" != typeof e) {
        var u = o;
        o = i, i = r, r = n, n = e, e = u;
      }

      if ("object" === se(t) && !_(t) && "imageData" in t) {
        var c = t;
        t = c.imageData, e = c.format || e || "UNKNOWN", n = c.x || n || 0, r = c.y || r || 0, i = c.w || i, o = c.h || o, a = c.alias || a, s = c.compression || s, l = c.rotation || c.angle || l;
      }

      var f = this.internal.getFilters();
      if (void 0 === s && -1 !== f.indexOf("FlateEncode") && (s = "SLOW"), "string" == typeof t && (t = unescape(t)), isNaN(n) || isNaN(r)) throw console.error("jsPDF.addImage: Invalid coordinates", arguments), new Error("Invalid coordinates passed to jsPDF.addImage");

      var p,
          d,
          g,
          m,
          y,
          v,
          w,
          b = function () {
        var t = this.internal.collections[N + "images"];
        return t || (this.internal.collections[N + "images"] = t = {}, this.internal.events.subscribe("putResources", L), this.internal.events.subscribe("putXobjectDict", A)), t;
      }.call(this);

      if (!((p = P(t, b)) || (_(t) && (t = F(t, e)), (null == (w = a) || 0 === w.length) && (a = "string" == typeof (v = t) ? x.sHashCode(v) : x.isArrayBufferView(v) ? x.sHashCode(x.arrayBufferToBinaryString(v)) : null), p = P(a, b)))) {
        if (this.isString(t) && ("" !== (h = this.convertStringToImageData(t)) ? t = h : void 0 !== (h = x.loadFile(t)) && (t = h)), e = this.getImageFileTypeByImageData(t, e), !S(e)) throw new Error("addImage does not support files of type '" + e + "', please ensure that a plugin for '" + e + "' support is added.");
        if (this.supportsArrayBuffer() && (t instanceof Uint8Array || (d = t, t = this.binaryStringToUint8Array(t))), !(p = this["process" + e.toUpperCase()](t, (y = 0, (m = b) && (y = Object.keys ? Object.keys(m).length : function (t) {
          var e = 0;

          for (var n in t) {
            t.hasOwnProperty(n) && e++;
          }

          return e;
        }(m)), y), a, ((g = s) && "string" == typeof g && (g = g.toUpperCase()), g in x.image_compression ? g : x.image_compression.NONE), d))) throw new Error("An unknown error occurred whilst processing the image");
      }

      return function (t, e, n, r, i, o, a, s) {
        var l = function (t, e, n) {
          return t || e || (e = t = -96), t < 0 && (t = -1 * n.w * 72 / t / this.internal.scaleFactor), e < 0 && (e = -1 * n.h * 72 / e / this.internal.scaleFactor), 0 === t && (t = e * n.w / n.h), 0 === e && (e = t * n.h / n.w), [t, e];
        }.call(this, n, r, i),
            h = this.internal.getCoordinateString,
            u = this.internal.getVerticalCoordinateString;

        if (n = l[0], r = l[1], a[o] = i, s) {
          s *= Math.PI / 180;

          var c = Math.cos(s),
              f = Math.sin(s),
              p = function p(t) {
            return t.toFixed(4);
          },
              d = [p(c), p(f), p(-1 * f), p(c), 0, 0, "cm"];
        }

        this.internal.write("q"), s ? (this.internal.write([1, "0", "0", 1, h(t), u(e + r), "cm"].join(" ")), this.internal.write(d.join(" ")), this.internal.write([h(n), "0", "0", h(r), "0", "0", "cm"].join(" "))) : this.internal.write([h(n), "0", "0", h(r), h(t), u(e + r), "cm"].join(" ")), this.internal.write("/I" + i.i + " Do"), this.internal.write("Q");
      }.call(this, n, r, i, o, p, p.i, b, l), this;
    }, x.convertStringToImageData = function (t) {
      var e,
          n = "";

      if (this.isString(t)) {
        var r;
        e = null !== (r = this.extractImageFromDataUrl(t)) ? r.data : t;

        try {
          n = atob(e);
        } catch (t) {
          throw x.validateStringAsBase64(e) ? new Error("atob-Error in jsPDF.convertStringToImageData " + t.message) : new Error("Supplied Data is not a valid base64-String jsPDF.convertStringToImageData ");
        }
      }

      return n;
    };

    var u = function u(t, e) {
      return t.subarray(e, e + 5);
    };

    x.processJPEG = function (t, e, n, r, i, o) {
      var a,
          s = this.decode.DCT_DECODE;
      if (!this.isString(t) && !this.isArrayBuffer(t) && !this.isArrayBufferView(t)) return null;
      if (this.isString(t) && (a = function (t) {
        var e;
        if ("JPEG" !== h(t)) throw new Error("getJpegSize requires a binary string jpeg file");

        for (var n = 256 * t.charCodeAt(4) + t.charCodeAt(5), r = 4, i = t.length; r < i;) {
          if (r += n, 255 !== t.charCodeAt(r)) throw new Error("getJpegSize could not find the size of the image");
          if (192 === t.charCodeAt(r + 1) || 193 === t.charCodeAt(r + 1) || 194 === t.charCodeAt(r + 1) || 195 === t.charCodeAt(r + 1) || 196 === t.charCodeAt(r + 1) || 197 === t.charCodeAt(r + 1) || 198 === t.charCodeAt(r + 1) || 199 === t.charCodeAt(r + 1)) return e = 256 * t.charCodeAt(r + 5) + t.charCodeAt(r + 6), [256 * t.charCodeAt(r + 7) + t.charCodeAt(r + 8), e, t.charCodeAt(r + 9)];
          r += 2, n = 256 * t.charCodeAt(r) + t.charCodeAt(r + 1);
        }
      }(t)), this.isArrayBuffer(t) && (t = new Uint8Array(t)), this.isArrayBufferView(t) && (a = function (t) {
        if (65496 != (t[0] << 8 | t[1])) throw new Error("Supplied data is not a JPEG");

        for (var e, n = t.length, r = (t[4] << 8) + t[5], i = 4; i < n;) {
          if (r = ((e = u(t, i += r))[2] << 8) + e[3], (192 === e[1] || 194 === e[1]) && 255 === e[0] && 7 < r) return {
            width: ((e = u(t, i + 5))[2] << 8) + e[3],
            height: (e[0] << 8) + e[1],
            numcomponents: e[4]
          };
          i += 2;
        }

        throw new Error("getJpegSizeFromBytes could not find the size of the image");
      }(t), t = i || this.arrayBufferToBinaryString(t)), void 0 === o) switch (a.numcomponents) {
        case 1:
          o = this.color_spaces.DEVICE_GRAY;
          break;

        case 4:
          o = this.color_spaces.DEVICE_CMYK;
          break;

        default:
        case 3:
          o = this.color_spaces.DEVICE_RGB;
      }
      return this.createImageInfo(t, a.width, a.height, o, 8, s, e, n);
    }, x.processJPG = function () {
      return this.processJPEG.apply(this, arguments);
    }, x.getImageProperties = function (t) {
      var e,
          n,
          r = "";
      if (_(t) && (t = F(t)), this.isString(t) && ("" !== (r = this.convertStringToImageData(t)) ? t = r : void 0 !== (r = x.loadFile(t)) && (t = r)), n = this.getImageFileTypeByImageData(t), !S(n)) throw new Error("addImage does not support files of type '" + n + "', please ensure that a plugin for '" + n + "' support is added.");
      if (this.supportsArrayBuffer() && (t instanceof Uint8Array || (t = this.binaryStringToUint8Array(t))), !(e = this["process" + n.toUpperCase()](t))) throw new Error("An unknown error occurred whilst processing the image");
      return {
        fileType: n,
        width: e.w,
        height: e.h,
        colorSpace: e.cs,
        compressionMode: e.f,
        bitsPerComponent: e.bpc
      };
    };
  }(lt.API),
  /**
     * @license
     * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
     *
     * Licensed under the MIT License.
     * http://opensource.org/licenses/mit-license
     */
  t = lt.API, lt.API.events.push(["addPage", function (t) {
    this.internal.getPageInfo(t.pageNumber).pageContext.annotations = [];
  }]), t.events.push(["putPage", function (t) {
    for (var e = this.internal.getPageInfoByObjId(t.objId), n = t.pageContext.annotations, r = function r(t) {
      if (void 0 !== t && "" != t) return !0;
    }, i = !1, o = 0; o < n.length && !i; o++) {
      switch ((l = n[o]).type) {
        case "link":
          if (r(l.options.url) || r(l.options.pageNumber)) {
            i = !0;
            break;
          }

        case "reference":
        case "text":
        case "freetext":
          i = !0;
      }
    }

    if (0 != i) {
      this.internal.write("/Annots ["), this.internal.pageSize.height;
      var a = this.internal.getCoordinateString,
          s = this.internal.getVerticalCoordinateString;

      for (o = 0; o < n.length; o++) {
        var l;

        switch ((l = n[o]).type) {
          case "reference":
            this.internal.write(" " + l.object.objId + " 0 R ");
            break;

          case "text":
            var h = this.internal.newAdditionalObject(),
                u = this.internal.newAdditionalObject(),
                c = l.title || "Note";
            m = "<</Type /Annot /Subtype /Text " + (p = "/Rect [" + a(l.bounds.x) + " " + s(l.bounds.y + l.bounds.h) + " " + a(l.bounds.x + l.bounds.w) + " " + s(l.bounds.y) + "] ") + "/Contents (" + l.contents + ")", m += " /Popup " + u.objId + " 0 R", m += " /P " + e.objId + " 0 R", m += " /T (" + c + ") >>", h.content = m;
            var f = h.objId + " 0 R";
            m = "<</Type /Annot /Subtype /Popup " + (p = "/Rect [" + a(l.bounds.x + 30) + " " + s(l.bounds.y + l.bounds.h) + " " + a(l.bounds.x + l.bounds.w + 30) + " " + s(l.bounds.y) + "] ") + " /Parent " + f, l.open && (m += " /Open true"), m += " >>", u.content = m, this.internal.write(h.objId, "0 R", u.objId, "0 R");
            break;

          case "freetext":
            var p = "/Rect [" + a(l.bounds.x) + " " + s(l.bounds.y) + " " + a(l.bounds.x + l.bounds.w) + " " + s(l.bounds.y + l.bounds.h) + "] ",
                d = l.color || "#000000";
            m = "<</Type /Annot /Subtype /FreeText " + p + "/Contents (" + l.contents + ")", m += " /DS(font: Helvetica,sans-serif 12.0pt; text-align:left; color:#" + d + ")", m += " /Border [0 0 0]", m += " >>", this.internal.write(m);
            break;

          case "link":
            if (l.options.name) {
              var g = this.annotations._nameMap[l.options.name];
              l.options.pageNumber = g.page, l.options.top = g.y;
            } else l.options.top || (l.options.top = 0);

            p = "/Rect [" + a(l.x) + " " + s(l.y) + " " + a(l.x + l.w) + " " + s(l.y + l.h) + "] ";
            var m = "";
            if (l.options.url) m = "<</Type /Annot /Subtype /Link " + p + "/Border [0 0 0] /A <</S /URI /URI (" + l.options.url + ") >>";else if (l.options.pageNumber) switch (m = "<</Type /Annot /Subtype /Link " + p + "/Border [0 0 0] /Dest [" + this.internal.getPageInfo(l.options.pageNumber).objId + " 0 R", l.options.magFactor = l.options.magFactor || "XYZ", l.options.magFactor) {
              case "Fit":
                m += " /Fit]";
                break;

              case "FitH":
                m += " /FitH " + l.options.top + "]";
                break;

              case "FitV":
                l.options.left = l.options.left || 0, m += " /FitV " + l.options.left + "]";
                break;

              case "XYZ":
              default:
                var y = s(l.options.top);
                l.options.left = l.options.left || 0, void 0 === l.options.zoom && (l.options.zoom = 0), m += " /XYZ " + l.options.left + " " + y + " " + l.options.zoom + "]";
            }
            "" != m && (m += " >>", this.internal.write(m));
        }
      }

      this.internal.write("]");
    }
  }]), t.createAnnotation = function (t) {
    var e = this.internal.getCurrentPageInfo();

    switch (t.type) {
      case "link":
        this.link(t.bounds.x, t.bounds.y, t.bounds.w, t.bounds.h, t);
        break;

      case "text":
      case "freetext":
        e.pageContext.annotations.push(t);
    }
  }, t.link = function (t, e, n, r, i) {
    this.internal.getCurrentPageInfo().pageContext.annotations.push({
      x: t,
      y: e,
      w: n,
      h: r,
      options: i,
      type: "link"
    });
  }, t.textWithLink = function (t, e, n, r) {
    var i = this.getTextWidth(t),
        o = this.internal.getLineHeight() / this.internal.scaleFactor;
    return this.text(t, e, n), n += .2 * o, this.link(e, n - o, i, o, r), i;
  }, t.getTextWidth = function (t) {
    var e = this.internal.getFontSize();
    return this.getStringUnitWidth(t) * e / this.internal.scaleFactor;
  },
  /**
     * @license
     * Copyright (c) 2017 Aras Abbasi 
     *
     * Licensed under the MIT License.
     * http://opensource.org/licenses/mit-license
     */
  function (t) {
    var h = {
      1569: [65152],
      1570: [65153, 65154],
      1571: [65155, 65156],
      1572: [65157, 65158],
      1573: [65159, 65160],
      1574: [65161, 65162, 65163, 65164],
      1575: [65165, 65166],
      1576: [65167, 65168, 65169, 65170],
      1577: [65171, 65172],
      1578: [65173, 65174, 65175, 65176],
      1579: [65177, 65178, 65179, 65180],
      1580: [65181, 65182, 65183, 65184],
      1581: [65185, 65186, 65187, 65188],
      1582: [65189, 65190, 65191, 65192],
      1583: [65193, 65194],
      1584: [65195, 65196],
      1585: [65197, 65198],
      1586: [65199, 65200],
      1587: [65201, 65202, 65203, 65204],
      1588: [65205, 65206, 65207, 65208],
      1589: [65209, 65210, 65211, 65212],
      1590: [65213, 65214, 65215, 65216],
      1591: [65217, 65218, 65219, 65220],
      1592: [65221, 65222, 65223, 65224],
      1593: [65225, 65226, 65227, 65228],
      1594: [65229, 65230, 65231, 65232],
      1601: [65233, 65234, 65235, 65236],
      1602: [65237, 65238, 65239, 65240],
      1603: [65241, 65242, 65243, 65244],
      1604: [65245, 65246, 65247, 65248],
      1605: [65249, 65250, 65251, 65252],
      1606: [65253, 65254, 65255, 65256],
      1607: [65257, 65258, 65259, 65260],
      1608: [65261, 65262],
      1609: [65263, 65264, 64488, 64489],
      1610: [65265, 65266, 65267, 65268],
      1649: [64336, 64337],
      1655: [64477],
      1657: [64358, 64359, 64360, 64361],
      1658: [64350, 64351, 64352, 64353],
      1659: [64338, 64339, 64340, 64341],
      1662: [64342, 64343, 64344, 64345],
      1663: [64354, 64355, 64356, 64357],
      1664: [64346, 64347, 64348, 64349],
      1667: [64374, 64375, 64376, 64377],
      1668: [64370, 64371, 64372, 64373],
      1670: [64378, 64379, 64380, 64381],
      1671: [64382, 64383, 64384, 64385],
      1672: [64392, 64393],
      1676: [64388, 64389],
      1677: [64386, 64387],
      1678: [64390, 64391],
      1681: [64396, 64397],
      1688: [64394, 64395],
      1700: [64362, 64363, 64364, 64365],
      1702: [64366, 64367, 64368, 64369],
      1705: [64398, 64399, 64400, 64401],
      1709: [64467, 64468, 64469, 64470],
      1711: [64402, 64403, 64404, 64405],
      1713: [64410, 64411, 64412, 64413],
      1715: [64406, 64407, 64408, 64409],
      1722: [64414, 64415],
      1723: [64416, 64417, 64418, 64419],
      1726: [64426, 64427, 64428, 64429],
      1728: [64420, 64421],
      1729: [64422, 64423, 64424, 64425],
      1733: [64480, 64481],
      1734: [64473, 64474],
      1735: [64471, 64472],
      1736: [64475, 64476],
      1737: [64482, 64483],
      1739: [64478, 64479],
      1740: [64508, 64509, 64510, 64511],
      1744: [64484, 64485, 64486, 64487],
      1746: [64430, 64431],
      1747: [64432, 64433]
    },
        a = {
      65247: {
        65154: 65269,
        65156: 65271,
        65160: 65273,
        65166: 65275
      },
      65248: {
        65154: 65270,
        65156: 65272,
        65160: 65274,
        65166: 65276
      },
      65165: {
        65247: {
          65248: {
            65258: 65010
          }
        }
      },
      1617: {
        1612: 64606,
        1613: 64607,
        1614: 64608,
        1615: 64609,
        1616: 64610
      }
    },
        e = {
      1612: 64606,
      1613: 64607,
      1614: 64608,
      1615: 64609,
      1616: 64610
    },
        n = [1570, 1571, 1573, 1575];
    t.__arabicParser__ = {};

    var r = t.__arabicParser__.isInArabicSubstitutionA = function (t) {
      return void 0 !== h[t.charCodeAt(0)];
    },
        u = t.__arabicParser__.isArabicLetter = function (t) {
      return "string" == typeof t && /^[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]+$/.test(t);
    },
        i = t.__arabicParser__.isArabicEndLetter = function (t) {
      return u(t) && r(t) && h[t.charCodeAt(0)].length <= 2;
    },
        o = t.__arabicParser__.isArabicAlfLetter = function (t) {
      return u(t) && 0 <= n.indexOf(t.charCodeAt(0));
    },
        s = (t.__arabicParser__.arabicLetterHasIsolatedForm = function (t) {
      return u(t) && r(t) && 1 <= h[t.charCodeAt(0)].length;
    }, t.__arabicParser__.arabicLetterHasFinalForm = function (t) {
      return u(t) && r(t) && 2 <= h[t.charCodeAt(0)].length;
    }),
        l = (t.__arabicParser__.arabicLetterHasInitialForm = function (t) {
      return u(t) && r(t) && 3 <= h[t.charCodeAt(0)].length;
    }, t.__arabicParser__.arabicLetterHasMedialForm = function (t) {
      return u(t) && r(t) && 4 == h[t.charCodeAt(0)].length;
    }),
        c = t.__arabicParser__.resolveLigatures = function (t) {
      var e = 0,
          n = a,
          r = 0,
          i = "",
          o = 0;

      for (e = 0; e < t.length; e += 1) {
        void 0 !== n[t.charCodeAt(e)] ? (o++, "number" == typeof (n = n[t.charCodeAt(e)]) && (r = -1 !== (r = f(t.charAt(e), t.charAt(e - o), t.charAt(e + 1))) ? r : 0, i += String.fromCharCode(n), n = a, o = 0), e === t.length - 1 && (n = a, i += t.charAt(e - (o - 1)), e -= o - 1, o = 0)) : (n = a, i += t.charAt(e - o), e -= o, o = 0);
      }

      return i;
    },
        f = (t.__arabicParser__.isArabicDiacritic = function (t) {
      return void 0 !== t && void 0 !== e[t.charCodeAt(0)];
    }, t.__arabicParser__.getCorrectForm = function (t, e, n) {
      return u(t) ? !1 === r(t) ? -1 : !s(t) || !u(e) && !u(n) || !u(n) && i(e) || i(t) && !u(e) || i(t) && o(e) || i(t) && i(e) ? 0 : l(t) && u(e) && !i(e) && u(n) && s(n) ? 3 : i(t) || !u(n) ? 1 : 2 : -1;
    }),
        p = t.__arabicParser__.processArabic = t.processArabic = function (t) {
      var e = 0,
          n = 0,
          r = 0,
          i = "",
          o = "",
          a = "",
          s = (t = t || "").split("\\s+"),
          l = [];

      for (e = 0; e < s.length; e += 1) {
        for (l.push(""), n = 0; n < s[e].length; n += 1) {
          i = s[e][n], o = s[e][n - 1], a = s[e][n + 1], u(i) ? (r = f(i, o, a), l[e] += -1 !== r ? String.fromCharCode(h[i.charCodeAt(0)][r]) : i) : l[e] += i;
        }

        l[e] = c(l[e]);
      }

      return l.join(" ");
    };

    t.events.push(["preProcessText", function (t) {
      var e = t.text,
          n = (t.x, t.y, t.options || {}),
          r = (t.mutex, n.lang, []);

      if ("[object Array]" === Object.prototype.toString.call(e)) {
        var i = 0;

        for (r = [], i = 0; i < e.length; i += 1) {
          "[object Array]" === Object.prototype.toString.call(e[i]) ? r.push([p(e[i][0]), e[i][1], e[i][2]]) : r.push([p(e[i])]);
        }

        t.text = r;
      } else t.text = p(e);
    }]);
  }(lt.API), lt.API.autoPrint = function (t) {
    var e;

    switch ((t = t || {}).variant = t.variant || "non-conform", t.variant) {
      case "javascript":
        this.addJS("print({});");
        break;

      case "non-conform":
      default:
        this.internal.events.subscribe("postPutResources", function () {
          e = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/S /Named"), this.internal.out("/Type /Action"), this.internal.out("/N /Print"), this.internal.out(">>"), this.internal.out("endobj");
        }), this.internal.events.subscribe("putCatalog", function () {
          this.internal.out("/OpenAction " + e + " 0 R");
        });
    }

    return this;
  },
  /**
     * @license
     * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
     *
     * Licensed under the MIT License.
     * http://opensource.org/licenses/mit-license
     */
  e = lt.API, (n = function n() {
    var e = void 0;
    Object.defineProperty(this, "pdf", {
      get: function get() {
        return e;
      },
      set: function set(t) {
        e = t;
      }
    });
    var n = 150;
    Object.defineProperty(this, "width", {
      get: function get() {
        return n;
      },
      set: function set(t) {
        n = isNaN(t) || !1 === Number.isInteger(t) || t < 0 ? 150 : t, this.getContext("2d").pageWrapXEnabled && (this.getContext("2d").pageWrapX = n + 1);
      }
    });
    var r = 300;
    Object.defineProperty(this, "height", {
      get: function get() {
        return r;
      },
      set: function set(t) {
        r = isNaN(t) || !1 === Number.isInteger(t) || t < 0 ? 300 : t, this.getContext("2d").pageWrapYEnabled && (this.getContext("2d").pageWrapY = r + 1);
      }
    });
    var i = [];
    Object.defineProperty(this, "childNodes", {
      get: function get() {
        return i;
      },
      set: function set(t) {
        i = t;
      }
    });
    var o = {};
    Object.defineProperty(this, "style", {
      get: function get() {
        return o;
      },
      set: function set(t) {
        o = t;
      }
    }), Object.defineProperty(this, "parentNode", {
      get: function get() {
        return !1;
      }
    });
  }).prototype.getContext = function (t, e) {
    var n;
    if ("2d" !== (t = t || "2d")) return null;

    for (n in e) {
      this.pdf.context2d.hasOwnProperty(n) && (this.pdf.context2d[n] = e[n]);
    }

    return (this.pdf.context2d._canvas = this).pdf.context2d;
  }, n.prototype.toDataURL = function () {
    throw new Error("toDataURL is not implemented.");
  }, e.events.push(["initialized", function () {
    this.canvas = new n(), this.canvas.pdf = this;
  }]),
  /** 
     * @license
     * ====================================================================
     * Copyright (c) 2013 Youssef Beddad, youssef.beddad@gmail.com
     *               2013 Eduardo Menezes de Morais, eduardo.morais@usp.br
     *               2013 Lee Driscoll, https://github.com/lsdriscoll
     *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria
     *               2014 James Hall, james@parall.ax
     *               2014 Diego Casorran, https://github.com/diegocr
     *
     * 
     * ====================================================================
     */
  _ = lt.API, F = {
    x: void 0,
    y: void 0,
    w: void 0,
    h: void 0,
    ln: void 0
  }, P = 1, p = function p(t, e, n, r, i) {
    F = {
      x: t,
      y: e,
      w: n,
      h: r,
      ln: i
    };
  }, d = function d() {
    return F;
  }, k = {
    left: 0,
    top: 0,
    bottom: 0
  }, _.setHeaderFunction = function (t) {
    l = t;
  }, _.getTextDimensions = function (t, e) {
    var n = this.table_font_size || this.internal.getFontSize(),
        r = (this.internal.getFont().fontStyle, (e = e || {}).scaleFactor || this.internal.scaleFactor),
        i = 0,
        o = 0,
        a = 0;
    if ("string" == typeof t) 0 != (i = this.getStringUnitWidth(t) * n) && (o = 1);else {
      if ("[object Array]" !== Object.prototype.toString.call(t)) throw new Error("getTextDimensions expects text-parameter to be of type String or an Array of Strings.");

      for (var s = 0; s < t.length; s++) {
        i < (a = this.getStringUnitWidth(t[s]) * n) && (i = a);
      }

      0 !== i && (o = t.length);
    }
    return {
      w: i /= r,
      h: Math.max((o * n * this.getLineHeightFactor() - n * (this.getLineHeightFactor() - 1)) / r, 0)
    };
  }, _.cellAddPage = function () {
    var t = this.margins || k;
    this.addPage(), p(t.left, t.top, void 0, void 0), P += 1;
  }, _.cellInitialize = function () {
    F = {
      x: void 0,
      y: void 0,
      w: void 0,
      h: void 0,
      ln: void 0
    }, P = 1;
  }, _.cell = function (t, e, n, r, i, o, a) {
    var s = d(),
        l = !1;
    if (void 0 !== s.ln) if (s.ln === o) t = s.x + s.w, e = s.y;else {
      var h = this.margins || k;
      s.y + s.h + r + 13 >= this.internal.pageSize.getHeight() - h.bottom && (this.cellAddPage(), l = !0, this.printHeaders && this.tableHeaderRow && this.printHeaderRow(o, !0)), e = d().y + d().h, l && (e = 23);
    }
    if (void 0 !== i[0]) if (this.printingHeaderRow ? this.rect(t, e, n, r, "FD") : this.rect(t, e, n, r), "right" === a) {
      i instanceof Array || (i = [i]);

      for (var u = 0; u < i.length; u++) {
        var c = i[u],
            f = this.getStringUnitWidth(c) * this.internal.getFontSize() / this.internal.scaleFactor;
        this.text(c, t + n - f - 3, e + this.internal.getLineHeight() * (u + 1));
      }
    } else this.text(i, t + 3, e + this.internal.getLineHeight());
    return p(t, e, n, r, o), this;
  }, _.arrayMax = function (t, e) {
    var n,
        r,
        i,
        o = t[0];

    for (n = 0, r = t.length; n < r; n += 1) {
      i = t[n], e ? -1 === e(o, i) && (o = i) : o < i && (o = i);
    }

    return o;
  }, _.table = function (t, e, n, r, i) {
    if (!n) throw "No data for PDF table";
    var o,
        a,
        s,
        l,
        h,
        u,
        c,
        f,
        p,
        d,
        g = [],
        m = [],
        y = {},
        v = {},
        w = [],
        b = [],
        x = !1,
        N = !0,
        L = 12,
        A = k;
    if (A.width = this.internal.pageSize.getWidth(), i && (!0 === i.autoSize && (x = !0), !1 === i.printHeaders && (N = !1), i.fontSize && (L = i.fontSize), i.css && void 0 !== i.css["font-size"] && (L = 16 * i.css["font-size"]), i.margins && (A = i.margins)), this.lnMod = 0, F = {
      x: void 0,
      y: void 0,
      w: void 0,
      h: void 0,
      ln: void 0
    }, P = 1, this.printHeaders = N, this.margins = A, this.setFontSize(L), this.table_font_size = L, null == r) g = Object.keys(n[0]);else if (r[0] && "string" != typeof r[0]) for (a = 0, s = r.length; a < s; a += 1) {
      o = r[a], g.push(o.name), m.push(o.prompt), v[o.name] = o.width * (19.049976 / 25.4);
    } else g = r;
    if (x) for (d = function d(t) {
      return t[o];
    }, a = 0, s = g.length; a < s; a += 1) {
      for (y[o = g[a]] = n.map(d), w.push(this.getTextDimensions(m[a] || o, {
        scaleFactor: 1
      }).w), c = 0, l = (u = y[o]).length; c < l; c += 1) {
        h = u[c], w.push(this.getTextDimensions(h, {
          scaleFactor: 1
        }).w);
      }

      v[o] = _.arrayMax(w), w = [];
    }

    if (N) {
      var S = this.calculateLineHeight(g, v, m.length ? m : g);

      for (a = 0, s = g.length; a < s; a += 1) {
        o = g[a], b.push([t, e, v[o], S, String(m.length ? m[a] : o)]);
      }

      this.setTableHeaderRow(b), this.printHeaderRow(1, !1);
    }

    for (a = 0, s = n.length; a < s; a += 1) {
      for (f = n[a], S = this.calculateLineHeight(g, v, f), c = 0, p = g.length; c < p; c += 1) {
        o = g[c], this.cell(t, e, v[o], S, f[o], a + 2, o.align);
      }
    }

    return this.lastCellPos = F, this.table_x = t, this.table_y = e, this;
  }, _.calculateLineHeight = function (t, e, n) {
    for (var r, i = 0, o = 0; o < t.length; o++) {
      n[r = t[o]] = this.splitTextToSize(String(n[r]), e[r] - 3);
      var a = this.internal.getLineHeight() * n[r].length + 3;
      i < a && (i = a);
    }

    return i;
  }, _.setTableHeaderRow = function (t) {
    this.tableHeaderRow = t;
  }, _.printHeaderRow = function (t, e) {
    if (!this.tableHeaderRow) throw "Property tableHeaderRow does not exist.";
    var n, r, i, o;

    if (this.printingHeaderRow = !0, void 0 !== l) {
      var a = l(this, P);
      p(a[0], a[1], a[2], a[3], -1);
    }

    this.setFontStyle("bold");
    var s = [];

    for (i = 0, o = this.tableHeaderRow.length; i < o; i += 1) {
      this.setFillColor(200, 200, 200), n = this.tableHeaderRow[i], e && (this.margins.top = 13, n[1] = this.margins && this.margins.top || 0, s.push(n)), r = [].concat(n), this.cell.apply(this, r.concat(t));
    }

    0 < s.length && this.setTableHeaderRow(s), this.setFontStyle("normal"), this.printingHeaderRow = !1;
  },
  /**
     * jsPDF Context2D PlugIn Copyright (c) 2014 Steven Spungin (TwelveTone LLC) steven@twelvetone.tv
     *
     * Licensed under the MIT License. http://opensource.org/licenses/mit-license
     */
  function (t, e) {
    var l,
        i,
        o,
        h,
        u,
        c = function c(t) {
      return t = t || {}, this.isStrokeTransparent = t.isStrokeTransparent || !1, this.strokeOpacity = t.strokeOpacity || 1, this.strokeStyle = t.strokeStyle || "#000000", this.fillStyle = t.fillStyle || "#000000", this.isFillTransparent = t.isFillTransparent || !1, this.fillOpacity = t.fillOpacity || 1, this.font = t.font || "10px sans-serif", this.textBaseline = t.textBaseline || "alphabetic", this.textAlign = t.textAlign || "left", this.lineWidth = t.lineWidth || 1, this.lineJoin = t.lineJoin || "miter", this.lineCap = t.lineCap || "butt", this.path = t.path || [], this.transform = void 0 !== t.transform ? t.transform.clone() : new M(), this.globalCompositeOperation = t.globalCompositeOperation || "normal", this.globalAlpha = t.globalAlpha || 1, this.clip_path = t.clip_path || [], this.currentPoint = t.currentPoint || new j(), this.miterLimit = t.miterLimit || 10, this.lastPoint = t.lastPoint || new j(), this.ignoreClearRect = "boolean" != typeof t.ignoreClearRect || t.ignoreClearRect, this;
    };

    t.events.push(["initialized", function () {
      this.context2d = new n(this), l = this.internal.f2, this.internal.f3, i = this.internal.getCoordinateString, o = this.internal.getVerticalCoordinateString, h = this.internal.getHorizontalCoordinate, u = this.internal.getVerticalCoordinate;
    }]);

    var n = function n(t) {
      Object.defineProperty(this, "canvas", {
        get: function get() {
          return {
            parentNode: !1,
            style: !1
          };
        }
      }), Object.defineProperty(this, "pdf", {
        get: function get() {
          return t;
        }
      });
      var e = !1;
      Object.defineProperty(this, "pageWrapXEnabled", {
        get: function get() {
          return e;
        },
        set: function set(t) {
          e = Boolean(t);
        }
      });
      var n = !1;
      Object.defineProperty(this, "pageWrapYEnabled", {
        get: function get() {
          return n;
        },
        set: function set(t) {
          n = Boolean(t);
        }
      });
      var r = 0;
      Object.defineProperty(this, "posX", {
        get: function get() {
          return r;
        },
        set: function set(t) {
          isNaN(t) || (r = t);
        }
      });
      var i = 0;
      Object.defineProperty(this, "posY", {
        get: function get() {
          return i;
        },
        set: function set(t) {
          isNaN(t) || (i = t);
        }
      });
      var o = !1;
      Object.defineProperty(this, "autoPaging", {
        get: function get() {
          return o;
        },
        set: function set(t) {
          o = Boolean(t);
        }
      });
      var a = 0;
      Object.defineProperty(this, "lastBreak", {
        get: function get() {
          return a;
        },
        set: function set(t) {
          a = t;
        }
      });
      var s = [];
      Object.defineProperty(this, "pageBreaks", {
        get: function get() {
          return s;
        },
        set: function set(t) {
          s = t;
        }
      });
      var l = new c();
      Object.defineProperty(this, "ctx", {
        get: function get() {
          return l;
        },
        set: function set(t) {
          t instanceof c && (l = t);
        }
      }), Object.defineProperty(this, "path", {
        get: function get() {
          return l.path;
        },
        set: function set(t) {
          l.path = t;
        }
      });
      var h = [];
      Object.defineProperty(this, "ctxStack", {
        get: function get() {
          return h;
        },
        set: function set(t) {
          h = t;
        }
      }), Object.defineProperty(this, "fillStyle", {
        get: function get() {
          return this.ctx.fillStyle;
        },
        set: function set(t) {
          var e;
          e = f(t), this.ctx.fillStyle = e.style, this.ctx.isFillTransparent = 0 === e.a, this.ctx.fillOpacity = e.a, this.pdf.setFillColor(e.r, e.g, e.b, {
            a: e.a
          }), this.pdf.setTextColor(e.r, e.g, e.b, {
            a: e.a
          });
        }
      }), Object.defineProperty(this, "strokeStyle", {
        get: function get() {
          return this.ctx.strokeStyle;
        },
        set: function set(t) {
          var e = f(t);
          this.ctx.strokeStyle = e.style, this.ctx.isStrokeTransparent = 0 === e.a, this.ctx.strokeOpacity = e.a, 0 === e.a ? this.pdf.setDrawColor(255, 255, 255) : (e.a, this.pdf.setDrawColor(e.r, e.g, e.b));
        }
      }), Object.defineProperty(this, "lineCap", {
        get: function get() {
          return this.ctx.lineCap;
        },
        set: function set(t) {
          -1 !== ["butt", "round", "square"].indexOf(t) && (this.ctx.lineCap = t, this.pdf.setLineCap(t));
        }
      }), Object.defineProperty(this, "lineWidth", {
        get: function get() {
          return this.ctx.lineWidth;
        },
        set: function set(t) {
          isNaN(t) || (this.ctx.lineWidth = t, this.pdf.setLineWidth(t));
        }
      }), Object.defineProperty(this, "lineJoin", {
        get: function get() {
          return this.ctx.lineJoin;
        },
        set: function set(t) {
          -1 !== ["bevel", "round", "miter"].indexOf(t) && (this.ctx.lineJoin = t, this.pdf.setLineJoin(t));
        }
      }), Object.defineProperty(this, "miterLimit", {
        get: function get() {
          return this.ctx.miterLimit;
        },
        set: function set(t) {
          isNaN(t) || (this.ctx.miterLimit = t, this.pdf.setMiterLimit(t));
        }
      }), Object.defineProperty(this, "textBaseline", {
        get: function get() {
          return this.ctx.textBaseline;
        },
        set: function set(t) {
          this.ctx.textBaseline = t;
        }
      }), Object.defineProperty(this, "textAlign", {
        get: function get() {
          return this.ctx.textAlign;
        },
        set: function set(t) {
          -1 !== ["right", "end", "center", "left", "start"].indexOf(t) && (this.ctx.textAlign = t);
        }
      }), Object.defineProperty(this, "font", {
        get: function get() {
          return this.ctx.font;
        },
        set: function set(t) {
          var e;

          if (this.ctx.font = t, null !== (e = /^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-_,\"\'\sa-z]+?)\s*$/i.exec(t))) {
            var n = e[1],
                r = (e[2], e[3]),
                i = e[4],
                o = e[5],
                a = e[6];
            i = "px" === o ? Math.floor(parseFloat(i)) : "em" === o ? Math.floor(parseFloat(i) * this.pdf.getFontSize()) : Math.floor(parseFloat(i)), this.pdf.setFontSize(i);
            var s = "";
            ("bold" === r || 700 <= parseInt(r, 10) || "bold" === n) && (s = "bold"), "italic" === n && (s += "italic"), 0 === s.length && (s = "normal");

            for (var l = "", h = a.toLowerCase().replace(/"|'/g, "").split(/\s*,\s*/), u = {
              arial: "Helvetica",
              verdana: "Helvetica",
              helvetica: "Helvetica",
              "sans-serif": "Helvetica",
              fixed: "Courier",
              monospace: "Courier",
              terminal: "Courier",
              courier: "Courier",
              times: "Times",
              cursive: "Times",
              fantasy: "Times",
              serif: "Times"
            }, c = 0; c < h.length; c++) {
              if (void 0 !== this.pdf.internal.getFont(h[c], s, {
                noFallback: !0,
                disableWarning: !0
              })) {
                l = h[c];
                break;
              }

              if ("bolditalic" === s && void 0 !== this.pdf.internal.getFont(h[c], "bold", {
                noFallback: !0,
                disableWarning: !0
              })) l = h[c], s = "bold";else if (void 0 !== this.pdf.internal.getFont(h[c], "normal", {
                noFallback: !0,
                disableWarning: !0
              })) {
                l = h[c], s = "normal";
                break;
              }
            }

            if ("" === l) for (c = 0; c < h.length; c++) {
              if (u[h[c]]) {
                l = u[h[c]];
                break;
              }
            }
            l = "" === l ? "Times" : l, this.pdf.setFont(l, s);
          }
        }
      }), Object.defineProperty(this, "globalCompositeOperation", {
        get: function get() {
          return this.ctx.globalCompositeOperation;
        },
        set: function set(t) {
          this.ctx.globalCompositeOperation = t;
        }
      }), Object.defineProperty(this, "globalAlpha", {
        get: function get() {
          return this.ctx.globalAlpha;
        },
        set: function set(t) {
          this.ctx.globalAlpha = t;
        }
      }), Object.defineProperty(this, "ignoreClearRect", {
        get: function get() {
          return this.ctx.ignoreClearRect;
        },
        set: function set(t) {
          this.ctx.ignoreClearRect = Boolean(t);
        }
      });
    };

    n.prototype.fill = function () {
      r.call(this, "fill", !1);
    }, n.prototype.stroke = function () {
      r.call(this, "stroke", !1);
    }, n.prototype.beginPath = function () {
      this.path = [{
        type: "begin"
      }];
    }, n.prototype.moveTo = function (t, e) {
      if (isNaN(t) || isNaN(e)) throw console.error("jsPDF.context2d.moveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.moveTo");
      var n = this.ctx.transform.applyToPoint(new j(t, e));
      this.path.push({
        type: "mt",
        x: n.x,
        y: n.y
      }), this.ctx.lastPoint = new j(t, e);
    }, n.prototype.closePath = function () {
      var t = new j(0, 0),
          e = 0;

      for (e = this.path.length - 1; -1 !== e; e--) {
        if ("begin" === this.path[e].type && "object" === se(this.path[e + 1]) && "number" == typeof this.path[e + 1].x) {
          t = new j(this.path[e + 1].x, this.path[e + 1].y), this.path.push({
            type: "lt",
            x: t.x,
            y: t.y
          });
          break;
        }
      }

      "object" === se(this.path[e + 2]) && "number" == typeof this.path[e + 2].x && this.path.push(JSON.parse(JSON.stringify(this.path[e + 2]))), this.path.push({
        type: "close"
      }), this.ctx.lastPoint = new j(t.x, t.y);
    }, n.prototype.lineTo = function (t, e) {
      if (isNaN(t) || isNaN(e)) throw console.error("jsPDF.context2d.lineTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.lineTo");
      var n = this.ctx.transform.applyToPoint(new j(t, e));
      this.path.push({
        type: "lt",
        x: n.x,
        y: n.y
      }), this.ctx.lastPoint = new j(n.x, n.y);
    }, n.prototype.clip = function () {
      this.ctx.clip_path = JSON.parse(JSON.stringify(this.path)), r.call(this, null, !0);
    }, n.prototype.quadraticCurveTo = function (t, e, n, r) {
      if (isNaN(n) || isNaN(r) || isNaN(t) || isNaN(e)) throw console.error("jsPDF.context2d.quadraticCurveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.quadraticCurveTo");
      var i = this.ctx.transform.applyToPoint(new j(n, r)),
          o = this.ctx.transform.applyToPoint(new j(t, e));
      this.path.push({
        type: "qct",
        x1: o.x,
        y1: o.y,
        x: i.x,
        y: i.y
      }), this.ctx.lastPoint = new j(i.x, i.y);
    }, n.prototype.bezierCurveTo = function (t, e, n, r, i, o) {
      if (isNaN(i) || isNaN(o) || isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r)) throw console.error("jsPDF.context2d.bezierCurveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.bezierCurveTo");
      var a = this.ctx.transform.applyToPoint(new j(i, o)),
          s = this.ctx.transform.applyToPoint(new j(t, e)),
          l = this.ctx.transform.applyToPoint(new j(n, r));
      this.path.push({
        type: "bct",
        x1: s.x,
        y1: s.y,
        x2: l.x,
        y2: l.y,
        x: a.x,
        y: a.y
      }), this.ctx.lastPoint = new j(a.x, a.y);
    }, n.prototype.arc = function (t, e, n, r, i, o) {
      if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r) || isNaN(i)) throw console.error("jsPDF.context2d.arc: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.arc");

      if (o = Boolean(o), !this.ctx.transform.isIdentity) {
        var a = this.ctx.transform.applyToPoint(new j(t, e));
        t = a.x, e = a.y;
        var s = this.ctx.transform.applyToPoint(new j(0, n)),
            l = this.ctx.transform.applyToPoint(new j(0, 0));
        n = Math.sqrt(Math.pow(s.x - l.x, 2) + Math.pow(s.y - l.y, 2));
      }

      Math.abs(i - r) >= 2 * Math.PI && (r = 0, i = 2 * Math.PI), this.path.push({
        type: "arc",
        x: t,
        y: e,
        radius: n,
        startAngle: r,
        endAngle: i,
        counterclockwise: o
      });
    }, n.prototype.arcTo = function (t, e, n, r, i) {
      throw new Error("arcTo not implemented.");
    }, n.prototype.rect = function (t, e, n, r) {
      if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r)) throw console.error("jsPDF.context2d.rect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.rect");
      this.moveTo(t, e), this.lineTo(t + n, e), this.lineTo(t + n, e + r), this.lineTo(t, e + r), this.lineTo(t, e), this.lineTo(t + n, e), this.lineTo(t, e);
    }, n.prototype.fillRect = function (t, e, n, r) {
      if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r)) throw console.error("jsPDF.context2d.fillRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.fillRect");

      if (!N.call(this)) {
        var i = {};
        "butt" !== this.lineCap && (i.lineCap = this.lineCap, this.lineCap = "butt"), "miter" !== this.lineJoin && (i.lineJoin = this.lineJoin, this.lineJoin = "miter"), this.beginPath(), this.rect(t, e, n, r), this.fill(), i.hasOwnProperty("lineCap") && (this.lineCap = i.lineCap), i.hasOwnProperty("lineJoin") && (this.lineJoin = i.lineJoin);
      }
    }, n.prototype.strokeRect = function (t, e, n, r) {
      if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r)) throw console.error("jsPDF.context2d.strokeRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.strokeRect");
      L.call(this) || (this.beginPath(), this.rect(t, e, n, r), this.stroke());
    }, n.prototype.clearRect = function (t, e, n, r) {
      if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r)) throw console.error("jsPDF.context2d.clearRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.clearRect");
      this.ignoreClearRect || (this.fillStyle = "#ffffff", this.fillRect(t, e, n, r));
    }, n.prototype.save = function (t) {
      t = "boolean" != typeof t || t;

      for (var e = this.pdf.internal.getCurrentPageInfo().pageNumber, n = 0; n < this.pdf.internal.getNumberOfPages(); n++) {
        this.pdf.setPage(n + 1), this.pdf.internal.out("q");
      }

      if (this.pdf.setPage(e), t) {
        this.ctx.fontSize = this.pdf.internal.getFontSize();
        var r = new c(this.ctx);
        this.ctxStack.push(this.ctx), this.ctx = r;
      }
    }, n.prototype.restore = function (t) {
      t = "boolean" != typeof t || t;

      for (var e = this.pdf.internal.getCurrentPageInfo().pageNumber, n = 0; n < this.pdf.internal.getNumberOfPages(); n++) {
        this.pdf.setPage(n + 1), this.pdf.internal.out("Q");
      }

      this.pdf.setPage(e), t && 0 !== this.ctxStack.length && (this.ctx = this.ctxStack.pop(), this.fillStyle = this.ctx.fillStyle, this.strokeStyle = this.ctx.strokeStyle, this.font = this.ctx.font, this.lineCap = this.ctx.lineCap, this.lineWidth = this.ctx.lineWidth, this.lineJoin = this.ctx.lineJoin);
    }, n.prototype.toDataURL = function () {
      throw new Error("toDataUrl not implemented.");
    };

    var f = function f(t) {
      var e, n, r, i;
      if (!0 === t.isCanvasGradient && (t = t.getColor()), !t) return {
        r: 0,
        g: 0,
        b: 0,
        a: 0,
        style: t
      };
      if (/transparent|rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*0+\s*\)/.test(t)) i = r = n = e = 0;else {
        var o = /rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(t);
        if (null !== o) e = parseInt(o[1]), n = parseInt(o[2]), r = parseInt(o[3]), i = 1;else if (null !== (o = /rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d\.]+)\s*\)/.exec(t))) e = parseInt(o[1]), n = parseInt(o[2]), r = parseInt(o[3]), i = parseFloat(o[4]);else {
          if (i = 1, "string" == typeof t && "#" !== t.charAt(0)) {
            var a = new RGBColor(t);
            t = a.ok ? a.toHex() : "#000000";
          }

          4 === t.length ? (e = t.substring(1, 2), e += e, n = t.substring(2, 3), n += n, r = t.substring(3, 4), r += r) : (e = t.substring(1, 3), n = t.substring(3, 5), r = t.substring(5, 7)), e = parseInt(e, 16), n = parseInt(n, 16), r = parseInt(r, 16);
        }
      }
      return {
        r: e,
        g: n,
        b: r,
        a: i,
        style: t
      };
    },
        N = function N() {
      return this.ctx.isFillTransparent || 0 == this.globalAlpha;
    },
        L = function L() {
      return Boolean(this.ctx.isStrokeTransparent || 0 == this.globalAlpha);
    };

    n.prototype.fillText = function (t, e, n, r) {
      if (isNaN(e) || isNaN(n) || "string" != typeof t) throw console.error("jsPDF.context2d.fillText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.fillText");

      if (r = isNaN(r) ? void 0 : r, !N.call(this)) {
        n = a.call(this, n);
        var i = B(this.ctx.transform.rotation),
            o = this.ctx.transform.scaleX;
        s.call(this, {
          text: t,
          x: e,
          y: n,
          scale: o,
          angle: i,
          align: this.textAlign,
          maxWidth: r
        });
      }
    }, n.prototype.strokeText = function (t, e, n, r) {
      if (isNaN(e) || isNaN(n) || "string" != typeof t) throw console.error("jsPDF.context2d.strokeText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.strokeText");

      if (!L.call(this)) {
        r = isNaN(r) ? void 0 : r, n = a.call(this, n);
        var i = B(this.ctx.transform.rotation),
            o = this.ctx.transform.scaleX;
        s.call(this, {
          text: t,
          x: e,
          y: n,
          scale: o,
          renderingMode: "stroke",
          angle: i,
          align: this.textAlign,
          maxWidth: r
        });
      }
    }, n.prototype.measureText = function (t) {
      if ("string" != typeof t) throw console.error("jsPDF.context2d.measureText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.measureText");
      var e = this.pdf,
          n = this.pdf.internal.scaleFactor,
          r = e.internal.getFontSize(),
          i = e.getStringUnitWidth(t) * r / e.internal.scaleFactor;
      return new function (t) {
        var e = (t = t || {}).width || 0;
        return Object.defineProperty(this, "width", {
          get: function get() {
            return e;
          }
        }), this;
      }({
        width: i *= Math.round(96 * n / 72 * 1e4) / 1e4
      });
    }, n.prototype.scale = function (t, e) {
      if (isNaN(t) || isNaN(e)) throw console.error("jsPDF.context2d.scale: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.scale");
      var n = new M(t, 0, 0, e, 0, 0);
      this.ctx.transform = this.ctx.transform.multiply(n);
    }, n.prototype.rotate = function (t) {
      if (isNaN(t)) throw console.error("jsPDF.context2d.rotate: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.rotate");
      var e = new M(Math.cos(t), Math.sin(t), -Math.sin(t), Math.cos(t), 0, 0);
      this.ctx.transform = this.ctx.transform.multiply(e);
    }, n.prototype.translate = function (t, e) {
      if (isNaN(t) || isNaN(e)) throw console.error("jsPDF.context2d.translate: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.translate");
      var n = new M(1, 0, 0, 1, t, e);
      this.ctx.transform = this.ctx.transform.multiply(n);
    }, n.prototype.transform = function (t, e, n, r, i, o) {
      if (isNaN(t) || isNaN(e) || isNaN(n) || isNaN(r) || isNaN(i) || isNaN(o)) throw console.error("jsPDF.context2d.transform: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.transform");
      var a = new M(t, e, n, r, i, o);
      this.ctx.transform = this.ctx.transform.multiply(a);
    }, n.prototype.setTransform = function (t, e, n, r, i, o) {
      t = isNaN(t) ? 1 : t, e = isNaN(e) ? 0 : e, n = isNaN(n) ? 0 : n, r = isNaN(r) ? 1 : r, i = isNaN(i) ? 0 : i, o = isNaN(o) ? 0 : o, this.ctx.transform = new M(t, e, n, r, i, o);
    }, n.prototype.drawImage = function (t, e, n, r, i, o, a, s, l) {
      var h = this.pdf.getImageProperties(t),
          u = 1,
          c = 1,
          f = 1,
          p = 1;
      void 0 !== r && void 0 !== s && (f = s / r, p = l / i, u = h.width / r * s / r, c = h.height / i * l / i), void 0 === o && (o = e, a = n, n = e = 0), void 0 !== r && void 0 === s && (s = r, l = i), void 0 === r && void 0 === s && (s = h.width, l = h.height);
      var d = this.ctx.transform.decompose(),
          g = B(d.rotate.shx);
      d.scale.sx, d.scale.sy;

      for (var m, y = new M(), v = ((y = (y = (y = y.multiply(d.translate)).multiply(d.skew)).multiply(d.scale)).applyToPoint(new j(s, l)), y.applyToRectangle(new E(o - e * f, a - n * p, r * u, i * c))), w = F.call(this, v), b = [], x = 0; x < w.length; x += 1) {
        -1 === b.indexOf(w[x]) && b.push(w[x]);
      }

      if (b.sort(), this.autoPaging) for (var N = b[0], L = b[b.length - 1], A = N; A < L + 1; A++) {
        if (this.pdf.setPage(A), 0 !== this.ctx.clip_path.length) {
          var S = this.path;
          m = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = P(m, this.posX, -1 * this.pdf.internal.pageSize.height * (A - 1) + this.posY), k.call(this, "fill", !0), this.path = S;
        }

        var _ = JSON.parse(JSON.stringify(v));

        _ = P([_], this.posX, -1 * this.pdf.internal.pageSize.height * (A - 1) + this.posY)[0], this.pdf.addImage(t, "jpg", _.x, _.y, _.w, _.h, null, null, g);
      } else this.pdf.addImage(t, "jpg", v.x, v.y, v.w, v.h, null, null, g);
    };

    var F = function F(t, e, n) {
      var r = [];

      switch (e = e || this.pdf.internal.pageSize.width, n = n || this.pdf.internal.pageSize.height, t.type) {
        default:
        case "mt":
        case "lt":
          r.push(Math.floor((t.y + this.posY) / n) + 1);
          break;

        case "arc":
          r.push(Math.floor((t.y + this.posY - t.radius) / n) + 1), r.push(Math.floor((t.y + this.posY + t.radius) / n) + 1);
          break;

        case "qct":
          var i = w(this.ctx.lastPoint.x, this.ctx.lastPoint.y, t.x1, t.y1, t.x, t.y);
          r.push(Math.floor(i.y / n) + 1), r.push(Math.floor((i.y + i.h) / n) + 1);
          break;

        case "bct":
          var o = b(this.ctx.lastPoint.x, this.ctx.lastPoint.y, t.x1, t.y1, t.x2, t.y2, t.x, t.y);
          r.push(Math.floor(o.y / n) + 1), r.push(Math.floor((o.y + o.h) / n) + 1);
          break;

        case "rect":
          r.push(Math.floor((t.y + this.posY) / n) + 1), r.push(Math.floor((t.y + t.h + this.posY) / n) + 1);
      }

      for (var a = 0; a < r.length; a += 1) {
        for (; this.pdf.internal.getNumberOfPages() < r[a];) {
          v.call(this);
        }
      }

      return r;
    },
        v = function v() {
      var t = this.fillStyle,
          e = this.strokeStyle,
          n = this.font,
          r = this.lineCap,
          i = this.lineWidth,
          o = this.lineJoin;
      this.pdf.addPage(), this.fillStyle = t, this.strokeStyle = e, this.font = n, this.lineCap = r, this.lineWidth = i, this.lineJoin = o;
    },
        P = function P(t, e, n) {
      for (var r = 0; r < t.length; r++) {
        switch (t[r].type) {
          case "bct":
            t[r].x2 += e, t[r].y2 += n;

          case "qct":
            t[r].x1 += e, t[r].y1 += n;

          case "mt":
          case "lt":
          case "arc":
          default:
            t[r].x += e, t[r].y += n;
        }
      }

      return t;
    },
        r = function r(t, e) {
      for (var n, r, i = this.fillStyle, o = this.strokeStyle, a = (this.font, this.lineCap), s = this.lineWidth, l = this.lineJoin, h = JSON.parse(JSON.stringify(this.path)), u = JSON.parse(JSON.stringify(this.path)), c = [], f = 0; f < u.length; f++) {
        if (void 0 !== u[f].x) for (var p = F.call(this, u[f]), d = 0; d < p.length; d += 1) {
          -1 === c.indexOf(p[d]) && c.push(p[d]);
        }
      }

      for (f = 0; f < c.length; f++) {
        for (; this.pdf.internal.getNumberOfPages() < c[f];) {
          v.call(this);
        }
      }

      if (c.sort(), this.autoPaging) {
        var g = c[0],
            m = c[c.length - 1];

        for (f = g; f < m + 1; f++) {
          if (this.pdf.setPage(f), this.fillStyle = i, this.strokeStyle = o, this.lineCap = a, this.lineWidth = s, this.lineJoin = l, 0 !== this.ctx.clip_path.length) {
            var y = this.path;
            n = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = P(n, this.posX, -1 * this.pdf.internal.pageSize.height * (f - 1) + this.posY), k.call(this, t, !0), this.path = y;
          }

          r = JSON.parse(JSON.stringify(h)), this.path = P(r, this.posX, -1 * this.pdf.internal.pageSize.height * (f - 1) + this.posY), !1 !== e && 0 !== f || k.call(this, t, e);
        }
      } else k.call(this, t, e);

      this.path = h;
    },
        k = function k(t, e) {
      if (("stroke" !== t || e || !L.call(this)) && ("stroke" === t || e || !N.call(this))) {
        var n = [];
        this.ctx.globalAlpha;
        this.ctx.fillOpacity < 1 && this.ctx.fillOpacity;

        for (var r, i = this.path, o = 0; o < i.length; o++) {
          var a = i[o];

          switch (a.type) {
            case "begin":
              n.push({
                begin: !0
              });
              break;

            case "close":
              n.push({
                close: !0
              });
              break;

            case "mt":
              n.push({
                start: a,
                deltas: [],
                abs: []
              });
              break;

            case "lt":
              var s = n.length;

              if (!isNaN(i[o - 1].x)) {
                var l = [a.x - i[o - 1].x, a.y - i[o - 1].y];
                if (0 < s) for (; 0 <= s; s--) {
                  if (!0 !== n[s - 1].close && !0 !== n[s - 1].begin) {
                    n[s - 1].deltas.push(l), n[s - 1].abs.push(a);
                    break;
                  }
                }
              }

              break;

            case "bct":
              l = [a.x1 - i[o - 1].x, a.y1 - i[o - 1].y, a.x2 - i[o - 1].x, a.y2 - i[o - 1].y, a.x - i[o - 1].x, a.y - i[o - 1].y];
              n[n.length - 1].deltas.push(l);
              break;

            case "qct":
              var h = i[o - 1].x + 2 / 3 * (a.x1 - i[o - 1].x),
                  u = i[o - 1].y + 2 / 3 * (a.y1 - i[o - 1].y),
                  c = a.x + 2 / 3 * (a.x1 - a.x),
                  f = a.y + 2 / 3 * (a.y1 - a.y),
                  p = a.x,
                  d = a.y;
              l = [h - i[o - 1].x, u - i[o - 1].y, c - i[o - 1].x, f - i[o - 1].y, p - i[o - 1].x, d - i[o - 1].y];
              n[n.length - 1].deltas.push(l);
              break;

            case "arc":
              n.push({
                deltas: [],
                abs: [],
                arc: !0
              }), Array.isArray(n[n.length - 1].abs) && n[n.length - 1].abs.push(a);
          }
        }

        r = e ? null : "stroke" === t ? "stroke" : "fill";

        for (o = 0; o < n.length; o++) {
          if (n[o].arc) for (var g = n[o].abs, m = 0; m < g.length; m++) {
            var y = g[m];

            if (void 0 !== y.startAngle) {
              var v = B(y.startAngle),
                  w = B(y.endAngle),
                  b = y.x,
                  x = y.y;
              A.call(this, b, x, y.radius, v, w, y.counterclockwise, r, e);
            } else I.call(this, y.x, y.y);
          }

          if (!n[o].arc && !0 !== n[o].close && !0 !== n[o].begin) {
            b = n[o].start.x, x = n[o].start.y;
            C.call(this, n[o].deltas, b, x, null, null);
          }
        }

        r && S.call(this, r), e && _.call(this);
      }
    },
        a = function a(t) {
      var e = this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor,
          n = e * (this.pdf.internal.getLineHeightFactor() - 1);

      switch (this.ctx.textBaseline) {
        case "bottom":
          return t - n;

        case "top":
          return t + e - n;

        case "hanging":
          return t + e - 2 * n;

        case "middle":
          return t + e / 2 - n;

        case "ideographic":
          return t;

        case "alphabetic":
        default:
          return t;
      }
    };

    n.prototype.createLinearGradient = function () {
      var t = function t() {};

      return t.colorStops = [], t.addColorStop = function (t, e) {
        this.colorStops.push([t, e]);
      }, t.getColor = function () {
        return 0 === this.colorStops.length ? "#000000" : this.colorStops[0][1];
      }, t.isCanvasGradient = !0, t;
    }, n.prototype.createPattern = function () {
      return this.createLinearGradient();
    }, n.prototype.createRadialGradient = function () {
      return this.createLinearGradient();
    };

    var A = function A(t, e, n, r, i, o, a, s) {
      this.pdf.internal.scaleFactor;

      for (var l = y(r), h = y(i), u = g.call(this, n, l, h, o), c = 0; c < u.length; c++) {
        var f = u[c];
        0 === c && p.call(this, f.x1 + t, f.y1 + e), d.call(this, t, e, f.x2, f.y2, f.x3, f.y3, f.x4, f.y4);
      }

      s ? _.call(this) : S.call(this, a);
    },
        S = function S(t) {
      switch (t) {
        case "stroke":
          this.pdf.internal.out("S");
          break;

        case "fill":
          this.pdf.internal.out("f");
      }
    },
        _ = function _() {
      this.pdf.clip();
    },
        p = function p(t, e) {
      this.pdf.internal.out(i(t) + " " + o(e) + " m");
    },
        s = function s(t) {
      var e;

      switch (t.align) {
        case "right":
        case "end":
          e = "right";
          break;

        case "center":
          e = "center";
          break;

        case "left":
        case "start":
        default:
          e = "left";
      }

      var n = this.ctx.transform.applyToPoint(new j(t.x, t.y)),
          r = this.ctx.transform.decompose(),
          i = new M();
      i = (i = (i = i.multiply(r.translate)).multiply(r.skew)).multiply(r.scale);

      for (var o, a = this.pdf.getTextDimensions(t.text), s = this.ctx.transform.applyToRectangle(new E(t.x, t.y, a.w, a.h)), l = i.applyToRectangle(new E(t.x, t.y - a.h, a.w, a.h)), h = F.call(this, l), u = [], c = 0; c < h.length; c += 1) {
        -1 === u.indexOf(h[c]) && u.push(h[c]);
      }

      if (u.sort(), !0 === this.autoPaging) for (var f = u[0], p = u[u.length - 1], d = f; d < p + 1; d++) {
        if (this.pdf.setPage(d), 0 !== this.ctx.clip_path.length) {
          var g = this.path;
          o = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = P(o, this.posX, -1 * this.pdf.internal.pageSize.height * (d - 1) + this.posY), k.call(this, "fill", !0), this.path = g;
        }

        var m = JSON.parse(JSON.stringify(s));

        if (m = P([m], this.posX, -1 * this.pdf.internal.pageSize.height * (d - 1) + this.posY)[0], .01 <= t.scale) {
          var y = this.pdf.internal.getFontSize();
          this.pdf.setFontSize(y * t.scale);
        }

        this.pdf.text(t.text, m.x, m.y, {
          angle: t.angle,
          align: e,
          renderingMode: t.renderingMode,
          maxWidth: t.maxWidth
        }), .01 <= t.scale && this.pdf.setFontSize(y);
      } else {
        if (.01 <= t.scale) {
          y = this.pdf.internal.getFontSize();
          this.pdf.setFontSize(y * t.scale);
        }

        this.pdf.text(t.text, n.x + this.posX, n.y + this.posY, {
          angle: t.angle,
          align: e,
          renderingMode: t.renderingMode,
          maxWidth: t.maxWidth
        }), .01 <= t.scale && this.pdf.setFontSize(y);
      }
    },
        I = function I(t, e, n, r) {
      n = n || 0, r = r || 0, this.pdf.internal.out(i(t + n) + " " + o(e + r) + " l");
    },
        C = function C(t, e, n) {
      return this.pdf.lines(t, e, n, null, null);
    },
        d = function d(t, e, n, r, i, o, a, s) {
      this.pdf.internal.out([l(h(n + t)), l(u(r + e)), l(h(i + t)), l(u(o + e)), l(h(a + t)), l(u(s + e)), "c"].join(" "));
    },
        g = function g(t, e, n, r) {
      var i = 2 * Math.PI,
          o = e;
      (o < i || i < o) && (o %= i);
      var a = n;
      (a < i || i < a) && (a %= i);

      for (var s = [], l = Math.PI / 2, h = r ? -1 : 1, u = e, c = Math.min(i, Math.abs(a - o)); 1e-5 < c;) {
        var f = u + h * Math.min(c, l);
        s.push(m.call(this, t, u, f)), c -= Math.abs(f - u), u = f;
      }

      return s;
    },
        m = function m(t, e, n) {
      var r = (n - e) / 2,
          i = t * Math.cos(r),
          o = t * Math.sin(r),
          a = i,
          s = -o,
          l = a * a + s * s,
          h = l + a * i + s * o,
          u = 4 / 3 * (Math.sqrt(2 * l * h) - h) / (a * o - s * i),
          c = a - u * s,
          f = s + u * a,
          p = c,
          d = -f,
          g = r + e,
          m = Math.cos(g),
          y = Math.sin(g);
      return {
        x1: t * Math.cos(e),
        y1: t * Math.sin(e),
        x2: c * m - f * y,
        y2: c * y + f * m,
        x3: p * m - d * y,
        y3: p * y + d * m,
        x4: t * Math.cos(n),
        y4: t * Math.sin(n)
      };
    },
        B = function B(t) {
      return 180 * t / Math.PI;
    },
        y = function y(t) {
      return t * Math.PI / 180;
    },
        w = function w(t, e, n, r, i, o) {
      var a = t + .5 * (n - t),
          s = e + .5 * (r - e),
          l = i + .5 * (n - i),
          h = o + .5 * (r - o),
          u = Math.min(t, i, a, l),
          c = Math.max(t, i, a, l),
          f = Math.min(e, o, s, h),
          p = Math.max(e, o, s, h);
      return new E(u, f, c - u, p - f);
    },
        b = function b(t, e, n, r, i, o, a, s) {
      for (var l, h, u, c, f, p, d, g, m, y, v, w, b, x = n - t, N = r - e, L = i - n, A = o - r, S = a - i, _ = s - o, F = 0; F < 41; F++) {
        g = (p = (h = t + (l = F / 40) * x) + l * ((c = n + l * L) - h)) + l * (c + l * (i + l * S - c) - p), m = (d = (u = e + l * N) + l * ((f = r + l * A) - u)) + l * (f + l * (o + l * _ - f) - d), b = 0 == F ? (w = y = g, v = m) : (y = Math.min(y, g), v = Math.min(v, m), w = Math.max(w, g), Math.max(b, m));
      }

      return new E(Math.round(y), Math.round(v), Math.round(w - y), Math.round(b - v));
    },
        j = function j(t, e) {
      var n = t || 0;
      Object.defineProperty(this, "x", {
        enumerable: !0,
        get: function get() {
          return n;
        },
        set: function set(t) {
          isNaN(t) || (n = parseFloat(t));
        }
      });
      var r = e || 0;
      Object.defineProperty(this, "y", {
        enumerable: !0,
        get: function get() {
          return r;
        },
        set: function set(t) {
          isNaN(t) || (r = parseFloat(t));
        }
      });
      var i = "pt";
      return Object.defineProperty(this, "type", {
        enumerable: !0,
        get: function get() {
          return i;
        },
        set: function set(t) {
          i = t.toString();
        }
      }), this;
    },
        E = function E(t, e, n, r) {
      j.call(this, t, e), this.type = "rect";
      var i = n || 0;
      Object.defineProperty(this, "w", {
        enumerable: !0,
        get: function get() {
          return i;
        },
        set: function set(t) {
          isNaN(t) || (i = parseFloat(t));
        }
      });
      var o = r || 0;
      return Object.defineProperty(this, "h", {
        enumerable: !0,
        get: function get() {
          return o;
        },
        set: function set(t) {
          isNaN(t) || (o = parseFloat(t));
        }
      }), this;
    },
        M = function M(t, e, n, r, i, o) {
      var a = [];
      return Object.defineProperty(this, "sx", {
        get: function get() {
          return a[0];
        },
        set: function set(t) {
          a[0] = Math.round(1e5 * t) / 1e5;
        }
      }), Object.defineProperty(this, "shy", {
        get: function get() {
          return a[1];
        },
        set: function set(t) {
          a[1] = Math.round(1e5 * t) / 1e5;
        }
      }), Object.defineProperty(this, "shx", {
        get: function get() {
          return a[2];
        },
        set: function set(t) {
          a[2] = Math.round(1e5 * t) / 1e5;
        }
      }), Object.defineProperty(this, "sy", {
        get: function get() {
          return a[3];
        },
        set: function set(t) {
          a[3] = Math.round(1e5 * t) / 1e5;
        }
      }), Object.defineProperty(this, "tx", {
        get: function get() {
          return a[4];
        },
        set: function set(t) {
          a[4] = Math.round(1e5 * t) / 1e5;
        }
      }), Object.defineProperty(this, "ty", {
        get: function get() {
          return a[5];
        },
        set: function set(t) {
          a[5] = Math.round(1e5 * t) / 1e5;
        }
      }), Object.defineProperty(this, "rotation", {
        get: function get() {
          return Math.atan2(this.shx, this.sx);
        }
      }), Object.defineProperty(this, "scaleX", {
        get: function get() {
          return this.decompose().scale.sx;
        }
      }), Object.defineProperty(this, "scaleY", {
        get: function get() {
          return this.decompose().scale.sy;
        }
      }), Object.defineProperty(this, "isIdentity", {
        get: function get() {
          return 1 === this.sx && 0 === this.shy && 0 === this.shx && 1 === this.sy && 0 === this.tx && 0 === this.ty;
        }
      }), this.sx = isNaN(t) ? 1 : t, this.shy = isNaN(e) ? 0 : e, this.shx = isNaN(n) ? 0 : n, this.sy = isNaN(r) ? 1 : r, this.tx = isNaN(i) ? 0 : i, this.ty = isNaN(o) ? 0 : o, this;
    };

    M.prototype.multiply = function (t) {
      var e = t.sx * this.sx + t.shy * this.shx,
          n = t.sx * this.shy + t.shy * this.sy,
          r = t.shx * this.sx + t.sy * this.shx,
          i = t.shx * this.shy + t.sy * this.sy,
          o = t.tx * this.sx + t.ty * this.shx + this.tx,
          a = t.tx * this.shy + t.ty * this.sy + this.ty;
      return new M(e, n, r, i, o, a);
    }, M.prototype.decompose = function () {
      var t = this.sx,
          e = this.shy,
          n = this.shx,
          r = this.sy,
          i = this.tx,
          o = this.ty,
          a = Math.sqrt(t * t + e * e),
          s = (t /= a) * n + (e /= a) * r;
      n -= t * s, r -= e * s;
      var l = Math.sqrt(n * n + r * r);
      return s /= l, t * (r /= l) < e * (n /= l) && (t = -t, e = -e, s = -s, a = -a), {
        scale: new M(a, 0, 0, l, 0, 0),
        translate: new M(1, 0, 0, 1, i, o),
        rotate: new M(t, e, -e, t, 0, 0),
        skew: new M(1, 0, s, 1, 0, 0)
      };
    }, M.prototype.applyToPoint = function (t) {
      var e = t.x * this.sx + t.y * this.shx + this.tx,
          n = t.x * this.shy + t.y * this.sy + this.ty;
      return new j(e, n);
    }, M.prototype.applyToRectangle = function (t) {
      var e = this.applyToPoint(t),
          n = this.applyToPoint(new j(t.x + t.w, t.y + t.h));
      return new E(e.x, e.y, n.x - e.x, n.y - e.y);
    }, M.prototype.clone = function () {
      var t = this.sx,
          e = this.shy,
          n = this.shx,
          r = this.sy,
          i = this.tx,
          o = this.ty;
      return new M(t, e, n, r, i, o);
    };
  }(lt.API, "undefined" != typeof self && self || "undefined" != typeof window && window || "undefined" != typeof global && global || Function('return typeof this === "object" && this.content')() || Function("return this")()),
  /**
     * jsPDF filters PlugIn
     * Copyright (c) 2014 Aras Abbasi 
     *
     * Licensed under the MIT License.
     * http://opensource.org/licenses/mit-license
     */
  a = lt.API, o = function o(t) {
    var r, e, n, i, o, a, s, l, h, u;

    for (/[^\x00-\xFF]/.test(t), e = [], n = 0, i = (t += r = "\0\0\0\0".slice(t.length % 4 || 4)).length; n < i; n += 4) {
      0 !== (o = (t.charCodeAt(n) << 24) + (t.charCodeAt(n + 1) << 16) + (t.charCodeAt(n + 2) << 8) + t.charCodeAt(n + 3)) ? (a = (o = ((o = ((o = ((o = (o - (u = o % 85)) / 85) - (h = o % 85)) / 85) - (l = o % 85)) / 85) - (s = o % 85)) / 85) % 85, e.push(a + 33, s + 33, l + 33, h + 33, u + 33)) : e.push(122);
    }

    return function (t, e) {
      for (var n = r.length; 0 < n; n--) {
        t.pop();
      }
    }(e), String.fromCharCode.apply(String, e) + "~>";
  }, s = function s(t) {
    var r,
        e,
        n,
        i,
        o,
        a = String,
        s = "length",
        l = "charCodeAt",
        h = "slice",
        u = "replace";

    for (t[h](-2), t = t[h](0, -2)[u](/\s/g, "")[u]("z", "!!!!!"), n = [], i = 0, o = (t += r = "uuuuu"[h](t[s] % 5 || 5))[s]; i < o; i += 5) {
      e = 52200625 * (t[l](i) - 33) + 614125 * (t[l](i + 1) - 33) + 7225 * (t[l](i + 2) - 33) + 85 * (t[l](i + 3) - 33) + (t[l](i + 4) - 33), n.push(255 & e >> 24, 255 & e >> 16, 255 & e >> 8, 255 & e);
    }

    return function (t, e) {
      for (var n = r[s]; 0 < n; n--) {
        t.pop();
      }
    }(n), a.fromCharCode.apply(a, n);
  }, h = function h(t) {
    for (var e = "", n = 0; n < t.length; n += 1) {
      e += ("0" + t.charCodeAt(n).toString(16)).slice(-2);
    }

    return e += ">";
  }, u = function u(t) {
    var e = new RegExp(/^([0-9A-Fa-f]{2})+$/);
    if (-1 !== (t = t.replace(/\s/g, "")).indexOf(">") && (t = t.substr(0, t.indexOf(">"))), t.length % 2 && (t += "0"), !1 === e.test(t)) return "";

    for (var n = "", r = 0; r < t.length; r += 2) {
      n += String.fromCharCode("0x" + (t[r] + t[r + 1]));
    }

    return n;
  }, c = function c(t, e) {
    e = Object.assign({
      predictor: 1,
      colors: 1,
      bitsPerComponent: 8,
      columns: 1
    }, e);

    for (var n, r, i = [], o = t.length; o--;) {
      i[o] = t.charCodeAt(o);
    }

    return n = a.adler32cs.from(t), (r = new Deflater(6)).append(new Uint8Array(i)), t = r.flush(), (i = new Uint8Array(t.length + 6)).set(new Uint8Array([120, 156])), i.set(t, 2), i.set(new Uint8Array([255 & n, n >> 8 & 255, n >> 16 & 255, n >> 24 & 255]), t.length + 2), t = String.fromCharCode.apply(null, i);
  }, a.processDataByFilters = function (t, e) {
    var n = 0,
        r = t || "",
        i = [];

    for ("string" == typeof (e = e || []) && (e = [e]), n = 0; n < e.length; n += 1) {
      switch (e[n]) {
        case "ASCII85Decode":
        case "/ASCII85Decode":
          r = s(r), i.push("/ASCII85Encode");
          break;

        case "ASCII85Encode":
        case "/ASCII85Encode":
          r = o(r), i.push("/ASCII85Decode");
          break;

        case "ASCIIHexDecode":
        case "/ASCIIHexDecode":
          r = u(r), i.push("/ASCIIHexEncode");
          break;

        case "ASCIIHexEncode":
        case "/ASCIIHexEncode":
          r = h(r), i.push("/ASCIIHexDecode");
          break;

        case "FlateEncode":
        case "/FlateEncode":
          r = c(r), i.push("/FlateDecode");
          break;

        default:
          throw 'The filter: "' + e[n] + '" is not implemented';
      }
    }

    return {
      data: r,
      reverseChain: i.reverse().join(" ")
    };
  }, (
  /**
     * jsPDF fileloading PlugIn
     * Copyright (c) 2018 Aras Abbasi (aras.abbasi@gmail.com)
     *
     * Licensed under the MIT License.
     * http://opensource.org/licenses/mit-license
     */
  r = lt.API).loadFile = function (t, e, n) {
    var r;
    e = e || !0, n = n || function () {};

    try {
      r = function (t, e, n) {
        var r = new XMLHttpRequest(),
            i = [],
            o = 0,
            a = function a(t) {
          var e = t.length,
              n = String.fromCharCode;

          for (o = 0; o < e; o += 1) {
            i.push(n(255 & t.charCodeAt(o)));
          }

          return i.join("");
        };

        if (r.open("GET", t, !e), r.overrideMimeType("text/plain; charset=x-user-defined"), !1 === e && (r.onload = function () {
          return a(this.responseText);
        }), r.send(null), 200 === r.status) return e ? a(r.responseText) : void 0;
        console.warn('Unable to load file "' + t + '"');
      }(t, e);
    } catch (t) {
      r = void 0;
    }

    return r;
  }, r.loadImageFile = r.loadFile,
  /**
     * Copyright (c) 2018 Erik Koopmans
     * Released under the MIT License.
     *
     * Licensed under the MIT License.
     * http://opensource.org/licenses/mit-license
     */
  i = lt.API, f = "undefined" != typeof window && window || "undefined" != typeof global && global, g = function g(t) {
    var e = se(t);
    return "undefined" === e ? "undefined" : "string" === e || t instanceof String ? "string" : "number" === e || t instanceof Number ? "number" : "function" === e || t instanceof Function ? "function" : t && t.constructor === Array ? "array" : t && 1 === t.nodeType ? "element" : "object" === e ? "object" : "unknown";
  }, m = function m(t, e) {
    var n = document.createElement(t);

    if (e.className && (n.className = e.className), e.innerHTML) {
      n.innerHTML = e.innerHTML;

      for (var r = n.getElementsByTagName("script"), i = r.length; 0 < i--; null) {
        r[i].parentNode.removeChild(r[i]);
      }
    }

    for (var o in e.style) {
      n.style[o] = e.style[o];
    }

    return n;
  }, (((y = function t(e) {
    var n = Object.assign(t.convert(Promise.resolve()), JSON.parse(JSON.stringify(t.template))),
        r = t.convert(Promise.resolve(), n);
    return r = (r = r.setProgress(1, t, 1, [t])).set(e);
  }).prototype = Object.create(Promise.prototype)).constructor = y).convert = function (t, e) {
    return t.__proto__ = e || y.prototype, t;
  }, y.template = {
    prop: {
      src: null,
      container: null,
      overlay: null,
      canvas: null,
      img: null,
      pdf: null,
      pageSize: null,
      callback: function callback() {}
    },
    progress: {
      val: 0,
      state: null,
      n: 0,
      stack: []
    },
    opt: {
      filename: "file.pdf",
      margin: [0, 0, 0, 0],
      enableLinks: !0,
      x: 0,
      y: 0,
      html2canvas: {},
      jsPDF: {}
    }
  }, y.prototype.from = function (t, e) {
    return this.then(function () {
      switch (e = e || function (t) {
        switch (g(t)) {
          case "string":
            return "string";

          case "element":
            return "canvas" === t.nodeName.toLowerCase ? "canvas" : "element";

          default:
            return "unknown";
        }
      }(t)) {
        case "string":
          return this.set({
            src: m("div", {
              innerHTML: t
            })
          });

        case "element":
          return this.set({
            src: t
          });

        case "canvas":
          return this.set({
            canvas: t
          });

        case "img":
          return this.set({
            img: t
          });

        default:
          return this.error("Unknown source type.");
      }
    });
  }, y.prototype.to = function (t) {
    switch (t) {
      case "container":
        return this.toContainer();

      case "canvas":
        return this.toCanvas();

      case "img":
        return this.toImg();

      case "pdf":
        return this.toPdf();

      default:
        return this.error("Invalid target.");
    }
  }, y.prototype.toContainer = function () {
    return this.thenList([function () {
      return this.prop.src || this.error("Cannot duplicate - no source HTML.");
    }, function () {
      return this.prop.pageSize || this.setPageSize();
    }]).then(function () {
      var t = {
        position: "relative",
        display: "inline-block",
        width: Math.max(this.prop.src.clientWidth, this.prop.src.scrollWidth, this.prop.src.offsetWidth) + "px",
        left: 0,
        right: 0,
        top: 0,
        margin: "auto",
        backgroundColor: "white"
      },
          e = function t(e, n) {
        for (var r = 3 === e.nodeType ? document.createTextNode(e.nodeValue) : e.cloneNode(!1), i = e.firstChild; i; i = i.nextSibling) {
          !0 !== n && 1 === i.nodeType && "SCRIPT" === i.nodeName || r.appendChild(t(i, n));
        }

        return 1 === e.nodeType && ("CANVAS" === e.nodeName ? (r.width = e.width, r.height = e.height, r.getContext("2d").drawImage(e, 0, 0)) : "TEXTAREA" !== e.nodeName && "SELECT" !== e.nodeName || (r.value = e.value), r.addEventListener("load", function () {
          r.scrollTop = e.scrollTop, r.scrollLeft = e.scrollLeft;
        }, !0)), r;
      }(this.prop.src, this.opt.html2canvas.javascriptEnabled);

      "BODY" === e.tagName && (t.height = Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight) + "px"), this.prop.overlay = m("div", {
        className: "html2pdf__overlay",
        style: {
          position: "fixed",
          overflow: "hidden",
          zIndex: 1e3,
          left: "-100000px",
          right: 0,
          bottom: 0,
          top: 0
        }
      }), this.prop.container = m("div", {
        className: "html2pdf__container",
        style: t
      }), this.prop.container.appendChild(e), this.prop.container.firstChild.appendChild(m("div", {
        style: {
          clear: "both",
          border: "0 none transparent",
          margin: 0,
          padding: 0,
          height: 0
        }
      })), this.prop.container.style["float"] = "none", this.prop.overlay.appendChild(this.prop.container), document.body.appendChild(this.prop.overlay), this.prop.container.firstChild.style.position = "relative", this.prop.container.height = Math.max(this.prop.container.firstChild.clientHeight, this.prop.container.firstChild.scrollHeight, this.prop.container.firstChild.offsetHeight) + "px";
    });
  }, y.prototype.toCanvas = function () {
    var t = [function () {
      return document.body.contains(this.prop.container) || this.toContainer();
    }];
    return this.thenList(t).then(function () {
      var t = Object.assign({}, this.opt.html2canvas);
      if (delete t.onrendered, this.isHtml2CanvasLoaded()) return html2canvas(this.prop.container, t);
    }).then(function (t) {
      (this.opt.html2canvas.onrendered || function () {})(t), this.prop.canvas = t, document.body.removeChild(this.prop.overlay);
    });
  }, y.prototype.toContext2d = function () {
    var t = [function () {
      return document.body.contains(this.prop.container) || this.toContainer();
    }];
    return this.thenList(t).then(function () {
      var t = this.opt.jsPDF,
          e = Object.assign({
        async: !0,
        allowTaint: !0,
        backgroundColor: "#ffffff",
        imageTimeout: 15e3,
        logging: !0,
        proxy: null,
        removeContainer: !0,
        foreignObjectRendering: !1,
        useCORS: !1
      }, this.opt.html2canvas);
      if (delete e.onrendered, t.context2d.autoPaging = !0, t.context2d.posX = this.opt.x, t.context2d.posY = this.opt.y, e.windowHeight = e.windowHeight || 0, e.windowHeight = 0 == e.windowHeight ? Math.max(this.prop.container.clientHeight, this.prop.container.scrollHeight, this.prop.container.offsetHeight) : e.windowHeight, this.isHtml2CanvasLoaded()) return html2canvas(this.prop.container, e);
    }).then(function (t) {
      (this.opt.html2canvas.onrendered || function () {})(t), this.prop.canvas = t, document.body.removeChild(this.prop.overlay);
    });
  }, y.prototype.toImg = function () {
    return this.thenList([function () {
      return this.prop.canvas || this.toCanvas();
    }]).then(function () {
      var t = this.prop.canvas.toDataURL("image/" + this.opt.image.type, this.opt.image.quality);
      this.prop.img = document.createElement("img"), this.prop.img.src = t;
    });
  }, y.prototype.toPdf = function () {
    return this.thenList([function () {
      return this.toContext2d();
    }]).then(function () {
      this.prop.pdf = this.prop.pdf || this.opt.jsPDF;
    });
  }, y.prototype.output = function (t, e, n) {
    return "img" === (n = n || "pdf").toLowerCase() || "image" === n.toLowerCase() ? this.outputImg(t, e) : this.outputPdf(t, e);
  }, y.prototype.outputPdf = function (t, e) {
    return this.thenList([function () {
      return this.prop.pdf || this.toPdf();
    }]).then(function () {
      return this.prop.pdf.output(t, e);
    });
  }, y.prototype.outputImg = function (t, e) {
    return this.thenList([function () {
      return this.prop.img || this.toImg();
    }]).then(function () {
      switch (t) {
        case void 0:
        case "img":
          return this.prop.img;

        case "datauristring":
        case "dataurlstring":
          return this.prop.img.src;

        case "datauri":
        case "dataurl":
          return document.location.href = this.prop.img.src;

        default:
          throw 'Image output type "' + t + '" is not supported.';
      }
    });
  }, y.prototype.isHtml2CanvasLoaded = function () {
    var t = void 0 !== f.html2canvas;
    return t || console.error("html2canvas not loaded."), t;
  }, y.prototype.save = function (t) {
    if (this.isHtml2CanvasLoaded()) return this.thenList([function () {
      return this.prop.pdf || this.toPdf();
    }]).set(t ? {
      filename: t
    } : null).then(function () {
      this.prop.pdf.save(this.opt.filename);
    });
  }, y.prototype.doCallback = function (t) {
    if (this.isHtml2CanvasLoaded()) return this.thenList([function () {
      return this.prop.pdf || this.toPdf();
    }]).then(function () {
      this.prop.callback(this.prop.pdf);
    });
  }, y.prototype.set = function (e) {
    if ("object" !== g(e)) return this;
    var t = Object.keys(e || {}).map(function (t) {
      if (t in y.template.prop) return function () {
        this.prop[t] = e[t];
      };

      switch (t) {
        case "margin":
          return this.setMargin.bind(this, e.margin);

        case "jsPDF":
          return function () {
            return this.opt.jsPDF = e.jsPDF, this.setPageSize();
          };

        case "pageSize":
          return this.setPageSize.bind(this, e.pageSize);

        default:
          return function () {
            this.opt[t] = e[t];
          };
      }
    }, this);
    return this.then(function () {
      return this.thenList(t);
    });
  }, y.prototype.get = function (e, n) {
    return this.then(function () {
      var t = e in y.template.prop ? this.prop[e] : this.opt[e];
      return n ? n(t) : t;
    });
  }, y.prototype.setMargin = function (t) {
    return this.then(function () {
      switch (g(t)) {
        case "number":
          t = [t, t, t, t];

        case "array":
          if (2 === t.length && (t = [t[0], t[1], t[0], t[1]]), 4 === t.length) break;

        default:
          return this.error("Invalid margin array.");
      }

      this.opt.margin = t;
    }).then(this.setPageSize);
  }, y.prototype.setPageSize = function (t) {
    function e(t, e) {
      return Math.floor(t * e / 72 * 96);
    }

    return this.then(function () {
      (t = t || lt.getPageSize(this.opt.jsPDF)).hasOwnProperty("inner") || (t.inner = {
        width: t.width - this.opt.margin[1] - this.opt.margin[3],
        height: t.height - this.opt.margin[0] - this.opt.margin[2]
      }, t.inner.px = {
        width: e(t.inner.width, t.k),
        height: e(t.inner.height, t.k)
      }, t.inner.ratio = t.inner.height / t.inner.width), this.prop.pageSize = t;
    });
  }, y.prototype.setProgress = function (t, e, n, r) {
    return null != t && (this.progress.val = t), null != e && (this.progress.state = e), null != n && (this.progress.n = n), null != r && (this.progress.stack = r), this.progress.ratio = this.progress.val / this.progress.state, this;
  }, y.prototype.updateProgress = function (t, e, n, r) {
    return this.setProgress(t ? this.progress.val + t : null, e || null, n ? this.progress.n + n : null, r ? this.progress.stack.concat(r) : null);
  }, y.prototype.then = function (t, e) {
    var n = this;
    return this.thenCore(t, e, function (e, t) {
      return n.updateProgress(null, null, 1, [e]), Promise.prototype.then.call(this, function (t) {
        return n.updateProgress(null, e), t;
      }).then(e, t).then(function (t) {
        return n.updateProgress(1), t;
      });
    });
  }, y.prototype.thenCore = function (t, e, n) {
    n = n || Promise.prototype.then;
    var r = this;
    t && (t = t.bind(r)), e && (e = e.bind(r));
    var i = -1 !== Promise.toString().indexOf("[native code]") && "Promise" === Promise.name ? r : y.convert(Object.assign({}, r), Promise.prototype),
        o = n.call(i, t, e);
    return y.convert(o, r.__proto__);
  }, y.prototype.thenExternal = function (t, e) {
    return Promise.prototype.then.call(this, t, e);
  }, y.prototype.thenList = function (t) {
    var e = this;
    return t.forEach(function (t) {
      e = e.thenCore(t);
    }), e;
  }, y.prototype["catch"] = function (t) {
    t && (t = t.bind(this));
    var e = Promise.prototype["catch"].call(this, t);
    return y.convert(e, this);
  }, y.prototype.catchExternal = function (t) {
    return Promise.prototype["catch"].call(this, t);
  }, y.prototype.error = function (t) {
    return this.then(function () {
      throw new Error(t);
    });
  }, y.prototype.using = y.prototype.set, y.prototype.saveAs = y.prototype.save, y.prototype["export"] = y.prototype.output, y.prototype.run = y.prototype.then, lt.getPageSize = function (t, e, n) {
    if ("object" === se(t)) {
      var r = t;
      t = r.orientation, e = r.unit || e, n = r.format || n;
    }

    e = e || "mm", n = n || "a4", t = ("" + (t || "P")).toLowerCase();
    var i = ("" + n).toLowerCase(),
        o = {
      a0: [2383.94, 3370.39],
      a1: [1683.78, 2383.94],
      a2: [1190.55, 1683.78],
      a3: [841.89, 1190.55],
      a4: [595.28, 841.89],
      a5: [419.53, 595.28],
      a6: [297.64, 419.53],
      a7: [209.76, 297.64],
      a8: [147.4, 209.76],
      a9: [104.88, 147.4],
      a10: [73.7, 104.88],
      b0: [2834.65, 4008.19],
      b1: [2004.09, 2834.65],
      b2: [1417.32, 2004.09],
      b3: [1000.63, 1417.32],
      b4: [708.66, 1000.63],
      b5: [498.9, 708.66],
      b6: [354.33, 498.9],
      b7: [249.45, 354.33],
      b8: [175.75, 249.45],
      b9: [124.72, 175.75],
      b10: [87.87, 124.72],
      c0: [2599.37, 3676.54],
      c1: [1836.85, 2599.37],
      c2: [1298.27, 1836.85],
      c3: [918.43, 1298.27],
      c4: [649.13, 918.43],
      c5: [459.21, 649.13],
      c6: [323.15, 459.21],
      c7: [229.61, 323.15],
      c8: [161.57, 229.61],
      c9: [113.39, 161.57],
      c10: [79.37, 113.39],
      dl: [311.81, 623.62],
      letter: [612, 792],
      "government-letter": [576, 756],
      legal: [612, 1008],
      "junior-legal": [576, 360],
      ledger: [1224, 792],
      tabloid: [792, 1224],
      "credit-card": [153, 243]
    };

    switch (e) {
      case "pt":
        var a = 1;
        break;

      case "mm":
        a = 72 / 25.4;
        break;

      case "cm":
        a = 72 / 2.54;
        break;

      case "in":
        a = 72;
        break;

      case "px":
        a = .75;
        break;

      case "pc":
      case "em":
        a = 12;
        break;

      case "ex":
        a = 6;
        break;

      default:
        throw "Invalid unit: " + e;
    }

    if (o.hasOwnProperty(i)) var s = o[i][1] / a,
        l = o[i][0] / a;else try {
      s = n[1], l = n[0];
    } catch (t) {
      throw new Error("Invalid format: " + n);
    }

    if ("p" === t || "portrait" === t) {
      if (t = "p", s < l) {
        var h = l;
        l = s, s = h;
      }
    } else {
      if ("l" !== t && "landscape" !== t) throw "Invalid orientation: " + t;
      t = "l", l < s && (h = l, l = s, s = h);
    }

    return {
      width: l,
      height: s,
      unit: e,
      k: a
    };
  }, i.html = function (t, e) {
    (e = e || {}).callback = e.callback || function () {}, e.html2canvas = e.html2canvas || {}, e.html2canvas.canvas = e.html2canvas.canvas || this.canvas, e.jsPDF = e.jsPDF || this, e.jsPDF;
    var n = new y(e);
    return e.worker ? n : n.from(t).doCallback();
  }, lt.API.addJS = function (t) {
    return b = t, this.internal.events.subscribe("postPutResources", function (t) {
      v = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/Names [(EmbeddedJS) " + (v + 1) + " 0 R]"), this.internal.out(">>"), this.internal.out("endobj"), w = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/S /JavaScript"), this.internal.out("/JS (" + b + ")"), this.internal.out(">>"), this.internal.out("endobj");
    }), this.internal.events.subscribe("putCatalog", function () {
      void 0 !== v && void 0 !== w && this.internal.out("/Names <</JavaScript " + v + " 0 R>>");
    }), this;
  }, (
  /**
     * @license
     * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
     *
     * Licensed under the MIT License.
     * http://opensource.org/licenses/mit-license
     */
  x = lt.API).events.push(["postPutResources", function () {
    var t = this,
        e = /^(\d+) 0 obj$/;
    if (0 < this.outline.root.children.length) for (var n = t.outline.render().split(/\r\n/), r = 0; r < n.length; r++) {
      var i = n[r],
          o = e.exec(i);

      if (null != o) {
        var a = o[1];
        t.internal.newObjectDeferredBegin(a, !1);
      }

      t.internal.write(i);
    }

    if (this.outline.createNamedDestinations) {
      var s = this.internal.pages.length,
          l = [];

      for (r = 0; r < s; r++) {
        var h = t.internal.newObject();
        l.push(h);
        var u = t.internal.getPageInfo(r + 1);
        t.internal.write("<< /D[" + u.objId + " 0 R /XYZ null null null]>> endobj");
      }

      var c = t.internal.newObject();

      for (t.internal.write("<< /Names [ "), r = 0; r < l.length; r++) {
        t.internal.write("(page_" + (r + 1) + ")" + l[r] + " 0 R");
      }

      t.internal.write(" ] >>", "endobj"), t.internal.newObject(), t.internal.write("<< /Dests " + c + " 0 R"), t.internal.write(">>", "endobj");
    }
  }]), x.events.push(["putCatalog", function () {
    0 < this.outline.root.children.length && (this.internal.write("/Outlines", this.outline.makeRef(this.outline.root)), this.outline.createNamedDestinations && this.internal.write("/Names " + namesOid + " 0 R"));
  }]), x.events.push(["initialized", function () {
    var a = this;
    a.outline = {
      createNamedDestinations: !1,
      root: {
        children: []
      }
    }, a.outline.add = function (t, e, n) {
      var r = {
        title: e,
        options: n,
        children: []
      };
      return null == t && (t = this.root), t.children.push(r), r;
    }, a.outline.render = function () {
      return this.ctx = {}, this.ctx.val = "", this.ctx.pdf = a, this.genIds_r(this.root), this.renderRoot(this.root), this.renderItems(this.root), this.ctx.val;
    }, a.outline.genIds_r = function (t) {
      t.id = a.internal.newObjectDeferred();

      for (var e = 0; e < t.children.length; e++) {
        this.genIds_r(t.children[e]);
      }
    }, a.outline.renderRoot = function (t) {
      this.objStart(t), this.line("/Type /Outlines"), 0 < t.children.length && (this.line("/First " + this.makeRef(t.children[0])), this.line("/Last " + this.makeRef(t.children[t.children.length - 1]))), this.line("/Count " + this.count_r({
        count: 0
      }, t)), this.objEnd();
    }, a.outline.renderItems = function (t) {
      this.ctx.pdf.internal.getCoordinateString;

      for (var e = this.ctx.pdf.internal.getVerticalCoordinateString, n = 0; n < t.children.length; n++) {
        var r = t.children[n];
        this.objStart(r), this.line("/Title " + this.makeString(r.title)), this.line("/Parent " + this.makeRef(t)), 0 < n && this.line("/Prev " + this.makeRef(t.children[n - 1])), n < t.children.length - 1 && this.line("/Next " + this.makeRef(t.children[n + 1])), 0 < r.children.length && (this.line("/First " + this.makeRef(r.children[0])), this.line("/Last " + this.makeRef(r.children[r.children.length - 1])));
        var i = this.count = this.count_r({
          count: 0
        }, r);

        if (0 < i && this.line("/Count " + i), r.options && r.options.pageNumber) {
          var o = a.internal.getPageInfo(r.options.pageNumber);
          this.line("/Dest [" + o.objId + " 0 R /XYZ 0 " + e(0) + " 0]");
        }

        this.objEnd();
      }

      for (n = 0; n < t.children.length; n++) {
        r = t.children[n], this.renderItems(r);
      }
    }, a.outline.line = function (t) {
      this.ctx.val += t + "\r\n";
    }, a.outline.makeRef = function (t) {
      return t.id + " 0 R";
    }, a.outline.makeString = function (t) {
      return "(" + a.internal.pdfEscape(t) + ")";
    }, a.outline.objStart = function (t) {
      this.ctx.val += "\r\n" + t.id + " 0 obj\r\n<<\r\n";
    }, a.outline.objEnd = function (t) {
      this.ctx.val += ">> \r\nendobj\r\n";
    }, a.outline.count_r = function (t, e) {
      for (var n = 0; n < e.children.length; n++) {
        t.count++, this.count_r(t, e.children[n]);
      }

      return t.count;
    };
  }]),
  /**
     * @license
     * 
     * Copyright (c) 2014 James Robb, https://github.com/jamesbrobb
     *
     * 
     * ====================================================================
     */
  I = lt.API, C = function C() {
    var t = "function" == typeof Deflater;
    if (!t) throw new Error("requires deflate.js for compression");
    return t;
  }, B = function B(t, e, n, r) {
    var i = 5,
        o = E;

    switch (r) {
      case I.image_compression.FAST:
        i = 3, o = j;
        break;

      case I.image_compression.MEDIUM:
        i = 6, o = M;
        break;

      case I.image_compression.SLOW:
        i = 9, o = O;
    }

    t = A(t, e, n, o);
    var a = new Uint8Array(N(i)),
        s = L(t),
        l = new Deflater(i),
        h = l.append(t),
        u = l.flush(),
        c = a.length + h.length + u.length,
        f = new Uint8Array(c + 4);
    return f.set(a), f.set(h, a.length), f.set(u, a.length + h.length), f[c++] = s >>> 24 & 255, f[c++] = s >>> 16 & 255, f[c++] = s >>> 8 & 255, f[c++] = 255 & s, I.arrayBufferToBinaryString(f);
  }, N = function N(t, e) {
    var n = Math.LOG2E * Math.log(32768) - 8 << 4 | 8,
        r = n << 8;
    return r |= Math.min(3, (e - 1 & 255) >> 1) << 6, r |= 0, [n, 255 & (r += 31 - r % 31)];
  }, L = function L(t, e) {
    for (var n, r = 1, i = 0, o = t.length, a = 0; 0 < o;) {
      for (o -= n = e < o ? e : o; i += r += t[a++], --n;) {
        ;
      }

      r %= 65521, i %= 65521;
    }

    return (i << 16 | r) >>> 0;
  }, A = function A(t, e, n, r) {
    for (var i, o, a, s = t.length / e, l = new Uint8Array(t.length + s), h = T(), u = 0; u < s; u++) {
      if (a = u * e, i = t.subarray(a, a + e), r) l.set(r(i, n, o), a + u);else {
        for (var c = 0, f = h.length, p = []; c < f; c++) {
          p[c] = h[c](i, n, o);
        }

        var d = R(p.concat());
        l.set(p[d], a + u);
      }
      o = i;
    }

    return l;
  }, S = function S(t, e, n) {
    var r = Array.apply([], t);
    return r.unshift(0), r;
  }, j = function j(t, e, n) {
    var r,
        i = [],
        o = 0,
        a = t.length;

    for (i[0] = 1; o < a; o++) {
      r = t[o - e] || 0, i[o + 1] = t[o] - r + 256 & 255;
    }

    return i;
  }, E = function E(t, e, n) {
    var r,
        i = [],
        o = 0,
        a = t.length;

    for (i[0] = 2; o < a; o++) {
      r = n && n[o] || 0, i[o + 1] = t[o] - r + 256 & 255;
    }

    return i;
  }, M = function M(t, e, n) {
    var r,
        i,
        o = [],
        a = 0,
        s = t.length;

    for (o[0] = 3; a < s; a++) {
      r = t[a - e] || 0, i = n && n[a] || 0, o[a + 1] = t[a] + 256 - (r + i >>> 1) & 255;
    }

    return o;
  }, O = function O(t, e, n) {
    var r,
        i,
        o,
        a,
        s = [],
        l = 0,
        h = t.length;

    for (s[0] = 4; l < h; l++) {
      r = t[l - e] || 0, i = n && n[l] || 0, o = n && n[l - e] || 0, a = q(r, i, o), s[l + 1] = t[l] - a + 256 & 255;
    }

    return s;
  }, q = function q(t, e, n) {
    var r = t + e - n,
        i = Math.abs(r - t),
        o = Math.abs(r - e),
        a = Math.abs(r - n);
    return i <= o && i <= a ? t : o <= a ? e : n;
  }, T = function T() {
    return [S, j, E, M, O];
  }, R = function R(t) {
    for (var e, n, r, i = 0, o = t.length; i < o;) {
      ((e = D(t[i].slice(1))) < n || !n) && (n = e, r = i), i++;
    }

    return r;
  }, D = function D(t) {
    for (var e = 0, n = t.length, r = 0; e < n;) {
      r += Math.abs(t[e++]);
    }

    return r;
  }, I.processPNG = function (t, e, n, r, i) {
    var o,
        a,
        s,
        l,
        h,
        u,
        c = this.color_spaces.DEVICE_RGB,
        f = this.decode.FLATE_DECODE,
        p = 8;

    if (this.isArrayBuffer(t) && (t = new Uint8Array(t)), this.isArrayBufferView(t)) {
      if ("function" != typeof PNG || "function" != typeof kt) throw new Error("PNG support requires png.js and zlib.js");

      if (t = (o = new PNG(t)).imgData, p = o.bits, c = o.colorSpace, l = o.colors, -1 !== [4, 6].indexOf(o.colorType)) {
        if (8 === o.bits) for (var d, g = (_ = 32 == o.pixelBitlength ? new Uint32Array(o.decodePixels().buffer) : 16 == o.pixelBitlength ? new Uint16Array(o.decodePixels().buffer) : new Uint8Array(o.decodePixels().buffer)).length, m = new Uint8Array(g * o.colors), y = new Uint8Array(g), v = o.pixelBitlength - o.bits, w = 0, b = 0; w < g; w++) {
          for (x = _[w], d = 0; d < v;) {
            m[b++] = x >>> d & 255, d += o.bits;
          }

          y[w] = x >>> d & 255;
        }

        if (16 === o.bits) {
          g = (_ = new Uint32Array(o.decodePixels().buffer)).length, m = new Uint8Array(g * (32 / o.pixelBitlength) * o.colors), y = new Uint8Array(g * (32 / o.pixelBitlength));

          for (var x, N = 1 < o.colors, L = b = w = 0; w < g;) {
            x = _[w++], m[b++] = x >>> 0 & 255, N && (m[b++] = x >>> 16 & 255, x = _[w++], m[b++] = x >>> 0 & 255), y[L++] = x >>> 16 & 255;
          }

          p = 8;
        }

        r !== I.image_compression.NONE && C() ? (t = B(m, o.width * o.colors, o.colors, r), u = B(y, o.width, 1, r)) : (t = m, u = y, f = null);
      }

      if (3 === o.colorType && (c = this.color_spaces.INDEXED, h = o.palette, o.transparency.indexed)) {
        var A = o.transparency.indexed,
            S = 0;

        for (w = 0, g = A.length; w < g; ++w) {
          S += A[w];
        }

        if ((S /= 255) == g - 1 && -1 !== A.indexOf(0)) s = [A.indexOf(0)];else if (S !== g) {
          var _ = o.decodePixels();

          for (y = new Uint8Array(_.length), w = 0, g = _.length; w < g; w++) {
            y[w] = A[_[w]];
          }

          u = B(y, o.width, 1);
        }
      }

      var F = function (t) {
        var e;

        switch (t) {
          case I.image_compression.FAST:
            e = 11;
            break;

          case I.image_compression.MEDIUM:
            e = 13;
            break;

          case I.image_compression.SLOW:
            e = 14;
            break;

          default:
            e = 12;
        }

        return e;
      }(r);

      return a = f === this.decode.FLATE_DECODE ? "/Predictor " + F + " /Colors " + l + " /BitsPerComponent " + p + " /Columns " + o.width : "/Colors " + l + " /BitsPerComponent " + p + " /Columns " + o.width, (this.isArrayBuffer(t) || this.isArrayBufferView(t)) && (t = this.arrayBufferToBinaryString(t)), (u && this.isArrayBuffer(u) || this.isArrayBufferView(u)) && (u = this.arrayBufferToBinaryString(u)), this.createImageInfo(t, o.width, o.height, c, p, f, e, n, a, s, h, u, F);
    }

    throw new Error("Unsupported PNG image data, try using JPEG instead.");
  }, (
  /**
     * @license
     * Copyright (c) 2017 Aras Abbasi 
     *
     * Licensed under the MIT License.
     * http://opensource.org/licenses/mit-license
     */
  U = lt.API).processGIF89A = function (t, e, n, r, i) {
    var o = new At(t),
        a = o.width,
        s = o.height,
        l = [];
    o.decodeAndBlitFrameRGBA(0, l);
    var h = {
      data: l,
      width: a,
      height: s
    },
        u = new _t(100).encode(h, 100);
    return U.processJPEG.call(this, u, e, n, r);
  }, U.processGIF87A = U.processGIF89A, (
  /**
     * Copyright (c) 2018 Aras Abbasi 
     *
     * Licensed under the MIT License.
     * http://opensource.org/licenses/mit-license
     */
  z = lt.API).processBMP = function (t, e, n, r, i) {
    var o = new Ft(t, !1),
        a = o.width,
        s = o.height,
        l = {
      data: o.getData(),
      width: a,
      height: s
    },
        h = new _t(100).encode(l, 100);
    return z.processJPEG.call(this, h, e, n, r);
  }, lt.API.setLanguage = function (t) {
    return void 0 === this.internal.languageSettings && (this.internal.languageSettings = {}, this.internal.languageSettings.isSubscribed = !1), void 0 !== {
      af: "Afrikaans",
      sq: "Albanian",
      ar: "Arabic (Standard)",
      "ar-DZ": "Arabic (Algeria)",
      "ar-BH": "Arabic (Bahrain)",
      "ar-EG": "Arabic (Egypt)",
      "ar-IQ": "Arabic (Iraq)",
      "ar-JO": "Arabic (Jordan)",
      "ar-KW": "Arabic (Kuwait)",
      "ar-LB": "Arabic (Lebanon)",
      "ar-LY": "Arabic (Libya)",
      "ar-MA": "Arabic (Morocco)",
      "ar-OM": "Arabic (Oman)",
      "ar-QA": "Arabic (Qatar)",
      "ar-SA": "Arabic (Saudi Arabia)",
      "ar-SY": "Arabic (Syria)",
      "ar-TN": "Arabic (Tunisia)",
      "ar-AE": "Arabic (U.A.E.)",
      "ar-YE": "Arabic (Yemen)",
      an: "Aragonese",
      hy: "Armenian",
      as: "Assamese",
      ast: "Asturian",
      az: "Azerbaijani",
      eu: "Basque",
      be: "Belarusian",
      bn: "Bengali",
      bs: "Bosnian",
      br: "Breton",
      bg: "Bulgarian",
      my: "Burmese",
      ca: "Catalan",
      ch: "Chamorro",
      ce: "Chechen",
      zh: "Chinese",
      "zh-HK": "Chinese (Hong Kong)",
      "zh-CN": "Chinese (PRC)",
      "zh-SG": "Chinese (Singapore)",
      "zh-TW": "Chinese (Taiwan)",
      cv: "Chuvash",
      co: "Corsican",
      cr: "Cree",
      hr: "Croatian",
      cs: "Czech",
      da: "Danish",
      nl: "Dutch (Standard)",
      "nl-BE": "Dutch (Belgian)",
      en: "English",
      "en-AU": "English (Australia)",
      "en-BZ": "English (Belize)",
      "en-CA": "English (Canada)",
      "en-IE": "English (Ireland)",
      "en-JM": "English (Jamaica)",
      "en-NZ": "English (New Zealand)",
      "en-PH": "English (Philippines)",
      "en-ZA": "English (South Africa)",
      "en-TT": "English (Trinidad & Tobago)",
      "en-GB": "English (United Kingdom)",
      "en-US": "English (United States)",
      "en-ZW": "English (Zimbabwe)",
      eo: "Esperanto",
      et: "Estonian",
      fo: "Faeroese",
      fj: "Fijian",
      fi: "Finnish",
      fr: "French (Standard)",
      "fr-BE": "French (Belgium)",
      "fr-CA": "French (Canada)",
      "fr-FR": "French (France)",
      "fr-LU": "French (Luxembourg)",
      "fr-MC": "French (Monaco)",
      "fr-CH": "French (Switzerland)",
      fy: "Frisian",
      fur: "Friulian",
      gd: "Gaelic (Scots)",
      "gd-IE": "Gaelic (Irish)",
      gl: "Galacian",
      ka: "Georgian",
      de: "German (Standard)",
      "de-AT": "German (Austria)",
      "de-DE": "German (Germany)",
      "de-LI": "German (Liechtenstein)",
      "de-LU": "German (Luxembourg)",
      "de-CH": "German (Switzerland)",
      el: "Greek",
      gu: "Gujurati",
      ht: "Haitian",
      he: "Hebrew",
      hi: "Hindi",
      hu: "Hungarian",
      is: "Icelandic",
      id: "Indonesian",
      iu: "Inuktitut",
      ga: "Irish",
      it: "Italian (Standard)",
      "it-CH": "Italian (Switzerland)",
      ja: "Japanese",
      kn: "Kannada",
      ks: "Kashmiri",
      kk: "Kazakh",
      km: "Khmer",
      ky: "Kirghiz",
      tlh: "Klingon",
      ko: "Korean",
      "ko-KP": "Korean (North Korea)",
      "ko-KR": "Korean (South Korea)",
      la: "Latin",
      lv: "Latvian",
      lt: "Lithuanian",
      lb: "Luxembourgish",
      mk: "FYRO Macedonian",
      ms: "Malay",
      ml: "Malayalam",
      mt: "Maltese",
      mi: "Maori",
      mr: "Marathi",
      mo: "Moldavian",
      nv: "Navajo",
      ng: "Ndonga",
      ne: "Nepali",
      no: "Norwegian",
      nb: "Norwegian (Bokmal)",
      nn: "Norwegian (Nynorsk)",
      oc: "Occitan",
      or: "Oriya",
      om: "Oromo",
      fa: "Persian",
      "fa-IR": "Persian/Iran",
      pl: "Polish",
      pt: "Portuguese",
      "pt-BR": "Portuguese (Brazil)",
      pa: "Punjabi",
      "pa-IN": "Punjabi (India)",
      "pa-PK": "Punjabi (Pakistan)",
      qu: "Quechua",
      rm: "Rhaeto-Romanic",
      ro: "Romanian",
      "ro-MO": "Romanian (Moldavia)",
      ru: "Russian",
      "ru-MO": "Russian (Moldavia)",
      sz: "Sami (Lappish)",
      sg: "Sango",
      sa: "Sanskrit",
      sc: "Sardinian",
      sd: "Sindhi",
      si: "Singhalese",
      sr: "Serbian",
      sk: "Slovak",
      sl: "Slovenian",
      so: "Somani",
      sb: "Sorbian",
      es: "Spanish",
      "es-AR": "Spanish (Argentina)",
      "es-BO": "Spanish (Bolivia)",
      "es-CL": "Spanish (Chile)",
      "es-CO": "Spanish (Colombia)",
      "es-CR": "Spanish (Costa Rica)",
      "es-DO": "Spanish (Dominican Republic)",
      "es-EC": "Spanish (Ecuador)",
      "es-SV": "Spanish (El Salvador)",
      "es-GT": "Spanish (Guatemala)",
      "es-HN": "Spanish (Honduras)",
      "es-MX": "Spanish (Mexico)",
      "es-NI": "Spanish (Nicaragua)",
      "es-PA": "Spanish (Panama)",
      "es-PY": "Spanish (Paraguay)",
      "es-PE": "Spanish (Peru)",
      "es-PR": "Spanish (Puerto Rico)",
      "es-ES": "Spanish (Spain)",
      "es-UY": "Spanish (Uruguay)",
      "es-VE": "Spanish (Venezuela)",
      sx: "Sutu",
      sw: "Swahili",
      sv: "Swedish",
      "sv-FI": "Swedish (Finland)",
      "sv-SV": "Swedish (Sweden)",
      ta: "Tamil",
      tt: "Tatar",
      te: "Teluga",
      th: "Thai",
      tig: "Tigre",
      ts: "Tsonga",
      tn: "Tswana",
      tr: "Turkish",
      tk: "Turkmen",
      uk: "Ukrainian",
      hsb: "Upper Sorbian",
      ur: "Urdu",
      ve: "Venda",
      vi: "Vietnamese",
      vo: "Volapuk",
      wa: "Walloon",
      cy: "Welsh",
      xh: "Xhosa",
      ji: "Yiddish",
      zu: "Zulu"
    }[t] && (this.internal.languageSettings.languageCode = t, !1 === this.internal.languageSettings.isSubscribed && (this.internal.events.subscribe("putCatalog", function () {
      this.internal.write("/Lang (" + this.internal.languageSettings.languageCode + ")");
    }), this.internal.languageSettings.isSubscribed = !0)), this;
  },
  /** @license
     * MIT license.
     * Copyright (c) 2012 Willow Systems Corporation, willow-systems.com
     *               2014 Diego Casorran, https://github.com/diegocr
     *
     * 
     * ====================================================================
     */
  H = lt.API, W = H.getCharWidthsArray = function (t, e) {
    var n,
        r,
        i,
        o = (e = e || {}).font || this.internal.getFont(),
        a = e.fontSize || this.internal.getFontSize(),
        s = e.charSpace || this.internal.getCharSpace(),
        l = e.widths ? e.widths : o.metadata.Unicode.widths,
        h = l.fof ? l.fof : 1,
        u = e.kerning ? e.kerning : o.metadata.Unicode.kerning,
        c = u.fof ? u.fof : 1,
        f = 0,
        p = l[0] || h,
        d = [];

    for (n = 0, r = t.length; n < r; n++) {
      i = t.charCodeAt(n), "function" == typeof o.metadata.widthOfString ? d.push((o.metadata.widthOfGlyph(o.metadata.characterToGlyph(i)) + s * (1e3 / a) || 0) / 1e3) : d.push((l[i] || p) / h + (u[i] && u[i][f] || 0) / c), f = i;
    }

    return d;
  }, V = H.getArraySum = function (t) {
    for (var e = t.length, n = 0; e;) {
      n += t[--e];
    }

    return n;
  }, G = H.getStringUnitWidth = function (t, e) {
    var n = (e = e || {}).fontSize || this.internal.getFontSize(),
        r = e.font || this.internal.getFont(),
        i = e.charSpace || this.internal.getCharSpace();
    return "function" == typeof r.metadata.widthOfString ? r.metadata.widthOfString(t, n, i) / n : V(W.apply(this, arguments));
  }, Y = function Y(t, e, n, r) {
    for (var i = [], o = 0, a = t.length, s = 0; o !== a && s + e[o] < n;) {
      s += e[o], o++;
    }

    i.push(t.slice(0, o));
    var l = o;

    for (s = 0; o !== a;) {
      s + e[o] > r && (i.push(t.slice(l, o)), s = 0, l = o), s += e[o], o++;
    }

    return l !== o && i.push(t.slice(l, o)), i;
  }, J = function J(t, e, n) {
    n || (n = {});
    var r,
        i,
        o,
        a,
        s,
        l,
        h = [],
        u = [h],
        c = n.textIndent || 0,
        f = 0,
        p = 0,
        d = t.split(" "),
        g = W.apply(this, [" ", n])[0];

    if (l = -1 === n.lineIndent ? d[0].length + 2 : n.lineIndent || 0) {
      var m = Array(l).join(" "),
          y = [];
      d.map(function (t) {
        1 < (t = t.split(/\s*\n/)).length ? y = y.concat(t.map(function (t, e) {
          return (e && t.length ? "\n" : "") + t;
        })) : y.push(t[0]);
      }), d = y, l = G.apply(this, [m, n]);
    }

    for (o = 0, a = d.length; o < a; o++) {
      var v = 0;

      if (r = d[o], l && "\n" == r[0] && (r = r.substr(1), v = 1), i = W.apply(this, [r, n]), e < c + f + (p = V(i)) || v) {
        if (e < p) {
          for (s = Y.apply(this, [r, i, e - (c + f), e]), h.push(s.shift()), h = [s.pop()]; s.length;) {
            u.push([s.shift()]);
          }

          p = V(i.slice(r.length - (h[0] ? h[0].length : 0)));
        } else h = [r];

        u.push(h), c = p + l, f = g;
      } else h.push(r), c += f + p, f = g;
    }

    if (l) var w = function w(t, e) {
      return (e ? m : "") + t.join(" ");
    };else w = function w(t) {
      return t.join(" ");
    };
    return u.map(w);
  }, H.splitTextToSize = function (t, e, n) {
    var r,
        i = (n = n || {}).fontSize || this.internal.getFontSize(),
        o = function (t) {
      var e = {
        0: 1
      },
          n = {};
      if (t.widths && t.kerning) return {
        widths: t.widths,
        kerning: t.kerning
      };
      var r = this.internal.getFont(t.fontName, t.fontStyle),
          i = "Unicode";
      return r.metadata[i] ? {
        widths: r.metadata[i].widths || e,
        kerning: r.metadata[i].kerning || n
      } : {
        font: r.metadata,
        fontSize: this.internal.getFontSize(),
        charSpace: this.internal.getCharSpace()
      };
    }.call(this, n);

    r = Array.isArray(t) ? t : t.split(/\r?\n/);
    var a = 1 * this.internal.scaleFactor * e / i;
    o.textIndent = n.textIndent ? 1 * n.textIndent * this.internal.scaleFactor / i : 0, o.lineIndent = n.lineIndent;
    var s,
        l,
        h = [];

    for (s = 0, l = r.length; s < l; s++) {
      h = h.concat(J.apply(this, [r[s], a, o]));
    }

    return h;
  },
  /** @license
     jsPDF standard_fonts_metrics plugin
     * Copyright (c) 2012 Willow Systems Corporation, willow-systems.com
     * MIT license.
     * 
     * ====================================================================
     */
  X = lt.API, Z = {
    codePages: ["WinAnsiEncoding"],
    WinAnsiEncoding: (K = function K(t) {
      for (var e = "klmnopqrstuvwxyz", n = {}, r = 0; r < e.length; r++) {
        n[e[r]] = "0123456789abcdef"[r];
      }

      var i,
          o,
          a,
          s,
          l,
          h = {},
          u = 1,
          c = h,
          f = [],
          p = "",
          d = "",
          g = t.length - 1;

      for (r = 1; r != g;) {
        l = t[r], r += 1, "'" == l ? o = o ? (s = o.join(""), i) : [] : o ? o.push(l) : "{" == l ? (f.push([c, s]), c = {}, s = i) : "}" == l ? ((a = f.pop())[0][a[1]] = c, s = i, c = a[0]) : "-" == l ? u = -1 : s === i ? n.hasOwnProperty(l) ? (p += n[l], s = parseInt(p, 16) * u, u = 1, p = "") : p += l : n.hasOwnProperty(l) ? (d += n[l], c[s] = parseInt(d, 16) * u, u = 1, s = i, d = "") : d += l;
      }

      return h;
    })("{19m8n201n9q201o9r201s9l201t9m201u8m201w9n201x9o201y8o202k8q202l8r202m9p202q8p20aw8k203k8t203t8v203u9v2cq8s212m9t15m8w15n9w2dw9s16k8u16l9u17s9z17x8y17y9y}")
  }, Q = {
    Unicode: {
      Courier: Z,
      "Courier-Bold": Z,
      "Courier-BoldOblique": Z,
      "Courier-Oblique": Z,
      Helvetica: Z,
      "Helvetica-Bold": Z,
      "Helvetica-BoldOblique": Z,
      "Helvetica-Oblique": Z,
      "Times-Roman": Z,
      "Times-Bold": Z,
      "Times-BoldItalic": Z,
      "Times-Italic": Z
    }
  }, $ = {
    Unicode: {
      "Courier-Oblique": K("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
      "Times-BoldItalic": K("{'widths'{k3o2q4ycx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2r202m2n2n3m2o3m2p5n202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5n4l4m4m4m4n4m4o4s4p4m4q4m4r4s4s4y4t2r4u3m4v4m4w3x4x5t4y4s4z4s5k3x5l4s5m4m5n3r5o3x5p4s5q4m5r5t5s4m5t3x5u3x5v2l5w1w5x2l5y3t5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q2l6r3m6s3r6t1w6u1w6v3m6w1w6x4y6y3r6z3m7k3m7l3m7m2r7n2r7o1w7p3r7q2w7r4m7s3m7t2w7u2r7v2n7w1q7x2n7y3t202l3mcl4mal2ram3man3mao3map3mar3mas2lat4uau1uav3maw3way4uaz2lbk2sbl3t'fof'6obo2lbp3tbq3mbr1tbs2lbu1ybv3mbz3mck4m202k3mcm4mcn4mco4mcp4mcq5ycr4mcs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz2w203k6o212m6o2dw2l2cq2l3t3m3u2l17s3x19m3m}'kerning'{cl{4qu5kt5qt5rs17ss5ts}201s{201ss}201t{cks4lscmscnscoscpscls2wu2yu201ts}201x{2wu2yu}2k{201ts}2w{4qx5kx5ou5qx5rs17su5tu}2x{17su5tu5ou}2y{4qx5kx5ou5qx5rs17ss5ts}'fof'-6ofn{17sw5tw5ou5qw5rs}7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qs}3v{17su5tu5os5qs}7p{17su5tu}ck{4qu5kt5qt5rs17ss5ts}4l{4qu5kt5qt5rs17ss5ts}cm{4qu5kt5qt5rs17ss5ts}cn{4qu5kt5qt5rs17ss5ts}co{4qu5kt5qt5rs17ss5ts}cp{4qu5kt5qt5rs17ss5ts}6l{4qu5ou5qw5rt17su5tu}5q{ckuclucmucnucoucpu4lu}5r{ckuclucmucnucoucpu4lu}7q{cksclscmscnscoscps4ls}6p{4qu5ou5qw5rt17sw5tw}ek{4qu5ou5qw5rt17su5tu}el{4qu5ou5qw5rt17su5tu}em{4qu5ou5qw5rt17su5tu}en{4qu5ou5qw5rt17su5tu}eo{4qu5ou5qw5rt17su5tu}ep{4qu5ou5qw5rt17su5tu}es{17ss5ts5qs4qu}et{4qu5ou5qw5rt17sw5tw}eu{4qu5ou5qw5rt17ss5ts}ev{17ss5ts5qs4qu}6z{17sw5tw5ou5qw5rs}fm{17sw5tw5ou5qw5rs}7n{201ts}fo{17sw5tw5ou5qw5rs}fp{17sw5tw5ou5qw5rs}fq{17sw5tw5ou5qw5rs}7r{cksclscmscnscoscps4ls}fs{17sw5tw5ou5qw5rs}ft{17su5tu}fu{17su5tu}fv{17su5tu}fw{17su5tu}fz{cksclscmscnscoscps4ls}}}"),
      "Helvetica-Bold": K("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),
      Courier: K("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
      "Courier-BoldOblique": K("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
      "Times-Bold": K("{'widths'{k3q2q5ncx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2l202m2n2n3m2o3m2p6o202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5x4l4s4m4m4n4s4o4s4p4m4q3x4r4y4s4y4t2r4u3m4v4y4w4m4x5y4y4s4z4y5k3x5l4y5m4s5n3r5o4m5p4s5q4s5r6o5s4s5t4s5u4m5v2l5w1w5x2l5y3u5z3m6k2l6l3m6m3r6n2w6o3r6p2w6q2l6r3m6s3r6t1w6u2l6v3r6w1w6x5n6y3r6z3m7k3r7l3r7m2w7n2r7o2l7p3r7q3m7r4s7s3m7t3m7u2w7v2r7w1q7x2r7y3o202l3mcl4sal2lam3man3mao3map3mar3mas2lat4uau1yav3maw3tay4uaz2lbk2sbl3t'fof'6obo2lbp3rbr1tbs2lbu2lbv3mbz3mck4s202k3mcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3rek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3m3u2l17s4s19m3m}'kerning'{cl{4qt5ks5ot5qy5rw17sv5tv}201t{cks4lscmscnscoscpscls4wv}2k{201ts}2w{4qu5ku7mu5os5qx5ru17su5tu}2x{17su5tu5ou5qs}2y{4qv5kv7mu5ot5qz5ru17su5tu}'fof'-6o7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qu}3v{17su5tu5os5qu}fu{17su5tu5ou5qu}7p{17su5tu5ou5qu}ck{4qt5ks5ot5qy5rw17sv5tv}4l{4qt5ks5ot5qy5rw17sv5tv}cm{4qt5ks5ot5qy5rw17sv5tv}cn{4qt5ks5ot5qy5rw17sv5tv}co{4qt5ks5ot5qy5rw17sv5tv}cp{4qt5ks5ot5qy5rw17sv5tv}6l{17st5tt5ou5qu}17s{ckuclucmucnucoucpu4lu4wu}5o{ckuclucmucnucoucpu4lu4wu}5q{ckzclzcmzcnzcozcpz4lz4wu}5r{ckxclxcmxcnxcoxcpx4lx4wu}5t{ckuclucmucnucoucpu4lu4wu}7q{ckuclucmucnucoucpu4lu}6p{17sw5tw5ou5qu}ek{17st5tt5qu}el{17st5tt5ou5qu}em{17st5tt5qu}en{17st5tt5qu}eo{17st5tt5qu}ep{17st5tt5ou5qu}es{17ss5ts5qu}et{17sw5tw5ou5qu}eu{17sw5tw5ou5qu}ev{17ss5ts5qu}6z{17sw5tw5ou5qu5rs}fm{17sw5tw5ou5qu5rs}fn{17sw5tw5ou5qu5rs}fo{17sw5tw5ou5qu5rs}fp{17sw5tw5ou5qu5rs}fq{17sw5tw5ou5qu5rs}7r{cktcltcmtcntcotcpt4lt5os}fs{17sw5tw5ou5qu5rs}ft{17su5tu5ou5qu}7m{5os}fv{17su5tu5ou5qu}fw{17su5tu5ou5qu}fz{cksclscmscnscoscps4ls}}}"),
      Symbol: K("{'widths'{k3uaw4r19m3m2k1t2l2l202m2y2n3m2p5n202q6o3k3m2s2l2t2l2v3r2w1t3m3m2y1t2z1wbk2sbl3r'fof'6o3n3m3o3m3p3m3q3m3r3m3s3m3t3m3u1w3v1w3w3r3x3r3y3r3z2wbp3t3l3m5v2l5x2l5z3m2q4yfr3r7v3k7w1o7x3k}'kerning'{'fof'-6o}}"),
      Helvetica: K("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}"),
      "Helvetica-BoldOblique": K("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),
      ZapfDingbats: K("{'widths'{k4u2k1w'fof'6o}'kerning'{'fof'-6o}}"),
      "Courier-Bold": K("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
      "Times-Italic": K("{'widths'{k3n2q4ycx2l201n3m201o5t201s2l201t2l201u2l201w3r201x3r201y3r2k1t2l2l202m2n2n3m2o3m2p5n202q5t2r1p2s2l2t2l2u3m2v4n2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w4n3x4n3y4n3z3m4k5w4l3x4m3x4n4m4o4s4p3x4q3x4r4s4s4s4t2l4u2w4v4m4w3r4x5n4y4m4z4s5k3x5l4s5m3x5n3m5o3r5p4s5q3x5r5n5s3x5t3r5u3r5v2r5w1w5x2r5y2u5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q1w6r3m6s3m6t1w6u1w6v2w6w1w6x4s6y3m6z3m7k3m7l3m7m2r7n2r7o1w7p3m7q2w7r4m7s2w7t2w7u2r7v2s7w1v7x2s7y3q202l3mcl3xal2ram3man3mao3map3mar3mas2lat4wau1vav3maw4nay4waz2lbk2sbl4n'fof'6obo2lbp3mbq3obr1tbs2lbu1zbv3mbz3mck3x202k3mcm3xcn3xco3xcp3xcq5tcr4mcs3xct3xcu3xcv3xcw2l2m2ucy2lcz2ldl4mdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr4nfs3mft3mfu3mfv3mfw3mfz2w203k6o212m6m2dw2l2cq2l3t3m3u2l17s3r19m3m}'kerning'{cl{5kt4qw}201s{201sw}201t{201tw2wy2yy6q-t}201x{2wy2yy}2k{201tw}2w{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}2x{17ss5ts5os}2y{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}'fof'-6o6t{17ss5ts5qs}7t{5os}3v{5qs}7p{17su5tu5qs}ck{5kt4qw}4l{5kt4qw}cm{5kt4qw}cn{5kt4qw}co{5kt4qw}cp{5kt4qw}6l{4qs5ks5ou5qw5ru17su5tu}17s{2ks}5q{ckvclvcmvcnvcovcpv4lv}5r{ckuclucmucnucoucpu4lu}5t{2ks}6p{4qs5ks5ou5qw5ru17su5tu}ek{4qs5ks5ou5qw5ru17su5tu}el{4qs5ks5ou5qw5ru17su5tu}em{4qs5ks5ou5qw5ru17su5tu}en{4qs5ks5ou5qw5ru17su5tu}eo{4qs5ks5ou5qw5ru17su5tu}ep{4qs5ks5ou5qw5ru17su5tu}es{5ks5qs4qs}et{4qs5ks5ou5qw5ru17su5tu}eu{4qs5ks5qw5ru17su5tu}ev{5ks5qs4qs}ex{17ss5ts5qs}6z{4qv5ks5ou5qw5ru17su5tu}fm{4qv5ks5ou5qw5ru17su5tu}fn{4qv5ks5ou5qw5ru17su5tu}fo{4qv5ks5ou5qw5ru17su5tu}fp{4qv5ks5ou5qw5ru17su5tu}fq{4qv5ks5ou5qw5ru17su5tu}7r{5os}fs{4qv5ks5ou5qw5ru17su5tu}ft{17su5tu5qs}fu{17su5tu5qs}fv{17su5tu5qs}fw{17su5tu5qs}}}"),
      "Times-Roman": K("{'widths'{k3n2q4ycx2l201n3m201o6o201s2l201t2l201u2l201w2w201x2w201y2w2k1t2l2l202m2n2n3m2o3m2p5n202q6o2r1m2s2l2t2l2u3m2v3s2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v1w3w3s3x3s3y3s3z2w4k5w4l4s4m4m4n4m4o4s4p3x4q3r4r4s4s4s4t2l4u2r4v4s4w3x4x5t4y4s4z4s5k3r5l4s5m4m5n3r5o3x5p4s5q4s5r5y5s4s5t4s5u3x5v2l5w1w5x2l5y2z5z3m6k2l6l2w6m3m6n2w6o3m6p2w6q2l6r3m6s3m6t1w6u1w6v3m6w1w6x4y6y3m6z3m7k3m7l3m7m2l7n2r7o1w7p3m7q3m7r4s7s3m7t3m7u2w7v3k7w1o7x3k7y3q202l3mcl4sal2lam3man3mao3map3mar3mas2lat4wau1vav3maw3say4waz2lbk2sbl3s'fof'6obo2lbp3mbq2xbr1tbs2lbu1zbv3mbz2wck4s202k3mcm4scn4sco4scp4scq5tcr4mcs3xct3xcu3xcv3xcw2l2m2tcy2lcz2ldl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek2wel2wem2wen2weo2wep2weq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr3sfs3mft3mfu3mfv3mfw3mfz3m203k6o212m6m2dw2l2cq2l3t3m3u1w17s4s19m3m}'kerning'{cl{4qs5ku17sw5ou5qy5rw201ss5tw201ws}201s{201ss}201t{ckw4lwcmwcnwcowcpwclw4wu201ts}2k{201ts}2w{4qs5kw5os5qx5ru17sx5tx}2x{17sw5tw5ou5qu}2y{4qs5kw5os5qx5ru17sx5tx}'fof'-6o7t{ckuclucmucnucoucpu4lu5os5rs}3u{17su5tu5qs}3v{17su5tu5qs}7p{17sw5tw5qs}ck{4qs5ku17sw5ou5qy5rw201ss5tw201ws}4l{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cm{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cn{4qs5ku17sw5ou5qy5rw201ss5tw201ws}co{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cp{4qs5ku17sw5ou5qy5rw201ss5tw201ws}6l{17su5tu5os5qw5rs}17s{2ktclvcmvcnvcovcpv4lv4wuckv}5o{ckwclwcmwcnwcowcpw4lw4wu}5q{ckyclycmycnycoycpy4ly4wu5ms}5r{cktcltcmtcntcotcpt4lt4ws}5t{2ktclvcmvcnvcovcpv4lv4wuckv}7q{cksclscmscnscoscps4ls}6p{17su5tu5qw5rs}ek{5qs5rs}el{17su5tu5os5qw5rs}em{17su5tu5os5qs5rs}en{17su5qs5rs}eo{5qs5rs}ep{17su5tu5os5qw5rs}es{5qs}et{17su5tu5qw5rs}eu{17su5tu5qs5rs}ev{5qs}6z{17sv5tv5os5qx5rs}fm{5os5qt5rs}fn{17sv5tv5os5qx5rs}fo{17sv5tv5os5qx5rs}fp{5os5qt5rs}fq{5os5qt5rs}7r{ckuclucmucnucoucpu4lu5os}fs{17sv5tv5os5qx5rs}ft{17ss5ts5qs}fu{17sw5tw5qs}fv{17sw5tw5qs}fw{17ss5ts5qs}fz{ckuclucmucnucoucpu4lu5os5rs}}}"),
      "Helvetica-Oblique": K("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}")
    }
  }, X.events.push(["addFont", function (t) {
    var e,
        n,
        r,
        i = t.font,
        o = "Unicode";
    (e = $[o][i.postScriptName]) && ((n = i.metadata[o] ? i.metadata[o] : i.metadata[o] = {}).widths = e.widths, n.kerning = e.kerning), (r = Q[o][i.postScriptName]) && ((n = i.metadata[o] ? i.metadata[o] : i.metadata[o] = {}).encoding = r).codePages && r.codePages.length && (i.encoding = r.codePages[0]);
  }]),
  /**
     * @license
     * Licensed under the MIT License.
     * http://opensource.org/licenses/mit-license
     */
  tt = lt, "undefined" != typeof self && self || "undefined" != typeof global && global || "undefined" != typeof window && window || Function("return this")(), tt.API.events.push(["addFont", function (t) {
    var e = t.font,
        n = t.instance;

    if (void 0 !== n && n.existsFileInVFS(e.postScriptName)) {
      var r = n.getFileFromVFS(e.postScriptName);
      if ("string" != typeof r) throw new Error("Font is not stored as string-data in vFS, import fonts or remove declaration doc.addFont('" + e.postScriptName + "').");
      e.metadata = tt.API.TTFFont.open(e.postScriptName, e.fontName, r, e.encoding), e.metadata.Unicode = e.metadata.Unicode || {
        encoding: {},
        kerning: {},
        widths: []
      }, e.metadata.glyIdsUsed = [0];
    } else if (!1 === e.isStandardFont) throw new Error("Font does not exist in vFS, import fonts or remove declaration doc.addFont('" + e.postScriptName + "').");
  }]), (
  /** @license
     * Copyright (c) 2012 Willow Systems Corporation, willow-systems.com
     * 
     * 
     * ====================================================================
     */
  et = lt.API).addSvg = function (t, e, n, r, i) {
    if (void 0 === e || void 0 === n) throw new Error("addSVG needs values for 'x' and 'y'");

    function o(t) {
      for (var e = parseFloat(t[1]), n = parseFloat(t[2]), r = [], i = 3, o = t.length; i < o;) {
        "c" === t[i] ? (r.push([parseFloat(t[i + 1]), parseFloat(t[i + 2]), parseFloat(t[i + 3]), parseFloat(t[i + 4]), parseFloat(t[i + 5]), parseFloat(t[i + 6])]), i += 7) : "l" === t[i] ? (r.push([parseFloat(t[i + 1]), parseFloat(t[i + 2])]), i += 3) : i += 1;
      }

      return [e, n, r];
    }

    var a,
        s,
        l,
        h,
        u,
        c,
        f,
        p,
        d = (h = document, p = h.createElement("iframe"), u = ".jsPDF_sillysvg_iframe {display:none;position:absolute;}", (f = (c = h).createElement("style")).type = "text/css", f.styleSheet ? f.styleSheet.cssText = u : f.appendChild(c.createTextNode(u)), c.getElementsByTagName("head")[0].appendChild(f), p.name = "childframe", p.setAttribute("width", 0), p.setAttribute("height", 0), p.setAttribute("frameborder", "0"), p.setAttribute("scrolling", "no"), p.setAttribute("seamless", "seamless"), p.setAttribute("class", "jsPDF_sillysvg_iframe"), h.body.appendChild(p), p),
        g = (a = t, (l = ((s = d).contentWindow || s.contentDocument).document).write(a), l.close(), l.getElementsByTagName("svg")[0]),
        m = [1, 1],
        y = parseFloat(g.getAttribute("width")),
        v = parseFloat(g.getAttribute("height"));
    y && v && (r && i ? m = [r / y, i / v] : r ? m = [r / y, r / y] : i && (m = [i / v, i / v]));
    var w,
        b,
        x,
        N,
        L = g.childNodes;

    for (w = 0, b = L.length; w < b; w++) {
      (x = L[w]).tagName && "PATH" === x.tagName.toUpperCase() && ((N = o(x.getAttribute("d").split(" ")))[0] = N[0] * m[0] + e, N[1] = N[1] * m[1] + n, this.lines.call(this, N[2], N[0], N[1], m));
    }

    return this;
  }, et.addSVG = et.addSvg, et.addSvgAsImage = function (t, e, n, r, i, o, a, s) {
    if (isNaN(e) || isNaN(n)) throw console.error("jsPDF.addSvgAsImage: Invalid coordinates", arguments), new Error("Invalid coordinates passed to jsPDF.addSvgAsImage");
    if (isNaN(r) || isNaN(i)) throw console.error("jsPDF.addSvgAsImage: Invalid measurements", arguments), new Error("Invalid measurements (width and/or height) passed to jsPDF.addSvgAsImage");
    var l = document.createElement("canvas");
    l.width = r, l.height = i;
    var h = l.getContext("2d");
    return h.fillStyle = "#fff", h.fillRect(0, 0, l.width, l.height), canvg(l, t, {
      ignoreMouse: !0,
      ignoreAnimation: !0,
      ignoreDimensions: !0,
      ignoreClear: !0
    }), this.addImage(l.toDataURL("image/jpeg", 1), e, n, r, i, a, s), this;
  }, lt.API.putTotalPages = function (t) {
    var e,
        n = 0;
    n = parseInt(this.internal.getFont().id.substr(1), 10) < 15 ? (e = new RegExp(t, "g"), this.internal.getNumberOfPages()) : (e = new RegExp(this.pdfEscape16(t, this.internal.getFont()), "g"), this.pdfEscape16(this.internal.getNumberOfPages() + "", this.internal.getFont()));

    for (var r = 1; r <= this.internal.getNumberOfPages(); r++) {
      for (var i = 0; i < this.internal.pages[r].length; i++) {
        this.internal.pages[r][i] = this.internal.pages[r][i].replace(e, n);
      }
    }

    return this;
  }, lt.API.viewerPreferences = function (t, e) {
    var n;
    t = t || {}, e = e || !1;
    var r,
        i,
        o = {
      HideToolbar: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.3
      },
      HideMenubar: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.3
      },
      HideWindowUI: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.3
      },
      FitWindow: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.3
      },
      CenterWindow: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.3
      },
      DisplayDocTitle: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.4
      },
      NonFullScreenPageMode: {
        defaultValue: "UseNone",
        value: "UseNone",
        type: "name",
        explicitSet: !1,
        valueSet: ["UseNone", "UseOutlines", "UseThumbs", "UseOC"],
        pdfVersion: 1.3
      },
      Direction: {
        defaultValue: "L2R",
        value: "L2R",
        type: "name",
        explicitSet: !1,
        valueSet: ["L2R", "R2L"],
        pdfVersion: 1.3
      },
      ViewArea: {
        defaultValue: "CropBox",
        value: "CropBox",
        type: "name",
        explicitSet: !1,
        valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
        pdfVersion: 1.4
      },
      ViewClip: {
        defaultValue: "CropBox",
        value: "CropBox",
        type: "name",
        explicitSet: !1,
        valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
        pdfVersion: 1.4
      },
      PrintArea: {
        defaultValue: "CropBox",
        value: "CropBox",
        type: "name",
        explicitSet: !1,
        valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
        pdfVersion: 1.4
      },
      PrintClip: {
        defaultValue: "CropBox",
        value: "CropBox",
        type: "name",
        explicitSet: !1,
        valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
        pdfVersion: 1.4
      },
      PrintScaling: {
        defaultValue: "AppDefault",
        value: "AppDefault",
        type: "name",
        explicitSet: !1,
        valueSet: ["AppDefault", "None"],
        pdfVersion: 1.6
      },
      Duplex: {
        defaultValue: "",
        value: "none",
        type: "name",
        explicitSet: !1,
        valueSet: ["Simplex", "DuplexFlipShortEdge", "DuplexFlipLongEdge", "none"],
        pdfVersion: 1.7
      },
      PickTrayByPDFSize: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.7
      },
      PrintPageRange: {
        defaultValue: "",
        value: "",
        type: "array",
        explicitSet: !1,
        valueSet: null,
        pdfVersion: 1.7
      },
      NumCopies: {
        defaultValue: 1,
        value: 1,
        type: "integer",
        explicitSet: !1,
        valueSet: null,
        pdfVersion: 1.7
      }
    },
        a = Object.keys(o),
        s = [],
        l = 0,
        h = 0,
        u = 0,
        c = !0;

    function f(t, e) {
      var n,
          r = !1;

      for (n = 0; n < t.length; n += 1) {
        t[n] === e && (r = !0);
      }

      return r;
    }

    if (void 0 === this.internal.viewerpreferences && (this.internal.viewerpreferences = {}, this.internal.viewerpreferences.configuration = JSON.parse(JSON.stringify(o)), this.internal.viewerpreferences.isSubscribed = !1), n = this.internal.viewerpreferences.configuration, "reset" === t || !0 === e) {
      var p = a.length;

      for (u = 0; u < p; u += 1) {
        n[a[u]].value = n[a[u]].defaultValue, n[a[u]].explicitSet = !1;
      }
    }

    if ("object" === se(t)) for (r in t) {
      if (i = t[r], f(a, r) && void 0 !== i) {
        if ("boolean" === n[r].type && "boolean" == typeof i) n[r].value = i;else if ("name" === n[r].type && f(n[r].valueSet, i)) n[r].value = i;else if ("integer" === n[r].type && Number.isInteger(i)) n[r].value = i;else if ("array" === n[r].type) {
          for (l = 0; l < i.length; l += 1) {
            if (c = !0, 1 === i[l].length && "number" == typeof i[l][0]) s.push(String(i[l] - 1));else if (1 < i[l].length) {
              for (h = 0; h < i[l].length; h += 1) {
                "number" != typeof i[l][h] && (c = !1);
              }

              !0 === c && s.push([i[l][0] - 1, i[l][1] - 1].join(" "));
            }
          }

          n[r].value = "[" + s.join(" ") + "]";
        } else n[r].value = n[r].defaultValue;
        n[r].explicitSet = !0;
      }
    }
    return !1 === this.internal.viewerpreferences.isSubscribed && (this.internal.events.subscribe("putCatalog", function () {
      var t,
          e = [];

      for (t in n) {
        !0 === n[t].explicitSet && ("name" === n[t].type ? e.push("/" + t + " /" + n[t].value) : e.push("/" + t + " " + n[t].value));
      }

      0 !== e.length && this.internal.write("/ViewerPreferences\n<<\n" + e.join("\n") + "\n>>");
    }), this.internal.viewerpreferences.isSubscribed = !0), this.internal.viewerpreferences.configuration = n, this;
  },
  /** ==================================================================== 
     * jsPDF XMP metadata plugin
     * Copyright (c) 2016 Jussi Utunen, u-jussi@suomi24.fi
     * 
     * 
     * ====================================================================
     */
  nt = lt.API, ot = it = rt = "", nt.addMetadata = function (t, e) {
    return it = e || "http://jspdf.default.namespaceuri/", rt = t, this.internal.events.subscribe("postPutResources", function () {
      if (rt) {
        var t = '<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"><rdf:Description rdf:about="" xmlns:jspdf="' + it + '"><jspdf:metadata>',
            e = unescape(encodeURIComponent('<x:xmpmeta xmlns:x="adobe:ns:meta/">')),
            n = unescape(encodeURIComponent(t)),
            r = unescape(encodeURIComponent(rt)),
            i = unescape(encodeURIComponent("</jspdf:metadata></rdf:Description></rdf:RDF>")),
            o = unescape(encodeURIComponent("</x:xmpmeta>")),
            a = n.length + r.length + i.length + e.length + o.length;
        ot = this.internal.newObject(), this.internal.write("<< /Type /Metadata /Subtype /XML /Length " + a + " >>"), this.internal.write("stream"), this.internal.write(e + n + r + i + o), this.internal.write("endstream"), this.internal.write("endobj");
      } else ot = "";
    }), this.internal.events.subscribe("putCatalog", function () {
      ot && this.internal.write("/Metadata " + ot + " 0 R");
    }), this;
  }, function (f, t) {
    var e = f.API;

    var m = e.pdfEscape16 = function (t, e) {
      for (var n, r = e.metadata.Unicode.widths, i = ["", "0", "00", "000", "0000"], o = [""], a = 0, s = t.length; a < s; ++a) {
        if (n = e.metadata.characterToGlyph(t.charCodeAt(a)), e.metadata.glyIdsUsed.push(n), e.metadata.toUnicode[n] = t.charCodeAt(a), -1 == r.indexOf(n) && (r.push(n), r.push([parseInt(e.metadata.widthOfGlyph(n), 10)])), "0" == n) return o.join("");
        n = n.toString(16), o.push(i[4 - n.length], n);
      }

      return o.join("");
    },
        p = function p(t) {
      var e, n, r, i, o, a, s;

      for (o = "/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange", r = [], a = 0, s = (n = Object.keys(t).sort(function (t, e) {
        return t - e;
      })).length; a < s; a++) {
        e = n[a], 100 <= r.length && (o += "\n" + r.length + " beginbfchar\n" + r.join("\n") + "\nendbfchar", r = []), i = ("0000" + t[e].toString(16)).slice(-4), e = ("0000" + (+e).toString(16)).slice(-4), r.push("<" + e + "><" + i + ">");
      }

      return r.length && (o += "\n" + r.length + " beginbfchar\n" + r.join("\n") + "\nendbfchar\n"), o += "endcmap\nCMapName currentdict /CMap defineresource pop\nend\nend";
    };

    e.events.push(["putFont", function (t) {
      !function (t, e, n, r) {
        if (t.metadata instanceof f.API.TTFFont && "Identity-H" === t.encoding) {
          for (var i = t.metadata.Unicode.widths, o = t.metadata.subset.encode(t.metadata.glyIdsUsed, 1), a = "", s = 0; s < o.length; s++) {
            a += String.fromCharCode(o[s]);
          }

          var l = n();
          r({
            data: a,
            addLength1: !0
          }), e("endobj");
          var h = n();
          r({
            data: p(t.metadata.toUnicode),
            addLength1: !0
          }), e("endobj");
          var u = n();
          e("<<"), e("/Type /FontDescriptor"), e("/FontName /" + t.fontName), e("/FontFile2 " + l + " 0 R"), e("/FontBBox " + f.API.PDFObject.convert(t.metadata.bbox)), e("/Flags " + t.metadata.flags), e("/StemV " + t.metadata.stemV), e("/ItalicAngle " + t.metadata.italicAngle), e("/Ascent " + t.metadata.ascender), e("/Descent " + t.metadata.decender), e("/CapHeight " + t.metadata.capHeight), e(">>"), e("endobj");
          var c = n();
          e("<<"), e("/Type /Font"), e("/BaseFont /" + t.fontName), e("/FontDescriptor " + u + " 0 R"), e("/W " + f.API.PDFObject.convert(i)), e("/CIDToGIDMap /Identity"), e("/DW 1000"), e("/Subtype /CIDFontType2"), e("/CIDSystemInfo"), e("<<"), e("/Supplement 0"), e("/Registry (Adobe)"), e("/Ordering (" + t.encoding + ")"), e(">>"), e(">>"), e("endobj"), t.objectNumber = n(), e("<<"), e("/Type /Font"), e("/Subtype /Type0"), e("/ToUnicode " + h + " 0 R"), e("/BaseFont /" + t.fontName), e("/Encoding /" + t.encoding), e("/DescendantFonts [" + c + " 0 R]"), e(">>"), e("endobj"), t.isAlreadyPutted = !0;
        }
      }(t.font, t.out, t.newObject, t.putStream);
    }]);
    e.events.push(["putFont", function (t) {
      !function (t, e, n, r) {
        if (t.metadata instanceof f.API.TTFFont && "WinAnsiEncoding" === t.encoding) {
          t.metadata.Unicode.widths;

          for (var i = t.metadata.rawData, o = "", a = 0; a < i.length; a++) {
            o += String.fromCharCode(i[a]);
          }

          var s = n();
          r({
            data: o,
            addLength1: !0
          }), e("endobj");
          var l = n();
          r({
            data: p(t.metadata.toUnicode),
            addLength1: !0
          }), e("endobj");
          var h = n();

          for (e("<<"), e("/Descent " + t.metadata.decender), e("/CapHeight " + t.metadata.capHeight), e("/StemV " + t.metadata.stemV), e("/Type /FontDescriptor"), e("/FontFile2 " + s + " 0 R"), e("/Flags 96"), e("/FontBBox " + f.API.PDFObject.convert(t.metadata.bbox)), e("/FontName /" + t.fontName), e("/ItalicAngle " + t.metadata.italicAngle), e("/Ascent " + t.metadata.ascender), e(">>"), e("endobj"), t.objectNumber = n(), a = 0; a < t.metadata.hmtx.widths.length; a++) {
            t.metadata.hmtx.widths[a] = parseInt(t.metadata.hmtx.widths[a] * (1e3 / t.metadata.head.unitsPerEm));
          }

          e("<</Subtype/TrueType/Type/Font/ToUnicode " + l + " 0 R/BaseFont/" + t.fontName + "/FontDescriptor " + h + " 0 R/Encoding/" + t.encoding + " /FirstChar 29 /LastChar 255 /Widths " + f.API.PDFObject.convert(t.metadata.hmtx.widths) + ">>"), e("endobj"), t.isAlreadyPutted = !0;
        }
      }(t.font, t.out, t.newObject, t.putStream);
    }]);

    var h = function h(t) {
      var e,
          n,
          r = t.text || "",
          i = t.x,
          o = t.y,
          a = t.options || {},
          s = t.mutex || {},
          l = s.pdfEscape,
          h = s.activeFontKey,
          u = s.fonts,
          c = (s.activeFontSize, ""),
          f = 0,
          p = "",
          d = u[n = h].encoding;
      if ("Identity-H" !== u[n].encoding) return {
        text: r,
        x: i,
        y: o,
        options: a,
        mutex: s
      };

      for (p = r, n = h, "[object Array]" === Object.prototype.toString.call(r) && (p = r[0]), f = 0; f < p.length; f += 1) {
        u[n].metadata.hasOwnProperty("cmap") && (e = u[n].metadata.cmap.unicode.codeMap[p[f].charCodeAt(0)]), e ? c += p[f] : p[f].charCodeAt(0) < 256 && u[n].metadata.hasOwnProperty("Unicode") ? c += p[f] : c += "";
      }

      var g = "";
      return parseInt(n.slice(1)) < 14 || "WinAnsiEncoding" === d ? g = function (t) {
        for (var e = "", n = 0; n < t.length; n++) {
          e += "" + t.charCodeAt(n).toString(16);
        }

        return e;
      }(l(c, n)) : "Identity-H" === d && (g = m(c, u[n])), s.isHex = !0, {
        text: g,
        x: i,
        y: o,
        options: a,
        mutex: s
      };
    };

    e.events.push(["postProcessText", function (t) {
      var e = t.text || "",
          n = t.x,
          r = t.y,
          i = t.options,
          o = t.mutex,
          a = (i.lang, []),
          s = {
        text: e,
        x: n,
        y: r,
        options: i,
        mutex: o
      };

      if ("[object Array]" === Object.prototype.toString.call(e)) {
        var l = 0;

        for (l = 0; l < e.length; l += 1) {
          "[object Array]" === Object.prototype.toString.call(e[l]) && 3 === e[l].length ? a.push([h(Object.assign({}, s, {
            text: e[l][0]
          })).text, e[l][1], e[l][2]]) : a.push(h(Object.assign({}, s, {
            text: e[l]
          })).text);
        }

        t.text = a;
      } else t.text = h(Object.assign({}, s, {
        text: e
      })).text;
    }]);
  }(lt, "undefined" != typeof self && self || "undefined" != typeof global && global || "undefined" != typeof window && window || Function("return this")()), at = lt.API, st = function st(t) {
    return void 0 !== t && (void 0 === t.vFS && (t.vFS = {}), !0);
  }, at.existsFileInVFS = function (t) {
    return !!st(this.internal) && void 0 !== this.internal.vFS[t];
  }, at.addFileToVFS = function (t, e) {
    return st(this.internal), this.internal.vFS[t] = e, this;
  }, at.getFileFromVFS = function (t) {
    return st(this.internal), void 0 !== this.internal.vFS[t] ? this.internal.vFS[t] : null;
  }, lt.API.addHTML = function (t, d, g, s, m) {
    if ("undefined" == typeof html2canvas && "undefined" == typeof rasterizeHTML) throw new Error("You need either https://github.com/niklasvh/html2canvas or https://github.com/cburgmer/rasterizeHTML.js");
    "number" != typeof d && (s = d, m = g), "function" == typeof s && (m = s, s = null), "function" != typeof m && (m = function m() {});
    var e = this.internal,
        y = e.scaleFactor,
        v = e.pageSize.getWidth(),
        w = e.pageSize.getHeight();
    if ((s = s || {}).onrendered = function (l) {
      d = parseInt(d) || 0, g = parseInt(g) || 0;
      var t = s.dim || {},
          h = Object.assign({
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        useFor: "content"
      }, s.margin),
          e = t.h || Math.min(w, l.height / y),
          u = t.w || Math.min(v, l.width / y) - d,
          c = s.format || "JPEG",
          f = s.imageCompression || "SLOW";

      if (l.height > w - h.top - h.bottom && s.pagesplit) {
        var p = function p(t, e, n, r, i) {
          var o = document.createElement("canvas");
          o.height = i, o.width = r;
          var a = o.getContext("2d");
          return a.mozImageSmoothingEnabled = !1, a.webkitImageSmoothingEnabled = !1, a.msImageSmoothingEnabled = !1, a.imageSmoothingEnabled = !1, a.fillStyle = s.backgroundColor || "#ffffff", a.fillRect(0, 0, r, i), a.drawImage(t, e, n, r, i, 0, 0, r, i), o;
        },
            n = function () {
          for (var t, e, n = 0, r = 0, i = {}, o = !1;;) {
            var a;
            if (r = 0, i.top = 0 !== n ? h.top : g, i.left = 0 !== n ? h.left : d, o = (v - h.left - h.right) * y < l.width, "content" === h.useFor ? 0 === n ? (t = Math.min((v - h.left) * y, l.width), e = Math.min((w - h.top) * y, l.height - n)) : (t = Math.min(v * y, l.width), e = Math.min(w * y, l.height - n), i.top = 0) : (t = Math.min((v - h.left - h.right) * y, l.width), e = Math.min((w - h.bottom - h.top) * y, l.height - n)), o) for (;;) {
              "content" === h.useFor && (0 === r ? t = Math.min((v - h.left) * y, l.width) : (t = Math.min(v * y, l.width - r), i.left = 0));
              var s = [a = p(l, r, n, t, e), i.left, i.top, a.width / y, a.height / y, c, null, f];
              if (this.addImage.apply(this, s), (r += t) >= l.width) break;
              this.addPage();
            } else s = [a = p(l, 0, n, t, e), i.left, i.top, a.width / y, a.height / y, c, null, f], this.addImage.apply(this, s);
            if ((n += e) >= l.height) break;
            this.addPage();
          }

          m(u, n, null, s);
        }.bind(this);

        if ("CANVAS" === l.nodeName) {
          var r = new Image();
          r.onload = n, r.src = l.toDataURL("image/png"), l = r;
        } else n();
      } else {
        var i = Math.random().toString(35),
            o = [l, d, g, u, e, c, i, f];
        this.addImage.apply(this, o), m(u, e, i, o);
      }
    }.bind(this), "undefined" != typeof html2canvas && !s.rstz) return html2canvas(t, s);
    if ("undefined" == typeof rasterizeHTML) return null;
    var n = "drawDocument";
    return "string" == typeof t && (n = /^http/.test(t) ? "drawURL" : "drawHTML"), s.width = s.width || v * y, rasterizeHTML[n](t, void 0, s).then(function (t) {
      s.onrendered(t.image);
    }, function (t) {
      m(null, t);
    });
  },
  /**
     * jsPDF fromHTML plugin. BETA stage. API subject to change. Needs browser
     * Copyright (c) 2012 Willow Systems Corporation, willow-systems.com
     *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria
     *               2014 Diego Casorran, https://github.com/diegocr
     *               2014 Daniel Husar, https://github.com/danielhusar
     *               2014 Wolfgang Gassler, https://github.com/woolfg
     *               2014 Steven Spungin, https://github.com/flamenco
     *
     * @license
     * 
     * ====================================================================
     */
  function (t) {
    var P, _k, i, a, s, l, h, u, I, w, f, c, p, n, C, B, d, g, m, j;

    P = function () {
      return function (t) {
        return e.prototype = t, new e();
      };

      function e() {}
    }(), w = function w(t) {
      var e, n, r, i, o, a, s;

      for (n = 0, r = t.length, e = void 0, a = i = !1; !i && n !== r;) {
        (e = t[n] = t[n].trimLeft()) && (i = !0), n++;
      }

      for (n = r - 1; r && !a && -1 !== n;) {
        (e = t[n] = t[n].trimRight()) && (a = !0), n--;
      }

      for (o = /\s+$/g, s = !0, n = 0; n !== r;) {
        "\u2028" != t[n] && (e = t[n].replace(/\s+/g, " "), s && (e = e.trimLeft()), e && (s = o.test(e)), t[n] = e), n++;
      }

      return t;
    }, c = function c(t) {
      var e, n, r;

      for (e = void 0, n = (r = t.split(",")).shift(); !e && n;) {
        e = i[n.trim().toLowerCase()], n = r.shift();
      }

      return e;
    }, p = function p(t) {
      var e;
      return -1 < (t = "auto" === t ? "0px" : t).indexOf("em") && !isNaN(Number(t.replace("em", ""))) && (t = 18.719 * Number(t.replace("em", "")) + "px"), -1 < t.indexOf("pt") && !isNaN(Number(t.replace("pt", ""))) && (t = 1.333 * Number(t.replace("pt", "")) + "px"), void 0, 16, (e = n[t]) ? e : void 0 !== (e = {
        "xx-small": 9,
        "x-small": 11,
        small: 13,
        medium: 16,
        large: 19,
        "x-large": 23,
        "xx-large": 28,
        auto: 0
      }[t]) ? n[t] = e / 16 : (e = parseFloat(t)) ? n[t] = e / 16 : (e = t.match(/([\d\.]+)(px)/), Array.isArray(e) && 3 === e.length ? n[t] = parseFloat(e[1]) / 16 : n[t] = 1);
    }, I = function I(t) {
      var e, n, r, i, o;
      return o = t, i = document.defaultView && document.defaultView.getComputedStyle ? document.defaultView.getComputedStyle(o, null) : o.currentStyle ? o.currentStyle : o.style, n = void 0, (e = {})["font-family"] = c((r = function r(t) {
        return t = t.replace(/-\D/g, function (t) {
          return t.charAt(1).toUpperCase();
        }), i[t];
      })("font-family")) || "times", e["font-style"] = a[r("font-style")] || "normal", e["text-align"] = s[r("text-align")] || "left", "bold" === (n = l[r("font-weight")] || "normal") && ("normal" === e["font-style"] ? e["font-style"] = n : e["font-style"] = n + e["font-style"]), e["font-size"] = p(r("font-size")) || 1, e["line-height"] = p(r("line-height")) || 1, e.display = "inline" === r("display") ? "inline" : "block", n = "block" === e.display, e["margin-top"] = n && p(r("margin-top")) || 0, e["margin-bottom"] = n && p(r("margin-bottom")) || 0, e["padding-top"] = n && p(r("padding-top")) || 0, e["padding-bottom"] = n && p(r("padding-bottom")) || 0, e["margin-left"] = n && p(r("margin-left")) || 0, e["margin-right"] = n && p(r("margin-right")) || 0, e["padding-left"] = n && p(r("padding-left")) || 0, e["padding-right"] = n && p(r("padding-right")) || 0, e["page-break-before"] = r("page-break-before") || "auto", e["float"] = h[r("cssFloat")] || "none", e.clear = u[r("clear")] || "none", e.color = r("color"), e;
    }, C = function C(t, e, n) {
      var r, i, o, a, s;
      if (o = !1, a = i = void 0, r = n["#" + t.id]) if ("function" == typeof r) o = r(t, e);else for (i = 0, a = r.length; !o && i !== a;) {
        o = r[i](t, e), i++;
      }
      if (r = n[t.nodeName], !o && r) if ("function" == typeof r) o = r(t, e);else for (i = 0, a = r.length; !o && i !== a;) {
        o = r[i](t, e), i++;
      }

      for (s = "string" == typeof t.className ? t.className.split(" ") : [], i = 0; i < s.length; i++) {
        if (r = n["." + s[i]], !o && r) if ("function" == typeof r) o = r(t, e);else for (i = 0, a = r.length; !o && i !== a;) {
          o = r[i](t, e), i++;
        }
      }

      return o;
    }, j = function j(t, e) {
      var n, r, i, o, a, s, l, h, u;

      for (n = [], r = [], i = 0, u = t.rows[0].cells.length, l = t.clientWidth; i < u;) {
        h = t.rows[0].cells[i], r[i] = {
          name: h.textContent.toLowerCase().replace(/\s+/g, ""),
          prompt: h.textContent.replace(/\r?\n/g, ""),
          width: h.clientWidth / l * e.pdf.internal.pageSize.getWidth()
        }, i++;
      }

      for (i = 1; i < t.rows.length;) {
        for (s = t.rows[i], a = {}, o = 0; o < s.cells.length;) {
          a[r[o].name] = s.cells[o].textContent.replace(/\r?\n/g, ""), o++;
        }

        n.push(a), i++;
      }

      return {
        rows: n,
        headers: r
      };
    };
    var E = {
      SCRIPT: 1,
      STYLE: 1,
      NOSCRIPT: 1,
      OBJECT: 1,
      EMBED: 1,
      SELECT: 1
    },
        M = 1;
    _k = function k(t, i, e) {
      var n, r, o, a, s, l, h, u;

      for (r = t.childNodes, n = void 0, (s = "block" === (o = I(t)).display) && (i.setBlockBoundary(), i.setBlockStyle(o)), a = 0, l = r.length; a < l;) {
        if ("object" === se(n = r[a])) {
          if (i.executeWatchFunctions(n), 1 === n.nodeType && "HEADER" === n.nodeName) {
            var c = n,
                f = i.pdf.margins_doc.top;
            i.pdf.internal.events.subscribe("addPage", function (t) {
              i.y = f, _k(c, i, e), i.pdf.margins_doc.top = i.y + 10, i.y += 10;
            }, !1);
          }

          if (8 === n.nodeType && "#comment" === n.nodeName) ~n.textContent.indexOf("ADD_PAGE") && (i.pdf.addPage(), i.y = i.pdf.margins_doc.top);else if (1 !== n.nodeType || E[n.nodeName]) {
            if (3 === n.nodeType) {
              var p = n.nodeValue;
              if (n.nodeValue && "LI" === n.parentNode.nodeName) if ("OL" === n.parentNode.parentNode.nodeName) p = M++ + ". " + p;else {
                var d = o["font-size"],
                    g = (3 - .75 * d) * i.pdf.internal.scaleFactor,
                    m = .75 * d * i.pdf.internal.scaleFactor,
                    y = 1.74 * d / i.pdf.internal.scaleFactor;

                u = function u(t, e) {
                  this.pdf.circle(t + g, e + m, y, "FD");
                };
              }
              16 & n.ownerDocument.body.compareDocumentPosition(n) && i.addText(p, o);
            } else "string" == typeof n && i.addText(n, o);
          } else {
            var v;

            if ("IMG" === n.nodeName) {
              var w = n.getAttribute("src");
              v = B[i.pdf.sHashCode(w) || w];
            }

            if (v) {
              i.pdf.internal.pageSize.getHeight() - i.pdf.margins_doc.bottom < i.y + n.height && i.y > i.pdf.margins_doc.top && (i.pdf.addPage(), i.y = i.pdf.margins_doc.top, i.executeWatchFunctions(n));

              var b = I(n),
                  x = i.x,
                  N = 12 / i.pdf.internal.scaleFactor,
                  L = (b["margin-left"] + b["padding-left"]) * N,
                  A = (b["margin-right"] + b["padding-right"]) * N,
                  S = (b["margin-top"] + b["padding-top"]) * N,
                  _ = (b["margin-bottom"] + b["padding-bottom"]) * N;

              void 0 !== b["float"] && "right" === b["float"] ? x += i.settings.width - n.width - A : x += L, i.pdf.addImage(v, x, i.y + S, n.width, n.height), v = void 0, "right" === b["float"] || "left" === b["float"] ? (i.watchFunctions.push(function (t, e, n, r) {
                return i.y >= e ? (i.x += t, i.settings.width += n, !0) : !!(r && 1 === r.nodeType && !E[r.nodeName] && i.x + r.width > i.pdf.margins_doc.left + i.pdf.margins_doc.width) && (i.x += t, i.y = e, i.settings.width += n, !0);
              }.bind(this, "left" === b["float"] ? -n.width - L - A : 0, i.y + n.height + S + _, n.width)), i.watchFunctions.push(function (t, e, n) {
                return !(i.y < t && e === i.pdf.internal.getNumberOfPages()) || 1 === n.nodeType && "both" === I(n).clear && (i.y = t, !0);
              }.bind(this, i.y + n.height, i.pdf.internal.getNumberOfPages())), i.settings.width -= n.width + L + A, "left" === b["float"] && (i.x += n.width + L + A)) : i.y += n.height + S + _;
            } else if ("TABLE" === n.nodeName) h = j(n, i), i.y += 10, i.pdf.table(i.x, i.y, h.rows, h.headers, {
              autoSize: !1,
              printHeaders: e.printHeaders,
              margins: i.pdf.margins_doc,
              css: I(n)
            }), i.y = i.pdf.lastCellPos.y + i.pdf.lastCellPos.h + 20;else if ("OL" === n.nodeName || "UL" === n.nodeName) M = 1, C(n, i, e) || _k(n, i, e), i.y += 10;else if ("LI" === n.nodeName) {
              var F = i.x;
              i.x += 20 / i.pdf.internal.scaleFactor, i.y += 3, C(n, i, e) || _k(n, i, e), i.x = F;
            } else "BR" === n.nodeName ? (i.y += o["font-size"] * i.pdf.internal.scaleFactor, i.addText("\u2028", P(o))) : C(n, i, e) || _k(n, i, e);
          }
        }

        a++;
      }

      if (e.outY = i.y, s) return i.setBlockBoundary(u);
    }, B = {}, d = function d(t, o, e, n) {
      var a,
          r = t.getElementsByTagName("img"),
          i = r.length,
          s = 0;

      function l() {
        o.pdf.internal.events.publish("imagesLoaded"), n(a);
      }

      function h(e, n, r) {
        if (e) {
          var i = new Image();
          a = ++s, i.crossOrigin = "", i.onerror = i.onload = function () {
            if (i.complete && (0 === i.src.indexOf("data:image/") && (i.width = n || i.width || 0, i.height = r || i.height || 0), i.width + i.height)) {
              var t = o.pdf.sHashCode(e) || e;
              B[t] = B[t] || i;
            }

            --s || l();
          }, i.src = e;
        }
      }

      for (; i--;) {
        h(r[i].getAttribute("src"), r[i].width, r[i].height);
      }

      return s || l();
    }, g = function g(t, o, a) {
      var s = t.getElementsByTagName("footer");

      if (0 < s.length) {
        s = s[0];
        var e = o.pdf.internal.write,
            n = o.y;
        o.pdf.internal.write = function () {}, _k(s, o, a);
        var l = Math.ceil(o.y - n) + 5;
        o.y = n, o.pdf.internal.write = e, o.pdf.margins_doc.bottom += l;

        for (var r = function r(t) {
          var e = void 0 !== t ? t.pageNumber : 1,
              n = o.y;
          o.y = o.pdf.internal.pageSize.getHeight() - o.pdf.margins_doc.bottom, o.pdf.margins_doc.bottom -= l;

          for (var r = s.getElementsByTagName("span"), i = 0; i < r.length; ++i) {
            -1 < (" " + r[i].className + " ").replace(/[\n\t]/g, " ").indexOf(" pageCounter ") && (r[i].innerHTML = e), -1 < (" " + r[i].className + " ").replace(/[\n\t]/g, " ").indexOf(" totalPages ") && (r[i].innerHTML = "###jsPDFVarTotalPages###");
          }

          _k(s, o, a), o.pdf.margins_doc.bottom += l, o.y = n;
        }, i = s.getElementsByTagName("span"), h = 0; h < i.length; ++h) {
          -1 < (" " + i[h].className + " ").replace(/[\n\t]/g, " ").indexOf(" totalPages ") && o.pdf.internal.events.subscribe("htmlRenderingFinished", o.pdf.putTotalPages.bind(o.pdf, "###jsPDFVarTotalPages###"), !0);
        }

        o.pdf.internal.events.subscribe("addPage", r, !1), r(), E.FOOTER = 1;
      }
    }, m = function m(t, e, n, r, i, o) {
      if (!e) return !1;
      var a, s, l, h;
      "string" == typeof e || e.parentNode || (e = "" + e.innerHTML), "string" == typeof e && (a = e.replace(/<\/?script[^>]*?>/gi, ""), h = "jsPDFhtmlText" + Date.now().toString() + (1e3 * Math.random()).toFixed(0), (l = document.createElement("div")).style.cssText = "position: absolute !important;clip: rect(1px 1px 1px 1px); /* IE6, IE7 */clip: rect(1px, 1px, 1px, 1px);padding:0 !important;border:0 !important;height: 1px !important;width: 1px !important; top:auto;left:-100px;overflow: hidden;", l.innerHTML = '<iframe style="height:1px;width:1px" name="' + h + '" />', document.body.appendChild(l), (s = window.frames[h]).document.open(), s.document.writeln(a), s.document.close(), e = s.document.body);
      var u,
          c = new f(t, n, r, i);
      return d.call(this, e, c, i.elementHandlers, function (t) {
        g(e, c, i.elementHandlers), _k(e, c, i.elementHandlers), c.pdf.internal.events.publish("htmlRenderingFinished"), u = c.dispose(), "function" == typeof o ? o(u) : t && console.error("jsPDF Warning: rendering issues? provide a callback to fromHTML!");
      }), u || {
        x: c.x,
        y: c.y
      };
    }, (f = function f(t, e, n, r) {
      return this.pdf = t, this.x = e, this.y = n, this.settings = r, this.watchFunctions = [], this.init(), this;
    }).prototype.init = function () {
      return this.paragraph = {
        text: [],
        style: []
      }, this.pdf.internal.write("q");
    }, f.prototype.dispose = function () {
      return this.pdf.internal.write("Q"), {
        x: this.x,
        y: this.y,
        ready: !0
      };
    }, f.prototype.executeWatchFunctions = function (t) {
      var e = !1,
          n = [];

      if (0 < this.watchFunctions.length) {
        for (var r = 0; r < this.watchFunctions.length; ++r) {
          !0 === this.watchFunctions[r](t) ? e = !0 : n.push(this.watchFunctions[r]);
        }

        this.watchFunctions = n;
      }

      return e;
    }, f.prototype.splitFragmentsIntoLines = function (t, e) {
      var n, r, i, o, a, s, l, h, u, c, f, p, d, g;

      for (12, c = this.pdf.internal.scaleFactor, o = {}, s = l = h = g = a = i = u = r = void 0, p = [f = []], n = 0, d = this.settings.width; t.length;) {
        if (a = t.shift(), g = e.shift(), a) if ((i = o[(r = g["font-family"]) + (u = g["font-style"])]) || (i = this.pdf.internal.getFont(r, u).metadata.Unicode, o[r + u] = i), h = {
          widths: i.widths,
          kerning: i.kerning,
          fontSize: 12 * g["font-size"],
          textIndent: n
        }, l = this.pdf.getStringUnitWidth(a, h) * h.fontSize / c, "\u2028" == a) f = [], p.push(f);else if (d < n + l) {
          for (s = this.pdf.splitTextToSize(a, d, h), f.push([s.shift(), g]); s.length;) {
            f = [[s.shift(), g]], p.push(f);
          }

          n = this.pdf.getStringUnitWidth(f[0][0], h) * h.fontSize / c;
        } else f.push([a, g]), n += l;
      }

      if (void 0 !== g["text-align"] && ("center" === g["text-align"] || "right" === g["text-align"] || "justify" === g["text-align"])) for (var m = 0; m < p.length; ++m) {
        var y = this.pdf.getStringUnitWidth(p[m][0][0], h) * h.fontSize / c;
        0 < m && (p[m][0][1] = P(p[m][0][1]));
        var v = d - y;
        if ("right" === g["text-align"]) p[m][0][1]["margin-left"] = v;else if ("center" === g["text-align"]) p[m][0][1]["margin-left"] = v / 2;else if ("justify" === g["text-align"]) {
          var w = p[m][0][0].split(" ").length - 1;
          p[m][0][1]["word-spacing"] = v / w, m === p.length - 1 && (p[m][0][1]["word-spacing"] = 0);
        }
      }
      return p;
    }, f.prototype.RenderTextFragment = function (t, e) {
      var n, r;
      r = 0, this.pdf.internal.pageSize.getHeight() - this.pdf.margins_doc.bottom < this.y + this.pdf.internal.getFontSize() && (this.pdf.internal.write("ET", "Q"), this.pdf.addPage(), this.y = this.pdf.margins_doc.top, this.pdf.internal.write("q", "BT", this.getPdfColor(e.color), this.pdf.internal.getCoordinateString(this.x), this.pdf.internal.getVerticalCoordinateString(this.y), "Td"), r = Math.max(r, e["line-height"], e["font-size"]), this.pdf.internal.write(0, (-12 * r).toFixed(2), "Td")), n = this.pdf.internal.getFont(e["font-family"], e["font-style"]);
      var i = this.getPdfColor(e.color);
      i !== this.lastTextColor && (this.pdf.internal.write(i), this.lastTextColor = i), void 0 !== e["word-spacing"] && 0 < e["word-spacing"] && this.pdf.internal.write(e["word-spacing"].toFixed(2), "Tw"), this.pdf.internal.write("/" + n.id, (12 * e["font-size"]).toFixed(2), "Tf", "(" + this.pdf.internal.pdfEscape(t) + ") Tj"), void 0 !== e["word-spacing"] && this.pdf.internal.write(0, "Tw");
    }, f.prototype.getPdfColor = function (t) {
      var e,
          n,
          r,
          i = /rgb\s*\(\s*(\d+),\s*(\d+),\s*(\d+\s*)\)/.exec(t);
      if (null != i) e = parseInt(i[1]), n = parseInt(i[2]), r = parseInt(i[3]);else {
        if ("string" == typeof t && "#" != t.charAt(0)) {
          var o = new RGBColor(t);
          t = o.ok ? o.toHex() : "#000000";
        }

        e = t.substring(1, 3), e = parseInt(e, 16), n = t.substring(3, 5), n = parseInt(n, 16), r = t.substring(5, 7), r = parseInt(r, 16);
      }

      if ("string" == typeof e && /^#[0-9A-Fa-f]{6}$/.test(e)) {
        var a = parseInt(e.substr(1), 16);
        e = a >> 16 & 255, n = a >> 8 & 255, r = 255 & a;
      }

      var s = this.f3;
      return 0 === e && 0 === n && 0 === r || void 0 === n ? s(e / 255) + " g" : [s(e / 255), s(n / 255), s(r / 255), "rg"].join(" ");
    }, f.prototype.f3 = function (t) {
      return t.toFixed(3);
    }, f.prototype.renderParagraph = function (t) {
      var e, n, r, i, o, a, s, l, h, u, c, f, p;

      if (r = w(this.paragraph.text), f = this.paragraph.style, e = this.paragraph.blockstyle, this.paragraph.priorblockstyle || {}, this.paragraph = {
        text: [],
        style: [],
        blockstyle: {},
        priorblockstyle: e
      }, r.join("").trim()) {
        s = this.splitFragmentsIntoLines(r, f), l = a = void 0, n = 12 / this.pdf.internal.scaleFactor, this.priorMarginBottom = this.priorMarginBottom || 0, c = (Math.max((e["margin-top"] || 0) - this.priorMarginBottom, 0) + (e["padding-top"] || 0)) * n, u = ((e["margin-bottom"] || 0) + (e["padding-bottom"] || 0)) * n, this.priorMarginBottom = e["margin-bottom"] || 0, "always" === e["page-break-before"] && (this.pdf.addPage(), this.y = 0, c = ((e["margin-top"] || 0) + (e["padding-top"] || 0)) * n), h = this.pdf.internal.write, o = i = void 0, this.y += c, h("q", "BT 0 g", this.pdf.internal.getCoordinateString(this.x), this.pdf.internal.getVerticalCoordinateString(this.y), "Td");

        for (var d = 0; s.length;) {
          for (i = l = 0, o = (a = s.shift()).length; i !== o;) {
            a[i][0].trim() && (l = Math.max(l, a[i][1]["line-height"], a[i][1]["font-size"]), p = 7 * a[i][1]["font-size"]), i++;
          }

          var g = 0,
              m = 0;

          for (void 0 !== a[0][1]["margin-left"] && 0 < a[0][1]["margin-left"] && (g = (m = this.pdf.internal.getCoordinateString(a[0][1]["margin-left"])) - d, d = m), h(g + Math.max(e["margin-left"] || 0, 0) * n, (-12 * l).toFixed(2), "Td"), i = 0, o = a.length; i !== o;) {
            a[i][0] && this.RenderTextFragment(a[i][0], a[i][1]), i++;
          }

          if (this.y += l * n, this.executeWatchFunctions(a[0][1]) && 0 < s.length) {
            var y = [],
                v = [];
            s.forEach(function (t) {
              for (var e = 0, n = t.length; e !== n;) {
                t[e][0] && (y.push(t[e][0] + " "), v.push(t[e][1])), ++e;
              }
            }), s = this.splitFragmentsIntoLines(w(y), v), h("ET", "Q"), h("q", "BT 0 g", this.pdf.internal.getCoordinateString(this.x), this.pdf.internal.getVerticalCoordinateString(this.y), "Td");
          }
        }

        return t && "function" == typeof t && t.call(this, this.x - 9, this.y - p / 2), h("ET", "Q"), this.y += u;
      }
    }, f.prototype.setBlockBoundary = function (t) {
      return this.renderParagraph(t);
    }, f.prototype.setBlockStyle = function (t) {
      return this.paragraph.blockstyle = t;
    }, f.prototype.addText = function (t, e) {
      return this.paragraph.text.push(t), this.paragraph.style.push(e);
    }, i = {
      helvetica: "helvetica",
      "sans-serif": "helvetica",
      "times new roman": "times",
      serif: "times",
      times: "times",
      monospace: "courier",
      courier: "courier"
    }, l = {
      100: "normal",
      200: "normal",
      300: "normal",
      400: "normal",
      500: "bold",
      600: "bold",
      700: "bold",
      800: "bold",
      900: "bold",
      normal: "normal",
      bold: "bold",
      bolder: "bold",
      lighter: "normal"
    }, a = {
      normal: "normal",
      italic: "italic",
      oblique: "italic"
    }, s = {
      left: "left",
      right: "right",
      center: "center",
      justify: "justify"
    }, h = {
      none: "none",
      right: "right",
      left: "left"
    }, u = {
      none: "none",
      both: "both"
    }, n = {
      normal: 1
    }, t.fromHTML = function (t, e, n, r, i, o) {
      return this.margins_doc = o || {
        top: 0,
        bottom: 0
      }, r || (r = {}), r.elementHandlers || (r.elementHandlers = {}), m(this, t, isNaN(e) ? 4 : e, isNaN(n) ? 4 : n, r, i);
    };
  }(lt.API), lt.API, ("undefined" != typeof window && window || "undefined" != typeof global && global).html2pdf = function (t, a, e) {
    var n = a.canvas;

    if (n) {
      var r, i;

      if ((n.pdf = a).annotations = {
        _nameMap: [],
        createAnnotation: function createAnnotation(t, e) {
          var n,
              r = a.context2d._wrapX(e.left),
              i = a.context2d._wrapY(e.top),
              o = (a.context2d._page(e.top), t.indexOf("#"));

          n = 0 <= o ? {
            name: t.substring(o + 1)
          } : {
            url: t
          }, a.link(r, i, e.right - e.left, e.bottom - e.top, n);
        },
        setName: function setName(t, e) {
          var n = a.context2d._wrapX(e.left),
              r = a.context2d._wrapY(e.top),
              i = a.context2d._page(e.top);

          this._nameMap[t] = {
            page: i,
            x: n,
            y: r
          };
        }
      }, n.annotations = a.annotations, a.context2d._pageBreakAt = function (t) {
        this.pageBreaks.push(t);
      }, a.context2d._gotoPage = function (t) {
        for (; a.internal.getNumberOfPages() < t;) {
          a.addPage();
        }

        a.setPage(t);
      }, "string" == typeof t) {
        t = t.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, "");
        var o,
            s,
            l = document.createElement("iframe");
        document.body.appendChild(l), null != (o = l.contentDocument) && null != o || (o = l.contentWindow.document), o.open(), o.write(t), o.close(), r = o.body, s = o.body || {}, t = o.documentElement || {}, i = Math.max(s.scrollHeight, s.offsetHeight, t.clientHeight, t.scrollHeight, t.offsetHeight);
      } else s = (r = t).body || {}, i = Math.max(s.scrollHeight, s.offsetHeight, t.clientHeight, t.scrollHeight, t.offsetHeight);

      var h = {
        async: !0,
        allowTaint: !0,
        backgroundColor: "#ffffff",
        canvas: n,
        imageTimeout: 15e3,
        logging: !0,
        proxy: null,
        removeContainer: !0,
        foreignObjectRendering: !1,
        useCORS: !1,
        windowHeight: i = a.internal.pageSize.getHeight(),
        scrollY: i
      };
      a.context2d.pageWrapYEnabled = !0, a.context2d.pageWrapY = a.internal.pageSize.getHeight(), html2canvas(r, h).then(function (t) {
        e && (l && l.parentElement.removeChild(l), e(a));
      });
    } else alert("jsPDF canvas plugin not installed");
  }, window.tmp = html2pdf, function (f) {
    var r = f.BlobBuilder || f.WebKitBlobBuilder || f.MSBlobBuilder || f.MozBlobBuilder;

    f.URL = f.URL || f.webkitURL || function (t, e) {
      return (e = document.createElement("a")).href = t, e;
    };

    var n = f.Blob,
        p = URL.createObjectURL,
        d = URL.revokeObjectURL,
        o = f.Symbol && f.Symbol.toStringTag,
        t = !1,
        e = !1,
        g = !!f.ArrayBuffer,
        i = r && r.prototype.append && r.prototype.getBlob;

    try {
      t = 2 === new Blob(["ä"]).size, e = 2 === new Blob([new Uint8Array([1, 2])]).size;
    } catch (t) {}

    function a(t) {
      return t.map(function (t) {
        if (t.buffer instanceof ArrayBuffer) {
          var e = t.buffer;

          if (t.byteLength !== e.byteLength) {
            var n = new Uint8Array(t.byteLength);
            n.set(new Uint8Array(e, t.byteOffset, t.byteLength)), e = n.buffer;
          }

          return e;
        }

        return t;
      });
    }

    function s(t, e) {
      e = e || {};
      var n = new r();
      return a(t).forEach(function (t) {
        n.append(t);
      }), e.type ? n.getBlob(e.type) : n.getBlob();
    }

    function l(t, e) {
      return new n(a(t), e || {});
    }

    if (f.Blob && (s.prototype = Blob.prototype, l.prototype = Blob.prototype), o) try {
      File.prototype[o] = "File", Blob.prototype[o] = "Blob", FileReader.prototype[o] = "FileReader";
    } catch (t) {}

    function h() {
      var t = !!f.ActiveXObject || "-ms-scroll-limit" in document.documentElement.style && "-ms-ime-align" in document.documentElement.style,
          e = f.XMLHttpRequest && f.XMLHttpRequest.prototype.send;
      t && e && (XMLHttpRequest.prototype.send = function (t) {
        t instanceof Blob && this.setRequestHeader("Content-Type", t.type), e.call(this, t);
      });

      try {
        new File([], "");
      } catch (t) {
        try {
          var n = new Function('class File extends Blob {constructor(chunks, name, opts) {opts = opts || {};super(chunks, opts || {});this.name = name;this.lastModifiedDate = opts.lastModified ? new Date(opts.lastModified) : new Date;this.lastModified = +this.lastModifiedDate;}};return new File([], ""), File')();
          f.File = n;
        } catch (t) {
          n = function n(t, e, _n) {
            var r = new Blob(t, _n),
                i = _n && void 0 !== _n.lastModified ? new Date(_n.lastModified) : new Date();
            return r.name = e, r.lastModifiedDate = i, r.lastModified = +i, r.toString = function () {
              return "[object File]";
            }, o && (r[o] = "File"), r;
          };

          f.File = n;
        }
      }
    }

    t ? (h(), f.Blob = e ? f.Blob : l) : i ? (h(), f.Blob = s) : function () {
      function a(t) {
        for (var e = [], n = 0; n < t.length; n++) {
          var r = t.charCodeAt(n);
          r < 128 ? e.push(r) : r < 2048 ? e.push(192 | r >> 6, 128 | 63 & r) : r < 55296 || 57344 <= r ? e.push(224 | r >> 12, 128 | r >> 6 & 63, 128 | 63 & r) : (n++, r = 65536 + ((1023 & r) << 10 | 1023 & t.charCodeAt(n)), e.push(240 | r >> 18, 128 | r >> 12 & 63, 128 | r >> 6 & 63, 128 | 63 & r));
        }

        return e;
      }

      function e(t) {
        var e, n, r, i, o, a;

        for (e = "", r = t.length, n = 0; n < r;) {
          switch ((i = t[n++]) >> 4) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
              e += String.fromCharCode(i);
              break;

            case 12:
            case 13:
              o = t[n++], e += String.fromCharCode((31 & i) << 6 | 63 & o);
              break;

            case 14:
              o = t[n++], a = t[n++], e += String.fromCharCode((15 & i) << 12 | (63 & o) << 6 | (63 & a) << 0);
          }
        }

        return e;
      }

      function s(t) {
        for (var e = new Array(t.byteLength), n = new Uint8Array(t), r = e.length; r--;) {
          e[r] = n[r];
        }

        return e;
      }

      function n(t) {
        for (var e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", n = [], r = 0; r < t.length; r += 3) {
          var i = t[r],
              o = r + 1 < t.length,
              a = o ? t[r + 1] : 0,
              s = r + 2 < t.length,
              l = s ? t[r + 2] : 0,
              h = i >> 2,
              u = (3 & i) << 4 | a >> 4,
              c = (15 & a) << 2 | l >> 6,
              f = 63 & l;
          s || (f = 64, o || (c = 64)), n.push(e[h], e[u], e[c], e[f]);
        }

        return n.join("");
      }

      var t = Object.create || function (t) {
        function e() {}

        return e.prototype = t, new e();
      };

      if (g) var r = ["[object Int8Array]", "[object Uint8Array]", "[object Uint8ClampedArray]", "[object Int16Array]", "[object Uint16Array]", "[object Int32Array]", "[object Uint32Array]", "[object Float32Array]", "[object Float64Array]"],
          l = ArrayBuffer.isView || function (t) {
        return t && -1 < r.indexOf(Object.prototype.toString.call(t));
      };

      function h(t, e) {
        for (var n = 0, r = (t = t || []).length; n < r; n++) {
          var i = t[n];
          i instanceof h ? t[n] = i._buffer : "string" == typeof i ? t[n] = a(i) : g && (ArrayBuffer.prototype.isPrototypeOf(i) || l(i)) ? t[n] = s(i) : g && (o = i) && DataView.prototype.isPrototypeOf(o) ? t[n] = s(i.buffer) : t[n] = a(String(i));
        }

        var o;
        this._buffer = [].concat.apply([], t), this.size = this._buffer.length, this.type = e && e.type || "";
      }

      function i(t, e, n) {
        var r = h.call(this, t, n = n || {}) || this;
        return r.name = e, r.lastModifiedDate = n.lastModified ? new Date(n.lastModified) : new Date(), r.lastModified = +r.lastModifiedDate, r;
      }

      if (h.prototype.slice = function (t, e, n) {
        return new h([this._buffer.slice(t || 0, e || this._buffer.length)], {
          type: n
        });
      }, h.prototype.toString = function () {
        return "[object Blob]";
      }, (i.prototype = t(h.prototype)).constructor = i, Object.setPrototypeOf) Object.setPrototypeOf(i, h);else try {
        i.__proto__ = h;
      } catch (t) {}

      function o() {
        if (!(this instanceof o)) throw new TypeError("Failed to construct 'FileReader': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
        var n = document.createDocumentFragment();
        this.addEventListener = n.addEventListener, this.dispatchEvent = function (t) {
          var e = this["on" + t.type];
          "function" == typeof e && e(t), n.dispatchEvent(t);
        }, this.removeEventListener = n.removeEventListener;
      }

      function u(t, e, n) {
        if (!(e instanceof h)) throw new TypeError("Failed to execute '" + n + "' on 'FileReader': parameter 1 is not of type 'Blob'.");
        t.result = "", setTimeout(function () {
          this.readyState = o.LOADING, t.dispatchEvent(new Event("load")), t.dispatchEvent(new Event("loadend"));
        });
      }

      i.prototype.toString = function () {
        return "[object File]";
      }, o.EMPTY = 0, o.LOADING = 1, o.DONE = 2, o.prototype.error = null, o.prototype.onabort = null, o.prototype.onerror = null, o.prototype.onload = null, o.prototype.onloadend = null, o.prototype.onloadstart = null, o.prototype.onprogress = null, o.prototype.readAsDataURL = function (t) {
        u(this, t, "readAsDataURL"), this.result = "data:" + t.type + ";base64," + n(t._buffer);
      }, o.prototype.readAsText = function (t) {
        u(this, t, "readAsText"), this.result = e(t._buffer);
      }, o.prototype.readAsArrayBuffer = function (t) {
        u(this, t, "readAsText"), this.result = t._buffer.slice();
      }, o.prototype.abort = function () {}, URL.createObjectURL = function (t) {
        return t instanceof h ? "data:" + t.type + ";base64," + n(t._buffer) : p.call(URL, t);
      }, URL.revokeObjectURL = function (t) {
        d && d.call(URL, t);
      };
      var c = f.XMLHttpRequest && f.XMLHttpRequest.prototype.send;
      c && (XMLHttpRequest.prototype.send = function (t) {
        t instanceof h ? (this.setRequestHeader("Content-Type", t.type), c.call(this, e(t._buffer))) : c.call(this, t);
      }), f.FileReader = o, f.File = i, f.Blob = h;
    }();
  }("undefined" != typeof self && self || "undefined" != typeof window && window || "undefined" != typeof global && global || Function('return typeof this === "object" && this.content')() || Function("return this")());

  var ht,
      ut,
      ct,
      _ft,
      pt,
      dt,
      gt,
      mt,
      yt,
      vt,
      wt,
      bt,
      xt,
      Nt,
      Lt,
      le = le || function (s) {
    if (!(void 0 === s || "undefined" != typeof navigator && /MSIE [1-9]\./.test(navigator.userAgent))) {
      var t = s.document,
          l = function l() {
        return s.URL || s.webkitURL || s;
      },
          h = t.createElementNS("http://www.w3.org/1999/xhtml", "a"),
          u = "download" in h,
          c = /constructor/i.test(s.HTMLElement) || s.safari,
          f = /CriOS\/[\d]+/.test(navigator.userAgent),
          p = s.setImmediate || s.setTimeout,
          d = function d(t) {
        p(function () {
          throw t;
        }, 0);
      },
          g = function g(t) {
        setTimeout(function () {
          "string" == typeof t ? l().revokeObjectURL(t) : t.remove();
        }, 4e4);
      },
          m = function m(t) {
        return /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type) ? new Blob([String.fromCharCode(65279), t], {
          type: t.type
        }) : t;
      },
          r = function r(t, n, e) {
        e || (t = m(t));

        var r,
            i = this,
            o = "application/octet-stream" === t.type,
            a = function a() {
          !function (t, e, n) {
            for (var r = (e = [].concat(e)).length; r--;) {
              var i = t["on" + e[r]];
              if ("function" == typeof i) try {
                i.call(t, n || t);
              } catch (t) {
                d(t);
              }
            }
          }(i, "writestart progress write writeend".split(" "));
        };

        if (i.readyState = i.INIT, u) return r = l().createObjectURL(t), void p(function () {
          var t, e;
          h.href = r, h.download = n, t = h, e = new MouseEvent("click"), t.dispatchEvent(e), a(), g(r), i.readyState = i.DONE;
        }, 0);
        !function () {
          if ((f || o && c) && s.FileReader) {
            var e = new FileReader();
            return e.onloadend = function () {
              var t = f ? e.result : e.result.replace(/^data:[^;]*;/, "data:attachment/file;");
              s.open(t, "_blank") || (s.location.href = t), t = void 0, i.readyState = i.DONE, a();
            }, e.readAsDataURL(t), i.readyState = i.INIT;
          }

          r || (r = l().createObjectURL(t)), o ? s.location.href = r : s.open(r, "_blank") || (s.location.href = r);
          i.readyState = i.DONE, a(), g(r);
        }();
      },
          e = r.prototype;

      return "undefined" != typeof navigator && navigator.msSaveOrOpenBlob ? function (t, e, n) {
        return e = e || t.name || "download", n || (t = m(t)), navigator.msSaveOrOpenBlob(t, e);
      } : (e.abort = function () {}, e.readyState = e.INIT = 0, e.WRITING = 1, e.DONE = 2, e.error = e.onwritestart = e.onprogress = e.onwrite = e.onabort = e.onerror = e.onwriteend = null, function (t, e, n) {
        return new r(t, e || t.name || "download", n);
      });
    }
  }("undefined" != typeof self && self || "undefined" != typeof window && window || void 0);

  function At(x) {
    var t = 0;
    if (71 !== x[t++] || 73 !== x[t++] || 70 !== x[t++] || 56 !== x[t++] || 56 != (x[t++] + 1 & 253) || 97 !== x[t++]) throw "Invalid GIF 87a/89a header.";
    var N = x[t++] | x[t++] << 8,
        e = x[t++] | x[t++] << 8,
        n = x[t++],
        r = n >> 7,
        i = 1 << (7 & n) + 1;
    x[t++];
    x[t++];
    var o = null;
    r && (o = t, t += 3 * i);
    var a = !0,
        s = [],
        l = 0,
        h = null,
        u = 0,
        c = null;

    for (this.width = N, this.height = e; a && t < x.length;) {
      switch (x[t++]) {
        case 33:
          switch (x[t++]) {
            case 255:
              if (11 !== x[t] || 78 == x[t + 1] && 69 == x[t + 2] && 84 == x[t + 3] && 83 == x[t + 4] && 67 == x[t + 5] && 65 == x[t + 6] && 80 == x[t + 7] && 69 == x[t + 8] && 50 == x[t + 9] && 46 == x[t + 10] && 48 == x[t + 11] && 3 == x[t + 12] && 1 == x[t + 13] && 0 == x[t + 16]) t += 14, c = x[t++] | x[t++] << 8, t++;else for (t += 12;;) {
                if (0 === (A = x[t++])) break;
                t += A;
              }
              break;

            case 249:
              if (4 !== x[t++] || 0 !== x[t + 4]) throw "Invalid graphics extension block.";
              var f = x[t++];
              l = x[t++] | x[t++] << 8, h = x[t++], 0 == (1 & f) && (h = null), u = f >> 2 & 7, t++;
              break;

            case 254:
              for (;;) {
                if (0 === (A = x[t++])) break;
                t += A;
              }

              break;

            default:
              throw "Unknown graphic control label: 0x" + x[t - 1].toString(16);
          }

          break;

        case 44:
          var p = x[t++] | x[t++] << 8,
              d = x[t++] | x[t++] << 8,
              g = x[t++] | x[t++] << 8,
              m = x[t++] | x[t++] << 8,
              y = x[t++],
              v = y >> 6 & 1,
              w = o,
              b = !1;

          if (y >> 7) {
            b = !0;
            w = t, t += 3 * (1 << (7 & y) + 1);
          }

          var L = t;

          for (t++;;) {
            var A;
            if (0 === (A = x[t++])) break;
            t += A;
          }

          s.push({
            x: p,
            y: d,
            width: g,
            height: m,
            has_local_palette: b,
            palette_offset: w,
            data_offset: L,
            data_length: t - L,
            transparent_index: h,
            interlaced: !!v,
            delay: l,
            disposal: u
          });
          break;

        case 59:
          a = !1;
          break;

        default:
          throw "Unknown gif block: 0x" + x[t - 1].toString(16);
      }
    }

    this.numFrames = function () {
      return s.length;
    }, this.loopCount = function () {
      return c;
    }, this.frameInfo = function (t) {
      if (t < 0 || t >= s.length) throw "Frame index out of range.";
      return s[t];
    }, this.decodeAndBlitFrameBGRA = function (t, e) {
      var n = this.frameInfo(t),
          r = n.width * n.height,
          i = new Uint8Array(r);
      St(x, n.data_offset, i, r);
      var o = n.palette_offset,
          a = n.transparent_index;
      null === a && (a = 256);
      var s = n.width,
          l = N - s,
          h = s,
          u = 4 * (n.y * N + n.x),
          c = 4 * ((n.y + n.height) * N + n.x),
          f = u,
          p = 4 * l;
      !0 === n.interlaced && (p += 4 * (s + l) * 7);

      for (var d = 8, g = 0, m = i.length; g < m; ++g) {
        var y = i[g];
        if (0 === h && (h = s, c <= (f += p) && (p = l + 4 * (s + l) * (d - 1), f = u + (s + l) * (d << 1), d >>= 1)), y === a) f += 4;else {
          var v = x[o + 3 * y],
              w = x[o + 3 * y + 1],
              b = x[o + 3 * y + 2];
          e[f++] = b, e[f++] = w, e[f++] = v, e[f++] = 255;
        }
        --h;
      }
    }, this.decodeAndBlitFrameRGBA = function (t, e) {
      var n = this.frameInfo(t),
          r = n.width * n.height,
          i = new Uint8Array(r);
      St(x, n.data_offset, i, r);
      var o = n.palette_offset,
          a = n.transparent_index;
      null === a && (a = 256);
      var s = n.width,
          l = N - s,
          h = s,
          u = 4 * (n.y * N + n.x),
          c = 4 * ((n.y + n.height) * N + n.x),
          f = u,
          p = 4 * l;
      !0 === n.interlaced && (p += 4 * (s + l) * 7);

      for (var d = 8, g = 0, m = i.length; g < m; ++g) {
        var y = i[g];
        if (0 === h && (h = s, c <= (f += p) && (p = l + 4 * (s + l) * (d - 1), f = u + (s + l) * (d << 1), d >>= 1)), y === a) f += 4;else {
          var v = x[o + 3 * y],
              w = x[o + 3 * y + 1],
              b = x[o + 3 * y + 2];
          e[f++] = v, e[f++] = w, e[f++] = b, e[f++] = 255;
        }
        --h;
      }
    };
  }

  function St(t, e, n, r) {
    for (var i = t[e++], o = 1 << i, a = o + 1, s = a + 1, l = i + 1, h = (1 << l) - 1, u = 0, c = 0, f = 0, p = t[e++], d = new Int32Array(4096), g = null;;) {
      for (; u < 16 && 0 !== p;) {
        c |= t[e++] << u, u += 8, 1 === p ? p = t[e++] : --p;
      }

      if (u < l) break;
      var m = c & h;

      if (c >>= l, u -= l, m !== o) {
        if (m === a) break;

        for (var y = m < s ? m : g, v = 0, w = y; o < w;) {
          w = d[w] >> 8, ++v;
        }

        var b = w;
        if (r < f + v + (y !== m ? 1 : 0)) return void console.log("Warning, gif stream longer than expected.");
        n[f++] = b;
        var x = f += v;

        for (y !== m && (n[f++] = b), w = y; v--;) {
          w = d[w], n[--x] = 255 & w, w >>= 8;
        }

        null !== g && s < 4096 && (d[s++] = g << 8 | b, h + 1 <= s && l < 12 && (++l, h = h << 1 | 1)), g = m;
      } else s = a + 1, h = (1 << (l = i + 1)) - 1, g = null;
    }

    return f !== r && console.log("Warning, gif stream shorter than expected."), n;
  }

  try {
    exports.GifWriter = function (y, t, e, n) {
      var v = 0,
          r = void 0 === (n = void 0 === n ? {} : n).loop ? null : n.loop,
          w = void 0 === n.palette ? null : n.palette;
      if (t <= 0 || e <= 0 || 65535 < t || 65535 < e) throw "Width/Height invalid.";

      function b(t) {
        var e = t.length;
        if (e < 2 || 256 < e || e & e - 1) throw "Invalid code/color length, must be power of 2 and 2 .. 256.";
        return e;
      }

      y[v++] = 71, y[v++] = 73, y[v++] = 70, y[v++] = 56, y[v++] = 57, y[v++] = 97;
      var i = 0,
          o = 0;

      if (null !== w) {
        for (var a = b(w); a >>= 1;) {
          ++i;
        }

        if (a = 1 << i, --i, void 0 !== n.background) {
          if (a <= (o = n.background)) throw "Background index out of range.";
          if (0 === o) throw "Background index explicitly passed as 0.";
        }
      }

      if (y[v++] = 255 & t, y[v++] = t >> 8 & 255, y[v++] = 255 & e, y[v++] = e >> 8 & 255, y[v++] = (null !== w ? 128 : 0) | i, y[v++] = o, y[v++] = 0, null !== w) for (var s = 0, l = w.length; s < l; ++s) {
        var h = w[s];
        y[v++] = h >> 16 & 255, y[v++] = h >> 8 & 255, y[v++] = 255 & h;
      }

      if (null !== r) {
        if (r < 0 || 65535 < r) throw "Loop count invalid.";
        y[v++] = 33, y[v++] = 255, y[v++] = 11, y[v++] = 78, y[v++] = 69, y[v++] = 84, y[v++] = 83, y[v++] = 67, y[v++] = 65, y[v++] = 80, y[v++] = 69, y[v++] = 50, y[v++] = 46, y[v++] = 48, y[v++] = 3, y[v++] = 1, y[v++] = 255 & r, y[v++] = r >> 8 & 255, y[v++] = 0;
      }

      var x = !1;
      this.addFrame = function (t, e, n, r, i, o) {
        if (!0 === x && (--v, x = !1), o = void 0 === o ? {} : o, t < 0 || e < 0 || 65535 < t || 65535 < e) throw "x/y invalid.";
        if (n <= 0 || r <= 0 || 65535 < n || 65535 < r) throw "Width/Height invalid.";
        if (i.length < n * r) throw "Not enough pixels for the frame size.";
        var a = !0,
            s = o.palette;
        if (null == s && (a = !1, s = w), null == s) throw "Must supply either a local or global palette.";

        for (var l = b(s), h = 0; l >>= 1;) {
          ++h;
        }

        l = 1 << h;
        var u = void 0 === o.delay ? 0 : o.delay,
            c = void 0 === o.disposal ? 0 : o.disposal;
        if (c < 0 || 3 < c) throw "Disposal out of range.";
        var f = !1,
            p = 0;
        if (void 0 !== o.transparent && null !== o.transparent && (f = !0, (p = o.transparent) < 0 || l <= p)) throw "Transparent color index.";
        if ((0 !== c || f || 0 !== u) && (y[v++] = 33, y[v++] = 249, y[v++] = 4, y[v++] = c << 2 | (!0 === f ? 1 : 0), y[v++] = 255 & u, y[v++] = u >> 8 & 255, y[v++] = p, y[v++] = 0), y[v++] = 44, y[v++] = 255 & t, y[v++] = t >> 8 & 255, y[v++] = 255 & e, y[v++] = e >> 8 & 255, y[v++] = 255 & n, y[v++] = n >> 8 & 255, y[v++] = 255 & r, y[v++] = r >> 8 & 255, y[v++] = !0 === a ? 128 | h - 1 : 0, !0 === a) for (var d = 0, g = s.length; d < g; ++d) {
          var m = s[d];
          y[v++] = m >> 16 & 255, y[v++] = m >> 8 & 255, y[v++] = 255 & m;
        }

        v = function (e, n, t, r) {
          e[n++] = t;
          var i = n++,
              o = 1 << t,
              a = o - 1,
              s = o + 1,
              l = s + 1,
              h = t + 1,
              u = 0,
              c = 0;

          function f(t) {
            for (; t <= u;) {
              e[n++] = 255 & c, c >>= 8, u -= 8, n === i + 256 && (e[i] = 255, i = n++);
            }
          }

          function p(t) {
            c |= t << u, u += h, f(8);
          }

          var d = r[0] & a,
              g = {};
          p(o);

          for (var m = 1, y = r.length; m < y; ++m) {
            var v = r[m] & a,
                w = d << 8 | v,
                b = g[w];

            if (void 0 === b) {
              for (c |= d << u, u += h; 8 <= u;) {
                e[n++] = 255 & c, c >>= 8, u -= 8, n === i + 256 && (e[i] = 255, i = n++);
              }

              4096 === l ? (p(o), l = s + 1, h = t + 1, g = {}) : (1 << h <= l && ++h, g[w] = l++), d = v;
            } else d = b;
          }

          return p(d), p(s), f(1), i + 1 === n ? e[i] = 0 : (e[i] = n - i - 1, e[n++] = 0), n;
        }(y, v, h < 2 ? 2 : h, i);
      }, this.end = function () {
        return !1 === x && (y[v++] = 59, x = !0), v;
      };
    }, exports.GifReader = At;
  } catch (t) {}
  /*
      Copyright (c) 2008, Adobe Systems Incorporated
      All rights reserved.
  
      Redistribution and use in source and binary forms, with or without 
      modification, are permitted provided that the following conditions are
      met:
  
      * Redistributions of source code must retain the above copyright notice, 
        this list of conditions and the following disclaimer.
      
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the 
        documentation and/or other materials provided with the distribution.
      
      * Neither the name of Adobe Systems Incorporated nor the names of its 
        contributors may be used to endorse or promote products derived from 
        this software without specific prior written permission.
  
      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
      IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
      THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
      PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
      CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
      EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
      PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
      PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
      LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
      SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    */


  function _t(t) {
    var N,
        L,
        A,
        S,
        e,
        c = Math.floor,
        _ = new Array(64),
        F = new Array(64),
        P = new Array(64),
        k = new Array(64),
        y = new Array(65535),
        v = new Array(65535),
        Z = new Array(64),
        w = new Array(64),
        I = [],
        C = 0,
        B = 7,
        j = new Array(64),
        E = new Array(64),
        M = new Array(64),
        n = new Array(256),
        O = new Array(2048),
        b = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63],
        q = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
        T = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
        R = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125],
        D = [1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250],
        U = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
        z = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
        H = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119],
        W = [0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250];

    function r(t, e) {
      for (var n = 0, r = 0, i = new Array(), o = 1; o <= 16; o++) {
        for (var a = 1; a <= t[o]; a++) {
          i[e[r]] = [], i[e[r]][0] = n, i[e[r]][1] = o, r++, n++;
        }

        n *= 2;
      }

      return i;
    }

    function V(t) {
      for (var e = t[0], n = t[1] - 1; 0 <= n;) {
        e & 1 << n && (C |= 1 << B), n--, --B < 0 && (255 == C ? (G(255), G(0)) : G(C), B = 7, C = 0);
      }
    }

    function G(t) {
      I.push(t);
    }

    function Y(t) {
      G(t >> 8 & 255), G(255 & t);
    }

    function J(t, e, n, r, i) {
      for (var o, a = i[0], s = i[240], l = function (t, e) {
        var n,
            r,
            i,
            o,
            a,
            s,
            l,
            h,
            u,
            c,
            f = 0;

        for (u = 0; u < 8; ++u) {
          n = t[f], r = t[f + 1], i = t[f + 2], o = t[f + 3], a = t[f + 4], s = t[f + 5], l = t[f + 6];
          var p = n + (h = t[f + 7]),
              d = n - h,
              g = r + l,
              m = r - l,
              y = i + s,
              v = i - s,
              w = o + a,
              b = o - a,
              x = p + w,
              N = p - w,
              L = g + y,
              A = g - y;
          t[f] = x + L, t[f + 4] = x - L;
          var S = .707106781 * (A + N);
          t[f + 2] = N + S, t[f + 6] = N - S;

          var _ = .382683433 * ((x = b + v) - (A = m + d)),
              F = .5411961 * x + _,
              P = 1.306562965 * A + _,
              k = .707106781 * (L = v + m),
              I = d + k,
              C = d - k;

          t[f + 5] = C + F, t[f + 3] = C - F, t[f + 1] = I + P, t[f + 7] = I - P, f += 8;
        }

        for (u = f = 0; u < 8; ++u) {
          n = t[f], r = t[f + 8], i = t[f + 16], o = t[f + 24], a = t[f + 32], s = t[f + 40], l = t[f + 48];
          var B = n + (h = t[f + 56]),
              j = n - h,
              E = r + l,
              M = r - l,
              O = i + s,
              q = i - s,
              T = o + a,
              R = o - a,
              D = B + T,
              U = B - T,
              z = E + O,
              H = E - O;
          t[f] = D + z, t[f + 32] = D - z;
          var W = .707106781 * (H + U);
          t[f + 16] = U + W, t[f + 48] = U - W;
          var V = .382683433 * ((D = R + q) - (H = M + j)),
              G = .5411961 * D + V,
              Y = 1.306562965 * H + V,
              J = .707106781 * (z = q + M),
              X = j + J,
              K = j - J;
          t[f + 40] = K + G, t[f + 24] = K - G, t[f + 8] = X + Y, t[f + 56] = X - Y, f++;
        }

        for (u = 0; u < 64; ++u) {
          c = t[u] * e[u], Z[u] = 0 < c ? c + .5 | 0 : c - .5 | 0;
        }

        return Z;
      }(t, e), h = 0; h < 64; ++h) {
        w[b[h]] = l[h];
      }

      var u = w[0] - n;
      n = w[0], 0 == u ? V(r[0]) : (V(r[v[o = 32767 + u]]), V(y[o]));

      for (var c = 63; 0 < c && 0 == w[c]; c--) {
        ;
      }

      if (0 == c) return V(a), n;

      for (var f, p = 1; p <= c;) {
        for (var d = p; 0 == w[p] && p <= c; ++p) {
          ;
        }

        var g = p - d;

        if (16 <= g) {
          f = g >> 4;

          for (var m = 1; m <= f; ++m) {
            V(s);
          }

          g &= 15;
        }

        o = 32767 + w[p], V(i[(g << 4) + v[o]]), V(y[o]), p++;
      }

      return 63 != c && V(a), n;
    }

    function X(t) {
      if (t <= 0 && (t = 1), 100 < t && (t = 100), e != t) {
        (function (t) {
          for (var e = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99], n = 0; n < 64; n++) {
            var r = c((e[n] * t + 50) / 100);
            r < 1 ? r = 1 : 255 < r && (r = 255), _[b[n]] = r;
          }

          for (var i = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99], o = 0; o < 64; o++) {
            var a = c((i[o] * t + 50) / 100);
            a < 1 ? a = 1 : 255 < a && (a = 255), F[b[o]] = a;
          }

          for (var s = [1, 1.387039845, 1.306562965, 1.175875602, 1, .785694958, .5411961, .275899379], l = 0, h = 0; h < 8; h++) {
            for (var u = 0; u < 8; u++) {
              P[l] = 1 / (_[b[l]] * s[h] * s[u] * 8), k[l] = 1 / (F[b[l]] * s[h] * s[u] * 8), l++;
            }
          }
        })(t < 50 ? Math.floor(5e3 / t) : Math.floor(200 - 2 * t)), e = t;
      }
    }

    this.encode = function (t, e) {
      var n, r;
      new Date().getTime();
      e && X(e), I = new Array(), C = 0, B = 7, Y(65496), Y(65504), Y(16), G(74), G(70), G(73), G(70), G(0), G(1), G(1), G(0), Y(1), Y(1), G(0), G(0), function () {
        Y(65499), Y(132), G(0);

        for (var t = 0; t < 64; t++) {
          G(_[t]);
        }

        G(1);

        for (var e = 0; e < 64; e++) {
          G(F[e]);
        }
      }(), n = t.width, r = t.height, Y(65472), Y(17), G(8), Y(r), Y(n), G(3), G(1), G(17), G(0), G(2), G(17), G(1), G(3), G(17), G(1), function () {
        Y(65476), Y(418), G(0);

        for (var t = 0; t < 16; t++) {
          G(q[t + 1]);
        }

        for (var e = 0; e <= 11; e++) {
          G(T[e]);
        }

        G(16);

        for (var n = 0; n < 16; n++) {
          G(R[n + 1]);
        }

        for (var r = 0; r <= 161; r++) {
          G(D[r]);
        }

        G(1);

        for (var i = 0; i < 16; i++) {
          G(U[i + 1]);
        }

        for (var o = 0; o <= 11; o++) {
          G(z[o]);
        }

        G(17);

        for (var a = 0; a < 16; a++) {
          G(H[a + 1]);
        }

        for (var s = 0; s <= 161; s++) {
          G(W[s]);
        }
      }(), Y(65498), Y(12), G(3), G(1), G(0), G(2), G(17), G(3), G(17), G(0), G(63), G(0);
      var i = 0,
          o = 0,
          a = 0;
      C = 0, B = 7, this.encode.displayName = "_encode_";

      for (var s, l, h, u, c, f, p, d, g, m = t.data, y = t.width, v = t.height, w = 4 * y, b = 0; b < v;) {
        for (s = 0; s < w;) {
          for (f = c = w * b + s, p = -1, g = d = 0; g < 64; g++) {
            f = c + (d = g >> 3) * w + (p = 4 * (7 & g)), v <= b + d && (f -= w * (b + 1 + d - v)), w <= s + p && (f -= s + p - w + 4), l = m[f++], h = m[f++], u = m[f++], j[g] = (O[l] + O[h + 256 >> 0] + O[u + 512 >> 0] >> 16) - 128, E[g] = (O[l + 768 >> 0] + O[h + 1024 >> 0] + O[u + 1280 >> 0] >> 16) - 128, M[g] = (O[l + 1280 >> 0] + O[h + 1536 >> 0] + O[u + 1792 >> 0] >> 16) - 128;
          }

          i = J(j, P, i, N, A), o = J(E, k, o, L, S), a = J(M, k, a, L, S), s += 32;
        }

        b += 8;
      }

      if (0 <= B) {
        var x = [];
        x[1] = B + 1, x[0] = (1 << B + 1) - 1, V(x);
      }

      return Y(65497), new Uint8Array(I);
    }, function () {
      new Date().getTime();
      t || (t = 50), function () {
        for (var t = String.fromCharCode, e = 0; e < 256; e++) {
          n[e] = t(e);
        }
      }(), N = r(q, T), L = r(U, z), A = r(R, D), S = r(H, W), function () {
        for (var t = 1, e = 2, n = 1; n <= 15; n++) {
          for (var r = t; r < e; r++) {
            v[32767 + r] = n, y[32767 + r] = [], y[32767 + r][1] = n, y[32767 + r][0] = r;
          }

          for (var i = -(e - 1); i <= -t; i++) {
            v[32767 + i] = n, y[32767 + i] = [], y[32767 + i][1] = n, y[32767 + i][0] = e - 1 + i;
          }

          t <<= 1, e <<= 1;
        }
      }(), function () {
        for (var t = 0; t < 256; t++) {
          O[t] = 19595 * t, O[t + 256 >> 0] = 38470 * t, O[t + 512 >> 0] = 7471 * t + 32768, O[t + 768 >> 0] = -11059 * t, O[t + 1024 >> 0] = -21709 * t, O[t + 1280 >> 0] = 32768 * t + 8421375, O[t + 1536 >> 0] = -27439 * t, O[t + 1792 >> 0] = -5329 * t;
        }
      }(), X(t), new Date().getTime();
    }();
  }

  function Ft(t, e) {
    if (this.pos = 0, this.buffer = t, this.datav = new DataView(t.buffer), this.is_with_alpha = !!e, this.bottom_up = !0, this.flag = String.fromCharCode(this.buffer[0]) + String.fromCharCode(this.buffer[1]), this.pos += 2, -1 === ["BM", "BA", "CI", "CP", "IC", "PT"].indexOf(this.flag)) throw new Error("Invalid BMP File");
    this.parseHeader(), this.parseBGR();
  }

  window.tmp = At, lt.API.adler32cs = (dt = "function" == typeof ArrayBuffer && "function" == typeof Uint8Array, gt = null, mt = function () {
    if (!dt) return function () {
      return !1;
    };

    try {
      var t = {};
      "function" == typeof t.Buffer && (gt = t.Buffer);
    } catch (t) {}

    return function (t) {
      return t instanceof ArrayBuffer || null !== gt && t instanceof gt;
    };
  }(), yt = null !== gt ? function (t) {
    return new gt(t, "utf8").toString("binary");
  } : function (t) {
    return unescape(encodeURIComponent(t));
  }, vt = function vt(t, e) {
    for (var n = 65535 & t, r = t >>> 16, i = 0, o = e.length; i < o; i++) {
      n = (n + (255 & e.charCodeAt(i))) % 65521, r = (r + n) % 65521;
    }

    return (r << 16 | n) >>> 0;
  }, wt = function wt(t, e) {
    for (var n = 65535 & t, r = t >>> 16, i = 0, o = e.length; i < o; i++) {
      n = (n + e[i]) % 65521, r = (r + n) % 65521;
    }

    return (r << 16 | n) >>> 0;
  }, xt = (bt = {}).Adler32 = (((pt = (_ft = function ft(t) {
    if (!(this instanceof _ft)) throw new TypeError("Constructor cannot called be as a function.");
    if (!isFinite(t = null == t ? 1 : +t)) throw new Error("First arguments needs to be a finite number.");
    this.checksum = t >>> 0;
  }).prototype = {}).constructor = _ft).from = ((ht = function ht(t) {
    if (!(this instanceof _ft)) throw new TypeError("Constructor cannot called be as a function.");
    if (null == t) throw new Error("First argument needs to be a string.");
    this.checksum = vt(1, t.toString());
  }).prototype = pt, ht), _ft.fromUtf8 = ((ut = function ut(t) {
    if (!(this instanceof _ft)) throw new TypeError("Constructor cannot called be as a function.");
    if (null == t) throw new Error("First argument needs to be a string.");
    var e = yt(t.toString());
    this.checksum = vt(1, e);
  }).prototype = pt, ut), dt && (_ft.fromBuffer = ((ct = function ct(t) {
    if (!(this instanceof _ft)) throw new TypeError("Constructor cannot called be as a function.");
    if (!mt(t)) throw new Error("First argument needs to be ArrayBuffer.");
    var e = new Uint8Array(t);
    return this.checksum = wt(1, e);
  }).prototype = pt, ct)), pt.update = function (t) {
    if (null == t) throw new Error("First argument needs to be a string.");
    return t = t.toString(), this.checksum = vt(this.checksum, t);
  }, pt.updateUtf8 = function (t) {
    if (null == t) throw new Error("First argument needs to be a string.");
    var e = yt(t.toString());
    return this.checksum = vt(this.checksum, e);
  }, dt && (pt.updateBuffer = function (t) {
    if (!mt(t)) throw new Error("First argument needs to be ArrayBuffer.");
    var e = new Uint8Array(t);
    return this.checksum = wt(this.checksum, e);
  }), pt.clone = function () {
    return new xt(this.checksum);
  }, _ft), bt.from = function (t) {
    if (null == t) throw new Error("First argument needs to be a string.");
    return vt(1, t.toString());
  }, bt.fromUtf8 = function (t) {
    if (null == t) throw new Error("First argument needs to be a string.");
    var e = yt(t.toString());
    return vt(1, e);
  }, dt && (bt.fromBuffer = function (t) {
    if (!mt(t)) throw new Error("First argument need to be ArrayBuffer.");
    var e = new Uint8Array(t);
    return wt(1, e);
  }), bt), function (t) {
    t.__bidiEngine__ = t.prototype.__bidiEngine__ = function (t) {
      var d,
          g,
          c,
          f,
          i,
          o,
          a,
          s = e,
          m = [[0, 3, 0, 1, 0, 0, 0], [0, 3, 0, 1, 2, 2, 0], [0, 3, 0, 17, 2, 0, 1], [0, 3, 5, 5, 4, 1, 0], [0, 3, 21, 21, 4, 0, 1], [0, 3, 5, 5, 4, 2, 0]],
          y = [[2, 0, 1, 1, 0, 1, 0], [2, 0, 1, 1, 0, 2, 0], [2, 0, 2, 1, 3, 2, 0], [2, 0, 2, 33, 3, 1, 1]],
          v = {
        L: 0,
        R: 1,
        EN: 2,
        AN: 3,
        N: 4,
        B: 5,
        S: 6
      },
          l = {
        0: 0,
        5: 1,
        6: 2,
        7: 3,
        32: 4,
        251: 5,
        254: 6,
        255: 7
      },
          h = ["(", ")", "(", "<", ">", "<", "[", "]", "[", "{", "}", "{", "«", "»", "«", "‹", "›", "‹", "⁅", "⁆", "⁅", "⁽", "⁾", "⁽", "₍", "₎", "₍", "≤", "≥", "≤", "〈", "〉", "〈", "﹙", "﹚", "﹙", "﹛", "﹜", "﹛", "﹝", "﹞", "﹝", "﹤", "﹥", "﹤"],
          u = new RegExp(/^([1-4|9]|1[0-9]|2[0-9]|3[0168]|4[04589]|5[012]|7[78]|159|16[0-9]|17[0-2]|21[569]|22[03489]|250)$/),
          w = !1,
          b = 0;
      this.__bidiEngine__ = {};

      var x = function x(t) {
        var e = t.charCodeAt(),
            n = e >> 8,
            r = l[n];
        return void 0 !== r ? s[256 * r + (255 & e)] : 252 === n || 253 === n ? "AL" : u.test(n) ? "L" : 8 === n ? "R" : "N";
      },
          p = function p(t) {
        for (var e, n = 0; n < t.length; n++) {
          if ("L" === (e = x(t.charAt(n)))) return !1;
          if ("R" === e) return !0;
        }

        return !1;
      },
          N = function N(t, e, n, r) {
        var i,
            o,
            a,
            s,
            l = e[r];

        switch (l) {
          case "L":
          case "R":
            w = !1;
            break;

          case "N":
          case "AN":
            break;

          case "EN":
            w && (l = "AN");
            break;

          case "AL":
            w = !0, l = "R";
            break;

          case "WS":
            l = "N";
            break;

          case "CS":
            r < 1 || r + 1 >= e.length || "EN" !== (i = n[r - 1]) && "AN" !== i || "EN" !== (o = e[r + 1]) && "AN" !== o ? l = "N" : w && (o = "AN"), l = o === i ? o : "N";
            break;

          case "ES":
            l = "EN" === (i = 0 < r ? n[r - 1] : "B") && r + 1 < e.length && "EN" === e[r + 1] ? "EN" : "N";
            break;

          case "ET":
            if (0 < r && "EN" === n[r - 1]) {
              l = "EN";
              break;
            }

            if (w) {
              l = "N";
              break;
            }

            for (a = r + 1, s = e.length; a < s && "ET" === e[a];) {
              a++;
            }

            l = a < s && "EN" === e[a] ? "EN" : "N";
            break;

          case "NSM":
            if (c && !f) {
              for (s = e.length, a = r + 1; a < s && "NSM" === e[a];) {
                a++;
              }

              if (a < s) {
                var h = t[r],
                    u = 1425 <= h && h <= 2303 || 64286 === h;

                if (i = e[a], u && ("R" === i || "AL" === i)) {
                  l = "R";
                  break;
                }
              }
            }

            l = r < 1 || "B" === (i = e[r - 1]) ? "N" : n[r - 1];
            break;

          case "B":
            d = !(w = !1), l = b;
            break;

          case "S":
            g = !0, l = "N";
            break;

          case "LRE":
          case "RLE":
          case "LRO":
          case "RLO":
          case "PDF":
            w = !1;
            break;

          case "BN":
            l = "N";
        }

        return l;
      },
          L = function L(t, e, n) {
        var r = t.split("");
        return n && A(r, n, {
          hiLevel: b
        }), r.reverse(), e && e.reverse(), r.join("");
      },
          A = function A(t, e, n) {
        var r,
            i,
            o,
            a,
            s,
            l = -1,
            h = t.length,
            u = 0,
            c = [],
            f = b ? y : m,
            p = [];

        for (g = d = w = !1, i = 0; i < h; i++) {
          p[i] = x(t[i]);
        }

        for (o = 0; o < h; o++) {
          if (s = u, c[o] = N(t, p, c, o), r = 240 & (u = f[s][v[c[o]]]), u &= 15, e[o] = a = f[u][5], 0 < r) if (16 === r) {
            for (i = l; i < o; i++) {
              e[i] = 1;
            }

            l = -1;
          } else l = -1;
          if (f[u][6]) -1 === l && (l = o);else if (-1 < l) {
            for (i = l; i < o; i++) {
              e[i] = a;
            }

            l = -1;
          }
          "B" === p[o] && (e[o] = 0), n.hiLevel |= a;
        }

        g && function (t, e, n) {
          for (var r = 0; r < n; r++) {
            if ("S" === t[r]) {
              e[r] = b;

              for (var i = r - 1; 0 <= i && "WS" === t[i]; i--) {
                e[i] = b;
              }
            }
          }
        }(p, e, h);
      },
          S = function S(t, e, n, r, i) {
        if (!(i.hiLevel < t)) {
          if (1 === t && 1 === b && !d) return e.reverse(), void (n && n.reverse());

          for (var o, a, s, l, h = e.length, u = 0; u < h;) {
            if (r[u] >= t) {
              for (s = u + 1; s < h && r[s] >= t;) {
                s++;
              }

              for (l = u, a = s - 1; l < a; l++, a--) {
                o = e[l], e[l] = e[a], e[a] = o, n && (o = n[l], n[l] = n[a], n[a] = o);
              }

              u = s;
            }

            u++;
          }
        }
      },
          _ = function _(t, e, n) {
        var r = t.split(""),
            i = {
          hiLevel: b
        };
        return n || (n = []), A(r, n, i), function (t, e, n) {
          if (0 !== n.hiLevel && a) for (var r, i = 0; i < t.length; i++) {
            1 === e[i] && 0 <= (r = h.indexOf(t[i])) && (t[i] = h[r + 1]);
          }
        }(r, n, i), S(2, r, e, n, i), S(1, r, e, n, i), r.join("");
      };

      return this.__bidiEngine__.doBidiReorder = function (t, e, n) {
        if (function (t, e) {
          if (e) for (var n = 0; n < t.length; n++) {
            e[n] = n;
          }
          void 0 === f && (f = p(t)), void 0 === o && (o = p(t));
        }(t, e), c || !i || o) {
          if (c && i && f ^ o) b = f ? 1 : 0, t = L(t, e, n);else if (!c && i && o) b = f ? 1 : 0, t = _(t, e, n), t = L(t, e);else if (!c || f || i || o) {
            if (c && !i && f ^ o) t = L(t, e), t = f ? (b = 0, _(t, e, n)) : (b = 1, t = _(t, e, n), L(t, e));else if (c && f && !i && o) b = 1, t = _(t, e, n), t = L(t, e);else if (!c && !i && f ^ o) {
              var r = a;
              f ? (b = 1, t = _(t, e, n), b = 0, a = !1, t = _(t, e, n), a = r) : (b = 0, t = _(t, e, n), t = L(t, e), a = !(b = 1), t = _(t, e, n), a = r, t = L(t, e));
            }
          } else b = 0, t = _(t, e, n);
        } else b = f ? 1 : 0, t = _(t, e, n);
        return t;
      }, this.__bidiEngine__.setOptions = function (t) {
        t && (c = t.isInputVisual, i = t.isOutputVisual, f = t.isInputRtl, o = t.isOutputRtl, a = t.isSymmetricSwapping);
      }, this.__bidiEngine__.setOptions(t), this.__bidiEngine__;
    };

    var e = ["BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "S", "B", "S", "WS", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "B", "B", "B", "S", "WS", "N", "N", "ET", "ET", "ET", "N", "N", "N", "N", "N", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "BN", "BN", "BN", "BN", "BN", "BN", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "CS", "N", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "L", "N", "N", "BN", "N", "N", "ET", "ET", "EN", "EN", "N", "L", "N", "N", "N", "EN", "L", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "N", "N", "N", "N", "N", "ET", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "R", "NSM", "R", "NSM", "NSM", "R", "NSM", "NSM", "R", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "AN", "AN", "AN", "AN", "AN", "AN", "N", "N", "AL", "ET", "ET", "AL", "CS", "AL", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "ET", "AN", "AN", "AL", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "NSM", "NSM", "N", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "R", "R", "N", "N", "N", "N", "R", "N", "N", "N", "N", "N", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "BN", "BN", "BN", "L", "R", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "WS", "B", "LRE", "RLE", "PDF", "LRO", "RLO", "CS", "ET", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "CS", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "WS", "BN", "BN", "BN", "BN", "BN", "N", "LRI", "RLI", "FSI", "PDI", "BN", "BN", "BN", "BN", "BN", "BN", "EN", "L", "N", "N", "EN", "EN", "EN", "EN", "EN", "EN", "ES", "ES", "N", "N", "N", "L", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "ES", "ES", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "R", "NSM", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "ES", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "N", "R", "R", "R", "R", "R", "N", "R", "N", "R", "R", "N", "R", "R", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "CS", "N", "CS", "N", "N", "CS", "N", "N", "N", "N", "N", "N", "N", "N", "N", "ET", "N", "N", "ES", "ES", "N", "N", "N", "N", "N", "ET", "ET", "N", "N", "N", "N", "N", "AL", "AL", "AL", "AL", "AL", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "N", "BN", "N", "N", "N", "ET", "ET", "ET", "N", "N", "N", "N", "N", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "N", "N", "N", "ET", "ET", "N", "N", "N", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N"],
        o = new t.__bidiEngine__({
      isInputVisual: !0
    });
    t.API.events.push(["postProcessText", function (t) {
      var e = t.text,
          n = (t.x, t.y, t.options || {}),
          r = (t.mutex, n.lang, []);

      if ("[object Array]" === Object.prototype.toString.call(e)) {
        var i = 0;

        for (r = [], i = 0; i < e.length; i += 1) {
          "[object Array]" === Object.prototype.toString.call(e[i]) ? r.push([o.doBidiReorder(e[i][0]), e[i][1], e[i][2]]) : r.push([o.doBidiReorder(e[i])]);
        }

        t.text = r;
      } else t.text = o.doBidiReorder(e);
    }]);
  }(lt), window.tmp = _t, Ft.prototype.parseHeader = function () {
    if (this.fileSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.reserved = this.datav.getUint32(this.pos, !0), this.pos += 4, this.offset = this.datav.getUint32(this.pos, !0), this.pos += 4, this.headerSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.width = this.datav.getUint32(this.pos, !0), this.pos += 4, this.height = this.datav.getInt32(this.pos, !0), this.pos += 4, this.planes = this.datav.getUint16(this.pos, !0), this.pos += 2, this.bitPP = this.datav.getUint16(this.pos, !0), this.pos += 2, this.compress = this.datav.getUint32(this.pos, !0), this.pos += 4, this.rawSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.hr = this.datav.getUint32(this.pos, !0), this.pos += 4, this.vr = this.datav.getUint32(this.pos, !0), this.pos += 4, this.colors = this.datav.getUint32(this.pos, !0), this.pos += 4, this.importantColors = this.datav.getUint32(this.pos, !0), this.pos += 4, 16 === this.bitPP && this.is_with_alpha && (this.bitPP = 15), this.bitPP < 15) {
      var t = 0 === this.colors ? 1 << this.bitPP : this.colors;
      this.palette = new Array(t);

      for (var e = 0; e < t; e++) {
        var n = this.datav.getUint8(this.pos++, !0),
            r = this.datav.getUint8(this.pos++, !0),
            i = this.datav.getUint8(this.pos++, !0),
            o = this.datav.getUint8(this.pos++, !0);
        this.palette[e] = {
          red: i,
          green: r,
          blue: n,
          quad: o
        };
      }
    }

    this.height < 0 && (this.height *= -1, this.bottom_up = !1);
  }, Ft.prototype.parseBGR = function () {
    this.pos = this.offset;

    try {
      var t = "bit" + this.bitPP,
          e = this.width * this.height * 4;
      this.data = new Uint8Array(e), this[t]();
    } catch (t) {
      console.log("bit decode error:" + t);
    }
  }, Ft.prototype.bit1 = function () {
    var t = Math.ceil(this.width / 8),
        e = t % 4,
        n = 0 <= this.height ? this.height - 1 : -this.height;

    for (n = this.height - 1; 0 <= n; n--) {
      for (var r = this.bottom_up ? n : this.height - 1 - n, i = 0; i < t; i++) {
        for (var o = this.datav.getUint8(this.pos++, !0), a = r * this.width * 4 + 8 * i * 4, s = 0; s < 8 && 8 * i + s < this.width; s++) {
          var l = this.palette[o >> 7 - s & 1];
          this.data[a + 4 * s] = l.blue, this.data[a + 4 * s + 1] = l.green, this.data[a + 4 * s + 2] = l.red, this.data[a + 4 * s + 3] = 255;
        }
      }

      0 != e && (this.pos += 4 - e);
    }
  }, Ft.prototype.bit4 = function () {
    for (var t = Math.ceil(this.width / 2), e = t % 4, n = this.height - 1; 0 <= n; n--) {
      for (var r = this.bottom_up ? n : this.height - 1 - n, i = 0; i < t; i++) {
        var o = this.datav.getUint8(this.pos++, !0),
            a = r * this.width * 4 + 2 * i * 4,
            s = o >> 4,
            l = 15 & o,
            h = this.palette[s];
        if (this.data[a] = h.blue, this.data[a + 1] = h.green, this.data[a + 2] = h.red, this.data[a + 3] = 255, 2 * i + 1 >= this.width) break;
        h = this.palette[l], this.data[a + 4] = h.blue, this.data[a + 4 + 1] = h.green, this.data[a + 4 + 2] = h.red, this.data[a + 4 + 3] = 255;
      }

      0 != e && (this.pos += 4 - e);
    }
  }, Ft.prototype.bit8 = function () {
    for (var t = this.width % 4, e = this.height - 1; 0 <= e; e--) {
      for (var n = this.bottom_up ? e : this.height - 1 - e, r = 0; r < this.width; r++) {
        var i = this.datav.getUint8(this.pos++, !0),
            o = n * this.width * 4 + 4 * r;

        if (i < this.palette.length) {
          var a = this.palette[i];
          this.data[o] = a.red, this.data[o + 1] = a.green, this.data[o + 2] = a.blue, this.data[o + 3] = 255;
        } else this.data[o] = 255, this.data[o + 1] = 255, this.data[o + 2] = 255, this.data[o + 3] = 255;
      }

      0 != t && (this.pos += 4 - t);
    }
  }, Ft.prototype.bit15 = function () {
    for (var t = this.width % 3, e = parseInt("11111", 2), n = this.height - 1; 0 <= n; n--) {
      for (var r = this.bottom_up ? n : this.height - 1 - n, i = 0; i < this.width; i++) {
        var o = this.datav.getUint16(this.pos, !0);
        this.pos += 2;
        var a = (o & e) / e * 255 | 0,
            s = (o >> 5 & e) / e * 255 | 0,
            l = (o >> 10 & e) / e * 255 | 0,
            h = o >> 15 ? 255 : 0,
            u = r * this.width * 4 + 4 * i;
        this.data[u] = l, this.data[u + 1] = s, this.data[u + 2] = a, this.data[u + 3] = h;
      }

      this.pos += t;
    }
  }, Ft.prototype.bit16 = function () {
    for (var t = this.width % 3, e = parseInt("11111", 2), n = parseInt("111111", 2), r = this.height - 1; 0 <= r; r--) {
      for (var i = this.bottom_up ? r : this.height - 1 - r, o = 0; o < this.width; o++) {
        var a = this.datav.getUint16(this.pos, !0);
        this.pos += 2;
        var s = (a & e) / e * 255 | 0,
            l = (a >> 5 & n) / n * 255 | 0,
            h = (a >> 11) / e * 255 | 0,
            u = i * this.width * 4 + 4 * o;
        this.data[u] = h, this.data[u + 1] = l, this.data[u + 2] = s, this.data[u + 3] = 255;
      }

      this.pos += t;
    }
  }, Ft.prototype.bit24 = function () {
    for (var t = this.height - 1; 0 <= t; t--) {
      for (var e = this.bottom_up ? t : this.height - 1 - t, n = 0; n < this.width; n++) {
        var r = this.datav.getUint8(this.pos++, !0),
            i = this.datav.getUint8(this.pos++, !0),
            o = this.datav.getUint8(this.pos++, !0),
            a = e * this.width * 4 + 4 * n;
        this.data[a] = o, this.data[a + 1] = i, this.data[a + 2] = r, this.data[a + 3] = 255;
      }

      this.pos += this.width % 4;
    }
  }, Ft.prototype.bit32 = function () {
    for (var t = this.height - 1; 0 <= t; t--) {
      for (var e = this.bottom_up ? t : this.height - 1 - t, n = 0; n < this.width; n++) {
        var r = this.datav.getUint8(this.pos++, !0),
            i = this.datav.getUint8(this.pos++, !0),
            o = this.datav.getUint8(this.pos++, !0),
            a = this.datav.getUint8(this.pos++, !0),
            s = e * this.width * 4 + 4 * n;
        this.data[s] = o, this.data[s + 1] = i, this.data[s + 2] = r, this.data[s + 3] = a;
      }
    }
  }, Ft.prototype.getData = function () {
    return this.data;
  }, window.tmp = Ft,
  /*
     Copyright (c) 2013 Gildas Lormeau. All rights reserved.
  
     Redistribution and use in source and binary forms, with or without
     modification, are permitted provided that the following conditions are met:
  
     1. Redistributions of source code must retain the above copyright notice,
     this list of conditions and the following disclaimer.
  
     2. Redistributions in binary form must reproduce the above copyright 
     notice, this list of conditions and the following disclaimer in 
     the documentation and/or other materials provided with the distribution.
  
     3. The names of the authors may not be used to endorse or promote products
     derived from this software without specific prior written permission.
  
     THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
     INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
     INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
  function (t) {
    var d = 15,
        g = 573,
        e = [0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 16, 17, 18, 18, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29];

    function ct() {
      var p = this;

      function l(t, e) {
        for (var n = 0; n |= 1 & t, t >>>= 1, n <<= 1, 0 < --e;) {
          ;
        }

        return n >>> 1;
      }

      p.build_tree = function (t) {
        var e,
            n,
            r,
            i = p.dyn_tree,
            o = p.stat_desc.static_tree,
            a = p.stat_desc.elems,
            s = -1;

        for (t.heap_len = 0, t.heap_max = g, e = 0; e < a; e++) {
          0 !== i[2 * e] ? (t.heap[++t.heap_len] = s = e, t.depth[e] = 0) : i[2 * e + 1] = 0;
        }

        for (; t.heap_len < 2;) {
          i[2 * (r = t.heap[++t.heap_len] = s < 2 ? ++s : 0)] = 1, t.depth[r] = 0, t.opt_len--, o && (t.static_len -= o[2 * r + 1]);
        }

        for (p.max_code = s, e = Math.floor(t.heap_len / 2); 1 <= e; e--) {
          t.pqdownheap(i, e);
        }

        for (r = a; e = t.heap[1], t.heap[1] = t.heap[t.heap_len--], t.pqdownheap(i, 1), n = t.heap[1], t.heap[--t.heap_max] = e, t.heap[--t.heap_max] = n, i[2 * r] = i[2 * e] + i[2 * n], t.depth[r] = Math.max(t.depth[e], t.depth[n]) + 1, i[2 * e + 1] = i[2 * n + 1] = r, t.heap[1] = r++, t.pqdownheap(i, 1), 2 <= t.heap_len;) {
          ;
        }

        t.heap[--t.heap_max] = t.heap[1], function (t) {
          var e,
              n,
              r,
              i,
              o,
              a,
              s = p.dyn_tree,
              l = p.stat_desc.static_tree,
              h = p.stat_desc.extra_bits,
              u = p.stat_desc.extra_base,
              c = p.stat_desc.max_length,
              f = 0;

          for (i = 0; i <= d; i++) {
            t.bl_count[i] = 0;
          }

          for (s[2 * t.heap[t.heap_max] + 1] = 0, e = t.heap_max + 1; e < g; e++) {
            c < (i = s[2 * s[2 * (n = t.heap[e]) + 1] + 1] + 1) && (i = c, f++), s[2 * n + 1] = i, n > p.max_code || (t.bl_count[i]++, o = 0, u <= n && (o = h[n - u]), a = s[2 * n], t.opt_len += a * (i + o), l && (t.static_len += a * (l[2 * n + 1] + o)));
          }

          if (0 !== f) {
            do {
              for (i = c - 1; 0 === t.bl_count[i];) {
                i--;
              }

              t.bl_count[i]--, t.bl_count[i + 1] += 2, t.bl_count[c]--, f -= 2;
            } while (0 < f);

            for (i = c; 0 !== i; i--) {
              for (n = t.bl_count[i]; 0 !== n;) {
                (r = t.heap[--e]) > p.max_code || (s[2 * r + 1] != i && (t.opt_len += (i - s[2 * r + 1]) * s[2 * r], s[2 * r + 1] = i), n--);
              }
            }
          }
        }(t), function (t, e, n) {
          var r,
              i,
              o,
              a = [],
              s = 0;

          for (r = 1; r <= d; r++) {
            a[r] = s = s + n[r - 1] << 1;
          }

          for (i = 0; i <= e; i++) {
            0 !== (o = t[2 * i + 1]) && (t[2 * i] = l(a[o]++, o));
          }
        }(i, p.max_code, t.bl_count);
      };
    }

    function ft(t, e, n, r, i) {
      this.static_tree = t, this.extra_bits = e, this.extra_base = n, this.elems = r, this.max_length = i;
    }

    ct._length_code = [0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28], ct.base_length = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0], ct.base_dist = [0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384, 24576], ct.d_code = function (t) {
      return t < 256 ? e[t] : e[256 + (t >>> 7)];
    }, ct.extra_lbits = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0], ct.extra_dbits = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13], ct.extra_blbits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7], ct.bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], ft.static_ltree = [12, 8, 140, 8, 76, 8, 204, 8, 44, 8, 172, 8, 108, 8, 236, 8, 28, 8, 156, 8, 92, 8, 220, 8, 60, 8, 188, 8, 124, 8, 252, 8, 2, 8, 130, 8, 66, 8, 194, 8, 34, 8, 162, 8, 98, 8, 226, 8, 18, 8, 146, 8, 82, 8, 210, 8, 50, 8, 178, 8, 114, 8, 242, 8, 10, 8, 138, 8, 74, 8, 202, 8, 42, 8, 170, 8, 106, 8, 234, 8, 26, 8, 154, 8, 90, 8, 218, 8, 58, 8, 186, 8, 122, 8, 250, 8, 6, 8, 134, 8, 70, 8, 198, 8, 38, 8, 166, 8, 102, 8, 230, 8, 22, 8, 150, 8, 86, 8, 214, 8, 54, 8, 182, 8, 118, 8, 246, 8, 14, 8, 142, 8, 78, 8, 206, 8, 46, 8, 174, 8, 110, 8, 238, 8, 30, 8, 158, 8, 94, 8, 222, 8, 62, 8, 190, 8, 126, 8, 254, 8, 1, 8, 129, 8, 65, 8, 193, 8, 33, 8, 161, 8, 97, 8, 225, 8, 17, 8, 145, 8, 81, 8, 209, 8, 49, 8, 177, 8, 113, 8, 241, 8, 9, 8, 137, 8, 73, 8, 201, 8, 41, 8, 169, 8, 105, 8, 233, 8, 25, 8, 153, 8, 89, 8, 217, 8, 57, 8, 185, 8, 121, 8, 249, 8, 5, 8, 133, 8, 69, 8, 197, 8, 37, 8, 165, 8, 101, 8, 229, 8, 21, 8, 149, 8, 85, 8, 213, 8, 53, 8, 181, 8, 117, 8, 245, 8, 13, 8, 141, 8, 77, 8, 205, 8, 45, 8, 173, 8, 109, 8, 237, 8, 29, 8, 157, 8, 93, 8, 221, 8, 61, 8, 189, 8, 125, 8, 253, 8, 19, 9, 275, 9, 147, 9, 403, 9, 83, 9, 339, 9, 211, 9, 467, 9, 51, 9, 307, 9, 179, 9, 435, 9, 115, 9, 371, 9, 243, 9, 499, 9, 11, 9, 267, 9, 139, 9, 395, 9, 75, 9, 331, 9, 203, 9, 459, 9, 43, 9, 299, 9, 171, 9, 427, 9, 107, 9, 363, 9, 235, 9, 491, 9, 27, 9, 283, 9, 155, 9, 411, 9, 91, 9, 347, 9, 219, 9, 475, 9, 59, 9, 315, 9, 187, 9, 443, 9, 123, 9, 379, 9, 251, 9, 507, 9, 7, 9, 263, 9, 135, 9, 391, 9, 71, 9, 327, 9, 199, 9, 455, 9, 39, 9, 295, 9, 167, 9, 423, 9, 103, 9, 359, 9, 231, 9, 487, 9, 23, 9, 279, 9, 151, 9, 407, 9, 87, 9, 343, 9, 215, 9, 471, 9, 55, 9, 311, 9, 183, 9, 439, 9, 119, 9, 375, 9, 247, 9, 503, 9, 15, 9, 271, 9, 143, 9, 399, 9, 79, 9, 335, 9, 207, 9, 463, 9, 47, 9, 303, 9, 175, 9, 431, 9, 111, 9, 367, 9, 239, 9, 495, 9, 31, 9, 287, 9, 159, 9, 415, 9, 95, 9, 351, 9, 223, 9, 479, 9, 63, 9, 319, 9, 191, 9, 447, 9, 127, 9, 383, 9, 255, 9, 511, 9, 0, 7, 64, 7, 32, 7, 96, 7, 16, 7, 80, 7, 48, 7, 112, 7, 8, 7, 72, 7, 40, 7, 104, 7, 24, 7, 88, 7, 56, 7, 120, 7, 4, 7, 68, 7, 36, 7, 100, 7, 20, 7, 84, 7, 52, 7, 116, 7, 3, 8, 131, 8, 67, 8, 195, 8, 35, 8, 163, 8, 99, 8, 227, 8], ft.static_dtree = [0, 5, 16, 5, 8, 5, 24, 5, 4, 5, 20, 5, 12, 5, 28, 5, 2, 5, 18, 5, 10, 5, 26, 5, 6, 5, 22, 5, 14, 5, 30, 5, 1, 5, 17, 5, 9, 5, 25, 5, 5, 5, 21, 5, 13, 5, 29, 5, 3, 5, 19, 5, 11, 5, 27, 5, 7, 5, 23, 5], ft.static_l_desc = new ft(ft.static_ltree, ct.extra_lbits, 257, 286, d), ft.static_d_desc = new ft(ft.static_dtree, ct.extra_dbits, 0, 30, d), ft.static_bl_desc = new ft(null, ct.extra_blbits, 0, 19, 7);

    function n(t, e, n, r, i) {
      this.good_length = t, this.max_lazy = e, this.nice_length = n, this.max_chain = r, this.func = i;
    }

    var pt = [new n(0, 0, 0, 0, 0), new n(4, 4, 8, 4, 1), new n(4, 5, 16, 8, 1), new n(4, 6, 32, 32, 1), new n(4, 4, 16, 16, 2), new n(8, 16, 32, 32, 2), new n(8, 16, 128, 128, 2), new n(8, 32, 128, 256, 2), new n(32, 128, 258, 1024, 2), new n(32, 258, 258, 4096, 2)],
        dt = ["need dictionary", "stream end", "", "", "stream error", "data error", "", "buffer error", "", ""];

    function gt(t, e, n, r) {
      var i = t[2 * e],
          o = t[2 * n];
      return i < o || i == o && r[e] <= r[n];
    }

    function r() {
      var l,
          h,
          u,
          c,
          f,
          p,
          d,
          g,
          i,
          m,
          y,
          v,
          w,
          a,
          b,
          x,
          N,
          L,
          A,
          S,
          _,
          F,
          P,
          k,
          I,
          C,
          B,
          j,
          E,
          M,
          s,
          O,
          q,
          T,
          R,
          D,
          U,
          o,
          z,
          H,
          W,
          V = this,
          G = new ct(),
          Y = new ct(),
          J = new ct();

      function X() {
        var t;

        for (t = 0; t < 286; t++) {
          s[2 * t] = 0;
        }

        for (t = 0; t < 30; t++) {
          O[2 * t] = 0;
        }

        for (t = 0; t < 19; t++) {
          q[2 * t] = 0;
        }

        s[512] = 1, V.opt_len = V.static_len = 0, D = o = 0;
      }

      function K(t, e) {
        var n,
            r,
            i = -1,
            o = t[1],
            a = 0,
            s = 7,
            l = 4;

        for (0 === o && (s = 138, l = 3), t[2 * (e + 1) + 1] = 65535, n = 0; n <= e; n++) {
          r = o, o = t[2 * (n + 1) + 1], ++a < s && r == o || (a < l ? q[2 * r] += a : 0 !== r ? (r != i && q[2 * r]++, q[32]++) : a <= 10 ? q[34]++ : q[36]++, i = r, l = (a = 0) === o ? (s = 138, 3) : r == o ? (s = 6, 3) : (s = 7, 4));
        }
      }

      function Z(t) {
        V.pending_buf[V.pending++] = t;
      }

      function Q(t) {
        Z(255 & t), Z(t >>> 8 & 255);
      }

      function $(t, e) {
        var n,
            r = e;
        16 - r < W ? (Q(H |= (n = t) << W & 65535), H = n >>> 16 - W, W += r - 16) : (H |= t << W & 65535, W += r);
      }

      function tt(t, e) {
        var n = 2 * t;
        $(65535 & e[n], 65535 & e[n + 1]);
      }

      function et(t, e) {
        var n,
            r,
            i = -1,
            o = t[1],
            a = 0,
            s = 7,
            l = 4;

        for (0 === o && (s = 138, l = 3), n = 0; n <= e; n++) {
          if (r = o, o = t[2 * (n + 1) + 1], !(++a < s && r == o)) {
            if (a < l) for (; tt(r, q), 0 != --a;) {
              ;
            } else 0 !== r ? (r != i && (tt(r, q), a--), tt(16, q), $(a - 3, 2)) : a <= 10 ? (tt(17, q), $(a - 3, 3)) : (tt(18, q), $(a - 11, 7));
            i = r, l = (a = 0) === o ? (s = 138, 3) : r == o ? (s = 6, 3) : (s = 7, 4);
          }
        }
      }

      function nt() {
        16 == W ? (Q(H), W = H = 0) : 8 <= W && (Z(255 & H), H >>>= 8, W -= 8);
      }

      function rt(t, e) {
        var n, r, i;

        if (V.pending_buf[U + 2 * D] = t >>> 8 & 255, V.pending_buf[U + 2 * D + 1] = 255 & t, V.pending_buf[T + D] = 255 & e, D++, 0 === t ? s[2 * e]++ : (o++, t--, s[2 * (ct._length_code[e] + 256 + 1)]++, O[2 * ct.d_code(t)]++), 0 == (8191 & D) && 2 < B) {
          for (n = 8 * D, r = _ - N, i = 0; i < 30; i++) {
            n += O[2 * i] * (5 + ct.extra_dbits[i]);
          }

          if (n >>>= 3, o < Math.floor(D / 2) && n < Math.floor(r / 2)) return !0;
        }

        return D == R - 1;
      }

      function it(t, e) {
        var n,
            r,
            i,
            o,
            a = 0;
        if (0 !== D) for (; n = V.pending_buf[U + 2 * a] << 8 & 65280 | 255 & V.pending_buf[U + 2 * a + 1], r = 255 & V.pending_buf[T + a], a++, 0 === n ? tt(r, t) : (tt((i = ct._length_code[r]) + 256 + 1, t), 0 !== (o = ct.extra_lbits[i]) && $(r -= ct.base_length[i], o), tt(i = ct.d_code(--n), e), 0 !== (o = ct.extra_dbits[i]) && $(n -= ct.base_dist[i], o)), a < D;) {
          ;
        }
        tt(256, t), z = t[513];
      }

      function ot() {
        8 < W ? Q(H) : 0 < W && Z(255 & H), W = H = 0;
      }

      function at(t, e, n) {
        var r, i, o;
        $(0 + (n ? 1 : 0), 3), r = t, i = e, o = !0, ot(), z = 8, o && (Q(i), Q(~i)), V.pending_buf.set(g.subarray(r, r + i), V.pending), V.pending += i;
      }

      function e(t, e, n) {
        var r,
            i,
            o = 0;
        0 < B ? (G.build_tree(V), Y.build_tree(V), o = function () {
          var t;

          for (K(s, G.max_code), K(O, Y.max_code), J.build_tree(V), t = 18; 3 <= t && 0 === q[2 * ct.bl_order[t] + 1]; t--) {
            ;
          }

          return V.opt_len += 3 * (t + 1) + 5 + 5 + 4, t;
        }(), r = V.opt_len + 3 + 7 >>> 3, (i = V.static_len + 3 + 7 >>> 3) <= r && (r = i)) : r = i = e + 5, e + 4 <= r && -1 != t ? at(t, e, n) : i == r ? ($(2 + (n ? 1 : 0), 3), it(ft.static_ltree, ft.static_dtree)) : ($(4 + (n ? 1 : 0), 3), function (t, e, n) {
          var r;

          for ($(t - 257, 5), $(e - 1, 5), $(n - 4, 4), r = 0; r < n; r++) {
            $(q[2 * ct.bl_order[r] + 1], 3);
          }

          et(s, t - 1), et(O, e - 1);
        }(G.max_code + 1, Y.max_code + 1, o + 1), it(s, O)), X(), n && ot();
      }

      function st(t) {
        e(0 <= N ? N : -1, _ - N, t), N = _, l.flush_pending();
      }

      function lt() {
        var t, e, n, r;

        do {
          if (0 === (r = i - P - _) && 0 === _ && 0 === P) r = f;else if (-1 == r) r--;else if (f + f - 262 <= _) {
            for (g.set(g.subarray(f, f + f), 0), F -= f, _ -= f, N -= f, n = t = w; e = 65535 & y[--n], y[n] = f <= e ? e - f : 0, 0 != --t;) {
              ;
            }

            for (n = t = f; e = 65535 & m[--n], m[n] = f <= e ? e - f : 0, 0 != --t;) {
              ;
            }

            r += f;
          }
          if (0 === l.avail_in) return;
          t = l.read_buf(g, _ + P, r), 3 <= (P += t) && (v = ((v = 255 & g[_]) << x ^ 255 & g[_ + 1]) & b);
        } while (P < 262 && 0 !== l.avail_in);
      }

      function ht(t) {
        var e,
            n,
            r = I,
            i = _,
            o = k,
            a = f - 262 < _ ? _ - (f - 262) : 0,
            s = M,
            l = d,
            h = _ + 258,
            u = g[i + o - 1],
            c = g[i + o];
        E <= k && (r >>= 2), P < s && (s = P);

        do {
          if (g[(e = t) + o] == c && g[e + o - 1] == u && g[e] == g[i] && g[++e] == g[i + 1]) {
            i += 2, e++;

            do {} while (g[++i] == g[++e] && g[++i] == g[++e] && g[++i] == g[++e] && g[++i] == g[++e] && g[++i] == g[++e] && g[++i] == g[++e] && g[++i] == g[++e] && g[++i] == g[++e] && i < h);

            if (n = 258 - (h - i), i = h - 258, o < n) {
              if (F = t, s <= (o = n)) break;
              u = g[i + o - 1], c = g[i + o];
            }
          }
        } while ((t = 65535 & m[t & l]) > a && 0 != --r);

        return o <= P ? o : P;
      }

      function ut(t) {
        return t.total_in = t.total_out = 0, t.msg = null, V.pending = 0, V.pending_out = 0, h = 113, c = 0, G.dyn_tree = s, G.stat_desc = ft.static_l_desc, Y.dyn_tree = O, Y.stat_desc = ft.static_d_desc, J.dyn_tree = q, J.stat_desc = ft.static_bl_desc, W = H = 0, z = 8, X(), function () {
          var t;

          for (i = 2 * f, t = y[w - 1] = 0; t < w - 1; t++) {
            y[t] = 0;
          }

          C = pt[B].max_lazy, E = pt[B].good_length, M = pt[B].nice_length, I = pt[B].max_chain, L = k = 2, v = S = P = N = _ = 0;
        }(), 0;
      }

      V.depth = [], V.bl_count = [], V.heap = [], s = [], O = [], q = [], V.pqdownheap = function (t, e) {
        for (var n = V.heap, r = n[e], i = e << 1; i <= V.heap_len && (i < V.heap_len && gt(t, n[i + 1], n[i], V.depth) && i++, !gt(t, r, n[i], V.depth));) {
          n[e] = n[i], e = i, i <<= 1;
        }

        n[e] = r;
      }, V.deflateInit = function (t, e, n, r, i, o) {
        return r || (r = 8), i || (i = 8), o || (o = 0), t.msg = null, -1 == e && (e = 6), i < 1 || 9 < i || 8 != r || n < 9 || 15 < n || e < 0 || 9 < e || o < 0 || 2 < o ? -2 : (t.dstate = V, d = (f = 1 << (p = n)) - 1, b = (w = 1 << (a = i + 7)) - 1, x = Math.floor((a + 3 - 1) / 3), g = new Uint8Array(2 * f), m = [], y = [], R = 1 << i + 6, V.pending_buf = new Uint8Array(4 * R), u = 4 * R, U = Math.floor(R / 2), T = 3 * R, B = e, j = o, ut(t));
      }, V.deflateEnd = function () {
        return 42 != h && 113 != h && 666 != h ? -2 : (V.pending_buf = null, g = m = y = null, V.dstate = null, 113 == h ? -3 : 0);
      }, V.deflateParams = function (t, e, n) {
        var r = 0;
        return -1 == e && (e = 6), e < 0 || 9 < e || n < 0 || 2 < n ? -2 : (pt[B].func != pt[e].func && 0 !== t.total_in && (r = t.deflate(1)), B != e && (C = pt[B = e].max_lazy, E = pt[B].good_length, M = pt[B].nice_length, I = pt[B].max_chain), j = n, r);
      }, V.deflateSetDictionary = function (t, e, n) {
        var r,
            i = n,
            o = 0;
        if (!e || 42 != h) return -2;
        if (i < 3) return 0;

        for (f - 262 < i && (o = n - (i = f - 262)), g.set(e.subarray(o, o + i), 0), N = _ = i, v = ((v = 255 & g[0]) << x ^ 255 & g[1]) & b, r = 0; r <= i - 3; r++) {
          v = (v << x ^ 255 & g[r + 2]) & b, m[r & d] = y[v], y[v] = r;
        }

        return 0;
      }, V.deflate = function (t, e) {
        var n, r, i, o, a, s;
        if (4 < e || e < 0) return -2;
        if (!t.next_out || !t.next_in && 0 !== t.avail_in || 666 == h && 4 != e) return t.msg = dt[4], -2;
        if (0 === t.avail_out) return t.msg = dt[7], -5;

        if (l = t, o = c, c = e, 42 == h && (r = 8 + (p - 8 << 4) << 8, 3 < (i = (B - 1 & 255) >> 1) && (i = 3), r |= i << 6, 0 !== _ && (r |= 32), h = 113, Z((s = r += 31 - r % 31) >> 8 & 255), Z(255 & s)), 0 !== V.pending) {
          if (l.flush_pending(), 0 === l.avail_out) return c = -1, 0;
        } else if (0 === l.avail_in && e <= o && 4 != e) return l.msg = dt[7], -5;

        if (666 == h && 0 !== l.avail_in) return t.msg = dt[7], -5;

        if (0 !== l.avail_in || 0 !== P || 0 != e && 666 != h) {
          switch (a = -1, pt[B].func) {
            case 0:
              a = function (t) {
                var e,
                    n = 65535;

                for (u - 5 < n && (n = u - 5);;) {
                  if (P <= 1) {
                    if (lt(), 0 === P && 0 == t) return 0;
                    if (0 === P) break;
                  }

                  if (_ += P, e = N + n, ((P = 0) === _ || e <= _) && (P = _ - e, _ = e, st(!1), 0 === l.avail_out)) return 0;
                  if (f - 262 <= _ - N && (st(!1), 0 === l.avail_out)) return 0;
                }

                return st(4 == t), 0 === l.avail_out ? 4 == t ? 2 : 0 : 4 == t ? 3 : 1;
              }(e);

              break;

            case 1:
              a = function (t) {
                for (var e, n = 0;;) {
                  if (P < 262) {
                    if (lt(), P < 262 && 0 == t) return 0;
                    if (0 === P) break;
                  }

                  if (3 <= P && (v = (v << x ^ 255 & g[_ + 2]) & b, n = 65535 & y[v], m[_ & d] = y[v], y[v] = _), 0 !== n && (_ - n & 65535) <= f - 262 && 2 != j && (L = ht(n)), 3 <= L) {
                    if (e = rt(_ - F, L - 3), P -= L, L <= C && 3 <= P) {
                      for (L--; v = (v << x ^ 255 & g[++_ + 2]) & b, n = 65535 & y[v], m[_ & d] = y[v], y[v] = _, 0 != --L;) {
                        ;
                      }

                      _++;
                    } else _ += L, L = 0, v = ((v = 255 & g[_]) << x ^ 255 & g[_ + 1]) & b;
                  } else e = rt(0, 255 & g[_]), P--, _++;
                  if (e && (st(!1), 0 === l.avail_out)) return 0;
                }

                return st(4 == t), 0 === l.avail_out ? 4 == t ? 2 : 0 : 4 == t ? 3 : 1;
              }(e);

              break;

            case 2:
              a = function (t) {
                for (var e, n, r = 0;;) {
                  if (P < 262) {
                    if (lt(), P < 262 && 0 == t) return 0;
                    if (0 === P) break;
                  }

                  if (3 <= P && (v = (v << x ^ 255 & g[_ + 2]) & b, r = 65535 & y[v], m[_ & d] = y[v], y[v] = _), k = L, A = F, L = 2, 0 !== r && k < C && (_ - r & 65535) <= f - 262 && (2 != j && (L = ht(r)), L <= 5 && (1 == j || 3 == L && 4096 < _ - F) && (L = 2)), 3 <= k && L <= k) {
                    for (n = _ + P - 3, e = rt(_ - 1 - A, k - 3), P -= k - 1, k -= 2; ++_ <= n && (v = (v << x ^ 255 & g[_ + 2]) & b, r = 65535 & y[v], m[_ & d] = y[v], y[v] = _), 0 != --k;) {
                      ;
                    }

                    if (S = 0, L = 2, _++, e && (st(!1), 0 === l.avail_out)) return 0;
                  } else if (0 !== S) {
                    if ((e = rt(0, 255 & g[_ - 1])) && st(!1), _++, P--, 0 === l.avail_out) return 0;
                  } else S = 1, _++, P--;
                }

                return 0 !== S && (e = rt(0, 255 & g[_ - 1]), S = 0), st(4 == t), 0 === l.avail_out ? 4 == t ? 2 : 0 : 4 == t ? 3 : 1;
              }(e);

          }

          if (2 != a && 3 != a || (h = 666), 0 == a || 2 == a) return 0 === l.avail_out && (c = -1), 0;

          if (1 == a) {
            if (1 == e) $(2, 3), tt(256, ft.static_ltree), nt(), 1 + z + 10 - W < 9 && ($(2, 3), tt(256, ft.static_ltree), nt()), z = 7;else if (at(0, 0, !1), 3 == e) for (n = 0; n < w; n++) {
              y[n] = 0;
            }
            if (l.flush_pending(), 0 === l.avail_out) return c = -1, 0;
          }
        }

        return 4 != e ? 0 : 1;
      };
    }

    function i() {
      this.next_in_index = 0, this.next_out_index = 0, this.avail_in = 0, this.total_in = 0, this.avail_out = 0, this.total_out = 0;
    }

    i.prototype = {
      deflateInit: function deflateInit(t, e) {
        return this.dstate = new r(), e || (e = d), this.dstate.deflateInit(this, t, e);
      },
      deflate: function deflate(t) {
        return this.dstate ? this.dstate.deflate(this, t) : -2;
      },
      deflateEnd: function deflateEnd() {
        if (!this.dstate) return -2;
        var t = this.dstate.deflateEnd();
        return this.dstate = null, t;
      },
      deflateParams: function deflateParams(t, e) {
        return this.dstate ? this.dstate.deflateParams(this, t, e) : -2;
      },
      deflateSetDictionary: function deflateSetDictionary(t, e) {
        return this.dstate ? this.dstate.deflateSetDictionary(this, t, e) : -2;
      },
      read_buf: function read_buf(t, e, n) {
        var r = this.avail_in;
        return n < r && (r = n), 0 === r ? 0 : (this.avail_in -= r, t.set(this.next_in.subarray(this.next_in_index, this.next_in_index + r), e), this.next_in_index += r, this.total_in += r, r);
      },
      flush_pending: function flush_pending() {
        var t = this,
            e = t.dstate.pending;
        e > t.avail_out && (e = t.avail_out), 0 !== e && (t.next_out.set(t.dstate.pending_buf.subarray(t.dstate.pending_out, t.dstate.pending_out + e), t.next_out_index), t.next_out_index += e, t.dstate.pending_out += e, t.total_out += e, t.avail_out -= e, t.dstate.pending -= e, 0 === t.dstate.pending && (t.dstate.pending_out = 0));
      }
    };
    var o = t.zip || t;

    o.Deflater = o._jzlib_Deflater = function (t) {
      var s = new i(),
          l = new Uint8Array(512),
          e = t ? t.level : -1;
      void 0 === e && (e = -1), s.deflateInit(e), s.next_out = l, this.append = function (t, e) {
        var n,
            r = [],
            i = 0,
            o = 0,
            a = 0;

        if (t.length) {
          s.next_in_index = 0, s.next_in = t, s.avail_in = t.length;

          do {
            if (s.next_out_index = 0, s.avail_out = 512, 0 != s.deflate(0)) throw new Error("deflating: " + s.msg);
            s.next_out_index && (512 == s.next_out_index ? r.push(new Uint8Array(l)) : r.push(new Uint8Array(l.subarray(0, s.next_out_index)))), a += s.next_out_index, e && 0 < s.next_in_index && s.next_in_index != i && (e(s.next_in_index), i = s.next_in_index);
          } while (0 < s.avail_in || 0 === s.avail_out);

          return n = new Uint8Array(a), r.forEach(function (t) {
            n.set(t, o), o += t.length;
          }), n;
        }
      }, this.flush = function () {
        var t,
            e,
            n = [],
            r = 0,
            i = 0;

        do {
          if (s.next_out_index = 0, s.avail_out = 512, 1 != (t = s.deflate(4)) && 0 != t) throw new Error("deflating: " + s.msg);
          0 < 512 - s.avail_out && n.push(new Uint8Array(l.subarray(0, s.next_out_index))), i += s.next_out_index;
        } while (0 < s.avail_in || 0 === s.avail_out);

        return s.deflateEnd(), e = new Uint8Array(i), n.forEach(function (t) {
          e.set(t, r), r += t.length;
        }), e;
      };
    };
  }("undefined" != typeof self && self || "undefined" != typeof window && window || "undefined" != typeof global && global || Function('return typeof this === "object" && this.content')() || Function("return this")()), ("undefined" != typeof self && self || "undefined" != typeof window && window || "undefined" != typeof global && global || Function('return typeof this === "object" && this.content')() || Function("return this")()).RGBColor = function (t) {
    var e;
    t = t || "", this.ok = !1, "#" == t.charAt(0) && (t = t.substr(1, 6)), t = (t = t.replace(/ /g, "")).toLowerCase();
    var n = {
      aliceblue: "f0f8ff",
      antiquewhite: "faebd7",
      aqua: "00ffff",
      aquamarine: "7fffd4",
      azure: "f0ffff",
      beige: "f5f5dc",
      bisque: "ffe4c4",
      black: "000000",
      blanchedalmond: "ffebcd",
      blue: "0000ff",
      blueviolet: "8a2be2",
      brown: "a52a2a",
      burlywood: "deb887",
      cadetblue: "5f9ea0",
      chartreuse: "7fff00",
      chocolate: "d2691e",
      coral: "ff7f50",
      cornflowerblue: "6495ed",
      cornsilk: "fff8dc",
      crimson: "dc143c",
      cyan: "00ffff",
      darkblue: "00008b",
      darkcyan: "008b8b",
      darkgoldenrod: "b8860b",
      darkgray: "a9a9a9",
      darkgreen: "006400",
      darkkhaki: "bdb76b",
      darkmagenta: "8b008b",
      darkolivegreen: "556b2f",
      darkorange: "ff8c00",
      darkorchid: "9932cc",
      darkred: "8b0000",
      darksalmon: "e9967a",
      darkseagreen: "8fbc8f",
      darkslateblue: "483d8b",
      darkslategray: "2f4f4f",
      darkturquoise: "00ced1",
      darkviolet: "9400d3",
      deeppink: "ff1493",
      deepskyblue: "00bfff",
      dimgray: "696969",
      dodgerblue: "1e90ff",
      feldspar: "d19275",
      firebrick: "b22222",
      floralwhite: "fffaf0",
      forestgreen: "228b22",
      fuchsia: "ff00ff",
      gainsboro: "dcdcdc",
      ghostwhite: "f8f8ff",
      gold: "ffd700",
      goldenrod: "daa520",
      gray: "808080",
      green: "008000",
      greenyellow: "adff2f",
      honeydew: "f0fff0",
      hotpink: "ff69b4",
      indianred: "cd5c5c",
      indigo: "4b0082",
      ivory: "fffff0",
      khaki: "f0e68c",
      lavender: "e6e6fa",
      lavenderblush: "fff0f5",
      lawngreen: "7cfc00",
      lemonchiffon: "fffacd",
      lightblue: "add8e6",
      lightcoral: "f08080",
      lightcyan: "e0ffff",
      lightgoldenrodyellow: "fafad2",
      lightgrey: "d3d3d3",
      lightgreen: "90ee90",
      lightpink: "ffb6c1",
      lightsalmon: "ffa07a",
      lightseagreen: "20b2aa",
      lightskyblue: "87cefa",
      lightslateblue: "8470ff",
      lightslategray: "778899",
      lightsteelblue: "b0c4de",
      lightyellow: "ffffe0",
      lime: "00ff00",
      limegreen: "32cd32",
      linen: "faf0e6",
      magenta: "ff00ff",
      maroon: "800000",
      mediumaquamarine: "66cdaa",
      mediumblue: "0000cd",
      mediumorchid: "ba55d3",
      mediumpurple: "9370d8",
      mediumseagreen: "3cb371",
      mediumslateblue: "7b68ee",
      mediumspringgreen: "00fa9a",
      mediumturquoise: "48d1cc",
      mediumvioletred: "c71585",
      midnightblue: "191970",
      mintcream: "f5fffa",
      mistyrose: "ffe4e1",
      moccasin: "ffe4b5",
      navajowhite: "ffdead",
      navy: "000080",
      oldlace: "fdf5e6",
      olive: "808000",
      olivedrab: "6b8e23",
      orange: "ffa500",
      orangered: "ff4500",
      orchid: "da70d6",
      palegoldenrod: "eee8aa",
      palegreen: "98fb98",
      paleturquoise: "afeeee",
      palevioletred: "d87093",
      papayawhip: "ffefd5",
      peachpuff: "ffdab9",
      peru: "cd853f",
      pink: "ffc0cb",
      plum: "dda0dd",
      powderblue: "b0e0e6",
      purple: "800080",
      red: "ff0000",
      rosybrown: "bc8f8f",
      royalblue: "4169e1",
      saddlebrown: "8b4513",
      salmon: "fa8072",
      sandybrown: "f4a460",
      seagreen: "2e8b57",
      seashell: "fff5ee",
      sienna: "a0522d",
      silver: "c0c0c0",
      skyblue: "87ceeb",
      slateblue: "6a5acd",
      slategray: "708090",
      snow: "fffafa",
      springgreen: "00ff7f",
      steelblue: "4682b4",
      tan: "d2b48c",
      teal: "008080",
      thistle: "d8bfd8",
      tomato: "ff6347",
      turquoise: "40e0d0",
      violet: "ee82ee",
      violetred: "d02090",
      wheat: "f5deb3",
      white: "ffffff",
      whitesmoke: "f5f5f5",
      yellow: "ffff00",
      yellowgreen: "9acd32"
    };

    for (var r in n) {
      t == r && (t = n[r]);
    }

    for (var i = [{
      re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
      example: ["rgb(123, 234, 45)", "rgb(255,234,245)"],
      process: function process(t) {
        return [parseInt(t[1]), parseInt(t[2]), parseInt(t[3])];
      }
    }, {
      re: /^(\w{2})(\w{2})(\w{2})$/,
      example: ["#00ff00", "336699"],
      process: function process(t) {
        return [parseInt(t[1], 16), parseInt(t[2], 16), parseInt(t[3], 16)];
      }
    }, {
      re: /^(\w{1})(\w{1})(\w{1})$/,
      example: ["#fb0", "f0f"],
      process: function process(t) {
        return [parseInt(t[1] + t[1], 16), parseInt(t[2] + t[2], 16), parseInt(t[3] + t[3], 16)];
      }
    }], o = 0; o < i.length; o++) {
      var a = i[o].re,
          s = i[o].process,
          l = a.exec(t);
      l && (e = s(l), this.r = e[0], this.g = e[1], this.b = e[2], this.ok = !0);
    }

    this.r = this.r < 0 || isNaN(this.r) ? 0 : 255 < this.r ? 255 : this.r, this.g = this.g < 0 || isNaN(this.g) ? 0 : 255 < this.g ? 255 : this.g, this.b = this.b < 0 || isNaN(this.b) ? 0 : 255 < this.b ? 255 : this.b, this.toRGB = function () {
      return "rgb(" + this.r + ", " + this.g + ", " + this.b + ")";
    }, this.toHex = function () {
      var t = this.r.toString(16),
          e = this.g.toString(16),
          n = this.b.toString(16);
      return 1 == t.length && (t = "0" + t), 1 == e.length && (e = "0" + e), 1 == n.length && (n = "0" + n), "#" + t + e + n;
    };
  }, function (t) {
    var n = "+".charCodeAt(0),
        r = "/".charCodeAt(0),
        i = "0".charCodeAt(0),
        o = "a".charCodeAt(0),
        a = "A".charCodeAt(0),
        s = "-".charCodeAt(0),
        l = "_".charCodeAt(0),
        u = function u(t) {
      var e = t.charCodeAt(0);
      return e === n || e === s ? 62 : e === r || e === l ? 63 : e < i ? -1 : e < i + 10 ? e - i + 26 + 26 : e < a + 26 ? e - a : e < o + 26 ? e - o + 26 : void 0;
    };

    t.API.TTFFont = function () {
      function i(t, e, n) {
        var r;

        if (this.rawData = t, r = this.contents = new J(t), this.contents.pos = 4, "ttcf" === r.readString(4)) {
          if (!e) throw new Error("Must specify a font name for TTC files.");
          throw new Error("Font " + e + " not found in TTC file.");
        }

        r.pos = 0, this.parse(), this.subset = new P(this), this.registerTTF();
      }

      return i.open = function (t, e, n, r) {
        if ("string" != typeof n) throw new Error("Invalid argument supplied in TTFFont.open");
        return new i(function (t) {
          var e, n, r, i, o, a;
          if (0 < t.length % 4) throw new Error("Invalid string. Length must be a multiple of 4");
          var s = t.length;
          o = "=" === t.charAt(s - 2) ? 2 : "=" === t.charAt(s - 1) ? 1 : 0, a = new Uint8Array(3 * t.length / 4 - o), r = 0 < o ? t.length - 4 : t.length;
          var l = 0;

          function h(t) {
            a[l++] = t;
          }

          for (n = e = 0; e < r; e += 4, n += 3) {
            h((16711680 & (i = u(t.charAt(e)) << 18 | u(t.charAt(e + 1)) << 12 | u(t.charAt(e + 2)) << 6 | u(t.charAt(e + 3)))) >> 16), h((65280 & i) >> 8), h(255 & i);
          }

          return 2 === o ? h(255 & (i = u(t.charAt(e)) << 2 | u(t.charAt(e + 1)) >> 4)) : 1 === o && (h((i = u(t.charAt(e)) << 10 | u(t.charAt(e + 1)) << 4 | u(t.charAt(e + 2)) >> 2) >> 8 & 255), h(255 & i)), a;
        }(n), e, r);
      }, i.prototype.parse = function () {
        return this.directory = new e(this.contents), this.head = new p(this), this.name = new b(this), this.cmap = new y(this), this.toUnicode = new Map(), this.hhea = new g(this), this.maxp = new x(this), this.hmtx = new N(this), this.post = new v(this), this.os2 = new m(this), this.loca = new F(this), this.glyf = new A(this), this.ascender = this.os2.exists && this.os2.ascender || this.hhea.ascender, this.decender = this.os2.exists && this.os2.decender || this.hhea.decender, this.lineGap = this.os2.exists && this.os2.lineGap || this.hhea.lineGap, this.bbox = [this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax];
      }, i.prototype.registerTTF = function () {
        var i, t, e, n, r;
        if (this.scaleFactor = 1e3 / this.head.unitsPerEm, this.bbox = function () {
          var t, e, n, r;

          for (r = [], t = 0, e = (n = this.bbox).length; t < e; t++) {
            i = n[t], r.push(Math.round(i * this.scaleFactor));
          }

          return r;
        }.call(this), this.stemV = 0, this.post.exists ? (e = 255 & (n = this.post.italic_angle), !0 & (t = n >> 16) && (t = -(1 + (65535 ^ t))), this.italicAngle = +(t + "." + e)) : this.italicAngle = 0, this.ascender = Math.round(this.ascender * this.scaleFactor), this.decender = Math.round(this.decender * this.scaleFactor), this.lineGap = Math.round(this.lineGap * this.scaleFactor), this.capHeight = this.os2.exists && this.os2.capHeight || this.ascender, this.xHeight = this.os2.exists && this.os2.xHeight || 0, this.familyClass = (this.os2.exists && this.os2.familyClass || 0) >> 8, this.isSerif = 1 === (r = this.familyClass) || 2 === r || 3 === r || 4 === r || 5 === r || 7 === r, this.isScript = 10 === this.familyClass, this.flags = 0, this.post.isFixedPitch && (this.flags |= 1), this.isSerif && (this.flags |= 2), this.isScript && (this.flags |= 8), 0 !== this.italicAngle && (this.flags |= 64), this.flags |= 32, !this.cmap.unicode) throw new Error("No unicode cmap for font");
      }, i.prototype.characterToGlyph = function (t) {
        var e;
        return (null != (e = this.cmap.unicode) ? e.codeMap[t] : void 0) || 0;
      }, i.prototype.widthOfGlyph = function (t) {
        var e;
        return e = 1e3 / this.head.unitsPerEm, this.hmtx.forGlyph(t).advance * e;
      }, i.prototype.widthOfString = function (t, e, n) {
        var r, i, o, a, s;

        for (i = a = o = 0, s = (t = "" + t).length; 0 <= s ? a < s : s < a; i = 0 <= s ? ++a : --a) {
          r = t.charCodeAt(i), o += this.widthOfGlyph(this.characterToGlyph(r)) + n * (1e3 / e) || 0;
        }

        return o * (e / 1e3);
      }, i.prototype.lineHeight = function (t, e) {
        var n;
        return null == e && (e = !1), n = e ? this.lineGap : 0, (this.ascender + n - this.decender) / 1e3 * t;
      }, i;
    }();

    var h,
        J = function () {
      function t(t) {
        this.data = null != t ? t : [], this.pos = 0, this.length = this.data.length;
      }

      return t.prototype.readByte = function () {
        return this.data[this.pos++];
      }, t.prototype.writeByte = function (t) {
        return this.data[this.pos++] = t;
      }, t.prototype.readUInt32 = function () {
        return 16777216 * this.readByte() + (this.readByte() << 16) + (this.readByte() << 8) + this.readByte();
      }, t.prototype.writeUInt32 = function (t) {
        return this.writeByte(t >>> 24 & 255), this.writeByte(t >> 16 & 255), this.writeByte(t >> 8 & 255), this.writeByte(255 & t);
      }, t.prototype.readInt32 = function () {
        var t;
        return 2147483648 <= (t = this.readUInt32()) ? t - 4294967296 : t;
      }, t.prototype.writeInt32 = function (t) {
        return t < 0 && (t += 4294967296), this.writeUInt32(t);
      }, t.prototype.readUInt16 = function () {
        return this.readByte() << 8 | this.readByte();
      }, t.prototype.writeUInt16 = function (t) {
        return this.writeByte(t >> 8 & 255), this.writeByte(255 & t);
      }, t.prototype.readInt16 = function () {
        var t;
        return 32768 <= (t = this.readUInt16()) ? t - 65536 : t;
      }, t.prototype.writeInt16 = function (t) {
        return t < 0 && (t += 65536), this.writeUInt16(t);
      }, t.prototype.readString = function (t) {
        var e, n, r;

        for (n = [], e = r = 0; 0 <= t ? r < t : t < r; e = 0 <= t ? ++r : --r) {
          n[e] = String.fromCharCode(this.readByte());
        }

        return n.join("");
      }, t.prototype.writeString = function (t) {
        var e, n, r, i;

        for (i = [], e = n = 0, r = t.length; 0 <= r ? n < r : r < n; e = 0 <= r ? ++n : --n) {
          i.push(this.writeByte(t.charCodeAt(e)));
        }

        return i;
      }, t.prototype.readShort = function () {
        return this.readInt16();
      }, t.prototype.writeShort = function (t) {
        return this.writeInt16(t);
      }, t.prototype.readLongLong = function () {
        var t, e, n, r, i, o, a, s;
        return t = this.readByte(), e = this.readByte(), n = this.readByte(), r = this.readByte(), i = this.readByte(), o = this.readByte(), a = this.readByte(), s = this.readByte(), 128 & t ? -1 * (72057594037927940 * (255 ^ t) + 281474976710656 * (255 ^ e) + 1099511627776 * (255 ^ n) + 4294967296 * (255 ^ r) + 16777216 * (255 ^ i) + 65536 * (255 ^ o) + 256 * (255 ^ a) + (255 ^ s) + 1) : 72057594037927940 * t + 281474976710656 * e + 1099511627776 * n + 4294967296 * r + 16777216 * i + 65536 * o + 256 * a + s;
      }, t.prototype.writeLongLong = function (t) {
        var e, n;
        return e = Math.floor(t / 4294967296), n = 4294967295 & t, this.writeByte(e >> 24 & 255), this.writeByte(e >> 16 & 255), this.writeByte(e >> 8 & 255), this.writeByte(255 & e), this.writeByte(n >> 24 & 255), this.writeByte(n >> 16 & 255), this.writeByte(n >> 8 & 255), this.writeByte(255 & n);
      }, t.prototype.readInt = function () {
        return this.readInt32();
      }, t.prototype.writeInt = function (t) {
        return this.writeInt32(t);
      }, t.prototype.read = function (t) {
        var e, n;

        for (e = [], n = 0; 0 <= t ? n < t : t < n; 0 <= t ? ++n : --n) {
          e.push(this.readByte());
        }

        return e;
      }, t.prototype.write = function (t) {
        var e, n, r, i;

        for (i = [], n = 0, r = t.length; n < r; n++) {
          e = t[n], i.push(this.writeByte(e));
        }

        return i;
      }, t;
    }(),
        e = function () {
      var d;

      function t(t) {
        var e, n, r;

        for (this.scalarType = t.readInt(), this.tableCount = t.readShort(), this.searchRange = t.readShort(), this.entrySelector = t.readShort(), this.rangeShift = t.readShort(), this.tables = {}, n = 0, r = this.tableCount; 0 <= r ? n < r : r < n; 0 <= r ? ++n : --n) {
          e = {
            tag: t.readString(4),
            checksum: t.readInt(),
            offset: t.readInt(),
            length: t.readInt()
          }, this.tables[e.tag] = e;
        }
      }

      return t.prototype.encode = function (t) {
        var e, n, r, i, o, a, s, l, h, u, c, f, p;

        for (p in c = Object.keys(t).length, a = Math.log(2), h = 16 * Math.floor(Math.log(c) / a), i = Math.floor(h / a), l = 16 * c - h, (n = new J()).writeInt(this.scalarType), n.writeShort(c), n.writeShort(h), n.writeShort(i), n.writeShort(l), r = 16 * c, s = n.pos + r, o = null, f = [], t) {
          for (u = t[p], n.writeString(p), n.writeInt(d(u)), n.writeInt(s), n.writeInt(u.length), f = f.concat(u), "head" === p && (o = s), s += u.length; s % 4;) {
            f.push(0), s++;
          }
        }

        return n.write(f), e = 2981146554 - d(n.data), n.pos = o + 8, n.writeUInt32(e), n.data;
      }, d = function d(t) {
        var e, n, r, i;

        for (t = L.call(t); t.length % 4;) {
          t.push(0);
        }

        for (n = new J(t), r = e = 0, i = t.length; r < i; r += 4) {
          e += n.readUInt32();
        }

        return 4294967295 & e;
      }, t;
    }(),
        c = {}.hasOwnProperty,
        f = function f(t, e) {
      for (var n in e) {
        c.call(e, n) && (t[n] = e[n]);
      }

      function r() {
        this.constructor = t;
      }

      return r.prototype = e.prototype, t.prototype = new r(), t.__super__ = e.prototype, t;
    };

    h = function () {
      function t(t) {
        var e;
        this.file = t, e = this.file.directory.tables[this.tag], this.exists = !!e, e && (this.offset = e.offset, this.length = e.length, this.parse(this.file.contents));
      }

      return t.prototype.parse = function () {}, t.prototype.encode = function () {}, t.prototype.raw = function () {
        return this.exists ? (this.file.contents.pos = this.offset, this.file.contents.read(this.length)) : null;
      }, t;
    }();

    var p = function (t) {
      function e() {
        return e.__super__.constructor.apply(this, arguments);
      }

      return f(e, h), e.prototype.tag = "head", e.prototype.parse = function (t) {
        return t.pos = this.offset, this.version = t.readInt(), this.revision = t.readInt(), this.checkSumAdjustment = t.readInt(), this.magicNumber = t.readInt(), this.flags = t.readShort(), this.unitsPerEm = t.readShort(), this.created = t.readLongLong(), this.modified = t.readLongLong(), this.xMin = t.readShort(), this.yMin = t.readShort(), this.xMax = t.readShort(), this.yMax = t.readShort(), this.macStyle = t.readShort(), this.lowestRecPPEM = t.readShort(), this.fontDirectionHint = t.readShort(), this.indexToLocFormat = t.readShort(), this.glyphDataFormat = t.readShort();
      }, e.prototype.encode = function (t) {
        var e;
        return (e = new J()).writeInt(this.version), e.writeInt(this.revision), e.writeInt(this.checkSumAdjustment), e.writeInt(this.magicNumber), e.writeShort(this.flags), e.writeShort(this.unitsPerEm), e.writeLongLong(this.created), e.writeLongLong(this.modified), e.writeShort(this.xMin), e.writeShort(this.yMin), e.writeShort(this.xMax), e.writeShort(this.yMax), e.writeShort(this.macStyle), e.writeShort(this.lowestRecPPEM), e.writeShort(this.fontDirectionHint), e.writeShort(t), e.writeShort(this.glyphDataFormat), e.data;
      }, e;
    }(),
        d = function () {
      function t(n, t) {
        var e, r, i, o, a, s, l, h, u, c, f, p, d, g, m, y, v, w;

        switch (this.platformID = n.readUInt16(), this.encodingID = n.readShort(), this.offset = t + n.readInt(), u = n.pos, n.pos = this.offset, this.format = n.readUInt16(), this.length = n.readUInt16(), this.language = n.readUInt16(), this.isUnicode = 3 === this.platformID && 1 === this.encodingID && 4 === this.format || 0 === this.platformID && 4 === this.format, this.codeMap = {}, this.format) {
          case 0:
            for (s = m = 0; m < 256; s = ++m) {
              this.codeMap[s] = n.readByte();
            }

            break;

          case 4:
            for (f = n.readUInt16(), c = f / 2, n.pos += 6, i = function () {
              var t, e;

              for (e = [], s = t = 0; 0 <= c ? t < c : c < t; s = 0 <= c ? ++t : --t) {
                e.push(n.readUInt16());
              }

              return e;
            }(), n.pos += 2, d = function () {
              var t, e;

              for (e = [], s = t = 0; 0 <= c ? t < c : c < t; s = 0 <= c ? ++t : --t) {
                e.push(n.readUInt16());
              }

              return e;
            }(), l = function () {
              var t, e;

              for (e = [], s = t = 0; 0 <= c ? t < c : c < t; s = 0 <= c ? ++t : --t) {
                e.push(n.readUInt16());
              }

              return e;
            }(), h = function () {
              var t, e;

              for (e = [], s = t = 0; 0 <= c ? t < c : c < t; s = 0 <= c ? ++t : --t) {
                e.push(n.readUInt16());
              }

              return e;
            }(), r = (this.length - n.pos + this.offset) / 2, a = function () {
              var t, e;

              for (e = [], s = t = 0; 0 <= r ? t < r : r < t; s = 0 <= r ? ++t : --t) {
                e.push(n.readUInt16());
              }

              return e;
            }(), s = y = 0, w = i.length; y < w; s = ++y) {
              for (g = i[s], e = v = p = d[s]; p <= g ? v <= g : g <= v; e = p <= g ? ++v : --v) {
                0 === h[s] ? o = e + l[s] : 0 !== (o = a[h[s] / 2 + (e - p) - (c - s)] || 0) && (o += l[s]), this.codeMap[e] = 65535 & o;
              }
            }

        }

        n.pos = u;
      }

      return t.encode = function (t, e) {
        var n, r, i, o, a, s, l, h, u, c, f, p, d, g, m, y, v, w, b, x, N, L, A, S, _, F, P, k, I, C, B, j, E, M, O, q, T, R, D, U, z, H, W, V, G, Y;

        switch (k = new J(), o = Object.keys(t).sort(function (t, e) {
          return t - e;
        }), e) {
          case "macroman":
            for (d = 0, g = function () {
              var t, e;

              for (e = [], p = t = 0; t < 256; p = ++t) {
                e.push(0);
              }

              return e;
            }(), y = {
              0: 0
            }, i = {}, I = 0, E = o.length; I < E; I++) {
              null == y[W = t[r = o[I]]] && (y[W] = ++d), i[r] = {
                old: t[r],
                "new": y[t[r]]
              }, g[r] = y[t[r]];
            }

            return k.writeUInt16(1), k.writeUInt16(0), k.writeUInt32(12), k.writeUInt16(0), k.writeUInt16(262), k.writeUInt16(0), k.write(g), {
              charMap: i,
              subtable: k.data,
              maxGlyphID: d + 1
            };

          case "unicode":
            for (F = [], u = [], y = {}, n = {}, m = l = null, C = v = 0, M = o.length; C < M; C++) {
              null == y[b = t[r = o[C]]] && (y[b] = ++v), n[r] = {
                old: b,
                "new": y[b]
              }, a = y[b] - r, null != m && a === l || (m && u.push(m), F.push(r), l = a), m = r;
            }

            for (m && u.push(m), u.push(65535), F.push(65535), S = 2 * (A = F.length), L = 2 * Math.pow(Math.log(A) / Math.LN2, 2), c = Math.log(L / 2) / Math.LN2, N = 2 * A - L, s = [], x = [], f = [], p = B = 0, O = F.length; B < O; p = ++B) {
              if (_ = F[p], h = u[p], 65535 === _) {
                s.push(0), x.push(0);
                break;
              }

              if (32768 <= _ - (P = n[_]["new"])) for (s.push(0), x.push(2 * (f.length + A - p)), r = j = _; _ <= h ? j <= h : h <= j; r = _ <= h ? ++j : --j) {
                f.push(n[r]["new"]);
              } else s.push(P - _), x.push(0);
            }

            for (k.writeUInt16(3), k.writeUInt16(1), k.writeUInt32(12), k.writeUInt16(4), k.writeUInt16(16 + 8 * A + 2 * f.length), k.writeUInt16(0), k.writeUInt16(S), k.writeUInt16(L), k.writeUInt16(c), k.writeUInt16(N), z = 0, q = u.length; z < q; z++) {
              r = u[z], k.writeUInt16(r);
            }

            for (k.writeUInt16(0), H = 0, T = F.length; H < T; H++) {
              r = F[H], k.writeUInt16(r);
            }

            for (V = 0, R = s.length; V < R; V++) {
              a = s[V], k.writeUInt16(a);
            }

            for (G = 0, D = x.length; G < D; G++) {
              w = x[G], k.writeUInt16(w);
            }

            for (Y = 0, U = f.length; Y < U; Y++) {
              d = f[Y], k.writeUInt16(d);
            }

            return {
              charMap: n,
              subtable: k.data,
              maxGlyphID: v + 1
            };
        }
      }, t;
    }(),
        y = function (t) {
      function e() {
        return e.__super__.constructor.apply(this, arguments);
      }

      return f(e, h), e.prototype.tag = "cmap", e.prototype.parse = function (t) {
        var e, n, r;

        for (t.pos = this.offset, this.version = t.readUInt16(), n = t.readUInt16(), this.tables = [], this.unicode = null, r = 0; 0 <= n ? r < n : n < r; 0 <= n ? ++r : --r) {
          e = new d(t, this.offset), this.tables.push(e), e.isUnicode && null == this.unicode && (this.unicode = e);
        }

        return !0;
      }, e.encode = function (t, e) {
        var n, r;
        return null == e && (e = "macroman"), n = d.encode(t, e), (r = new J()).writeUInt16(0), r.writeUInt16(1), n.table = r.data.concat(n.subtable), n;
      }, e;
    }(),
        g = function (t) {
      function e() {
        return e.__super__.constructor.apply(this, arguments);
      }

      return f(e, h), e.prototype.tag = "hhea", e.prototype.parse = function (t) {
        return t.pos = this.offset, this.version = t.readInt(), this.ascender = t.readShort(), this.decender = t.readShort(), this.lineGap = t.readShort(), this.advanceWidthMax = t.readShort(), this.minLeftSideBearing = t.readShort(), this.minRightSideBearing = t.readShort(), this.xMaxExtent = t.readShort(), this.caretSlopeRise = t.readShort(), this.caretSlopeRun = t.readShort(), this.caretOffset = t.readShort(), t.pos += 8, this.metricDataFormat = t.readShort(), this.numberOfMetrics = t.readUInt16();
      }, e;
    }(),
        m = function (t) {
      function e() {
        return e.__super__.constructor.apply(this, arguments);
      }

      return f(e, h), e.prototype.tag = "OS/2", e.prototype.parse = function (n) {
        if (n.pos = this.offset, this.version = n.readUInt16(), this.averageCharWidth = n.readShort(), this.weightClass = n.readUInt16(), this.widthClass = n.readUInt16(), this.type = n.readShort(), this.ySubscriptXSize = n.readShort(), this.ySubscriptYSize = n.readShort(), this.ySubscriptXOffset = n.readShort(), this.ySubscriptYOffset = n.readShort(), this.ySuperscriptXSize = n.readShort(), this.ySuperscriptYSize = n.readShort(), this.ySuperscriptXOffset = n.readShort(), this.ySuperscriptYOffset = n.readShort(), this.yStrikeoutSize = n.readShort(), this.yStrikeoutPosition = n.readShort(), this.familyClass = n.readShort(), this.panose = function () {
          var t, e;

          for (e = [], t = 0; t < 10; ++t) {
            e.push(n.readByte());
          }

          return e;
        }(), this.charRange = function () {
          var t, e;

          for (e = [], t = 0; t < 4; ++t) {
            e.push(n.readInt());
          }

          return e;
        }(), this.vendorID = n.readString(4), this.selection = n.readShort(), this.firstCharIndex = n.readShort(), this.lastCharIndex = n.readShort(), 0 < this.version && (this.ascent = n.readShort(), this.descent = n.readShort(), this.lineGap = n.readShort(), this.winAscent = n.readShort(), this.winDescent = n.readShort(), this.codePageRange = function () {
          var t, e;

          for (e = [], t = 0; t < 2; ++t) {
            e.push(n.readInt());
          }

          return e;
        }(), 1 < this.version)) return this.xHeight = n.readShort(), this.capHeight = n.readShort(), this.defaultChar = n.readShort(), this.breakChar = n.readShort(), this.maxContext = n.readShort();
      }, e;
    }(),
        v = function (t) {
      function e() {
        return e.__super__.constructor.apply(this, arguments);
      }

      return f(e, h), e.prototype.tag = "post", e.prototype.parse = function (r) {
        var t, e, n, i;

        switch (r.pos = this.offset, this.format = r.readInt(), this.italicAngle = r.readInt(), this.underlinePosition = r.readShort(), this.underlineThickness = r.readShort(), this.isFixedPitch = r.readInt(), this.minMemType42 = r.readInt(), this.maxMemType42 = r.readInt(), this.minMemType1 = r.readInt(), this.maxMemType1 = r.readInt(), this.format) {
          case 65536:
            break;

          case 131072:
            for (e = r.readUInt16(), this.glyphNameIndex = [], n = 0; 0 <= e ? n < e : e < n; 0 <= e ? ++n : --n) {
              this.glyphNameIndex.push(r.readUInt16());
            }

            for (this.names = [], i = []; r.pos < this.offset + this.length;) {
              t = r.readByte(), i.push(this.names.push(r.readString(t)));
            }

            return i;

          case 151552:
            return e = r.readUInt16(), this.offsets = r.read(e);

          case 196608:
            break;

          case 262144:
            return this.map = function () {
              var t, e, n;

              for (n = [], t = 0, e = this.file.maxp.numGlyphs; 0 <= e ? t < e : e < t; 0 <= e ? ++t : --t) {
                n.push(r.readUInt32());
              }

              return n;
            }.call(this);
        }
      }, e;
    }(),
        w = function w(t, e) {
      this.raw = t, this.length = t.length, this.platformID = e.platformID, this.encodingID = e.encodingID, this.languageID = e.languageID;
    },
        b = function (t) {
      function e() {
        return e.__super__.constructor.apply(this, arguments);
      }

      return f(e, h), e.prototype.tag = "name", e.prototype.parse = function (t) {
        var e, n, r, i, o, a, s, l, h, u, c, f;

        for (t.pos = this.offset, t.readShort(), e = t.readShort(), a = t.readShort(), n = [], i = h = 0; 0 <= e ? h < e : e < h; i = 0 <= e ? ++h : --h) {
          n.push({
            platformID: t.readShort(),
            encodingID: t.readShort(),
            languageID: t.readShort(),
            nameID: t.readShort(),
            length: t.readShort(),
            offset: this.offset + a + t.readShort()
          });
        }

        for (s = {}, i = u = 0, c = n.length; u < c; i = ++u) {
          r = n[i], t.pos = r.offset, l = t.readString(r.length), o = new w(l, r), null == s[f = r.nameID] && (s[f] = []), s[r.nameID].push(o);
        }

        this.strings = s, this.copyright = s[0], this.fontFamily = s[1], this.fontSubfamily = s[2], this.uniqueSubfamily = s[3], this.fontName = s[4], this.version = s[5];

        try {
          this.postscriptName = s[6][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "");
        } catch (t) {
          this.postscriptName = s[4][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "");
        }

        return this.trademark = s[7], this.manufacturer = s[8], this.designer = s[9], this.description = s[10], this.vendorUrl = s[11], this.designerUrl = s[12], this.license = s[13], this.licenseUrl = s[14], this.preferredFamily = s[15], this.preferredSubfamily = s[17], this.compatibleFull = s[18], this.sampleText = s[19];
      }, e;
    }(),
        x = function (t) {
      function e() {
        return e.__super__.constructor.apply(this, arguments);
      }

      return f(e, h), e.prototype.tag = "maxp", e.prototype.parse = function (t) {
        return t.pos = this.offset, this.version = t.readInt(), this.numGlyphs = t.readUInt16(), this.maxPoints = t.readUInt16(), this.maxContours = t.readUInt16(), this.maxCompositePoints = t.readUInt16(), this.maxComponentContours = t.readUInt16(), this.maxZones = t.readUInt16(), this.maxTwilightPoints = t.readUInt16(), this.maxStorage = t.readUInt16(), this.maxFunctionDefs = t.readUInt16(), this.maxInstructionDefs = t.readUInt16(), this.maxStackElements = t.readUInt16(), this.maxSizeOfInstructions = t.readUInt16(), this.maxComponentElements = t.readUInt16(), this.maxComponentDepth = t.readUInt16();
      }, e;
    }(),
        N = function (t) {
      function e() {
        return e.__super__.constructor.apply(this, arguments);
      }

      return f(e, h), e.prototype.tag = "hmtx", e.prototype.parse = function (n) {
        var t, r, i, e, o, a, s;

        for (n.pos = this.offset, this.metrics = [], e = 0, a = this.file.hhea.numberOfMetrics; 0 <= a ? e < a : a < e; 0 <= a ? ++e : --e) {
          this.metrics.push({
            advance: n.readUInt16(),
            lsb: n.readInt16()
          });
        }

        for (r = this.file.maxp.numGlyphs - this.file.hhea.numberOfMetrics, this.leftSideBearings = function () {
          var t, e;

          for (e = [], t = 0; 0 <= r ? t < r : r < t; 0 <= r ? ++t : --t) {
            e.push(n.readInt16());
          }

          return e;
        }(), this.widths = function () {
          var t, e, n, r;

          for (r = [], t = 0, e = (n = this.metrics).length; t < e; t++) {
            i = n[t], r.push(i.advance);
          }

          return r;
        }.call(this), t = this.widths[this.widths.length - 1], s = [], o = 0; 0 <= r ? o < r : r < o; 0 <= r ? ++o : --o) {
          s.push(this.widths.push(t));
        }

        return s;
      }, e.prototype.forGlyph = function (t) {
        return t in this.metrics ? this.metrics[t] : {
          advance: this.metrics[this.metrics.length - 1].advance,
          lsb: this.leftSideBearings[t - this.metrics.length]
        };
      }, e;
    }(),
        L = [].slice,
        A = function (t) {
      function e() {
        return e.__super__.constructor.apply(this, arguments);
      }

      return f(e, h), e.prototype.tag = "glyf", e.prototype.parse = function (t) {
        return this.cache = {};
      }, e.prototype.glyphFor = function (t) {
        var e, n, r, i, o, a, s, l, h, u;
        return (t = t) in this.cache ? this.cache[t] : (i = this.file.loca, e = this.file.contents, n = i.indexOf(t), 0 === (r = i.lengthOf(t)) ? this.cache[t] = null : (e.pos = this.offset + n, o = (a = new J(e.read(r))).readShort(), l = a.readShort(), u = a.readShort(), s = a.readShort(), h = a.readShort(), this.cache[t] = -1 === o ? new _(a, l, u, s, h) : new S(a, o, l, u, s, h), this.cache[t]));
      }, e.prototype.encode = function (t, e, n) {
        var r, i, o, a, s;

        for (o = [], i = [], a = 0, s = e.length; a < s; a++) {
          r = t[e[a]], i.push(o.length), r && (o = o.concat(r.encode(n)));
        }

        return i.push(o.length), {
          table: o,
          offsets: i
        };
      }, e;
    }(),
        S = function () {
      function t(t, e, n, r, i, o) {
        this.raw = t, this.numberOfContours = e, this.xMin = n, this.yMin = r, this.xMax = i, this.yMax = o, this.compound = !1;
      }

      return t.prototype.encode = function () {
        return this.raw.data;
      }, t;
    }(),
        _ = function () {
      function t(t, e, n, r, i) {
        var o, a;

        for (this.raw = t, this.xMin = e, this.yMin = n, this.xMax = r, this.yMax = i, this.compound = !0, this.glyphIDs = [], this.glyphOffsets = [], o = this.raw; a = o.readShort(), this.glyphOffsets.push(o.pos), this.glyphIDs.push(o.readShort()), 32 & a;) {
          o.pos += 1 & a ? 4 : 2, 128 & a ? o.pos += 8 : 64 & a ? o.pos += 4 : 8 & a && (o.pos += 2);
        }
      }

      return 1, 8, 32, 64, 128, t.prototype.encode = function (t) {
        var e, n, r, i, o;

        for (n = new J(L.call(this.raw.data)), e = r = 0, i = (o = this.glyphIDs).length; r < i; e = ++r) {
          o[e], n.pos = this.glyphOffsets[e];
        }

        return n.data;
      }, t;
    }(),
        F = function (t) {
      function e() {
        return e.__super__.constructor.apply(this, arguments);
      }

      return f(e, h), e.prototype.tag = "loca", e.prototype.parse = function (r) {
        var t;
        return r.pos = this.offset, t = this.file.head.indexToLocFormat, this.offsets = 0 === t ? function () {
          var t, e, n;

          for (n = [], t = 0, e = this.length; t < e; t += 2) {
            n.push(2 * r.readUInt16());
          }

          return n;
        }.call(this) : function () {
          var t, e, n;

          for (n = [], t = 0, e = this.length; t < e; t += 4) {
            n.push(r.readUInt32());
          }

          return n;
        }.call(this);
      }, e.prototype.indexOf = function (t) {
        return this.offsets[t];
      }, e.prototype.lengthOf = function (t) {
        return this.offsets[t + 1] - this.offsets[t];
      }, e.prototype.encode = function (t, e) {
        for (var n = new Uint32Array(this.offsets.length), r = 0, i = 0, o = 0; o < n.length; ++o) {
          if (n[o] = r, i < e.length && e[i] == o) {
            ++i, n[o] = r;
            var a = this.offsets[o],
                s = this.offsets[o + 1] - a;
            0 < s && (r += s);
          }
        }

        for (var l = new Array(4 * n.length), h = 0; h < n.length; ++h) {
          l[4 * h + 3] = 255 & n[h], l[4 * h + 2] = (65280 & n[h]) >> 8, l[4 * h + 1] = (16711680 & n[h]) >> 16, l[4 * h] = (4278190080 & n[h]) >> 24;
        }

        return l;
      }, e;
    }(),
        P = function () {
      function t(t) {
        this.font = t, this.subset = {}, this.unicodes = {}, this.next = 33;
      }

      return t.prototype.generateCmap = function () {
        var t, e, n, r, i;

        for (e in r = this.font.cmap.tables[0].codeMap, t = {}, i = this.subset) {
          n = i[e], t[e] = r[n];
        }

        return t;
      }, t.prototype.glyphsFor = function (t) {
        var e, n, r, i, o, a, s;

        for (r = {}, o = 0, a = t.length; o < a; o++) {
          r[i = t[o]] = this.font.glyf.glyphFor(i);
        }

        for (i in e = [], r) {
          (null != (n = r[i]) ? n.compound : void 0) && e.push.apply(e, n.glyphIDs);
        }

        if (0 < e.length) for (i in s = this.glyphsFor(e)) {
          n = s[i], r[i] = n;
        }
        return r;
      }, t.prototype.encode = function (t, e) {
        var n, r, i, o, a, s, l, h, u, c, f, p, d, g, m;

        for (r in n = y.encode(this.generateCmap(), "unicode"), o = this.glyphsFor(t), f = {
          0: 0
        }, m = n.charMap) {
          f[(s = m[r]).old] = s["new"];
        }

        for (p in c = n.maxGlyphID, o) {
          p in f || (f[p] = c++);
        }

        return h = function (t) {
          var e, n;

          for (e in n = {}, t) {
            n[t[e]] = e;
          }

          return n;
        }(f), u = Object.keys(h).sort(function (t, e) {
          return t - e;
        }), d = function () {
          var t, e, n;

          for (n = [], t = 0, e = u.length; t < e; t++) {
            a = u[t], n.push(h[a]);
          }

          return n;
        }(), i = this.font.glyf.encode(o, d, f), l = this.font.loca.encode(i.offsets, d), g = {
          cmap: this.font.cmap.raw(),
          glyf: i.table,
          loca: l,
          hmtx: this.font.hmtx.raw(),
          hhea: this.font.hhea.raw(),
          maxp: this.font.maxp.raw(),
          post: this.font.post.raw(),
          name: this.font.name.raw(),
          head: this.font.head.encode(e)
        }, this.font.os2.exists && (g["OS/2"] = this.font.os2.raw()), this.font.directory.encode(g);
      }, t;
    }();

    t.API.PDFObject = function () {
      var o;

      function a() {}

      return o = function o(t, e) {
        return (Array(e + 1).join("0") + t).slice(-e);
      }, a.convert = function (r) {
        var i, t, e, n;
        if (Array.isArray(r)) return "[" + function () {
          var t, e, n;

          for (n = [], t = 0, e = r.length; t < e; t++) {
            i = r[t], n.push(a.convert(i));
          }

          return n;
        }().join(" ") + "]";
        if ("string" == typeof r) return "/" + r;
        if (null != r ? r.isString : void 0) return "(" + r + ")";
        if (r instanceof Date) return "(D:" + o(r.getUTCFullYear(), 4) + o(r.getUTCMonth(), 2) + o(r.getUTCDate(), 2) + o(r.getUTCHours(), 2) + o(r.getUTCMinutes(), 2) + o(r.getUTCSeconds(), 2) + "Z)";
        if ("[object Object]" !== {}.toString.call(r)) return "" + r;

        for (t in e = ["<<"], r) {
          n = r[t], e.push("/" + t + " " + a.convert(n));
        }

        return e.push(">>"), e.join("\n");
      }, a;
    }();
  }(lt),
  /*
    # PNG.js
    # Copyright (c) 2011 Devon Govett
    # MIT LICENSE
    # 
    # 
    */
  Nt = "undefined" != typeof self && self || "undefined" != typeof window && window || "undefined" != typeof global && global || Function('return typeof this === "object" && this.content')() || Function("return this")(), Lt = function () {
    var h, n, r;

    function i(t) {
      var e, n, r, i, o, a, s, l, h, u, c, f, p, d;

      for (this.data = t, this.pos = 8, this.palette = [], this.imgData = [], this.transparency = {}, this.animation = null, this.text = {}, a = null;;) {
        switch (e = this.readUInt32(), h = function () {
          var t, e;

          for (e = [], t = 0; t < 4; ++t) {
            e.push(String.fromCharCode(this.data[this.pos++]));
          }

          return e;
        }.call(this).join("")) {
          case "IHDR":
            this.width = this.readUInt32(), this.height = this.readUInt32(), this.bits = this.data[this.pos++], this.colorType = this.data[this.pos++], this.compressionMethod = this.data[this.pos++], this.filterMethod = this.data[this.pos++], this.interlaceMethod = this.data[this.pos++];
            break;

          case "acTL":
            this.animation = {
              numFrames: this.readUInt32(),
              numPlays: this.readUInt32() || 1 / 0,
              frames: []
            };
            break;

          case "PLTE":
            this.palette = this.read(e);
            break;

          case "fcTL":
            a && this.animation.frames.push(a), this.pos += 4, a = {
              width: this.readUInt32(),
              height: this.readUInt32(),
              xOffset: this.readUInt32(),
              yOffset: this.readUInt32()
            }, o = this.readUInt16(), i = this.readUInt16() || 100, a.delay = 1e3 * o / i, a.disposeOp = this.data[this.pos++], a.blendOp = this.data[this.pos++], a.data = [];
            break;

          case "IDAT":
          case "fdAT":
            for ("fdAT" === h && (this.pos += 4, e -= 4), t = (null != a ? a.data : void 0) || this.imgData, f = 0; 0 <= e ? f < e : e < f; 0 <= e ? ++f : --f) {
              t.push(this.data[this.pos++]);
            }

            break;

          case "tRNS":
            switch (this.transparency = {}, this.colorType) {
              case 3:
                if (r = this.palette.length / 3, this.transparency.indexed = this.read(e), this.transparency.indexed.length > r) throw new Error("More transparent colors than palette size");
                if (0 < (u = r - this.transparency.indexed.length)) for (p = 0; 0 <= u ? p < u : u < p; 0 <= u ? ++p : --p) {
                  this.transparency.indexed.push(255);
                }
                break;

              case 0:
                this.transparency.grayscale = this.read(e)[0];
                break;

              case 2:
                this.transparency.rgb = this.read(e);
            }

            break;

          case "tEXt":
            s = (c = this.read(e)).indexOf(0), l = String.fromCharCode.apply(String, c.slice(0, s)), this.text[l] = String.fromCharCode.apply(String, c.slice(s + 1));
            break;

          case "IEND":
            return a && this.animation.frames.push(a), this.colors = function () {
              switch (this.colorType) {
                case 0:
                case 3:
                case 4:
                  return 1;

                case 2:
                case 6:
                  return 3;
              }
            }.call(this), this.hasAlphaChannel = 4 === (d = this.colorType) || 6 === d, n = this.colors + (this.hasAlphaChannel ? 1 : 0), this.pixelBitlength = this.bits * n, this.colorSpace = function () {
              switch (this.colors) {
                case 1:
                  return "DeviceGray";

                case 3:
                  return "DeviceRGB";
              }
            }.call(this), void (this.imgData = new Uint8Array(this.imgData));

          default:
            this.pos += e;
        }

        if (this.pos += 4, this.pos > this.data.length) throw new Error("Incomplete or corrupt PNG file");
      }
    }

    i.load = function (t, e, n) {
      var r;
      return "function" == typeof e && (n = e), (r = new XMLHttpRequest()).open("GET", t, !0), r.responseType = "arraybuffer", r.onload = function () {
        var t;
        return t = new i(new Uint8Array(r.response || r.mozResponseArrayBuffer)), "function" == typeof (null != e ? e.getContext : void 0) && t.render(e), "function" == typeof n ? n(t) : void 0;
      }, r.send(null);
    }, i.prototype.read = function (t) {
      var e, n;

      for (n = [], e = 0; 0 <= t ? e < t : t < e; 0 <= t ? ++e : --e) {
        n.push(this.data[this.pos++]);
      }

      return n;
    }, i.prototype.readUInt32 = function () {
      return this.data[this.pos++] << 24 | this.data[this.pos++] << 16 | this.data[this.pos++] << 8 | this.data[this.pos++];
    }, i.prototype.readUInt16 = function () {
      return this.data[this.pos++] << 8 | this.data[this.pos++];
    }, i.prototype.decodePixels = function (C) {
      var B = this.pixelBitlength / 8,
          j = new Uint8Array(this.width * this.height * B),
          E = 0,
          M = this;
      if (null == C && (C = this.imgData), 0 === C.length) return new Uint8Array(0);

      function t(t, e, n, r) {
        var i,
            o,
            a,
            s,
            l,
            h,
            u,
            c,
            f,
            p,
            d,
            g,
            m,
            y,
            v,
            w,
            b,
            x,
            N,
            L,
            A,
            S = Math.ceil((M.width - t) / n),
            _ = Math.ceil((M.height - e) / r),
            F = M.width == S && M.height == _;

        for (y = B * S, g = F ? j : new Uint8Array(y * _), h = C.length, o = m = 0; m < _ && E < h;) {
          switch (C[E++]) {
            case 0:
              for (s = b = 0; b < y; s = b += 1) {
                g[o++] = C[E++];
              }

              break;

            case 1:
              for (s = x = 0; x < y; s = x += 1) {
                i = C[E++], l = s < B ? 0 : g[o - B], g[o++] = (i + l) % 256;
              }

              break;

            case 2:
              for (s = N = 0; N < y; s = N += 1) {
                i = C[E++], a = (s - s % B) / B, v = m && g[(m - 1) * y + a * B + s % B], g[o++] = (v + i) % 256;
              }

              break;

            case 3:
              for (s = L = 0; L < y; s = L += 1) {
                i = C[E++], a = (s - s % B) / B, l = s < B ? 0 : g[o - B], v = m && g[(m - 1) * y + a * B + s % B], g[o++] = (i + Math.floor((l + v) / 2)) % 256;
              }

              break;

            case 4:
              for (s = A = 0; A < y; s = A += 1) {
                i = C[E++], a = (s - s % B) / B, l = s < B ? 0 : g[o - B], 0 === m ? v = w = 0 : (v = g[(m - 1) * y + a * B + s % B], w = a && g[(m - 1) * y + (a - 1) * B + s % B]), u = l + v - w, c = Math.abs(u - l), p = Math.abs(u - v), d = Math.abs(u - w), f = c <= p && c <= d ? l : p <= d ? v : w, g[o++] = (i + f) % 256;
              }

              break;

            default:
              throw new Error("Invalid filter algorithm: " + C[E - 1]);
          }

          if (!F) {
            var P = ((e + m * r) * M.width + t) * B,
                k = m * y;

            for (s = 0; s < S; s += 1) {
              for (var I = 0; I < B; I += 1) {
                j[P++] = g[k++];
              }

              P += (n - 1) * B;
            }
          }

          m++;
        }
      }

      return C = (C = new kt(C)).getBytes(), 1 == M.interlaceMethod ? (t(0, 0, 8, 8), t(4, 0, 8, 8), t(0, 4, 4, 8), t(2, 0, 4, 4), t(0, 2, 2, 4), t(1, 0, 2, 2), t(0, 1, 1, 2)) : t(0, 0, 1, 1), j;
    }, i.prototype.decodePalette = function () {
      var t, e, n, r, i, o, a, s, l;

      for (n = this.palette, o = this.transparency.indexed || [], i = new Uint8Array((o.length || 0) + n.length), r = 0, n.length, e = a = t = 0, s = n.length; a < s; e = a += 3) {
        i[r++] = n[e], i[r++] = n[e + 1], i[r++] = n[e + 2], i[r++] = null != (l = o[t++]) ? l : 255;
      }

      return i;
    }, i.prototype.copyToImageData = function (t, e) {
      var n, r, i, o, a, s, l, h, u, c, f;
      if (r = this.colors, u = null, n = this.hasAlphaChannel, this.palette.length && (u = null != (f = this._decodedPalette) ? f : this._decodedPalette = this.decodePalette(), r = 4, n = !0), h = (i = t.data || t).length, a = u || e, o = s = 0, 1 === r) for (; o < h;) {
        l = u ? 4 * e[o / 4] : s, c = a[l++], i[o++] = c, i[o++] = c, i[o++] = c, i[o++] = n ? a[l++] : 255, s = l;
      } else for (; o < h;) {
        l = u ? 4 * e[o / 4] : s, i[o++] = a[l++], i[o++] = a[l++], i[o++] = a[l++], i[o++] = n ? a[l++] : 255, s = l;
      }
    }, i.prototype.decode = function () {
      var t;
      return t = new Uint8Array(this.width * this.height * 4), this.copyToImageData(t, this.decodePixels()), t;
    };

    try {
      n = Nt.document.createElement("canvas"), r = n.getContext("2d");
    } catch (t) {
      return -1;
    }

    return h = function h(t) {
      var e;
      return r.width = t.width, r.height = t.height, r.clearRect(0, 0, t.width, t.height), r.putImageData(t, 0, 0), (e = new Image()).src = n.toDataURL(), e;
    }, i.prototype.decodeFrames = function (t) {
      var e, n, r, i, o, a, s, l;

      if (this.animation) {
        for (l = [], n = o = 0, a = (s = this.animation.frames).length; o < a; n = ++o) {
          e = s[n], r = t.createImageData(e.width, e.height), i = this.decodePixels(new Uint8Array(e.data)), this.copyToImageData(r, i), e.imageData = r, l.push(e.image = h(r));
        }

        return l;
      }
    }, i.prototype.renderFrame = function (t, e) {
      var n, r, i;
      return n = (r = this.animation.frames)[e], i = r[e - 1], 0 === e && t.clearRect(0, 0, this.width, this.height), 1 === (null != i ? i.disposeOp : void 0) ? t.clearRect(i.xOffset, i.yOffset, i.width, i.height) : 2 === (null != i ? i.disposeOp : void 0) && t.putImageData(i.imageData, i.xOffset, i.yOffset), 0 === n.blendOp && t.clearRect(n.xOffset, n.yOffset, n.width, n.height), t.drawImage(n.image, n.xOffset, n.yOffset);
    }, i.prototype.animate = function (n) {
      var _r,
          i,
          o,
          a,
          s,
          t,
          l = this;

      return i = 0, t = this.animation, a = t.numFrames, o = t.frames, s = t.numPlays, (_r = function r() {
        var t, e;
        if (t = i++ % a, e = o[t], l.renderFrame(n, t), 1 < a && i / a < s) return l.animation._timeout = setTimeout(_r, e.delay);
      })();
    }, i.prototype.stopAnimation = function () {
      var t;
      return clearTimeout(null != (t = this.animation) ? t._timeout : void 0);
    }, i.prototype.render = function (t) {
      var e, n;
      return t._png && t._png.stopAnimation(), t._png = this, t.width = this.width, t.height = this.height, e = t.getContext("2d"), this.animation ? (this.decodeFrames(e), this.animate(e)) : (n = e.createImageData(this.width, this.height), this.copyToImageData(n, this.decodePixels()), e.putImageData(n, 0, 0));
    }, i;
  }(), Nt.PNG = Lt;
  /*
     * Extracted from pdf.js
     * https://github.com/andreasgal/pdf.js
     *
     * Copyright (c) 2011 Mozilla Foundation
     *
     * Contributors: Andreas Gal <gal@mozilla.com>
     *               Chris G Jones <cjones@mozilla.com>
     *               Shaon Barman <shaon.barman@gmail.com>
     *               Vivien Nicolas <21@vingtetun.org>
     *               Justin D'Arcangelo <justindarc@gmail.com>
     *               Yury Delendik
     *
     * 
     */

  var Pt = function () {
    function t() {
      this.pos = 0, this.bufferLength = 0, this.eof = !1, this.buffer = null;
    }

    return t.prototype = {
      ensureBuffer: function ensureBuffer(t) {
        var e = this.buffer,
            n = e ? e.byteLength : 0;
        if (t < n) return e;

        for (var r = 512; r < t;) {
          r <<= 1;
        }

        for (var i = new Uint8Array(r), o = 0; o < n; ++o) {
          i[o] = e[o];
        }

        return this.buffer = i;
      },
      getByte: function getByte() {
        for (var t = this.pos; this.bufferLength <= t;) {
          if (this.eof) return null;
          this.readBlock();
        }

        return this.buffer[this.pos++];
      },
      getBytes: function getBytes(t) {
        var e = this.pos;

        if (t) {
          this.ensureBuffer(e + t);

          for (var n = e + t; !this.eof && this.bufferLength < n;) {
            this.readBlock();
          }

          var r = this.bufferLength;
          r < n && (n = r);
        } else {
          for (; !this.eof;) {
            this.readBlock();
          }

          n = this.bufferLength;
        }

        return this.pos = n, this.buffer.subarray(e, n);
      },
      lookChar: function lookChar() {
        for (var t = this.pos; this.bufferLength <= t;) {
          if (this.eof) return null;
          this.readBlock();
        }

        return String.fromCharCode(this.buffer[this.pos]);
      },
      getChar: function getChar() {
        for (var t = this.pos; this.bufferLength <= t;) {
          if (this.eof) return null;
          this.readBlock();
        }

        return String.fromCharCode(this.buffer[this.pos++]);
      },
      makeSubStream: function makeSubStream(t, e, n) {
        for (var r = t + e; this.bufferLength <= r && !this.eof;) {
          this.readBlock();
        }

        return new Stream(this.buffer, t, e, n);
      },
      skip: function skip(t) {
        t || (t = 1), this.pos += t;
      },
      reset: function reset() {
        this.pos = 0;
      }
    }, t;
  }(),
      kt = function () {
    if ("undefined" != typeof Uint32Array) {
      var k = new Uint32Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]),
          I = new Uint32Array([3, 4, 5, 6, 7, 8, 9, 10, 65547, 65549, 65551, 65553, 131091, 131095, 131099, 131103, 196643, 196651, 196659, 196667, 262211, 262227, 262243, 262259, 327811, 327843, 327875, 327907, 258, 258, 258]),
          C = new Uint32Array([1, 2, 3, 4, 65541, 65543, 131081, 131085, 196625, 196633, 262177, 262193, 327745, 327777, 393345, 393409, 459009, 459137, 524801, 525057, 590849, 591361, 657409, 658433, 724993, 727041, 794625, 798721, 868353, 876545]),
          B = [new Uint32Array([459008, 524368, 524304, 524568, 459024, 524400, 524336, 590016, 459016, 524384, 524320, 589984, 524288, 524416, 524352, 590048, 459012, 524376, 524312, 589968, 459028, 524408, 524344, 590032, 459020, 524392, 524328, 59e4, 524296, 524424, 524360, 590064, 459010, 524372, 524308, 524572, 459026, 524404, 524340, 590024, 459018, 524388, 524324, 589992, 524292, 524420, 524356, 590056, 459014, 524380, 524316, 589976, 459030, 524412, 524348, 590040, 459022, 524396, 524332, 590008, 524300, 524428, 524364, 590072, 459009, 524370, 524306, 524570, 459025, 524402, 524338, 590020, 459017, 524386, 524322, 589988, 524290, 524418, 524354, 590052, 459013, 524378, 524314, 589972, 459029, 524410, 524346, 590036, 459021, 524394, 524330, 590004, 524298, 524426, 524362, 590068, 459011, 524374, 524310, 524574, 459027, 524406, 524342, 590028, 459019, 524390, 524326, 589996, 524294, 524422, 524358, 590060, 459015, 524382, 524318, 589980, 459031, 524414, 524350, 590044, 459023, 524398, 524334, 590012, 524302, 524430, 524366, 590076, 459008, 524369, 524305, 524569, 459024, 524401, 524337, 590018, 459016, 524385, 524321, 589986, 524289, 524417, 524353, 590050, 459012, 524377, 524313, 589970, 459028, 524409, 524345, 590034, 459020, 524393, 524329, 590002, 524297, 524425, 524361, 590066, 459010, 524373, 524309, 524573, 459026, 524405, 524341, 590026, 459018, 524389, 524325, 589994, 524293, 524421, 524357, 590058, 459014, 524381, 524317, 589978, 459030, 524413, 524349, 590042, 459022, 524397, 524333, 590010, 524301, 524429, 524365, 590074, 459009, 524371, 524307, 524571, 459025, 524403, 524339, 590022, 459017, 524387, 524323, 589990, 524291, 524419, 524355, 590054, 459013, 524379, 524315, 589974, 459029, 524411, 524347, 590038, 459021, 524395, 524331, 590006, 524299, 524427, 524363, 590070, 459011, 524375, 524311, 524575, 459027, 524407, 524343, 590030, 459019, 524391, 524327, 589998, 524295, 524423, 524359, 590062, 459015, 524383, 524319, 589982, 459031, 524415, 524351, 590046, 459023, 524399, 524335, 590014, 524303, 524431, 524367, 590078, 459008, 524368, 524304, 524568, 459024, 524400, 524336, 590017, 459016, 524384, 524320, 589985, 524288, 524416, 524352, 590049, 459012, 524376, 524312, 589969, 459028, 524408, 524344, 590033, 459020, 524392, 524328, 590001, 524296, 524424, 524360, 590065, 459010, 524372, 524308, 524572, 459026, 524404, 524340, 590025, 459018, 524388, 524324, 589993, 524292, 524420, 524356, 590057, 459014, 524380, 524316, 589977, 459030, 524412, 524348, 590041, 459022, 524396, 524332, 590009, 524300, 524428, 524364, 590073, 459009, 524370, 524306, 524570, 459025, 524402, 524338, 590021, 459017, 524386, 524322, 589989, 524290, 524418, 524354, 590053, 459013, 524378, 524314, 589973, 459029, 524410, 524346, 590037, 459021, 524394, 524330, 590005, 524298, 524426, 524362, 590069, 459011, 524374, 524310, 524574, 459027, 524406, 524342, 590029, 459019, 524390, 524326, 589997, 524294, 524422, 524358, 590061, 459015, 524382, 524318, 589981, 459031, 524414, 524350, 590045, 459023, 524398, 524334, 590013, 524302, 524430, 524366, 590077, 459008, 524369, 524305, 524569, 459024, 524401, 524337, 590019, 459016, 524385, 524321, 589987, 524289, 524417, 524353, 590051, 459012, 524377, 524313, 589971, 459028, 524409, 524345, 590035, 459020, 524393, 524329, 590003, 524297, 524425, 524361, 590067, 459010, 524373, 524309, 524573, 459026, 524405, 524341, 590027, 459018, 524389, 524325, 589995, 524293, 524421, 524357, 590059, 459014, 524381, 524317, 589979, 459030, 524413, 524349, 590043, 459022, 524397, 524333, 590011, 524301, 524429, 524365, 590075, 459009, 524371, 524307, 524571, 459025, 524403, 524339, 590023, 459017, 524387, 524323, 589991, 524291, 524419, 524355, 590055, 459013, 524379, 524315, 589975, 459029, 524411, 524347, 590039, 459021, 524395, 524331, 590007, 524299, 524427, 524363, 590071, 459011, 524375, 524311, 524575, 459027, 524407, 524343, 590031, 459019, 524391, 524327, 589999, 524295, 524423, 524359, 590063, 459015, 524383, 524319, 589983, 459031, 524415, 524351, 590047, 459023, 524399, 524335, 590015, 524303, 524431, 524367, 590079]), 9],
          j = [new Uint32Array([327680, 327696, 327688, 327704, 327684, 327700, 327692, 327708, 327682, 327698, 327690, 327706, 327686, 327702, 327694, 0, 327681, 327697, 327689, 327705, 327685, 327701, 327693, 327709, 327683, 327699, 327691, 327707, 327687, 327703, 327695, 0]), 5];
      return (t.prototype = Object.create(Pt.prototype)).getBits = function (t) {
        for (var e, n = this.codeSize, r = this.codeBuf, i = this.bytes, o = this.bytesPos; n < t;) {
          void 0 === (e = i[o++]) && E("Bad encoding in flate stream"), r |= e << n, n += 8;
        }

        return e = r & (1 << t) - 1, this.codeBuf = r >> t, this.codeSize = n -= t, this.bytesPos = o, e;
      }, t.prototype.getCode = function (t) {
        for (var e = t[0], n = t[1], r = this.codeSize, i = this.codeBuf, o = this.bytes, a = this.bytesPos; r < n;) {
          var s;
          void 0 === (s = o[a++]) && E("Bad encoding in flate stream"), i |= s << r, r += 8;
        }

        var l = e[i & (1 << n) - 1],
            h = l >> 16,
            u = 65535 & l;
        return (0 == r || r < h || 0 == h) && E("Bad encoding in flate stream"), this.codeBuf = i >> h, this.codeSize = r - h, this.bytesPos = a, u;
      }, t.prototype.generateHuffmanTable = function (t) {
        for (var e = t.length, n = 0, r = 0; r < e; ++r) {
          t[r] > n && (n = t[r]);
        }

        for (var i = 1 << n, o = new Uint32Array(i), a = 1, s = 0, l = 2; a <= n; ++a, s <<= 1, l <<= 1) {
          for (var h = 0; h < e; ++h) {
            if (t[h] == a) {
              var u = 0,
                  c = s;

              for (r = 0; r < a; ++r) {
                u = u << 1 | 1 & c, c >>= 1;
              }

              for (r = u; r < i; r += l) {
                o[r] = a << 16 | h;
              }

              ++s;
            }
          }
        }

        return [o, n];
      }, t.prototype.readBlock = function () {
        function t(t, e, n, r, i) {
          for (var o = t.getBits(n) + r; 0 < o--;) {
            e[l++] = i;
          }
        }

        var e = this.getBits(3);

        if (1 & e && (this.eof = !0), 0 != (e >>= 1)) {
          var n, r;
          if (1 == e) n = B, r = j;else if (2 == e) {
            for (var i = this.getBits(5) + 257, o = this.getBits(5) + 1, a = this.getBits(4) + 4, s = Array(k.length), l = 0; l < a;) {
              s[k[l++]] = this.getBits(3);
            }

            for (var h = this.generateHuffmanTable(s), u = 0, c = (l = 0, i + o), f = new Array(c); l < c;) {
              var p = this.getCode(h);
              16 == p ? t(this, f, 2, 3, u) : 17 == p ? t(this, f, 3, 3, u = 0) : 18 == p ? t(this, f, 7, 11, u = 0) : f[l++] = u = p;
            }

            n = this.generateHuffmanTable(f.slice(0, i)), r = this.generateHuffmanTable(f.slice(i, c));
          } else E("Unknown block type in flate stream");

          for (var d = (_ = this.buffer) ? _.length : 0, g = this.bufferLength;;) {
            var m = this.getCode(n);
            if (m < 256) d <= g + 1 && (d = (_ = this.ensureBuffer(g + 1)).length), _[g++] = m;else {
              if (256 == m) return void (this.bufferLength = g);
              var y = (m = I[m -= 257]) >> 16;
              0 < y && (y = this.getBits(y));
              u = (65535 & m) + y;
              m = this.getCode(r), 0 < (y = (m = C[m]) >> 16) && (y = this.getBits(y));
              var v = (65535 & m) + y;
              d <= g + u && (d = (_ = this.ensureBuffer(g + u)).length);

              for (var w = 0; w < u; ++w, ++g) {
                _[g] = _[g - v];
              }
            }
          }
        } else {
          var b,
              x = this.bytes,
              N = this.bytesPos;
          void 0 === (b = x[N++]) && E("Bad block header in flate stream");
          var L = b;
          void 0 === (b = x[N++]) && E("Bad block header in flate stream"), L |= b << 8, void 0 === (b = x[N++]) && E("Bad block header in flate stream");
          var A = b;
          void 0 === (b = x[N++]) && E("Bad block header in flate stream"), (A |= b << 8) != (65535 & ~L) && E("Bad uncompressed block length in flate stream"), this.codeBuf = 0, this.codeSize = 0;

          var S = this.bufferLength,
              _ = this.ensureBuffer(S + L),
              F = S + L;

          this.bufferLength = F;

          for (var P = S; P < F; ++P) {
            if (void 0 === (b = x[N++])) {
              this.eof = !0;
              break;
            }

            _[P] = b;
          }

          this.bytesPos = N;
        }
      }, t;
    }

    function E(t) {
      throw new Error(t);
    }

    function t(t) {
      var e = 0,
          n = t[e++],
          r = t[e++];
      -1 != n && -1 != r || E("Invalid header in flate stream"), 8 != (15 & n) && E("Unknown compression method in flate stream"), ((n << 8) + r) % 31 != 0 && E("Bad FCHECK in flate stream"), 32 & r && E("FDICT bit set in flate stream"), this.bytes = t, this.bytesPos = 2, this.codeSize = 0, this.codeBuf = 0, Pt.call(this);
    }
  }();

  window.tmp = kt;
});

try {
  module.exports = jsPDF;
} catch (t) {}

(function ($, jsPDF, html2canvas) {
  var interactive_name = getParameterByName("name");
  var dollyUrl = Dolly.api_url + '/api/v1/interactives/';

  function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
  }

  if (interactive_name === '' || interactive_name === null) {
    $('#cost-pools-interactive').empty();
    $('#cost-pools-interactive').append('<p>Add the unique name of the dolly interactive.</p>');
  }

  var $costItemName,
      $studentName,
      $costItemValue,
      $costItemId,
      $costDriver,
      $costItems,
      $costItemsListNode,
      $costItemsCount,
      $total,
      $studentCostPoolDesign = {},
      data = {},
      userId,
      suggestedCostPool,
      retry = false; //function from blog post https://blog.abelotech.com/posts/number-currency-formatting-javascript/ on formatting numbers to strings with regular expressions. @Tom Pawlak

  function formatNumber(num) {
    return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,');
  }

  function convertToNumber(string) {
    return parseInt(string.replace(/,/g, ''));
  }

  function getStudentAnswers(id) {
    for (var key in data) {
      if (data.hasOwnProperty(key)) {
        if (id === key) {
          addStudentJsonStringToDOM(JSON.stringify(data[key].costPools), 'Your', $('#step-2 .pools__pool-item--no-opacity:first-child'));
          $('#select-student').attr('data-value', JSON.stringify(data[key].costPools));
        } else {
          $('#select-student').append("<option value=\"".concat(key, "\" data-value='").concat(JSON.stringify(data[key].costPools), "'>").concat(data[key].student, "</option>"));
        }
      }
    }
  }

  function addStudentJsonStringToDOM(string, name, parent) {
    var costPoolDesign = JSON.parse(string);
    parent.empty();
    parent.append("<h3>".concat(name.trim(), " Cost Pools:</h3>"));
    var x = 1;

    for (var key in costPoolDesign) {
      if (costPoolDesign.hasOwnProperty(key)) {
        var htmlString = "<div class=\"pool__container__item-list\"><h4>Cost Pool ".concat(x, ":</h4>");
        var items = costPoolDesign[key];
        var total = 0;
        items.forEach(function (element) {
          htmlString += " <p><span>".concat(element.itemName, "</span>\n                    <span>").concat(element.value, "</span></p> ");
          total += parseInt(convertToNumber(element.value));
        });
        htmlString += "<div class=\"pool__container__item-list__total\">\n                <p><span>Total</span><span>".concat(formatNumber(total), "</span></p>\n                </div>\n                <div class=\"pool__container__item-list__total pool__container__item-list__cost-driver\">\n                    <p><span>Cost Driver:</span> ").concat(key, "</p>\n                </div>");
        htmlString += "</div>";
        parent.append(htmlString);
      }

      x++;
    }
  }

  function init() {
    userId = Dolly.cookieGet(interactive_name);

    if (userId) {
      Dolly.ajaxGet(dollyUrl + interactive_name + "/data", getData);
      var suggestedCostPoolNode = document.querySelector('#step-2 .pools > .pools__pool-item--no-opacity:last-child');
      suggestedCostPool = suggestedCostPoolNode.cloneNode(true);
      $('#step-1').hide();
      $('#step-2').show();
    } else {
      $('#step-1').show();
      $('#step-2').hide();
    }
  }

  function getData(response) {
    for (var key in response) {
      if (response.hasOwnProperty(key)) {
        data[response[key].id] = JSON.parse(response[key].data);
      }
    }

    getStudentAnswers(userId);
  }

  function addPopupMessage(message, type, time, e) {
    userId = $(e.currentTarget).attr('id');

    if (userId === 'start') {
      var $parent = $(e.currentTarget).parents('.center');
      $parent.find('h2').after("<div class=\"alert alert-".concat(type, "\" role=\"alert\"><div class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"><span aria-hidden=\"true\">\xD7</span></div><p>").concat(message, "</p></div>"));
      window.setTimeout(deleteInfoNotices, time);
    } else {
      var _$parent = $(e.currentTarget).parents('.card');

      _$parent.find('h2').after("<div class=\"alert alert-".concat(type, "\" role=\"alert\"><div class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"><span aria-hidden=\"true\">\xD7</span></div><p>").concat(message, "</p></div>"));

      window.setTimeout(deleteInfoNotices, time);
    }

    $('.alert').fadeTo(300, 1);
    $("html, body").animate({
      scrollTop: 0
    }, "slow");
  }

  function fade() {
    $('.alert').each(function (index, element) {
      $(element).remove();
    });
  }

  function deleteInfoNotices() {
    $('.alert').each(function (index, element) {
      $(element).fadeTo(300, 0);
      window.setTimeout(fade, 400);
    });
  }

  function removeCostItem(e) {
    e.preventDefault();
    $costItemsListNode = $(e.currentTarget).parents('.pool__container__item-list');
    $costItemId = $(e.currentTarget).parent('p').attr('data-id');
    $costItemValue = convertToNumber($(e.currentTarget).parent('p').find('span:nth-child(2)').text());
    $costItemsCount = $costItemsListNode.find('>p').length;

    if ($costItemsCount <= 1) {
      //remove p and total
      $(e.currentTarget).parents('.pool__container__item-list').remove();
    } else {
      //remove p
      $total = parseInt($costItemsListNode.find('.pool__container__item-list__total').attr('data-value')) - $costItemValue;
      $costItemsListNode.find('.pool__container__item-list__total').attr('data-value', $total);
      $costItemsListNode.find('.pool__container__item-list__total').attr('data-value', $total);
      $costItemsListNode.find('.pool__container__item-list__total').html("<p><span>Total</span><span>".concat(formatNumber($total), "</span></p>"));
      $(e.currentTarget).parent('p').remove();
      $costItemsListNode.find('.pool__container__item-list__total > p').fadeTo(300, 1); //new total
    }

    $(".pool__container__header select option[value=".concat($costItemId, "]")).each(function (index, element) {
      $(element).show();
    });
  }

  function validateCostItemlist() {
    var $check;
    $('.pools__pool-item:first-child .pool__container__header').find('option').each(function (index, element) {
      if ($(element).css('display') !== 'none') {
        $check = false;
      }
    });

    if ($check === false) {
      return false;
    }
  }

  function validateCostDriver() {
    var $check;
    $('.pool__container').each(function (index, element) {
      if ($(element).find('.pool__container__item-list').length > 0) {
        $costDriver = $(element).next().find('input[type=text]').val().trim();

        if ($costDriver === null || $costDriver === '' || $costDriver === undefined) {
          $check = false;
        }
      }
    });

    if ($check === false) {
      return false;
    } else {
      return true;
    }
  }

  function postDone(response) {
    userId = response.id;
    Dolly.cookieSet(interactive_name, userId, 500); //success

    Dolly.ajaxGet(dollyUrl + interactive_name + "/data", getData); //get request for the list of students & their designs
  }

  function submitStudentAnswerToDatabase(data) {
    var post_data = {
      "data": data
    };
    Dolly.ajaxPost(dollyUrl + interactive_name + "/data", post_data, postDone);
  }

  function createDataString() {
    $studentCostPoolDesign.costPools = {};
    $('#step-1 .pool__container__item-list').each(function (index, element) {
      var $name = $(element).parents('.pool__container').next().find('input[type=text]').val();
      $studentCostPoolDesign.costPools[$name] = [];
      $(element).find('>p').each(function (index, element) {
        var costItem = {
          id: $(element).attr('data-id'),
          value: $(element).find('span:nth-child(2)').text().trim(),
          itemName: $(element).find('span:first-child').text().trim()
        };
        $studentCostPoolDesign.costPools[$name].push(costItem);
      });
    });
  } //form submission


  function readyToPost(e) {
    createDataString();
    var jsonString = JSON.stringify($studentCostPoolDesign);
    var domString = JSON.stringify($studentCostPoolDesign.costPools);
    submitStudentAnswerToDatabase(jsonString);
    addStudentJsonStringToDOM(domString, 'Your', $('#step-2 .pools .pools__pool-item--no-opacity:first-child'));
    $('#step-1').hide();
    $('#step-2').show();
    var suggestedCostPoolNode = document.querySelector('#step-2 .pools > .pools__pool-item--no-opacity:last-child');
    suggestedCostPool = suggestedCostPoolNode.cloneNode(true);
  }

  init(); //on change pools dropdown

  $('#step-1 .pool__container__header select').change(function () {
    event.preventDefault();
    var $countVisibleCostItems = 0;
    $(this).find('option').each(function (index, element) {
      // element == this
      if ($(element).css('display') !== 'none') {
        $countVisibleCostItems++;
      }
    });
    $costItemName = $(this).children("option:selected").text();
    $costItemId = parseInt($(this).val());
    $costItemValue = parseInt($(this).children("option:selected").attr('data-value'));
    $costItemsListNode = $(this).parents('.pool__container__header').next();

    if (Boolean($costItemsListNode.children('.pool__container__item-list__total').length) === false) {
      //change total
      $("<div class=\"pool__container__item-list\"><p data-id=\"".concat($costItemId, "\"><span>").concat($costItemName, "</span><span>").concat(formatNumber($costItemValue), "</span><span class=\"pool__container__delete\"><i class=\"fa fa-times\"></i></span></p><div data-value=\"").concat($costItemValue, "\" class=\"pool__container__item-list__total\"><p><span>Total</span><span>").concat(formatNumber($costItemValue), "</span></p></div></div>")).appendTo($(this).parents('.pool__container'));
    } else {
      $total = parseInt($costItemsListNode.children('.pool__container__item-list__total').attr('data-value')) + $costItemValue;
      $costItemsListNode.children('.pool__container__item-list__total').attr('data-value', $total);
      $costItemsListNode.children('.pool__container__item-list__total').html("<p><span>Total</span><span>".concat(formatNumber($total), "</span></p>"));
      $costItems = "<p data-id=\"".concat($costItemId, "\"><span>").concat($costItemName, "</span><span>").concat(formatNumber($costItemValue), "</span><span class=\"pool__container__delete\"><i class=\"fa fa-times\"></i></span></p>") + $(this).parents('.pool__container__header').next().html();
      $(this).parents('.pool__container__header').next().html($costItems);
    }

    $('.pool__container__header select option[value=' + $costItemId + ']').hide();
    $(this).val("0");
    $('.pool__container__item-list p').fadeTo(300, 1);
    $('.pool__container__delete').click(function (event) {
      removeCostItem(event);
    });
  }); //on change - select peer pool design

  $('#step-2 #select-student').change(function (e) {
    e.preventDefault();
    var string = $(this).children("option:selected").attr('data-value');
    var studentName = $(this).children("option:selected").text();
    addStudentJsonStringToDOM(string, studentName, $('#step-2 .pools .pools__pool-item--no-opacity:last-child'));
  }); // start activity

  $('#start').click(function (e) {
    e.preventDefault();
    $studentName = $(e.currentTarget).parents('.input-group').find('input[type=text]').val().trim();

    if ($studentName === null || $studentName === '' || $studentName === undefined) {
      addPopupMessage('We need your name before you can start the activity.', 'danger', 5000, e);
    } else {
      $studentCostPoolDesign.student = $studentName;
      $('#step-1 p span').html($studentName);
      $(e.currentTarget).parents('.card__alert').slideToggle({
        duration: 400
      });
    }
  }); // submit form

  $('#submit-cost-pool-design').click(function (e) {
    e.preventDefault();

    if (validateCostItemlist() === false) {
      addPopupMessage('Please add each cost item into a cost pool before submitting.', 'danger', 5000, e);
    } else if (validateCostDriver() === false) {
      addPopupMessage('Please type a cost driver for each cost pool before submitting.', 'danger', 5000, e);
    } else {
      if (retry === true) {
        var putDone = function putDone(response) {
          console.log(response.id);
          $('#step-1').hide();
          $('#step-2').show();
          postDone(response);
        };

        createDataString();
        var put_data = {
          "data": JSON.stringify($studentCostPoolDesign)
        };
        console.log(userId);
        Dolly.ajaxPut(dollyUrl + interactive_name + "/data/" + userId, put_data, putDone);
      } else {
        //else do this function
        readyToPost(e);
      }
    }
  });

  function clearCostPools() {
    $('#step-1 .pool__container__item-list').each(function (index, element) {
      $(element).remove();
    });
    $('#step-1 .pool__container__header select option:not(#step-1 .pool__container__header select option:first-child)').each(function (index, element) {
      $(element).show();
    });
  }

  $('#clear-cost-pools').click(function (e) {
    e.preventDefault();
    clearCostPools();
  });
  $('#Retry').click(function (e) {
    e.preventDefault();
    console.log('hi there');
    retry = true;
    clearCostPools();
    $('#step-1 .card__alert').hide();
    $('#step-1').show();
    $('#step-2').hide();
  });
  $('#download').click(function () {
    document.querySelector('#step-2 .pools > .pools__pool-item--no-opacity:last-child').remove();
    document.querySelector('#step-2 .pools').append(suggestedCostPool);
    var twoSections = document.querySelectorAll('#step-2 .pools .pools__pool-item');
    var htmlElement = document.createElement('div');
    twoSections.forEach(function (section) {
      var duplicate = section.cloneNode(true);
      htmlElement.append(duplicate);
    });
    htmlElement.setAttribute('style', 'display: flex;width: 800px;justify-content: space-between;position:absolute;');
    twoSections[0].setAttribute('style', 'margin-right:20px;');
    document.body.appendChild(htmlElement); // found on stack overflow. handlebar: https://stackoverflow.com/users/4297562/baptwaels?tab=profile bless him :)

    html2canvas(htmlElement).then(function (canvas) {
      var pdf = new jsPDF('p', 'pt', 'a4');

      for (var i = 0; i <= htmlElement.clientHeight / 980; i++) {
        //! This is all just html2canvas stuff
        var srcImg = canvas;
        var sX = 0;
        var sY = 980 * i; // start 980 pixels down for every new page

        var sWidth = 1250;
        var sHeight = 980;
        var dX = 0;
        var dY = 0;
        var dWidth = 1250;
        var dHeight = 980;
        window.onePageCanvas = document.createElement("canvas");
        onePageCanvas.setAttribute('width', 1250); //

        onePageCanvas.setAttribute('height', 980); //780

        var ctx = onePageCanvas.getContext('2d'); // details on this usage of this function: 
        // https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Using_images#Slicing

        ctx.drawImage(srcImg, sX, sY, sWidth, sHeight, dX, dY, dWidth, dHeight); // document.body.appendChild(canvas);

        var canvasDataURL = onePageCanvas.toDataURL("image/png", 1.0);
        var width = onePageCanvas.width;
        var height = onePageCanvas.clientHeight; //! If we're on anything other than the first page,
        // add another page

        if (i > 0) {
          pdf.addPage(612, 791); //8.5" x 11" in pts (in*72)
        } //! now we declare that we're working on that page


        pdf.setPage(i + 1); //! now we add content to that page!

        pdf.addImage(canvasDataURL, 'PNG', 20, 40, width * .62, height * .62);
      } //! after the for loop is finished running, we save the pdf.


      pdf.save('cost pools.pdf');
      htmlElement.remove();
    });
  });
})($, jsPDF, html2canvas);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzcGRmLm1pbi5qcyIsIm1haW4uanMiXSwibmFtZXMiOlsidCIsImRlZmluZSIsImFtZCIsInNlIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsImNvbnNvbGUiLCJlIiwibiIsInIiLCJpIiwibyIsImEiLCJzcGxpdCIsInBvcCIsInMiLCJsIiwiaCIsInUiLCJjIiwiYnRvYSIsImNoYXJDb2RlQXQiLCJjaGFyQXQiLCJsZW5ndGgiLCJqb2luIiwic2xpY2UiLCJhdG9iIiwiaW5kZXhPZiIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsIkFycmF5IiwibWFwIiwiVHlwZUVycm9yIiwiT2JqZWN0IiwiYXJndW1lbnRzIiwiY2FsbCIsImlzQXJyYXkiLCJ0b1N0cmluZyIsImZvckVhY2giLCJmaW5kIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwia2V5cyIsImhhc093blByb3BlcnR5IiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJwdXNoIiwiYXNzaWduIiwidHJpbSIsInJlcGxhY2UiLCJ0cmltTGVmdCIsInRyaW1SaWdodCIsIk51bWJlciIsImlzSW50ZWdlciIsImlzRmluaXRlIiwiTWF0aCIsImZsb29yIiwic2VsZiIsIndpbmRvdyIsImdsb2JhbCIsIkZ1bmN0aW9uIiwiXyIsIkYiLCJQIiwicCIsImQiLCJrIiwiZiIsImciLCJtIiwieSIsInYiLCJ3IiwiYiIsIngiLCJJIiwiQyIsIkIiLCJOIiwiTCIsIkEiLCJTIiwiaiIsIkUiLCJNIiwiTyIsInEiLCJUIiwiUiIsIkQiLCJVIiwieiIsIkgiLCJXIiwiViIsIkciLCJZIiwiSiIsIlgiLCJLIiwiWiIsIlEiLCIkIiwidHQiLCJldCIsIm50IiwicnQiLCJpdCIsIm90IiwiYXQiLCJzdCIsImx0IiwiaWUiLCJvZSIsIkVycm9yIiwic3Vic2NyaWJlIiwicmFuZG9tIiwidW5zdWJzY3JpYmUiLCJwdWJsaXNoIiwiYXBwbHkiLCJlcnJvciIsIm1lc3NhZ2UiLCJnZXRUb3BpY3MiLCJhZSIsIm9yaWVudGF0aW9uIiwidW5pdCIsImZvcm1hdCIsImNvbXByZXNzIiwiY29tcHJlc3NQZGYiLCJmaWx0ZXJzIiwidXNlclVuaXQiLCJhYnMiLCJ0b0xvd2VyQ2FzZSIsInB1dE9ubHlVc2VkRm9udHMiLCJpbnRlcm5hbCIsIl9fcHJpdmF0ZV9fIiwiUHViU3ViIiwiZ2V0UGRmVmVyc2lvbiIsInNldFBkZlZlcnNpb24iLCJhMCIsImExIiwiYTIiLCJhMyIsImE0IiwiYTUiLCJhNiIsImE3IiwiYTgiLCJhOSIsImExMCIsImIwIiwiYjEiLCJiMiIsImIzIiwiYjQiLCJiNSIsImI2IiwiYjciLCJiOCIsImI5IiwiYjEwIiwiYzAiLCJjMSIsImMyIiwiYzMiLCJjNCIsImM1IiwiYzYiLCJjNyIsImM4IiwiYzkiLCJjMTAiLCJkbCIsImxldHRlciIsImxlZ2FsIiwibGVkZ2VyIiwidGFibG9pZCIsImdldFBhZ2VGb3JtYXRzIiwiZ2V0UGFnZUZvcm1hdCIsImYyIiwiaXNOYU4iLCJ0b0ZpeGVkIiwiZjMiLCJnZXRGaWxlSWQiLCJzZXRGaWxlSWQiLCJjb252ZXJ0RGF0ZVRvUERGRGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0IiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiY29udmVydFBERkRhdGVUb0RhdGUiLCJwYXJzZUludCIsInN1YnN0ciIsIkRhdGUiLCJzZXRDcmVhdGlvbkRhdGUiLCJ0ZXN0IiwiZ2V0Q3JlYXRpb25EYXRlIiwicGFkZDIiLCJzZXRDdXN0b21PdXRwdXREZXN0aW5hdGlvbiIsInJlc2V0Q3VzdG9tT3V0cHV0RGVzdGluYXRpb24iLCJvdXQiLCJ3cml0ZSIsImdldEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJVaW50OEFycmF5IiwiZ2V0U3RhbmRhcmRGb250cyIsImZvbnRTaXplIiwic2V0Rm9udFNpemUiLCJnZXRGb250U2l6ZSIsIlIyTCIsInNldFIyTCIsImdldFIyTCIsInNldFpvb21Nb2RlIiwiZ2V0Wm9vbU1vZGUiLCJzZXRQYWdlTW9kZSIsImdldFBhZ2VNb2RlIiwic2V0TGF5b3V0TW9kZSIsImdldExheW91dE1vZGUiLCJzZXREaXNwbGF5TW9kZSIsInRpdGxlIiwic3ViamVjdCIsImF1dGhvciIsImtleXdvcmRzIiwiY3JlYXRvciIsImdldERvY3VtZW50UHJvcGVydHkiLCJnZXREb2N1bWVudFByb3BlcnRpZXMiLCJzZXREb2N1bWVudFByb3BlcnRpZXMiLCJzZXRQcm9wZXJ0aWVzIiwic2V0RG9jdW1lbnRQcm9wZXJ0eSIsImhvdGZpeGVzIiwibmV3T2JqZWN0IiwibmV3T2JqZWN0RGVmZXJyZWQiLCJuZXdBZGRpdGlvbmFsT2JqZWN0Iiwib2JqSWQiLCJjb250ZW50IiwiaHQiLCJkZWNvZGVDb2xvclN0cmluZyIsInBhcnNlRmxvYXQiLCJ1dCIsImVuY29kZUNvbG9yU3RyaW5nIiwiY2gxIiwiY2gyIiwiY2gzIiwiY2g0IiwicHJlY2lzaW9uIiwicGRmQ29sb3JUeXBlIiwiUkdCQ29sb3IiLCJvayIsInRvSGV4IiwiY3QiLCJnZXRGaWx0ZXJzIiwiZnQiLCJwdXRTdHJlYW0iLCJkYXRhIiwiYWxyZWFkeUFwcGxpZWRGaWx0ZXJzIiwiYWRkTGVuZ3RoMSIsImFkZGl0aW9uYWxLZXlWYWx1ZXMiLCJBUEkiLCJwcm9jZXNzRGF0YUJ5RmlsdGVycyIsInJldmVyc2VDaGFpbiIsImtleSIsInB0IiwicHV0UGFnZSIsIm1lZGlhQm94IiwibnVtYmVyIiwiY29udGVudHNPYmpJZCIsInRvcFJpZ2h0WCIsImJvdHRvbUxlZnRYIiwidG9wUmlnaHRZIiwiYm90dG9tTGVmdFkiLCJyb290RGljdGlvbmFyeU9iaklkIiwicmVzb3VyY2VEaWN0aW9uYXJ5T2JqSWQiLCJjcm9wQm94IiwiYmxlZWRCb3giLCJ0cmltQm94IiwiYXJ0Qm94IiwicGFnZUNvbnRleHQiLCJwYWdlTnVtYmVyIiwicGFnZSIsImR0IiwicHV0UGFnZXMiLCJndCIsImZvbnQiLCJpc0FscmVhZHlQdXR0ZWQiLCJvYmplY3ROdW1iZXIiLCJwb3N0U2NyaXB0TmFtZSIsImVuY29kaW5nIiwibXQiLCJ5dCIsImlkIiwiZm9udE5hbWUiLCJmb250U3R5bGUiLCJpc1N0YW5kYXJkRm9udCIsIm1ldGFkYXRhIiwiaW5zdGFuY2UiLCJ2dCIsInBkZkVzY2FwZSIsInNvdXJjZUVuY29kaW5nIiwib3V0cHV0RW5jb2RpbmciLCJhdXRvZW5jb2RlIiwiY29kZVBhZ2VzIiwibm9CT00iLCJ3dCIsImJlZ2luUGFnZSIsIndhcm4iLCJtaW4iLCJ4dCIsImJ0IiwiRHQiLCJSdCIsIkp0IiwidGUiLCJuZSIsIk50IiwiZ2V0TnVtYmVyT2ZQYWdlcyIsIkx0IiwiZGlzYWJsZVdhcm5pbmciLCJub0ZhbGxiYWNrIiwidGltZXMiLCJub3JtYWwiLCJBdCIsInB1dEluZm8iLCJ2ZXJzaW9uIiwidG9VcHBlckNhc2UiLCJTdCIsInB1dENhdGFsb2ciLCJfdCIsInB1dFRyYWlsZXIiLCJGdCIsInB1dEhlYWRlciIsIlB0IiwicHV0WFJlZiIsImt0IiwiYnVpbGREb2N1bWVudCIsIkl0IiwiZ2V0QmxvYiIsIkJsb2IiLCJ0eXBlIiwiQ3QiLCJvdXRwdXQiLCJmaWxlbmFtZSIsInNhdmUiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJvcGVuIiwiZG9jdW1lbnQiLCJzYWZhcmkiLCJsb2NhdGlvbiIsImhyZWYiLCJmb28iLCJzdGFjayIsImFsZXJ0IiwiYmFyIiwiQnQiLCJqdCIsImdldFBhZ2VJbmZvIiwiRXQiLCJnZXRQYWdlSW5mb0J5T2JqSWQiLCJNdCIsImdldEN1cnJlbnRQYWdlSW5mbyIsImFkZFBhZ2UiLCJzZXRQYWdlIiwiaW5zZXJ0UGFnZSIsIm1vdmVQYWdlIiwiZGVsZXRlUGFnZSIsInNwbGljZSIsInRleHQiLCJmbGFncyIsImFuZ2xlIiwiYWxpZ24iLCJsaW5lSGVpZ2h0RmFjdG9yIiwiVHQiLCJzY29wZSIsImNvbmNhdCIsInNoaWZ0IiwiVGFiTGVuIiwibWF0Y2giLCJzY2FsZUZhY3RvciIsImJhc2VsaW5lIiwibWF4V2lkdGgiLCJzcGxpdFRleHRUb1NpemUiLCJvcHRpb25zIiwibXV0ZXgiLCJhY3RpdmVGb250S2V5IiwiZm9udHMiLCJhY3RpdmVGb250U2l6ZSIsIlBJIiwiY29zIiwic2luIiwiY2hhclNwYWNlIiwibGFuZyIsInJlbmRlcmluZ01vZGUiLCJzdHJva2UiLCJ1c2VkUmVuZGVyaW5nTW9kZSIsInBhZ2VTaXplIiwiZ2V0V2lkdGgiLCJRdCIsImdldFN0cmluZ1VuaXRXaWR0aCIsIm1heCIsIld0IiwiVnQiLCJyZXZlcnNlIiwiaXNIZXgiLCJLdCIsImxzdGV4dCIsImNsaXAiLCJjbGlwX2ZpeGVkIiwibG9nIiwiT3QiLCJpc1ZhbGlkU3R5bGUiLCJxdCIsImdldFN0eWxlIiwibGluZSIsImxpbmVzIiwicmVjdCIsInRyaWFuZ2xlIiwicm91bmRlZFJlY3QiLCJTUVJUMiIsImVsbGlwc2UiLCJjaXJjbGUiLCJzZXRGb250Iiwic2V0Rm9udFN0eWxlIiwic2V0Rm9udFR5cGUiLCJnZXRGb250TGlzdCIsImFkZEZvbnQiLCJsaW5lV2lkdGgiLCJzZXRMaW5lV2lkdGgiLCJVdCIsInNldExpbmVEYXNoIiwiZ2V0TGluZUhlaWdodCIsInp0Iiwic2V0TGluZUhlaWdodEZhY3RvciIsIkh0IiwiZ2V0TGluZUhlaWdodEZhY3RvciIsImxpbmVIZWlnaHQiLCJnZXRIb3Jpem9udGFsQ29vcmRpbmF0ZSIsImdldFZlcnRpY2FsQ29vcmRpbmF0ZSIsIkd0IiwiZ2V0SG9yaXpvbnRhbENvb3JkaW5hdGVTdHJpbmciLCJZdCIsImdldFZlcnRpY2FsQ29vcmRpbmF0ZVN0cmluZyIsInN0cm9rZUNvbG9yIiwiWHQiLCJnZXRTdHJva2VDb2xvciIsImdldERyYXdDb2xvciIsInNldFN0cm9rZUNvbG9yIiwic2V0RHJhd0NvbG9yIiwiZmlsbENvbG9yIiwiZ2V0RmlsbENvbG9yIiwic2V0RmlsbENvbG9yIiwidGV4dENvbG9yIiwiWnQiLCJnZXRUZXh0Q29sb3IiLCJzZXRUZXh0Q29sb3IiLCIkdCIsImdldENoYXJTcGFjZSIsInNldENoYXJTcGFjZSIsIkNhcEpvaW5TdHlsZXMiLCJidXR0IiwiYnV0IiwibWl0ZXIiLCJyb3VuZCIsInJvdW5kZWQiLCJwcm9qZWN0aW5nIiwicHJvamVjdCIsInNxdWFyZSIsImJldmVsIiwic2V0TGluZUNhcCIsImVlIiwic2V0TGluZUpvaW4iLCJzZXRNaXRlckxpbWl0IiwicmUiLCJyZXR1cm5Qcm9taXNlIiwiUHJvbWlzZSIsImxlIiwidW5sb2FkIiwic2V0VGltZW91dCIsImV2ZW50cyIsImdldEZvbnQiLCJnZXRDb29yZGluYXRlU3RyaW5nIiwiY29sbGVjdGlvbnMiLCJuZXdPYmplY3REZWZlcnJlZEJlZ2luIiwic2V0V2lkdGgiLCJnZXRIZWlnaHQiLCJzZXRIZWlnaHQiLCJwYWdlcyIsImdldFBERlZlcnNpb24iLCJoYXNIb3RmaXgiLCJnZXQiLCJzZXQiLCJlbnVtZXJhYmxlIiwiZGljdGlvbmFyeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJqc1BERiIsIl9fYWNyb2Zvcm1fXyIsImNyZWF0ZSIsIkJCb3giLCJzZXRCaXQiLCJjbGVhckJpdCIsImdldEJpdCIsImdldEJpdEZvclBkZiIsInNldEJpdEZvclBkZiIsImNsZWFyQml0Rm9yUGRmIiwiY2FsY3VsYXRlQ29vcmRpbmF0ZXMiLCJsb3dlckxlZnRfWCIsImxvd2VyTGVmdF9ZIiwidXBwZXJSaWdodF9YIiwidXBwZXJSaWdodF9ZIiwiYXBwZWFyYW5jZVN0cmVhbUNvbnRlbnQiLCJEViIsImNvbG9yIiwic3RyZWFtIiwibWF4Rm9udFNpemUiLCJ3aWR0aCIsImhlaWdodCIsIm11bHRpbGluZSIsInRleHRBbGlnbiIsImZpZWxkcyIsInhGb3JtcyIsImFjcm9Gb3JtRGljdGlvbmFyeVJvb3QiLCJwcmludGVkT3V0IiwiaXNJbml0aWFsaXplZCIsImFjcm9mb3JtUGx1Z2luIiwiRmllbGRzIiwiaGFzQW5ub3RhdGlvbiIsIm9iamVjdCIsImFubm90YXRpb25zIiwiX2V2ZW50SUQiLCJLaWRzIiwiUmVjdCIsIkRBIiwiY3JlYXRlRGVmYXVsdEFwcGVhcmFuY2VTdHJlYW0iLCJnZXRLZXlWYWx1ZUxpc3RGb3JTdHJlYW0iLCJoYXNBcHBlYXJhbmNlU3RyZWFtIiwiRmllbGROdW0iLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJhcnJheVRvUGRmQXJyYXkiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZmlsdGVyIiwic3Vic3RyaW5nIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwid3JpdGVhYmxlIiwiQm9vbGVhbiIsIkZmIiwiRlQiLCJleGVjIiwiZ2V0T3B0aW9ucyIsInNldE9wdGlvbnMiLCJzb3J0IiwiYWRkT3B0aW9uIiwicmVtb3ZlT3B0aW9uIiwiY29tYm8iLCJlZGl0IiwiQ0EiLCJwdXNoQnV0dG9uIiwicmFkaW8iLCJvcHRpb25OYW1lIiwibmFtZSIsImNhcHRpb24iLCJhcHBlYXJhbmNlU3RhdGUiLCJfQXBwZWFyYW5jZVR5cGUiLCJSYWRpb0J1dHRvbiIsIkNpcmNsZSIsImNyZWF0ZUFwcGVhcmFuY2VTdHJlYW0iLCJzZXRBcHBlYXJhbmNlIiwiZ2V0Q0EiLCJjcmVhdGVPcHRpb24iLCJQYXJlbnQiLCJDaGVja0JveCIsInBhc3N3b3JkIiwiT24iLCJZZXNOb3JtYWwiLCJZZXNQdXNoRG93biIsIk9mZiIsIk9mZlB1c2hEb3duIiwiQmV6aWVyX0MiLCJDcm9zcyIsImNhbGN1bGF0ZUNyb3NzIiwieDEiLCJ4MiIsIng0IiwieDMiLCJhZGRGaWVsZCIsImFkZEJ1dHRvbiIsImFkZFRleHRGaWVsZCIsImFkZENob2ljZUZpZWxkIiwiQ2hvaWNlRmllbGQiLCJMaXN0Qm94IiwiQ29tYm9Cb3giLCJFZGl0Qm94IiwiQnV0dG9uIiwiUHVzaEJ1dHRvbiIsIlRleHRGaWVsZCIsIlBhc3N3b3JkRmllbGQiLCJBY3JvRm9ybSIsIkFwcGVhcmFuY2UiLCJBY3JvRm9ybUNob2ljZUZpZWxkIiwiQWNyb0Zvcm1MaXN0Qm94IiwiQWNyb0Zvcm1Db21ib0JveCIsIkFjcm9Gb3JtRWRpdEJveCIsIkFjcm9Gb3JtQnV0dG9uIiwiQWNyb0Zvcm1QdXNoQnV0dG9uIiwiQWNyb0Zvcm1SYWRpb0J1dHRvbiIsIkFjcm9Gb3JtQ2hlY2tCb3giLCJBY3JvRm9ybVRleHRGaWVsZCIsIkFjcm9Gb3JtUGFzc3dvcmRGaWVsZCIsIkFjcm9Gb3JtQXBwZWFyYW5jZSIsInRtcCIsIlBORyIsIlRJRkYiLCJKUEVHIiwiSlBFRzIwMDAiLCJHSUY4N2EiLCJHSUY4OWEiLCJCTVAiLCJnZXRJbWFnZUZpbGVUeXBlQnlJbWFnZURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsImFycmF5QnVmZmVyVG9CaW5hcnlTdHJpbmciLCJjcyIsImNvbG9yX3NwYWNlcyIsIklOREVYRUQiLCJwYWwiLCJERVZJQ0VfQ01ZSyIsImJwYyIsImRwIiwidHJucyIsInNtYXNrIiwibm9kZVR5cGUiLCJub2RlTmFtZSIsImhhc0F0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsInVuZXNjYXBlIiwibG9hZEZpbGUiLCJ0b0RhdGFVUkwiLCJjcmVhdGVFbGVtZW50IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJnZXRDb250ZXh0IiwiZHJhd0ltYWdlIiwiYWxpYXMiLCJERVZJQ0VfUkdCIiwiREVWSUNFX0dSQVkiLCJDQUxfR1JFWSIsIkNBTF9SR0IiLCJMQUIiLCJJQ0NfQkFTRUQiLCJQQVRURVJOIiwiU0VQQVJBVElPTiIsIkRFVklDRV9OIiwiZGVjb2RlIiwiRENUX0RFQ09ERSIsIkZMQVRFX0RFQ09ERSIsIkxaV19ERUNPREUiLCJKUFhfREVDT0RFIiwiSkJJRzJfREVDT0RFIiwiQVNDSUk4NV9ERUNPREUiLCJBU0NJSV9IRVhfREVDT0RFIiwiUlVOX0xFTkdUSF9ERUNPREUiLCJDQ0lUVF9GQVhfREVDT0RFIiwiaW1hZ2VfY29tcHJlc3Npb24iLCJOT05FIiwiRkFTVCIsIk1FRElVTSIsIlNMT1ciLCJzSGFzaENvZGUiLCJpc1N0cmluZyIsInZhbGlkYXRlU3RyaW5nQXNCYXNlNjQiLCJleHRyYWN0SW5mb0Zyb21CYXNlNjREYXRhVVJJIiwiZXh0cmFjdEltYWdlRnJvbURhdGFVcmwiLCJtaW1lVHlwZSIsImNoYXJzZXQiLCJzdXBwb3J0c0FycmF5QnVmZmVyIiwiaXNBcnJheUJ1ZmZlciIsIlVpbnQzMkFycmF5IiwiSW50OEFycmF5IiwiVWludDhDbGFtcGVkQXJyYXkiLCJJbnQxNkFycmF5IiwiVWludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiYmluYXJ5U3RyaW5nVG9VaW50OEFycmF5IiwiYXJyYXlCdWZmZXJUb0Jhc2U2NCIsImJ5dGVMZW5ndGgiLCJjcmVhdGVJbWFnZUluZm8iLCJhZGRJbWFnZSIsImltYWdlRGF0YSIsImNvbXByZXNzaW9uIiwicm90YXRpb24iLCJjb252ZXJ0U3RyaW5nVG9JbWFnZURhdGEiLCJzdWJhcnJheSIsInByb2Nlc3NKUEVHIiwibnVtY29tcG9uZW50cyIsInByb2Nlc3NKUEciLCJnZXRJbWFnZVByb3BlcnRpZXMiLCJmaWxlVHlwZSIsImNvbG9yU3BhY2UiLCJjb21wcmVzc2lvbk1vZGUiLCJiaXRzUGVyQ29tcG9uZW50IiwidXJsIiwiYm91bmRzIiwiY29udGVudHMiLCJfbmFtZU1hcCIsInRvcCIsIm1hZ0ZhY3RvciIsImxlZnQiLCJ6b29tIiwiY3JlYXRlQW5ub3RhdGlvbiIsImxpbmsiLCJ0ZXh0V2l0aExpbmsiLCJnZXRUZXh0V2lkdGgiLCJfX2FyYWJpY1BhcnNlcl9fIiwiaXNJbkFyYWJpY1N1YnN0aXR1dGlvbkEiLCJpc0FyYWJpY0xldHRlciIsImlzQXJhYmljRW5kTGV0dGVyIiwiaXNBcmFiaWNBbGZMZXR0ZXIiLCJhcmFiaWNMZXR0ZXJIYXNJc29sYXRlZEZvcm0iLCJhcmFiaWNMZXR0ZXJIYXNGaW5hbEZvcm0iLCJhcmFiaWNMZXR0ZXJIYXNJbml0aWFsRm9ybSIsImFyYWJpY0xldHRlckhhc01lZGlhbEZvcm0iLCJyZXNvbHZlTGlnYXR1cmVzIiwiaXNBcmFiaWNEaWFjcml0aWMiLCJnZXRDb3JyZWN0Rm9ybSIsInByb2Nlc3NBcmFiaWMiLCJhdXRvUHJpbnQiLCJ2YXJpYW50IiwiYWRkSlMiLCJwYWdlV3JhcFhFbmFibGVkIiwicGFnZVdyYXBYIiwicGFnZVdyYXBZRW5hYmxlZCIsInBhZ2VXcmFwWSIsInBkZiIsImNvbnRleHQyZCIsIl9jYW52YXMiLCJjYW52YXMiLCJsbiIsImJvdHRvbSIsInNldEhlYWRlckZ1bmN0aW9uIiwiZ2V0VGV4dERpbWVuc2lvbnMiLCJ0YWJsZV9mb250X3NpemUiLCJjZWxsQWRkUGFnZSIsIm1hcmdpbnMiLCJjZWxsSW5pdGlhbGl6ZSIsImNlbGwiLCJwcmludEhlYWRlcnMiLCJ0YWJsZUhlYWRlclJvdyIsInByaW50SGVhZGVyUm93IiwicHJpbnRpbmdIZWFkZXJSb3ciLCJhcnJheU1heCIsInRhYmxlIiwiYXV0b1NpemUiLCJjc3MiLCJsbk1vZCIsInByb21wdCIsImNhbGN1bGF0ZUxpbmVIZWlnaHQiLCJzZXRUYWJsZUhlYWRlclJvdyIsImxhc3RDZWxsUG9zIiwidGFibGVfeCIsInRhYmxlX3kiLCJpc1N0cm9rZVRyYW5zcGFyZW50Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVN0eWxlIiwiZmlsbFN0eWxlIiwiaXNGaWxsVHJhbnNwYXJlbnQiLCJmaWxsT3BhY2l0eSIsInRleHRCYXNlbGluZSIsImxpbmVKb2luIiwibGluZUNhcCIsInBhdGgiLCJ0cmFuc2Zvcm0iLCJjbG9uZSIsImdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiIsImdsb2JhbEFscGhhIiwiY2xpcF9wYXRoIiwiY3VycmVudFBvaW50IiwibWl0ZXJMaW1pdCIsImxhc3RQb2ludCIsImlnbm9yZUNsZWFyUmVjdCIsInBhcmVudE5vZGUiLCJzdHlsZSIsImN0eCIsImFyaWFsIiwidmVyZGFuYSIsImhlbHZldGljYSIsImZpeGVkIiwibW9ub3NwYWNlIiwidGVybWluYWwiLCJjb3VyaWVyIiwiY3Vyc2l2ZSIsImZhbnRhc3kiLCJzZXJpZiIsImZpbGwiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJhcHBseVRvUG9pbnQiLCJjbG9zZVBhdGgiLCJsaW5lVG8iLCJxdWFkcmF0aWNDdXJ2ZVRvIiwieTEiLCJiZXppZXJDdXJ2ZVRvIiwieTIiLCJhcmMiLCJpc0lkZW50aXR5Iiwic3FydCIsInBvdyIsInJhZGl1cyIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsImNvdW50ZXJjbG9ja3dpc2UiLCJhcmNUbyIsImZpbGxSZWN0Iiwic3Ryb2tlUmVjdCIsImNsZWFyUmVjdCIsImN0eFN0YWNrIiwicmVzdG9yZSIsImlzQ2FudmFzR3JhZGllbnQiLCJnZXRDb2xvciIsImZpbGxUZXh0Iiwic2NhbGVYIiwic2NhbGUiLCJzdHJva2VUZXh0IiwibWVhc3VyZVRleHQiLCJtdWx0aXBseSIsInJvdGF0ZSIsInRyYW5zbGF0ZSIsInNldFRyYW5zZm9ybSIsImRlY29tcG9zZSIsInNoeCIsInN4Iiwic3kiLCJza2V3IiwiYXBwbHlUb1JlY3RhbmdsZSIsImF1dG9QYWdpbmciLCJwb3NYIiwicG9zWSIsImJlZ2luIiwiY2xvc2UiLCJzdGFydCIsImRlbHRhcyIsImNyZWF0ZUxpbmVhckdyYWRpZW50IiwiY29sb3JTdG9wcyIsImFkZENvbG9yU3RvcCIsImNyZWF0ZVBhdHRlcm4iLCJjcmVhdGVSYWRpYWxHcmFkaWVudCIsInkzIiwieTQiLCJhdGFuMiIsInNoeSIsInR4IiwidHkiLCJSZWdFeHAiLCJwcmVkaWN0b3IiLCJjb2xvcnMiLCJjb2x1bW5zIiwiYWRsZXIzMmNzIiwiZnJvbSIsIkRlZmxhdGVyIiwiYXBwZW5kIiwiZmx1c2giLCJYTUxIdHRwUmVxdWVzdCIsIm92ZXJyaWRlTWltZVR5cGUiLCJvbmxvYWQiLCJyZXNwb25zZVRleHQiLCJzZW5kIiwic3RhdHVzIiwibG9hZEltYWdlRmlsZSIsImNsYXNzTmFtZSIsImlubmVySFRNTCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicmVtb3ZlQ2hpbGQiLCJjb252ZXJ0IiwicmVzb2x2ZSIsInRlbXBsYXRlIiwic2V0UHJvZ3Jlc3MiLCJfX3Byb3RvX18iLCJwcm9wIiwic3JjIiwiY29udGFpbmVyIiwib3ZlcmxheSIsImltZyIsImNhbGxiYWNrIiwicHJvZ3Jlc3MiLCJ2YWwiLCJzdGF0ZSIsIm9wdCIsIm1hcmdpbiIsImVuYWJsZUxpbmtzIiwiaHRtbDJjYW52YXMiLCJ0aGVuIiwidG8iLCJ0b0NvbnRhaW5lciIsInRvQ2FudmFzIiwidG9JbWciLCJ0b1BkZiIsInRoZW5MaXN0Iiwic2V0UGFnZVNpemUiLCJwb3NpdGlvbiIsImRpc3BsYXkiLCJzY3JvbGxXaWR0aCIsIm9mZnNldFdpZHRoIiwicmlnaHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjcmVhdGVUZXh0Tm9kZSIsIm5vZGVWYWx1ZSIsImNsb25lTm9kZSIsImZpcnN0Q2hpbGQiLCJuZXh0U2libGluZyIsImFwcGVuZENoaWxkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJqYXZhc2NyaXB0RW5hYmxlZCIsInRhZ05hbWUiLCJib2R5Iiwic2Nyb2xsSGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwiZG9jdW1lbnRFbGVtZW50Iiwib3ZlcmZsb3ciLCJ6SW5kZXgiLCJjbGVhciIsImJvcmRlciIsInBhZGRpbmciLCJjb250YWlucyIsIm9ucmVuZGVyZWQiLCJpc0h0bWwyQ2FudmFzTG9hZGVkIiwidG9Db250ZXh0MmQiLCJhc3luYyIsImFsbG93VGFpbnQiLCJpbWFnZVRpbWVvdXQiLCJsb2dnaW5nIiwicHJveHkiLCJyZW1vdmVDb250YWluZXIiLCJmb3JlaWduT2JqZWN0UmVuZGVyaW5nIiwidXNlQ09SUyIsIndpbmRvd0hlaWdodCIsImltYWdlIiwicXVhbGl0eSIsIm91dHB1dEltZyIsIm91dHB1dFBkZiIsImRvQ2FsbGJhY2siLCJzZXRNYXJnaW4iLCJiaW5kIiwiZ2V0UGFnZVNpemUiLCJpbm5lciIsInB4IiwicmF0aW8iLCJ1cGRhdGVQcm9ncmVzcyIsInRoZW5Db3JlIiwidGhlbkV4dGVybmFsIiwiY2F0Y2hFeHRlcm5hbCIsInVzaW5nIiwic2F2ZUFzIiwicnVuIiwiaHRtbCIsIndvcmtlciIsIm91dGxpbmUiLCJyb290IiwiY2hpbGRyZW4iLCJyZW5kZXIiLCJjcmVhdGVOYW1lZERlc3RpbmF0aW9ucyIsIm1ha2VSZWYiLCJuYW1lc09pZCIsImFkZCIsImdlbklkc19yIiwicmVuZGVyUm9vdCIsInJlbmRlckl0ZW1zIiwib2JqU3RhcnQiLCJjb3VudF9yIiwiY291bnQiLCJvYmpFbmQiLCJtYWtlU3RyaW5nIiwiTE9HMkUiLCJ1bnNoaWZ0IiwicHJvY2Vzc1BORyIsImltZ0RhdGEiLCJiaXRzIiwiY29sb3JUeXBlIiwicGl4ZWxCaXRsZW5ndGgiLCJkZWNvZGVQaXhlbHMiLCJidWZmZXIiLCJwYWxldHRlIiwidHJhbnNwYXJlbmN5IiwiaW5kZXhlZCIsInByb2Nlc3NHSUY4OUEiLCJkZWNvZGVBbmRCbGl0RnJhbWVSR0JBIiwiZW5jb2RlIiwicHJvY2Vzc0dJRjg3QSIsInByb2Nlc3NCTVAiLCJnZXREYXRhIiwic2V0TGFuZ3VhZ2UiLCJsYW5ndWFnZVNldHRpbmdzIiwiaXNTdWJzY3JpYmVkIiwiYWYiLCJzcSIsImFyIiwiYW4iLCJoeSIsImFzIiwiYXN0IiwiYXoiLCJldSIsImJlIiwiYm4iLCJicyIsImJyIiwiYmciLCJteSIsImNhIiwiY2giLCJjZSIsInpoIiwiY3YiLCJjbyIsImNyIiwiaHIiLCJkYSIsIm5sIiwiZW4iLCJlbyIsImZvIiwiZmoiLCJmaSIsImZyIiwiZnkiLCJmdXIiLCJnZCIsImdsIiwia2EiLCJkZSIsImVsIiwiZ3UiLCJoZSIsImhpIiwiaHUiLCJpcyIsIml1IiwiZ2EiLCJqYSIsImtuIiwia3MiLCJrayIsImttIiwia3kiLCJ0bGgiLCJrbyIsImxhIiwibHYiLCJsYiIsIm1rIiwibXMiLCJtbCIsIm1pIiwibXIiLCJtbyIsIm52IiwibmciLCJubyIsIm5iIiwibm4iLCJvYyIsIm9yIiwib20iLCJmYSIsInBsIiwicGEiLCJxdSIsInJtIiwicm8iLCJydSIsInN6Iiwic2ciLCJzYSIsInNjIiwic2QiLCJzaSIsInNyIiwic2siLCJzbCIsInNvIiwic2IiLCJlcyIsInN3Iiwic3YiLCJ0YSIsInRoIiwidGlnIiwidHMiLCJ0biIsInRyIiwidGsiLCJ1ayIsImhzYiIsInVyIiwidmUiLCJ2aSIsInZvIiwid2EiLCJjeSIsInhoIiwiamkiLCJ6dSIsImxhbmd1YWdlQ29kZSIsImdldENoYXJXaWR0aHNBcnJheSIsIndpZHRocyIsIlVuaWNvZGUiLCJmb2YiLCJrZXJuaW5nIiwid2lkdGhPZlN0cmluZyIsIndpZHRoT2ZHbHlwaCIsImNoYXJhY3RlclRvR2x5cGgiLCJnZXRBcnJheVN1bSIsInRleHRJbmRlbnQiLCJsaW5lSW5kZW50IiwiV2luQW5zaUVuY29kaW5nIiwiQ291cmllciIsIkhlbHZldGljYSIsIlphcGZEaW5nYmF0cyIsImV4aXN0c0ZpbGVJblZGUyIsImdldEZpbGVGcm9tVkZTIiwiVFRGRm9udCIsImdseUlkc1VzZWQiLCJhZGRTdmciLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsInNldEF0dHJpYnV0ZSIsImNvbnRlbnRXaW5kb3ciLCJjb250ZW50RG9jdW1lbnQiLCJjaGlsZE5vZGVzIiwiYWRkU1ZHIiwiYWRkU3ZnQXNJbWFnZSIsImNhbnZnIiwiaWdub3JlTW91c2UiLCJpZ25vcmVBbmltYXRpb24iLCJpZ25vcmVEaW1lbnNpb25zIiwiaWdub3JlQ2xlYXIiLCJwdXRUb3RhbFBhZ2VzIiwicGRmRXNjYXBlMTYiLCJ2aWV3ZXJQcmVmZXJlbmNlcyIsIkhpZGVUb29sYmFyIiwiZGVmYXVsdFZhbHVlIiwiZXhwbGljaXRTZXQiLCJ2YWx1ZVNldCIsInBkZlZlcnNpb24iLCJIaWRlTWVudWJhciIsIkhpZGVXaW5kb3dVSSIsIkZpdFdpbmRvdyIsIkNlbnRlcldpbmRvdyIsIkRpc3BsYXlEb2NUaXRsZSIsIk5vbkZ1bGxTY3JlZW5QYWdlTW9kZSIsIkRpcmVjdGlvbiIsIlZpZXdBcmVhIiwiVmlld0NsaXAiLCJQcmludEFyZWEiLCJQcmludENsaXAiLCJQcmludFNjYWxpbmciLCJEdXBsZXgiLCJQaWNrVHJheUJ5UERGU2l6ZSIsIlByaW50UGFnZVJhbmdlIiwiTnVtQ29waWVzIiwidmlld2VycHJlZmVyZW5jZXMiLCJjb25maWd1cmF0aW9uIiwiYWRkTWV0YWRhdGEiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0b1VuaWNvZGUiLCJzdWJzZXQiLCJQREZPYmplY3QiLCJiYm94Iiwic3RlbVYiLCJpdGFsaWNBbmdsZSIsImFzY2VuZGVyIiwiZGVjZW5kZXIiLCJjYXBIZWlnaHQiLCJyYXdEYXRhIiwiaG10eCIsImhlYWQiLCJ1bml0c1BlckVtIiwiY21hcCIsInVuaWNvZGUiLCJjb2RlTWFwIiwidkZTIiwiYWRkRmlsZVRvVkZTIiwiYWRkSFRNTCIsInJhc3Rlcml6ZUhUTUwiLCJkaW0iLCJ1c2VGb3IiLCJpbWFnZUNvbXByZXNzaW9uIiwicGFnZXNwbGl0IiwibW96SW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwid2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwibXNJbWFnZVNtb290aGluZ0VuYWJsZWQiLCJpbWFnZVNtb290aGluZ0VuYWJsZWQiLCJJbWFnZSIsInJzdHoiLCJzbWFsbCIsIm1lZGl1bSIsImxhcmdlIiwiYXV0byIsImRlZmF1bHRWaWV3IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImN1cnJlbnRTdHlsZSIsInJvd3MiLCJjZWxscyIsInRleHRDb250ZW50IiwiaGVhZGVycyIsIlNDUklQVCIsIlNUWUxFIiwiTk9TQ1JJUFQiLCJPQkpFQ1QiLCJFTUJFRCIsIlNFTEVDVCIsInNldEJsb2NrQm91bmRhcnkiLCJzZXRCbG9ja1N0eWxlIiwiZXhlY3V0ZVdhdGNoRnVuY3Rpb25zIiwibWFyZ2luc19kb2MiLCJvd25lckRvY3VtZW50IiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZGRUZXh0Iiwic2V0dGluZ3MiLCJ3YXRjaEZ1bmN0aW9ucyIsIm91dFkiLCJjcm9zc09yaWdpbiIsIm9uZXJyb3IiLCJjb21wbGV0ZSIsImNlaWwiLCJGT09URVIiLCJub3ciLCJmcmFtZXMiLCJ3cml0ZWxuIiwiZWxlbWVudEhhbmRsZXJzIiwiZGlzcG9zZSIsImluaXQiLCJwYXJhZ3JhcGgiLCJyZWFkeSIsInNwbGl0RnJhZ21lbnRzSW50b0xpbmVzIiwiUmVuZGVyVGV4dEZyYWdtZW50IiwiZ2V0UGRmQ29sb3IiLCJsYXN0VGV4dENvbG9yIiwicmVuZGVyUGFyYWdyYXBoIiwiYmxvY2tzdHlsZSIsInByaW9yYmxvY2tzdHlsZSIsInByaW9yTWFyZ2luQm90dG9tIiwiYm9sZCIsImJvbGRlciIsImxpZ2h0ZXIiLCJpdGFsaWMiLCJvYmxpcXVlIiwiY2VudGVyIiwianVzdGlmeSIsIm5vbmUiLCJib3RoIiwiZnJvbUhUTUwiLCJodG1sMnBkZiIsIl93cmFwWCIsIl93cmFwWSIsIl9wYWdlIiwic2V0TmFtZSIsIl9wYWdlQnJlYWtBdCIsInBhZ2VCcmVha3MiLCJfZ290b1BhZ2UiLCJzY3JvbGxZIiwicGFyZW50RWxlbWVudCIsIkJsb2JCdWlsZGVyIiwiV2ViS2l0QmxvYkJ1aWxkZXIiLCJNU0Jsb2JCdWlsZGVyIiwiTW96QmxvYkJ1aWxkZXIiLCJ3ZWJraXRVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJ0b1N0cmluZ1RhZyIsInNpemUiLCJieXRlT2Zmc2V0IiwiRmlsZSIsIkZpbGVSZWFkZXIiLCJBY3RpdmVYT2JqZWN0Iiwic2V0UmVxdWVzdEhlYWRlciIsImxhc3RNb2RpZmllZCIsImxhc3RNb2RpZmllZERhdGUiLCJpc1ZpZXciLCJfYnVmZmVyIiwiaXNQcm90b3R5cGVPZiIsIkRhdGFWaWV3Iiwic2V0UHJvdG90eXBlT2YiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZGlzcGF0Y2hFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZXN1bHQiLCJyZWFkeVN0YXRlIiwiTE9BRElORyIsIkV2ZW50IiwiRU1QVFkiLCJET05FIiwib25hYm9ydCIsIm9ubG9hZGVuZCIsIm9ubG9hZHN0YXJ0Iiwib25wcm9ncmVzcyIsInJlYWRBc0RhdGFVUkwiLCJyZWFkQXNUZXh0IiwicmVhZEFzQXJyYXlCdWZmZXIiLCJhYm9ydCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImNyZWF0ZUVsZW1lbnROUyIsIkhUTUxFbGVtZW50Iiwic2V0SW1tZWRpYXRlIiwicmVtb3ZlIiwiSU5JVCIsImRvd25sb2FkIiwiTW91c2VFdmVudCIsIm1zU2F2ZU9yT3BlbkJsb2IiLCJXUklUSU5HIiwib253cml0ZXN0YXJ0Iiwib253cml0ZSIsIm9ud3JpdGVlbmQiLCJoYXNfbG9jYWxfcGFsZXR0ZSIsInBhbGV0dGVfb2Zmc2V0IiwiZGF0YV9vZmZzZXQiLCJkYXRhX2xlbmd0aCIsInRyYW5zcGFyZW50X2luZGV4IiwiaW50ZXJsYWNlZCIsImRlbGF5IiwiZGlzcG9zYWwiLCJudW1GcmFtZXMiLCJsb29wQ291bnQiLCJmcmFtZUluZm8iLCJkZWNvZGVBbmRCbGl0RnJhbWVCR1JBIiwiR2lmV3JpdGVyIiwibG9vcCIsImJhY2tncm91bmQiLCJhZGRGcmFtZSIsInRyYW5zcGFyZW50IiwiZW5kIiwiR2lmUmVhZGVyIiwiZ2V0VGltZSIsImRpc3BsYXlOYW1lIiwicG9zIiwiZGF0YXYiLCJpc193aXRoX2FscGhhIiwiYm90dG9tX3VwIiwiZmxhZyIsInBhcnNlSGVhZGVyIiwicGFyc2VCR1IiLCJCdWZmZXIiLCJBZGxlcjMyIiwiY2hlY2tzdW0iLCJmcm9tVXRmOCIsImZyb21CdWZmZXIiLCJ1cGRhdGUiLCJ1cGRhdGVVdGY4IiwidXBkYXRlQnVmZmVyIiwiX19iaWRpRW5naW5lX18iLCJFTiIsIkFOIiwiaGlMZXZlbCIsImRvQmlkaVJlb3JkZXIiLCJpc0lucHV0VmlzdWFsIiwiaXNPdXRwdXRWaXN1YWwiLCJpc0lucHV0UnRsIiwiaXNPdXRwdXRSdGwiLCJpc1N5bW1ldHJpY1N3YXBwaW5nIiwiZmlsZVNpemUiLCJnZXRVaW50MzIiLCJyZXNlcnZlZCIsIm9mZnNldCIsImhlYWRlclNpemUiLCJnZXRJbnQzMiIsInBsYW5lcyIsImdldFVpbnQxNiIsImJpdFBQIiwicmF3U2l6ZSIsInZyIiwiaW1wb3J0YW50Q29sb3JzIiwiZ2V0VWludDgiLCJyZWQiLCJncmVlbiIsImJsdWUiLCJxdWFkIiwiYml0MSIsImJpdDQiLCJiaXQ4IiwiYml0MTUiLCJiaXQxNiIsImJpdDI0IiwiYml0MzIiLCJidWlsZF90cmVlIiwiZHluX3RyZWUiLCJzdGF0X2Rlc2MiLCJzdGF0aWNfdHJlZSIsImVsZW1zIiwiaGVhcF9sZW4iLCJoZWFwX21heCIsImhlYXAiLCJkZXB0aCIsIm9wdF9sZW4iLCJzdGF0aWNfbGVuIiwibWF4X2NvZGUiLCJwcWRvd25oZWFwIiwiZXh0cmFfYml0cyIsImV4dHJhX2Jhc2UiLCJtYXhfbGVuZ3RoIiwiYmxfY291bnQiLCJfbGVuZ3RoX2NvZGUiLCJiYXNlX2xlbmd0aCIsImJhc2VfZGlzdCIsImRfY29kZSIsImV4dHJhX2xiaXRzIiwiZXh0cmFfZGJpdHMiLCJleHRyYV9ibGJpdHMiLCJibF9vcmRlciIsInN0YXRpY19sdHJlZSIsInN0YXRpY19kdHJlZSIsInN0YXRpY19sX2Rlc2MiLCJzdGF0aWNfZF9kZXNjIiwic3RhdGljX2JsX2Rlc2MiLCJnb29kX2xlbmd0aCIsIm1heF9sYXp5IiwibmljZV9sZW5ndGgiLCJtYXhfY2hhaW4iLCJmdW5jIiwicGVuZGluZ19idWYiLCJwZW5kaW5nIiwiZmx1c2hfcGVuZGluZyIsImF2YWlsX2luIiwicmVhZF9idWYiLCJ0b3RhbF9pbiIsInRvdGFsX291dCIsIm1zZyIsInBlbmRpbmdfb3V0IiwiZGVmbGF0ZUluaXQiLCJkc3RhdGUiLCJkZWZsYXRlRW5kIiwiZGVmbGF0ZVBhcmFtcyIsImRlZmxhdGUiLCJkZWZsYXRlU2V0RGljdGlvbmFyeSIsIm5leHRfb3V0IiwibmV4dF9pbiIsImF2YWlsX291dCIsIm5leHRfaW5faW5kZXgiLCJuZXh0X291dF9pbmRleCIsInppcCIsIl9qemxpYl9EZWZsYXRlciIsImxldmVsIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiY3lhbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJkYXJrZ3JlZW4iLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3R1cnF1b2lzZSIsImRhcmt2aW9sZXQiLCJkZWVwcGluayIsImRlZXBza3libHVlIiwiZGltZ3JheSIsImRvZGdlcmJsdWUiLCJmZWxkc3BhciIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW55ZWxsb3ciLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmV5IiwibGlnaHRncmVlbiIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVibHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRhbiIsInRlYWwiLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0IiwidmlvbGV0cmVkIiwid2hlYXQiLCJ3aGl0ZSIsIndoaXRlc21va2UiLCJ5ZWxsb3ciLCJ5ZWxsb3dncmVlbiIsImV4YW1wbGUiLCJwcm9jZXNzIiwidG9SR0IiLCJyZWFkU3RyaW5nIiwicmVnaXN0ZXJUVEYiLCJkaXJlY3RvcnkiLCJNYXAiLCJoaGVhIiwibWF4cCIsInBvc3QiLCJvczIiLCJsb2NhIiwiZ2x5ZiIsImV4aXN0cyIsImxpbmVHYXAiLCJ4TWluIiwieU1pbiIsInhNYXgiLCJ5TWF4IiwiaXRhbGljX2FuZ2xlIiwieEhlaWdodCIsImZhbWlseUNsYXNzIiwiaXNTZXJpZiIsImlzU2NyaXB0IiwiaXNGaXhlZFBpdGNoIiwiZm9yR2x5cGgiLCJhZHZhbmNlIiwicmVhZEJ5dGUiLCJ3cml0ZUJ5dGUiLCJyZWFkVUludDMyIiwid3JpdGVVSW50MzIiLCJyZWFkSW50MzIiLCJ3cml0ZUludDMyIiwicmVhZFVJbnQxNiIsIndyaXRlVUludDE2IiwicmVhZEludDE2Iiwid3JpdGVJbnQxNiIsIndyaXRlU3RyaW5nIiwicmVhZFNob3J0Iiwid3JpdGVTaG9ydCIsInJlYWRMb25nTG9uZyIsIndyaXRlTG9uZ0xvbmciLCJyZWFkSW50Iiwid3JpdGVJbnQiLCJyZWFkIiwic2NhbGFyVHlwZSIsInRhYmxlQ291bnQiLCJzZWFyY2hSYW5nZSIsImVudHJ5U2VsZWN0b3IiLCJyYW5nZVNoaWZ0IiwidGFibGVzIiwidGFnIiwiX19zdXBlcl9fIiwiZmlsZSIsInJhdyIsInJldmlzaW9uIiwiY2hlY2tTdW1BZGp1c3RtZW50IiwibWFnaWNOdW1iZXIiLCJjcmVhdGVkIiwibW9kaWZpZWQiLCJtYWNTdHlsZSIsImxvd2VzdFJlY1BQRU0iLCJmb250RGlyZWN0aW9uSGludCIsImluZGV4VG9Mb2NGb3JtYXQiLCJnbHlwaERhdGFGb3JtYXQiLCJwbGF0Zm9ybUlEIiwiZW5jb2RpbmdJRCIsImxhbmd1YWdlIiwiaXNVbmljb2RlIiwib2xkIiwiY2hhck1hcCIsInN1YnRhYmxlIiwibWF4R2x5cGhJRCIsIkxOMiIsImFkdmFuY2VXaWR0aE1heCIsIm1pbkxlZnRTaWRlQmVhcmluZyIsIm1pblJpZ2h0U2lkZUJlYXJpbmciLCJ4TWF4RXh0ZW50IiwiY2FyZXRTbG9wZVJpc2UiLCJjYXJldFNsb3BlUnVuIiwiY2FyZXRPZmZzZXQiLCJtZXRyaWNEYXRhRm9ybWF0IiwibnVtYmVyT2ZNZXRyaWNzIiwiYXZlcmFnZUNoYXJXaWR0aCIsIndlaWdodENsYXNzIiwid2lkdGhDbGFzcyIsInlTdWJzY3JpcHRYU2l6ZSIsInlTdWJzY3JpcHRZU2l6ZSIsInlTdWJzY3JpcHRYT2Zmc2V0IiwieVN1YnNjcmlwdFlPZmZzZXQiLCJ5U3VwZXJzY3JpcHRYU2l6ZSIsInlTdXBlcnNjcmlwdFlTaXplIiwieVN1cGVyc2NyaXB0WE9mZnNldCIsInlTdXBlcnNjcmlwdFlPZmZzZXQiLCJ5U3RyaWtlb3V0U2l6ZSIsInlTdHJpa2VvdXRQb3NpdGlvbiIsInBhbm9zZSIsImNoYXJSYW5nZSIsInZlbmRvcklEIiwic2VsZWN0aW9uIiwiZmlyc3RDaGFySW5kZXgiLCJsYXN0Q2hhckluZGV4IiwiYXNjZW50IiwiZGVzY2VudCIsIndpbkFzY2VudCIsIndpbkRlc2NlbnQiLCJjb2RlUGFnZVJhbmdlIiwiZGVmYXVsdENoYXIiLCJicmVha0NoYXIiLCJtYXhDb250ZXh0IiwidW5kZXJsaW5lUG9zaXRpb24iLCJ1bmRlcmxpbmVUaGlja25lc3MiLCJtaW5NZW1UeXBlNDIiLCJtYXhNZW1UeXBlNDIiLCJtaW5NZW1UeXBlMSIsIm1heE1lbVR5cGUxIiwiZ2x5cGhOYW1lSW5kZXgiLCJuYW1lcyIsIm9mZnNldHMiLCJudW1HbHlwaHMiLCJsYW5ndWFnZUlEIiwibmFtZUlEIiwic3RyaW5ncyIsImNvcHlyaWdodCIsImZvbnRGYW1pbHkiLCJmb250U3ViZmFtaWx5IiwidW5pcXVlU3ViZmFtaWx5IiwicG9zdHNjcmlwdE5hbWUiLCJ0cmFkZW1hcmsiLCJtYW51ZmFjdHVyZXIiLCJkZXNpZ25lciIsImRlc2NyaXB0aW9uIiwidmVuZG9yVXJsIiwiZGVzaWduZXJVcmwiLCJsaWNlbnNlIiwibGljZW5zZVVybCIsInByZWZlcnJlZEZhbWlseSIsInByZWZlcnJlZFN1YmZhbWlseSIsImNvbXBhdGlibGVGdWxsIiwic2FtcGxlVGV4dCIsIm1heFBvaW50cyIsIm1heENvbnRvdXJzIiwibWF4Q29tcG9zaXRlUG9pbnRzIiwibWF4Q29tcG9uZW50Q29udG91cnMiLCJtYXhab25lcyIsIm1heFR3aWxpZ2h0UG9pbnRzIiwibWF4U3RvcmFnZSIsIm1heEZ1bmN0aW9uRGVmcyIsIm1heEluc3RydWN0aW9uRGVmcyIsIm1heFN0YWNrRWxlbWVudHMiLCJtYXhTaXplT2ZJbnN0cnVjdGlvbnMiLCJtYXhDb21wb25lbnRFbGVtZW50cyIsIm1heENvbXBvbmVudERlcHRoIiwibWV0cmljcyIsImxzYiIsImxlZnRTaWRlQmVhcmluZ3MiLCJjYWNoZSIsImdseXBoRm9yIiwibGVuZ3RoT2YiLCJudW1iZXJPZkNvbnRvdXJzIiwiY29tcG91bmQiLCJnbHlwaElEcyIsImdseXBoT2Zmc2V0cyIsInVuaWNvZGVzIiwibmV4dCIsImdlbmVyYXRlQ21hcCIsImdseXBoc0ZvciIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsImFuaW1hdGlvbiIsImNvbXByZXNzaW9uTWV0aG9kIiwiZmlsdGVyTWV0aG9kIiwiaW50ZXJsYWNlTWV0aG9kIiwibnVtUGxheXMiLCJ4T2Zmc2V0IiwieU9mZnNldCIsImRpc3Bvc2VPcCIsImJsZW5kT3AiLCJncmF5c2NhbGUiLCJyZ2IiLCJoYXNBbHBoYUNoYW5uZWwiLCJsb2FkIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2UiLCJtb3pSZXNwb25zZUFycmF5QnVmZmVyIiwiZ2V0Qnl0ZXMiLCJkZWNvZGVQYWxldHRlIiwiY29weVRvSW1hZ2VEYXRhIiwiX2RlY29kZWRQYWxldHRlIiwicHV0SW1hZ2VEYXRhIiwiZGVjb2RlRnJhbWVzIiwiY3JlYXRlSW1hZ2VEYXRhIiwicmVuZGVyRnJhbWUiLCJhbmltYXRlIiwiX3RpbWVvdXQiLCJzdG9wQW5pbWF0aW9uIiwiY2xlYXJUaW1lb3V0IiwiX3BuZyIsImJ1ZmZlckxlbmd0aCIsImVvZiIsImVuc3VyZUJ1ZmZlciIsImdldEJ5dGUiLCJyZWFkQmxvY2siLCJsb29rQ2hhciIsImdldENoYXIiLCJtYWtlU3ViU3RyZWFtIiwiU3RyZWFtIiwic2tpcCIsInJlc2V0IiwiZ2V0Qml0cyIsImNvZGVTaXplIiwiY29kZUJ1ZiIsImJ5dGVzIiwiYnl0ZXNQb3MiLCJnZXRDb2RlIiwiZ2VuZXJhdGVIdWZmbWFuVGFibGUiLCJpbnRlcmFjdGl2ZV9uYW1lIiwiZ2V0UGFyYW1ldGVyQnlOYW1lIiwiZG9sbHlVcmwiLCJEb2xseSIsImFwaV91cmwiLCJyZWdleCIsInJlc3VsdHMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlbXB0eSIsIiRjb3N0SXRlbU5hbWUiLCIkc3R1ZGVudE5hbWUiLCIkY29zdEl0ZW1WYWx1ZSIsIiRjb3N0SXRlbUlkIiwiJGNvc3REcml2ZXIiLCIkY29zdEl0ZW1zIiwiJGNvc3RJdGVtc0xpc3ROb2RlIiwiJGNvc3RJdGVtc0NvdW50IiwiJHRvdGFsIiwiJHN0dWRlbnRDb3N0UG9vbERlc2lnbiIsInVzZXJJZCIsInN1Z2dlc3RlZENvc3RQb29sIiwicmV0cnkiLCJmb3JtYXROdW1iZXIiLCJudW0iLCJjb252ZXJ0VG9OdW1iZXIiLCJzdHJpbmciLCJnZXRTdHVkZW50QW5zd2VycyIsImFkZFN0dWRlbnRKc29uU3RyaW5nVG9ET00iLCJjb3N0UG9vbHMiLCJhdHRyIiwic3R1ZGVudCIsInBhcmVudCIsImNvc3RQb29sRGVzaWduIiwiaHRtbFN0cmluZyIsIml0ZW1zIiwidG90YWwiLCJlbGVtZW50IiwiaXRlbU5hbWUiLCJjb29raWVHZXQiLCJhamF4R2V0Iiwic3VnZ2VzdGVkQ29zdFBvb2xOb2RlIiwicXVlcnlTZWxlY3RvciIsImhpZGUiLCJzaG93IiwiYWRkUG9wdXBNZXNzYWdlIiwidGltZSIsImN1cnJlbnRUYXJnZXQiLCIkcGFyZW50IiwicGFyZW50cyIsImFmdGVyIiwiZGVsZXRlSW5mb05vdGljZXMiLCJmYWRlVG8iLCJmYWRlIiwiZWFjaCIsImluZGV4IiwicmVtb3ZlQ29zdEl0ZW0iLCJwcmV2ZW50RGVmYXVsdCIsInZhbGlkYXRlQ29zdEl0ZW1saXN0IiwiJGNoZWNrIiwidmFsaWRhdGVDb3N0RHJpdmVyIiwidW5kZWZpbmVkIiwicG9zdERvbmUiLCJjb29raWVTZXQiLCJzdWJtaXRTdHVkZW50QW5zd2VyVG9EYXRhYmFzZSIsInBvc3RfZGF0YSIsImFqYXhQb3N0IiwiY3JlYXRlRGF0YVN0cmluZyIsIiRuYW1lIiwiY29zdEl0ZW0iLCJyZWFkeVRvUG9zdCIsImpzb25TdHJpbmciLCJkb21TdHJpbmciLCJjaGFuZ2UiLCJldmVudCIsIiRjb3VudFZpc2libGVDb3N0SXRlbXMiLCJhcHBlbmRUbyIsImNsaWNrIiwic3R1ZGVudE5hbWUiLCJzbGlkZVRvZ2dsZSIsImR1cmF0aW9uIiwicHV0RG9uZSIsInB1dF9kYXRhIiwiYWpheFB1dCIsImNsZWFyQ29zdFBvb2xzIiwidHdvU2VjdGlvbnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaHRtbEVsZW1lbnQiLCJzZWN0aW9uIiwiZHVwbGljYXRlIiwic3JjSW1nIiwic1giLCJzWSIsInNXaWR0aCIsInNIZWlnaHQiLCJkWCIsImRZIiwiZFdpZHRoIiwiZEhlaWdodCIsIm9uZVBhZ2VDYW52YXMiLCJjYW52YXNEYXRhVVJMIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsQ0FBQSxVQUFBQSxDQUFBLEVBQUE7QUFBQSxnQkFBQSxPQUFBQyxNQUFBLElBQUFBLE1BQUEsQ0FBQUMsR0FBQSxHQUFBRCxNQUFBLENBQUFELENBQUEsQ0FBQSxHQUFBQSxDQUFBLEVBQUE7QUFBQSxDQUFBLENBQUEsWUFBQTtBQUFBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkJBLFdBQUFHLEVBQUEsQ0FBQUgsQ0FBQSxFQUFBO0FBQUEsV0FBQSxDQUFBRyxFQUFBLEdBQUEsY0FBQSxPQUFBQyxNQUFBLElBQUEsb0JBQUFBLE1BQUEsQ0FBQUMsUUFBQSxDQUFBLEdBQUEsVUFBQUwsQ0FBQSxFQUFBO0FBQUEscUJBQUFBLENBQUE7QUFBQSxLQUFBLEdBQUEsVUFBQUEsQ0FBQSxFQUFBO0FBQUEsYUFBQUEsQ0FBQSxJQUFBLGNBQUEsT0FBQUksTUFBQSxJQUFBSixDQUFBLENBQUFNLFdBQUEsS0FBQUYsTUFBQSxJQUFBSixDQUFBLEtBQUFJLE1BQUEsQ0FBQUcsU0FBQSxHQUFBLFFBQUEsV0FBQVAsQ0FBQSxDQUFBO0FBQUEsS0FBQSxFQUFBQSxDQUFBLENBQUE7QUFBQTs7QUFBQSxHQUFBLFVBQUFBLENBQUEsRUFBQTtBQUFBLFFBQUEsYUFBQUcsRUFBQSxDQUFBSCxDQUFBLENBQUFRLE9BQUEsQ0FBQSxFQUFBO0FBQUFSLE1BQUFBLENBQUEsQ0FBQVEsT0FBQSxHQUFBLEVBQUE7O0FBQUEsV0FBQSxJQUFBQyxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxHQUFBWCxDQUFBLENBQUFRLE9BQUEsRUFBQUksQ0FBQSxHQUFBLFNBQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQUMsQ0FBQSxHQUFBLENBQUEsUUFBQSxDQUFBLEVBQUFDLENBQUEsR0FBQSx3TUFBQUMsS0FBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBTixDQUFBLEdBQUFJLENBQUEsQ0FBQUcsR0FBQSxFQUFBO0FBQUFMLFFBQUFBLENBQUEsQ0FBQUYsQ0FBQSxDQUFBLEtBQUFFLENBQUEsQ0FBQUYsQ0FBQSxDQUFBLEdBQUEsRUFBQTtBQUFBOztBQUFBLGFBQUFDLENBQUEsR0FBQUksQ0FBQSxDQUFBRSxHQUFBLEVBQUE7QUFBQUwsUUFBQUEsQ0FBQSxDQUFBRCxDQUFBLENBQUEsS0FBQUMsQ0FBQSxDQUFBRCxDQUFBLENBQUEsR0FBQUUsQ0FBQTtBQUFBO0FBQUE7O0FBQUEsUUFBQUssQ0FBQTtBQUFBLFFBQUFDLENBQUE7QUFBQSxRQUFBQyxDQUFBO0FBQUEsUUFBQUMsQ0FBQTtBQUFBLFFBQUFDLENBQUEsR0FBQSxtRUFBQTtBQUFBLFNBQUEsQ0FBQSxLQUFBckIsQ0FBQSxDQUFBc0IsSUFBQSxLQUFBdEIsQ0FBQSxDQUFBc0IsSUFBQSxHQUFBLFVBQUF0QixDQUFBLEVBQUE7QUFBQSxVQUFBUyxDQUFBO0FBQUEsVUFBQUMsQ0FBQTtBQUFBLFVBQUFDLENBQUE7QUFBQSxVQUFBQyxDQUFBO0FBQUEsVUFBQUMsQ0FBQTtBQUFBLFVBQUFDLENBQUEsR0FBQSxDQUFBO0FBQUEsVUFBQUcsQ0FBQSxHQUFBLENBQUE7QUFBQSxVQUFBQyxDQUFBLEdBQUEsRUFBQTtBQUFBLFVBQUFDLENBQUEsR0FBQSxFQUFBO0FBQUEsVUFBQSxDQUFBbkIsQ0FBQSxFQUFBLE9BQUFBLENBQUE7O0FBQUEsYUFBQVMsQ0FBQSxHQUFBLENBQUFJLENBQUEsR0FBQWIsQ0FBQSxDQUFBdUIsVUFBQSxDQUFBVCxDQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUFkLENBQUEsQ0FBQXVCLFVBQUEsQ0FBQVQsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxHQUFBZCxDQUFBLENBQUF1QixVQUFBLENBQUFULENBQUEsRUFBQSxDQUFBLEtBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQUosQ0FBQSxHQUFBRyxDQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQUYsQ0FBQSxHQUFBRSxDQUFBLElBQUEsQ0FBQSxHQUFBLEVBQUEsRUFBQUQsQ0FBQSxHQUFBLEtBQUFDLENBQUEsRUFBQU0sQ0FBQSxDQUFBRixDQUFBLEVBQUEsQ0FBQSxHQUFBSSxDQUFBLENBQUFHLE1BQUEsQ0FBQWYsQ0FBQSxJQUFBWSxDQUFBLENBQUFHLE1BQUEsQ0FBQWQsQ0FBQSxDQUFBLEdBQUFXLENBQUEsQ0FBQUcsTUFBQSxDQUFBYixDQUFBLENBQUEsR0FBQVUsQ0FBQSxDQUFBRyxNQUFBLENBQUFaLENBQUEsQ0FBQSxFQUFBRSxDQUFBLEdBQUFkLENBQUEsQ0FBQXlCLE1BQUE7QUFBQTtBQUFBOztBQUFBUCxNQUFBQSxDQUFBLEdBQUFDLENBQUEsQ0FBQU8sSUFBQSxDQUFBLEVBQUEsQ0FBQTtBQUFBLFVBQUFOLENBQUEsR0FBQXBCLENBQUEsQ0FBQXlCLE1BQUEsR0FBQSxDQUFBO0FBQUEsYUFBQSxDQUFBTCxDQUFBLEdBQUFGLENBQUEsQ0FBQVMsS0FBQSxDQUFBLENBQUEsRUFBQVAsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBRixDQUFBLElBQUEsTUFBQVMsS0FBQSxDQUFBUCxDQUFBLElBQUEsQ0FBQSxDQUFBO0FBQUEsS0FBQSxHQUFBLEtBQUEsQ0FBQSxLQUFBcEIsQ0FBQSxDQUFBNEIsSUFBQSxLQUFBNUIsQ0FBQSxDQUFBNEIsSUFBQSxHQUFBLFVBQUE1QixDQUFBLEVBQUE7QUFBQSxVQUFBUyxDQUFBO0FBQUEsVUFBQUMsQ0FBQTtBQUFBLFVBQUFDLENBQUE7QUFBQSxVQUFBQyxDQUFBO0FBQUEsVUFBQUMsQ0FBQTtBQUFBLFVBQUFDLENBQUE7QUFBQSxVQUFBRyxDQUFBLEdBQUEsQ0FBQTtBQUFBLFVBQUFDLENBQUEsR0FBQSxDQUFBO0FBQUEsVUFBQUMsQ0FBQSxHQUFBLEVBQUE7QUFBQSxVQUFBLENBQUFuQixDQUFBLEVBQUEsT0FBQUEsQ0FBQTs7QUFBQSxXQUFBQSxDQUFBLElBQUEsRUFBQSxFQUFBUyxDQUFBLEdBQUEsQ0FBQUssQ0FBQSxHQUFBTyxDQUFBLENBQUFRLE9BQUEsQ0FBQTdCLENBQUEsQ0FBQXdCLE1BQUEsQ0FBQVAsQ0FBQSxFQUFBLENBQUEsS0FBQSxFQUFBLEdBQUFJLENBQUEsQ0FBQVEsT0FBQSxDQUFBN0IsQ0FBQSxDQUFBd0IsTUFBQSxDQUFBUCxDQUFBLEVBQUEsQ0FBQSxLQUFBLEVBQUEsR0FBQSxDQUFBTCxDQUFBLEdBQUFTLENBQUEsQ0FBQVEsT0FBQSxDQUFBN0IsQ0FBQSxDQUFBd0IsTUFBQSxDQUFBUCxDQUFBLEVBQUEsQ0FBQSxDQUFBLEtBQUEsQ0FBQSxJQUFBSixDQUFBLEdBQUFRLENBQUEsQ0FBQVEsT0FBQSxDQUFBN0IsQ0FBQSxDQUFBd0IsTUFBQSxDQUFBUCxDQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsS0FBQSxFQUFBLEdBQUEsR0FBQSxFQUFBUCxDQUFBLEdBQUFJLENBQUEsSUFBQSxDQUFBLEdBQUEsR0FBQSxFQUFBSCxDQUFBLEdBQUEsTUFBQUcsQ0FBQSxFQUFBSyxDQUFBLENBQUFELENBQUEsRUFBQSxDQUFBLEdBQUEsTUFBQU4sQ0FBQSxHQUFBa0IsTUFBQSxDQUFBQyxZQUFBLENBQUF0QixDQUFBLENBQUEsR0FBQSxNQUFBSSxDQUFBLEdBQUFpQixNQUFBLENBQUFDLFlBQUEsQ0FBQXRCLENBQUEsRUFBQUMsQ0FBQSxDQUFBLEdBQUFvQixNQUFBLENBQUFDLFlBQUEsQ0FBQXRCLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLENBQUEsRUFBQU0sQ0FBQSxHQUFBakIsQ0FBQSxDQUFBeUIsTUFBQTtBQUFBO0FBQUE7O0FBQUEsYUFBQU4sQ0FBQSxDQUFBTyxJQUFBLENBQUEsRUFBQSxDQUFBO0FBQUEsS0FBQSxDQUFBLEVBQUFNLEtBQUEsQ0FBQXpCLFNBQUEsQ0FBQTBCLEdBQUEsS0FBQUQsS0FBQSxDQUFBekIsU0FBQSxDQUFBMEIsR0FBQSxHQUFBLFVBQUFqQyxDQUFBLEVBQUE7QUFBQSxVQUFBLFFBQUEsSUFBQSxJQUFBLGNBQUEsT0FBQUEsQ0FBQSxFQUFBLE1BQUEsSUFBQWtDLFNBQUEsRUFBQTs7QUFBQSxXQUFBLElBQUF6QixDQUFBLEdBQUEwQixNQUFBLENBQUEsSUFBQSxDQUFBLEVBQUF6QixDQUFBLEdBQUFELENBQUEsQ0FBQWdCLE1BQUEsS0FBQSxDQUFBLEVBQUFkLENBQUEsR0FBQSxJQUFBcUIsS0FBQSxDQUFBdEIsQ0FBQSxDQUFBLEVBQUFFLENBQUEsR0FBQSxJQUFBd0IsU0FBQSxDQUFBWCxNQUFBLEdBQUFXLFNBQUEsQ0FBQSxDQUFBLENBQUEsR0FBQSxLQUFBLENBQUEsRUFBQXZCLENBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUEsR0FBQUgsQ0FBQSxFQUFBRyxDQUFBLEVBQUE7QUFBQUEsUUFBQUEsQ0FBQSxJQUFBSixDQUFBLEtBQUFFLENBQUEsQ0FBQUUsQ0FBQSxDQUFBLEdBQUFiLENBQUEsQ0FBQXFDLElBQUEsQ0FBQXpCLENBQUEsRUFBQUgsQ0FBQSxDQUFBSSxDQUFBLENBQUEsRUFBQUEsQ0FBQSxFQUFBSixDQUFBLENBQUE7QUFBQTs7QUFBQSxhQUFBRSxDQUFBO0FBQUEsS0FBQSxDQUFBLEVBQUFxQixLQUFBLENBQUFNLE9BQUEsS0FBQU4sS0FBQSxDQUFBTSxPQUFBLEdBQUEsVUFBQXRDLENBQUEsRUFBQTtBQUFBLGFBQUEscUJBQUFtQyxNQUFBLENBQUE1QixTQUFBLENBQUFnQyxRQUFBLENBQUFGLElBQUEsQ0FBQXJDLENBQUEsQ0FBQTtBQUFBLEtBQUEsQ0FBQSxFQUFBZ0MsS0FBQSxDQUFBekIsU0FBQSxDQUFBaUMsT0FBQSxLQUFBUixLQUFBLENBQUF6QixTQUFBLENBQUFpQyxPQUFBLEdBQUEsVUFBQXhDLENBQUEsRUFBQVMsQ0FBQSxFQUFBO0FBQUEsVUFBQSxRQUFBLElBQUEsSUFBQSxjQUFBLE9BQUFULENBQUEsRUFBQSxNQUFBLElBQUFrQyxTQUFBLEVBQUE7O0FBQUEsV0FBQSxJQUFBeEIsQ0FBQSxHQUFBeUIsTUFBQSxDQUFBLElBQUEsQ0FBQSxFQUFBeEIsQ0FBQSxHQUFBRCxDQUFBLENBQUFlLE1BQUEsS0FBQSxDQUFBLEVBQUFiLENBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUEsR0FBQUQsQ0FBQSxFQUFBQyxDQUFBLEVBQUE7QUFBQUEsUUFBQUEsQ0FBQSxJQUFBRixDQUFBLElBQUFWLENBQUEsQ0FBQXFDLElBQUEsQ0FBQTVCLENBQUEsRUFBQUMsQ0FBQSxDQUFBRSxDQUFBLENBQUEsRUFBQUEsQ0FBQSxFQUFBRixDQUFBLENBQUE7QUFBQTtBQUFBLEtBQUEsQ0FBQSxFQUFBc0IsS0FBQSxDQUFBekIsU0FBQSxDQUFBa0MsSUFBQSxJQUFBTixNQUFBLENBQUFPLGNBQUEsQ0FBQVYsS0FBQSxDQUFBekIsU0FBQSxFQUFBLE1BQUEsRUFBQTtBQUFBb0MsTUFBQUEsS0FBQSxFQUFBLGVBQUEzQyxDQUFBLEVBQUE7QUFBQSxZQUFBLFFBQUEsSUFBQSxFQUFBLE1BQUEsSUFBQWtDLFNBQUEsQ0FBQSwrQkFBQSxDQUFBO0FBQUEsWUFBQXpCLENBQUEsR0FBQTBCLE1BQUEsQ0FBQSxJQUFBLENBQUE7QUFBQSxZQUFBekIsQ0FBQSxHQUFBRCxDQUFBLENBQUFnQixNQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsY0FBQSxPQUFBekIsQ0FBQSxFQUFBLE1BQUEsSUFBQWtDLFNBQUEsQ0FBQSw4QkFBQSxDQUFBOztBQUFBLGFBQUEsSUFBQXZCLENBQUEsR0FBQXlCLFNBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQXhCLENBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUEsR0FBQUYsQ0FBQSxHQUFBO0FBQUEsY0FBQUcsQ0FBQSxHQUFBSixDQUFBLENBQUFHLENBQUEsQ0FBQTtBQUFBLGNBQUFaLENBQUEsQ0FBQXFDLElBQUEsQ0FBQTFCLENBQUEsRUFBQUUsQ0FBQSxFQUFBRCxDQUFBLEVBQUFILENBQUEsQ0FBQSxFQUFBLE9BQUFJLENBQUE7QUFBQUQsVUFBQUEsQ0FBQTtBQUFBO0FBQUEsT0FBQTtBQUFBZ0MsTUFBQUEsWUFBQSxFQUFBLENBQUEsQ0FBQTtBQUFBQyxNQUFBQSxRQUFBLEVBQUEsQ0FBQTtBQUFBLEtBQUEsQ0FBQSxFQUFBVixNQUFBLENBQUFXLElBQUEsS0FBQVgsTUFBQSxDQUFBVyxJQUFBLElBQUE3QixDQUFBLEdBQUFrQixNQUFBLENBQUE1QixTQUFBLENBQUF3QyxjQUFBLEVBQUE3QixDQUFBLEdBQUEsQ0FBQTtBQUFBcUIsTUFBQUEsUUFBQSxFQUFBO0FBQUEsTUFBQVMsb0JBQUEsQ0FBQSxVQUFBLENBQUEsRUFBQTVCLENBQUEsR0FBQSxDQUFBRCxDQUFBLEdBQUEsQ0FBQSxVQUFBLEVBQUEsZ0JBQUEsRUFBQSxTQUFBLEVBQUEsZ0JBQUEsRUFBQSxlQUFBLEVBQUEsc0JBQUEsRUFBQSxhQUFBLENBQUEsRUFBQU0sTUFBQSxFQUFBLFVBQUF6QixDQUFBLEVBQUE7QUFBQSxVQUFBLGFBQUFHLEVBQUEsQ0FBQUgsQ0FBQSxDQUFBLEtBQUEsY0FBQSxPQUFBQSxDQUFBLElBQUEsU0FBQUEsQ0FBQSxDQUFBLEVBQUEsTUFBQSxJQUFBa0MsU0FBQSxFQUFBO0FBQUEsVUFBQXpCLENBQUE7QUFBQSxVQUFBQyxDQUFBO0FBQUEsVUFBQUMsQ0FBQSxHQUFBLEVBQUE7O0FBQUEsV0FBQUYsQ0FBQSxJQUFBVCxDQUFBO0FBQUFpQixRQUFBQSxDQUFBLENBQUFvQixJQUFBLENBQUFyQyxDQUFBLEVBQUFTLENBQUEsS0FBQUUsQ0FBQSxDQUFBc0MsSUFBQSxDQUFBeEMsQ0FBQSxDQUFBO0FBQUE7O0FBQUEsVUFBQVMsQ0FBQSxFQUFBLEtBQUFSLENBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUEsR0FBQVUsQ0FBQSxFQUFBVixDQUFBLEVBQUE7QUFBQU8sUUFBQUEsQ0FBQSxDQUFBb0IsSUFBQSxDQUFBckMsQ0FBQSxFQUFBbUIsQ0FBQSxDQUFBVCxDQUFBLENBQUEsS0FBQUMsQ0FBQSxDQUFBc0MsSUFBQSxDQUFBOUIsQ0FBQSxDQUFBVCxDQUFBLENBQUEsQ0FBQTtBQUFBO0FBQUEsYUFBQUMsQ0FBQTtBQUFBLEtBQUEsQ0FBQSxDQUFBLEVBQUEsY0FBQSxPQUFBd0IsTUFBQSxDQUFBZSxNQUFBLEtBQUFmLE1BQUEsQ0FBQWUsTUFBQSxHQUFBLFVBQUFsRCxDQUFBLEVBQUE7QUFBQSxVQUFBLFFBQUFBLENBQUEsRUFBQSxNQUFBLElBQUFrQyxTQUFBLENBQUEsNENBQUEsQ0FBQTtBQUFBbEMsTUFBQUEsQ0FBQSxHQUFBbUMsTUFBQSxDQUFBbkMsQ0FBQSxDQUFBOztBQUFBLFdBQUEsSUFBQVMsQ0FBQSxHQUFBLENBQUEsRUFBQUEsQ0FBQSxHQUFBMkIsU0FBQSxDQUFBWCxNQUFBLEVBQUFoQixDQUFBLEVBQUEsRUFBQTtBQUFBLFlBQUFDLENBQUEsR0FBQTBCLFNBQUEsQ0FBQTNCLENBQUEsQ0FBQTtBQUFBLFlBQUEsUUFBQUMsQ0FBQSxFQUFBLEtBQUEsSUFBQUMsQ0FBQSxJQUFBRCxDQUFBO0FBQUF5QixVQUFBQSxNQUFBLENBQUE1QixTQUFBLENBQUF3QyxjQUFBLENBQUFWLElBQUEsQ0FBQTNCLENBQUEsRUFBQUMsQ0FBQSxNQUFBWCxDQUFBLENBQUFXLENBQUEsQ0FBQSxHQUFBRCxDQUFBLENBQUFDLENBQUEsQ0FBQTtBQUFBO0FBQUE7O0FBQUEsYUFBQVgsQ0FBQTtBQUFBLEtBQUEsQ0FBQSxFQUFBOEIsTUFBQSxDQUFBdkIsU0FBQSxDQUFBNEMsSUFBQSxLQUFBckIsTUFBQSxDQUFBdkIsU0FBQSxDQUFBNEMsSUFBQSxHQUFBLFlBQUE7QUFBQSxhQUFBLEtBQUFDLE9BQUEsQ0FBQSxZQUFBLEVBQUEsRUFBQSxDQUFBO0FBQUEsS0FBQSxDQUFBLEVBQUF0QixNQUFBLENBQUF2QixTQUFBLENBQUE4QyxRQUFBLEtBQUF2QixNQUFBLENBQUF2QixTQUFBLENBQUE4QyxRQUFBLEdBQUEsWUFBQTtBQUFBLGFBQUEsS0FBQUQsT0FBQSxDQUFBLE9BQUEsRUFBQSxFQUFBLENBQUE7QUFBQSxLQUFBLENBQUEsRUFBQXRCLE1BQUEsQ0FBQXZCLFNBQUEsQ0FBQStDLFNBQUEsS0FBQXhCLE1BQUEsQ0FBQXZCLFNBQUEsQ0FBQStDLFNBQUEsR0FBQSxZQUFBO0FBQUEsYUFBQSxLQUFBRixPQUFBLENBQUEsT0FBQSxFQUFBLEVBQUEsQ0FBQTtBQUFBLEtBQUEsQ0FBQSxFQUFBRyxNQUFBLENBQUFDLFNBQUEsR0FBQUQsTUFBQSxDQUFBQyxTQUFBLElBQUEsVUFBQXhELENBQUEsRUFBQTtBQUFBLGFBQUEsWUFBQSxPQUFBQSxDQUFBLElBQUF5RCxRQUFBLENBQUF6RCxDQUFBLENBQUEsSUFBQTBELElBQUEsQ0FBQUMsS0FBQSxDQUFBM0QsQ0FBQSxNQUFBQSxDQUFBO0FBQUEsS0FBQTtBQUFBLEdBQUEsQ0FBQSxlQUFBLE9BQUE0RCxJQUFBLElBQUFBLElBQUEsSUFBQSxlQUFBLE9BQUFDLE1BQUEsSUFBQUEsTUFBQSxJQUFBLGVBQUEsT0FBQUMsTUFBQSxJQUFBQSxNQUFBLElBQUFDLFFBQUEsQ0FBQSxpREFBQSxDQUFBLEVBQUEsSUFBQUEsUUFBQSxDQUFBLGFBQUEsQ0FBQSxFQUFBLENBQUE7O0FBQUEsTUFBQS9ELENBQUE7QUFBQSxNQUFBUyxDQUFBO0FBQUEsTUFBQUMsQ0FBQTtBQUFBLE1BQUFzRCxDQUFBO0FBQUEsTUFBQTlDLENBQUE7QUFBQSxNQUFBK0MsQ0FBQTtBQUFBLE1BQUFDLENBQUE7QUFBQSxNQUFBQyxDQUFBO0FBQUEsTUFBQUMsQ0FBQTtBQUFBLE1BQUFDLENBQUE7QUFBQSxNQUFBdkQsQ0FBQTtBQUFBLE1BQUFELENBQUE7QUFBQSxNQUFBSSxDQUFBO0FBQUEsTUFBQUUsQ0FBQTtBQUFBLE1BQUFDLENBQUE7QUFBQSxNQUFBQyxDQUFBO0FBQUEsTUFBQVYsQ0FBQTtBQUFBLE1BQUFDLENBQUE7QUFBQSxNQUFBMEQsQ0FBQTtBQUFBLE1BQUFDLENBQUE7QUFBQSxNQUFBQyxDQUFBO0FBQUEsTUFBQUMsQ0FBQTtBQUFBLE1BQUFDLENBQUE7QUFBQSxNQUFBQyxDQUFBO0FBQUEsTUFBQUMsQ0FBQTtBQUFBLE1BQUFDLENBQUE7QUFBQSxNQUFBQyxDQUFBO0FBQUEsTUFBQUMsQ0FBQTtBQUFBLE1BQUFDLENBQUE7QUFBQSxNQUFBQyxDQUFBO0FBQUEsTUFBQUMsQ0FBQTtBQUFBLE1BQUFDLENBQUE7QUFBQSxNQUFBQyxDQUFBO0FBQUEsTUFBQUMsQ0FBQTtBQUFBLE1BQUFDLENBQUE7QUFBQSxNQUFBQyxDQUFBO0FBQUEsTUFBQUMsQ0FBQTtBQUFBLE1BQUFDLENBQUE7QUFBQSxNQUFBQyxDQUFBO0FBQUEsTUFBQUMsQ0FBQTtBQUFBLE1BQUFDLENBQUE7QUFBQSxNQUFBQyxDQUFBO0FBQUEsTUFBQUMsQ0FBQTtBQUFBLE1BQUFDLENBQUE7QUFBQSxNQUFBQyxDQUFBO0FBQUEsTUFBQUMsQ0FBQTtBQUFBLE1BQUFDLENBQUE7QUFBQSxNQUFBQyxDQUFBO0FBQUEsTUFBQUMsQ0FBQTtBQUFBLE1BQUFDLENBQUE7QUFBQSxNQUFBQyxDQUFBO0FBQUEsTUFBQUMsQ0FBQTtBQUFBLE1BQUFDLENBQUE7QUFBQSxNQUFBQyxDQUFBO0FBQUEsTUFBQUMsRUFBQTtBQUFBLE1BQUFDLEVBQUE7QUFBQSxNQUFBQyxFQUFBO0FBQUEsTUFBQUMsRUFBQTtBQUFBLE1BQUFDLEVBQUE7QUFBQSxNQUFBQyxFQUFBO0FBQUEsTUFBQUMsRUFBQTtBQUFBLE1BQUFDLEVBQUE7QUFBQSxNQUFBQyxFQUFBLEdBQUEsVUFBQUMsRUFBQSxFQUFBO0FBQUEsYUFBQUMsRUFBQSxDQUFBdkcsQ0FBQSxFQUFBO0FBQUEsVUFBQSxhQUFBVixFQUFBLENBQUFVLENBQUEsQ0FBQSxFQUFBLE1BQUEsSUFBQXdHLEtBQUEsQ0FBQSw0REFBQSxDQUFBO0FBQUEsVUFBQXZHLENBQUEsR0FB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LFFBQUFBLEVBQUEsRUFBQSxDQUFBLE9BQUEsRUFBQSxPQUFBLENBQUE7QUFBQUMsUUFBQUEsRUFBQSxFQUFBLENBQUEsT0FBQSxFQUFBLE9BQUEsQ0FBQTtBQUFBQyxRQUFBQSxFQUFBLEVBQUEsQ0FBQSxPQUFBLEVBQUEsT0FBQSxDQUFBO0FBQUFDLFFBQUFBLEVBQUEsRUFBQSxDQUFBLE1BQUEsRUFBQSxPQUFBLENBQUE7QUFBQUMsUUFBQUEsRUFBQSxFQUFBLENBQUEsTUFBQSxFQUFBLE1BQUEsQ0FBQTtBQUFBQyxRQUFBQSxFQUFBLEVBQUEsQ0FBQSxNQUFBLEVBQUEsTUFBQSxDQUFBO0FBQUFDLFFBQUFBLEVBQUEsRUFBQSxDQUFBLE1BQUEsRUFBQSxNQUFBLENBQUE7QUFBQUMsUUFBQUEsRUFBQSxFQUFBLENBQUEsTUFBQSxFQUFBLE1BQUEsQ0FBQTtBQUFBQyxRQUFBQSxFQUFBLEVBQUEsQ0FBQSxLQUFBLEVBQUEsTUFBQSxDQUFBO0FBQUFDLFFBQUFBLEVBQUEsRUFBQSxDQUFBLE1BQUEsRUFBQSxLQUFBLENBQUE7QUFBQUMsUUFBQUEsR0FBQSxFQUFBLENBQUEsSUFBQSxFQUFBLE1BQUEsQ0FBQTtBQUFBQyxRQUFBQSxFQUFBLEVBQUEsQ0FBQSxPQUFBLEVBQUEsT0FBQSxDQUFBO0FBQUFDLFFBQUFBLEVBQUEsRUFBQSxDQUFBLE9BQUEsRUFBQSxPQUFBLENBQUE7QUFBQUMsUUFBQUEsRUFBQSxFQUFBLENBQUEsT0FBQSxFQUFBLE9BQUEsQ0FBQTtBQUFBQyxRQUFBQSxFQUFBLEVBQUEsQ0FBQSxPQUFBLEVBQUEsT0FBQSxDQUFBO0FBQUFDLFFBQUFBLEVBQUEsRUFBQSxDQUFBLE1BQUEsRUFBQSxPQUFBLENBQUE7QUFBQUMsUUFBQUEsRUFBQSxFQUFBLENBQUEsS0FBQSxFQUFBLE1BQUEsQ0FBQTtBQUFBQyxRQUFBQSxFQUFBLEVBQUEsQ0FBQSxNQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUFDLFFBQUFBLEVBQUEsRUFBQSxDQUFBLE1BQUEsRUFBQSxNQUFBLENBQUE7QUFBQUMsUUFBQUEsRUFBQSxFQUFBLENBQUEsTUFBQSxFQUFBLE1BQUEsQ0FBQTtBQUFBQyxRQUFBQSxFQUFBLEVBQUEsQ0FBQSxNQUFBLEVBQUEsTUFBQSxDQUFBO0FBQUFDLFFBQUFBLEdBQUEsRUFBQSxDQUFBLEtBQUEsRUFBQSxNQUFBLENBQUE7QUFBQUMsUUFBQUEsRUFBQSxFQUFBLENBQUEsT0FBQSxFQUFBLE9BQUEsQ0FBQTtBQUFBQyxRQUFBQSxFQUFBLEVBQUEsQ0FBQSxPQUFBLEVBQUEsT0FBQSxDQUFBO0FBQUFDLFFBQUFBLEVBQUEsRUFBQSxDQUFBLE9BQUEsRUFBQSxPQUFBLENBQUE7QUFBQUMsUUFBQUEsRUFBQSxFQUFBLENBQUEsTUFBQSxFQUFBLE9BQUEsQ0FBQTtBQUFBQyxRQUFBQSxFQUFBLEVBQUEsQ0FBQSxNQUFBLEVBQUEsTUFBQSxDQUFBO0FBQUFDLFFBQUFBLEVBQUEsRUFBQSxDQUFBLE1BQUEsRUFBQSxNQUFBLENBQUE7QUFBQUMsUUFBQUEsRUFBQSxFQUFBLENBQUEsTUFBQSxFQUFBLE1BQUEsQ0FBQTtBQUFBQyxRQUFBQSxFQUFBLEVBQUEsQ0FBQSxNQUFBLEVBQUEsTUFBQSxDQUFBO0FBQUFDLFFBQUFBLEVBQUEsRUFBQSxDQUFBLE1BQUEsRUFBQSxNQUFBLENBQUE7QUFBQUMsUUFBQUEsRUFBQSxFQUFBLENBQUEsTUFBQSxFQUFBLE1BQUEsQ0FBQTtBQUFBQyxRQUFBQSxHQUFBLEVBQUEsQ0FBQSxLQUFBLEVBQUEsTUFBQSxDQUFBO0FBQUFDLFFBQUFBLEVBQUEsRUFBQSxDQUFBLE1BQUEsRUFBQSxNQUFBLENBQUE7QUFBQUMsUUFBQUEsTUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQ0FBQTtBQUFBLDZCQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQ0FBQTtBQUFBQyxRQUFBQSxLQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsSUFBQSxDQUFBO0FBQUEsd0JBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxDQUFBO0FBQUFDLFFBQUFBLE1BQUEsRUFBQSxDQUFBLElBQUEsRUFBQSxHQUFB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QUEsQ0FBQSxFQUFBRSxDQUFBLEdBQUEsSUFBQXVNLFVBQUEsQ0FBQXhNLENBQUEsQ0FBQSxFQUFBRCxDQUFBLEVBQUE7QUFBQUUsVUFBQUEsQ0FBQSxDQUFBRixDQUFBLENBQUEsR0FBQVQsQ0FBQSxDQUFBdUIsVUFBQSxDQUFBZCxDQUFBLENBQUE7QUFBQTs7QUFBQSxlQUFBQyxDQUFBO0FBQUEsT0FBQTtBQUFBLFVBQUE2RSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFdBQUEsRUFBQSxXQUFBLEVBQUEsUUFBQSxFQUFBLGlCQUFBLENBQUEsRUFBQSxDQUFBLGdCQUFBLEVBQUEsV0FBQSxFQUFBLE1BQUEsRUFBQSxpQkFBQSxDQUFBLEVBQUEsQ0FBQSxtQkFBQSxFQUFBLFdBQUEsRUFBQSxRQUFBLEVBQUEsaUJBQUEsQ0FBQSxFQUFBLENBQUEsdUJBQUEsRUFBQSxXQUFBLEVBQUEsWUFBQSxFQUFBLGlCQUFBLENBQUEsRUFBQSxDQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxFQUFBLGlCQUFBLENBQUEsRUFBQSxDQUFBLGNBQUEsRUFBQSxTQUFBLEVBQUEsTUFBQSxFQUFBLGlCQUFBLENBQUEsRUFBQSxDQUFBLGlCQUFBLEVBQUEsU0FBQSxFQUFBLFFBQUEsRUFBQSxpQkFBQSxDQUFBLEVBQUEsQ0FBQSxxQkFBQSxFQUFBLFNBQUEsRUFBQSxZQUFBLEVBQUEsaUJBQUEsQ0FBQSxFQUFBLENBQUEsYUFBQSxFQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUEsaUJBQUEsQ0FBQSxFQUFBLENBQUEsWUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsaUJBQUEsQ0FBQSxFQUFBLENBQUEsY0FBQSxFQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUEsaUJBQUEsQ0FBQSxFQUFBLENBQUEsa0JBQUEsRUFBQSxPQUFBLEVBQUEsWUFBQSxFQUFBLGlCQUFBLENBQUEsRUFBQSxDQUFBLGNBQUEsRUFBQSxjQUFBLEVBQUEsUUFBQSxFQUFBLElBQUEsQ0FBQSxFQUFBLENBQUEsUUFBQSxFQUFBLFFBQUEsRUFBQSxRQUFBLEVB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QUFBQSxlQUFBK0YsRUFBQSxDQUFBLENBQUFILENBQUEsQ0FBQThTLEVBQUEsQ0FBQXJaLENBQUEsR0FBQVUsQ0FBQSxDQUFBLENBQUEsRUFBQTZGLENBQUEsQ0FBQStTLEVBQUEsQ0FBQTdZLENBQUEsQ0FBQSxDQUFBLEVBQUEsR0FBQSxFQUFBOEYsQ0FBQSxDQUFBOFMsRUFBQSxDQUFBclosQ0FBQSxHQUFBVSxDQUFBLENBQUEsQ0FBQSxFQUFBNkYsQ0FBQSxDQUFBK1MsRUFBQSxDQUFBN1ksQ0FBQSxHQUFBSyxDQUFBLENBQUEsQ0FBQSxFQUFBeUYsQ0FBQSxDQUFBOFMsRUFBQSxDQUFBclosQ0FBQSxHQUFBYSxDQUFBLENBQUEsQ0FBQSxFQUFBMEYsQ0FBQSxDQUFBK1MsRUFBQSxDQUFBN1ksQ0FBQSxHQUFBRSxDQUFBLENBQUEsQ0FBQSxFQUFBNEYsQ0FBQSxDQUFBOFMsRUFBQSxDQUFBclosQ0FBQSxDQUFBLENBQUEsRUFBQXVHLENBQUEsQ0FBQStTLEVBQUEsQ0FBQTdZLENBQUEsR0FBQUUsQ0FBQSxDQUFBLENBQUEsRUFBQSxHQUFBLEVBQUFlLElBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBZ0YsRUFBQSxDQUFBLENBQUFILENBQUEsQ0FBQThTLEVBQUEsQ0FBQXJaLENBQUEsR0FBQWEsQ0FBQSxDQUFBLENBQUEsRUFBQTBGLENBQUEsQ0FBQStTLEVBQUEsQ0FBQTdZLENBQUEsR0FBQUUsQ0FBQSxDQUFBLENBQUEsRUFBQTRGLENBQUEsQ0FBQThTLEVBQUEsQ0FBQXJaLENBQUEsR0FBQVUsQ0FBQSxDQUFBLENBQUEsRUFBQTZGLENBQUEsQ0FBQStTLEVBQUEsQ0FBQTdZLENBQUEsR0FBQUssQ0FBQSxDQUFBLENBQUEsRUFBQXlGLENBQUEsQ0FBQThTLEVBQUEsQ0FBQXJaLENBQUEsR0FBQVUsQ0FBQSxDQUFBLENBQUEsRUFBQTZGLENBQUEsQ0FBQStTLEVBQUEsQ0FBQTdZLENBQUEsQ0FBQSxDQUFBLEVBQUEsR0FBQSxFQUFBaUIsSUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUFn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QUFBQSxJQUFBLEVBQUEsQ0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxLQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsS0FBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsQ0FBQTtBQUFBQyxNQUFBQSxRQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsQ0FBQTtBQUFBQyxNQUFBQSxNQUFBLEVBQUEsQ0FBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLENBQUE7QUFBQUMsTUFBQUEsTUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxDQUFBO0FBQUFDLE1BQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQTtBQUFBLEtBQUE7QUFBQSxRQUFBNWxCLENBQUEsR0FBQTBELENBQUEsQ0FBQW1pQiwyQkFBQSxHQUFBLFVBQUFobkIsQ0FBQSxFQUFBUyxDQUFBLEVBQUE7QUFBQSxVQUFBQyxDQUFBLEVBQUFDLENBQUE7QUFBQUYsTUFBQUEsQ0FBQSxHQUFBQSxDQUFBLElBQUEsU0FBQTtBQUFBLFVBQUFHLENBQUE7QUFBQSxVQUFBQyxDQUFBO0FBQUEsVUFBQUMsQ0FBQTtBQUFBLFVBQUFHLENBQUEsR0FBQSxTQUFBOztBQUFBLFdBQUFILENBQUEsSUFBQStELENBQUEsQ0FBQW9pQixpQkFBQSxDQUFBam5CLENBQUEsTUFBQUEsQ0FBQSxHQUFBNkUsQ0FBQSxDQUFBcWlCLHlCQUFBLENBQUFsbkIsQ0FBQSxDQUFBLEdBQUFrQixDQUFBO0FBQUEsYUFBQU4sQ0FBQSxHQUFBTSxDQUFBLENBQUFKLENBQUEsQ0FBQSxFQUFBSixDQUFBLEdBQUEsQ0FBQSxFQUFBQSxDQUFBLEdBQUFFLENBQUEsQ0FBQWEsTUFBQSxFQUFBZixDQUFBLElBQUEsQ0FBQSxFQUFBO0FBQUEsZUFBQUcsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBRixDQUFBLEdBQUEsQ0FBQSxFQUFBQSxDQUFBLEdBQUFDLENBQUEsQ0FBQUYsQ0FBQSxDQUFBLENBQUFlLE1BQUEsRUFBQWQsQ0FBQSxJQUFBLENBQUE7QUFBQSxnQkFBQSxLQUFBLENBQUEsS0FBQUMsQ0FBQSxDQUFBRixDQUFBLENBQUEsQ0FBQUMsQ0FBQSxDQUFBLElBQUFDLENBQUEsQ0FBQUYsQ0FBQSxDQUFBLENBQUFDLENBQUEsTUFBQVgsQ0FBQSxDQUFBdUIsVUFBQSxDQUFBWixDQUFBLENBQUEsRUFBQTtBQUFBRSxjQUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLGNBQUEsQ0FBQSxDQUFBLEtBQUFBLENBQUEsRUFBQTtBQUFBSSxZQUFBQSxDQUFBLEdBQUFILENBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQSxhQUFBLGNBQUFHLENBQUEsSUFBQSxjQUFBUixDQUFBLEtBQUFELE9BQUEsQ0FBQThTLElBQUEsQ0FBQSw0REFBQTdTLENBQUEsR0FBQSxJQUFBLEdBQUFRLENBQUEsR0FBQVIsQ0FBQSxHQUFBUSxDQUFBO0FBQUEsS0FBQTtBQUFBLFFBQUFQLENBQUEsR0FBQSxTQUFBVixDQUFBLENBQUFTLENBQUEsRUFBQTtBQUFBLFdBQUEsSUFBQUMsQ0FBQSxHQUFBLEtBQUErSCxRQUFBLENBQUFtRyxTQUFBLEVBQUEsRUFBQWpPLENBQUEsR0FBQSxLQUFBOEgsUUFBQSxDQUFBc0UsS0FBQSxFQUFBbk0sQ0FBQSxHQUFBLEtBQUE2SCxRQUFBLENBQUF5SCxTQUFBLEVBQUFyUCxDQUFBLEdBQUEsQ0FBQSxHQUFBLEtBQUE0SCxRQUFBLENBQUF1SCxVQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsS0FBQW5QLENBQUEsQ0FBQWdCLE9BQUEsQ0FBQSxhQUFBLENBQUE7QUFBQWhCLFFBQUFBLENBQUEsQ0FBQXNXLE1BQUEsQ0FBQXRXLENBQUEsQ0FBQWdCLE9BQUEsQ0FBQSxhQUFBLENBQUEsRUFBQSxDQUFBO0FBQUE7O0FBQUFwQixNQUFBQSxDQUFBLENBQUFDLENBQUEsR0FBQUEsQ0FBQTtBQUFBLFVBQUFJLENBQUEsR0FBQSxFQUFBOztBQUFBLFVBQUFBLENBQUEsQ0FBQW1DLElBQUEsQ0FBQTtBQUFBeU4sUUFBQUEsR0FBQSxFQUFBLE1BQUE7QUFBQS9OLFFBQUFBLEtBQUEsRUFBQTtBQUFBLE9BQUEsR0FBQTdCLENBQUEsQ0FBQW1DLElBQUEsQ0FBQTtBQUFBeU4sUUFBQUEsR0FBQSxFQUFBLFNBQUE7QUFBQS9OLFFBQUFBLEtBQUEsRUFBQTtBQUFBLE9BQUEsQ0FBQSxFQUFBN0IsQ0FBQSxDQUFBbUMsSUFBQSxDQUFBO0FBQUF5TixRQUFBQSxHQUFBLEVBQUEsT0FBQTtBQUFBL04sUUFBQUEsS0FBQSxFQUFBbEMsQ0FBQSxDQUFBa0U7QUFBQSxPQUFBLENBQUEsRUFBQTdELENBQUEsQ0FBQW1DLElBQUEsQ0FBQTtBQUFBeU4sUUFBQUEsR0FBQSxFQUFBLFFBQUE7QUFBQS9OLFFBQUFBLEtBQUEsRUFBQWxDLENBQUEsQ0FBQVU7QUFBQSxPQUFBLENBQUEsRUFBQVYsQ0FBQSxDQUFBMG1CLEVBQUEsS0FBQSxLQUFBQyxZQUFBLENBQUFDLE9BQUEsR0FBQXZtQixDQUFBLENBQUFtQyxJQUFBLENBQUE7QUFBQXlOLFFBQUFBLEdBQUEsRUFBQSxZQUFBO0FBQUEvTixRQUFBQSxLQUFBLEVBQUEsMkJBQUFsQyxDQUFBLENBQUE2bUIsR0FBQSxDQUFBN2xCLE1BQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxJQUFBLEdBQUEsSUFBQSxXQUFBaEIsQ0FBQSxHQUFBQyxDQUFBLEdBQUEsQ0FBQSxHQUFBQSxDQUFBLEdBQUEsQ0FBQSxJQUFBO0FBQUEsT0FBQSxDQUFBLElBQUFJLENBQUEsQ0FBQW1DLElBQUEsQ0FBQTtBQUFBeU4sUUFBQUEsR0FBQSxFQUFBLFlBQUE7QUFBQS9OLFFBQUFBLEtBQUEsRUFBQSxNQUFBbEMsQ0FBQSxDQUFBMG1CO0FBQUEsT0FBQSxHQUFBMW1CLENBQUEsQ0FBQTBtQixFQUFBLEtBQUEsS0FBQUMsWUFBQSxDQUFBRyxXQUFBLElBQUF6bUIsQ0FBQSxDQUFBbUMsSUFBQSxDQUFBO0FBQUF5TixRQUFBQSxHQUFBLEVBQUEsUUFBQTtBQUFBL04sUUFBQUEsS0FBQSxFQUFBO0FBQUEsT0FBQSxDQUFBLENBQUEsRUFBQTdCLENBQUEsQ0FBQW1DLElBQUEsQ0FBQTtBQUFBeU4sUUFBQUEsR0FBQSxFQUFBLGtCQUFBO0FBQUEvTixRQUFBQSxLQUFBLEVBQUFsQyxDQUFBLENBQUErbUI7QUFBQSxPQUFBLENBQUEsRUFBQSxRQUFBL21CLENBQUEsSUFBQUssQ0FBQSxDQUFBbUMsSUFBQSxDQUFBO0FBQUF5TixRQUFBQSxHQUFBLEVBQUEsYUFBQTtBQUFBL04sUUFBQUEsS0FBQSxFQUFBLE9BQUFsQyxDQUFBLENBQUFnbkIsRUFBQSxHQUFBO0FBQUEsT0FBQSxDQUFBLEVBQUEsVUFBQWhuQixDQUFBLElBQUFBLENBQUEsQ0FBQWluQixJQUFBLENBQUFwbkIsV0FBQSxJQUFBMEIsS0FBQSxFQUFBO0FBQUEsYUFBQSxJQUFBZixDQUFBLEdBQUEsRUFBQSxFQUFBQyxDQUFBLEdBQUEsQ0FBQSxFQUFBQyxDQUFBLEdBQUFWLENBQUEsQ0FBQWluQixJQUFBLENBQUFqbUIsTUFBQSxFQUFBUCxDQUFBLEdBQUFDLENBQUEsRUFBQUQsQ0FBQSxFQUFBO0FBQUFELFVBQUFBLENBQUEsSUFBQVIsQ0FBQSxDQUFBaW5CLElBQUEsQ0FBQXhtQixDQUFBLElBQUEsR0FBQSxHQUFBVCxDQUFBLENBQUFpbkIsSUFBQSxDQUFBeG1CLENBQUEsQ0FBQSxHQUFBLEdBQUE7QUFBQTs7QUFBQUosUUFBQUEsQ0FBQSxDQUFBbUMsSUFBQSxDQUFBO0FBQUF5TixVQUFBQSxHQUFBLEVBQUEsTUFBQTtBQUFBL04sVUFBQUEsS0FBQSxFQUFBLE1BQUExQixDQUFBLEdBQUE7QUFBQSxTQUFBO0FBQUE7O0FBQUEsaUJBQUFSLENBQUEsSUFBQUssQ0FBQSxDQUFBbUMsSUFBQSxDQUFBO0FBQUF5TixRQUFBQSxHQUFBLEVBQUEsT0FBQTtBQUFBL04sUUFBQUEsS0FBQSxFQUFBakMsQ0FBQSxHQUFBLENBQUEsR0FBQTtBQUFBLE9BQUEsQ0FBQTtBQUFBLFVBQUFVLENBQUEsR0FBQSxLQUFBLENBQUEsS0FBQVgsQ0FBQSxDQUFBNkQsQ0FBQSxHQUFBLENBQUEsTUFBQTdELENBQUEsQ0FBQTZELENBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQTs7QUFBQSxVQUFBMUQsQ0FBQSxDQUFBO0FBQUF1UCxRQUFBQSxJQUFBLEVBQUExUCxDQUFBLENBQUEwUCxJQUFBO0FBQUFHLFFBQUFBLG1CQUFBLEVBQUF4UCxDQUFBO0FBQUFzUCxRQUFBQSxxQkFBQSxFQUFBaFA7QUFBQSxPQUFBLENBQUEsRUFBQVQsQ0FBQSxDQUFBLFFBQUEsQ0FBQSxFQUFBLFdBQUFGLENBQUEsRUFBQTtBQUFBLFlBQUFZLENBQUEsR0FBQSxnQkFBQVosQ0FBQSxDQUFBMEQsQ0FBQSxHQUFBLCtCQUFBLEdBQUExRCxDQUFBLENBQUErbUIsR0FBQSxHQUFBLFlBQUEsR0FBQS9tQixDQUFBLENBQUFrRSxDQUFBO0FBQUEsWUFBQUwsQ0FBQSxHQUFBO0FBQUFLLFVBQUFBLENBQUEsRUFBQWxFLENBQUEsQ0FBQWtFLENBQUE7QUFBQXhELFVBQUFBLENBQUEsRUFBQVYsQ0FBQSxDQUFBVSxDQUFBO0FBQUFnbUIsVUFBQUEsRUFBQSxFQUFBLFlBQUE7QUFBQUssVUFBQUEsR0FBQSxFQUFBL21CLENBQUEsQ0FBQSttQixHQUFBO0FBQUFDLFVBQUFBLEVBQUEsRUFBQXBtQixDQUFBO0FBQUE4TyxVQUFBQSxJQUFBLEVBQUExUCxDQUFBLENBQUFrbkI7QUFBQSxTQUFBO0FBQUEsZUFBQWxuQixDQUFBLEtBQUE2RCxDQUFBLENBQUFBLENBQUEsR0FBQTdELENBQUEsQ0FBQTZELENBQUEsR0FBQXRFLENBQUEsQ0FBQXFDLElBQUEsQ0FBQSxJQUFBLEVBQUFpQyxDQUFBLENBQUE7QUFBQTs7QUFBQTdELE1BQUFBLENBQUEsQ0FBQTBtQixFQUFBLEtBQUEsS0FBQUMsWUFBQSxDQUFBQyxPQUFBLEtBQUEsS0FBQTVlLFFBQUEsQ0FBQW1HLFNBQUEsSUFBQWhPLENBQUEsQ0FBQTtBQUFBdVAsUUFBQUEsSUFBQSxFQUFBLEtBQUErVyx5QkFBQSxDQUFBLElBQUFoYSxVQUFBLENBQUF6TSxDQUFBLENBQUE2bUIsR0FBQSxDQUFBO0FBQUEsT0FBQSxDQUFBLEVBQUEzbUIsQ0FBQSxDQUFBLFFBQUEsQ0FBQTtBQUFBLEtBQUE7QUFBQSxRQUFBdUUsQ0FBQSxHQUFBLFNBQUFBLENBQUEsR0FBQTtBQUFBLFVBQUFsRixDQUFBLEdBQUEsS0FBQXlJLFFBQUEsQ0FBQTZWLFdBQUEsQ0FBQXJaLENBQUEsR0FBQSxRQUFBLENBQUE7O0FBQUEsV0FBQSxJQUFBeEUsQ0FBQSxJQUFBVCxDQUFBO0FBQUFVLFFBQUFBLENBQUEsQ0FBQTJCLElBQUEsQ0FBQSxJQUFBLEVBQUFyQyxDQUFBLENBQUFTLENBQUEsQ0FBQTtBQUFBO0FBQUEsS0FBQTtBQUFBLFFBQUEwRSxDQUFBLEdBQUEsU0FBQUEsQ0FBQSxHQUFBO0FBQUEsVUFBQW5GLENBQUE7QUFBQSxVQUFBUyxDQUFBLEdBQUEsS0FBQWdJLFFBQUEsQ0FBQTZWLFdBQUEsQ0FBQXJaLENBQUEsR0FBQSxRQUFBLENBQUE7QUFBQSxVQUFBdkUsQ0FBQSxHQUFBLEtBQUErSCxRQUFBLENBQUFzRSxLQUFBOztBQUFBLFdBQUEsSUFBQXBNLENBQUEsSUFBQUYsQ0FBQTtBQUFBQyxRQUFBQSxDQUFBLENBQUEsT0FBQSxDQUFBVixDQUFBLEdBQUFTLENBQUEsQ0FBQUUsQ0FBQSxDQUFBLEVBQUFDLENBQUEsRUFBQVosQ0FBQSxDQUFBVSxDQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsQ0FBQTtBQUFBO0FBQUEsS0FBQTtBQUFBLFFBQUEwRSxDQUFBLEdBQUEsU0FBQUEsQ0FBQSxDQUFBcEYsQ0FBQSxFQUFBO0FBQUEsYUFBQSxjQUFBLE9BQUE2RSxDQUFBLENBQUEsWUFBQTdFLENBQUEsQ0FBQXlVLFdBQUEsRUFBQSxDQUFBO0FBQUEsS0FBQTtBQUFBLFFBQUF6USxDQUFBLEdBQUEsU0FBQUEsQ0FBQSxDQUFBaEUsQ0FBQSxFQUFBO0FBQUEsYUFBQSxhQUFBRyxFQUFBLENBQUFILENBQUEsQ0FBQSxJQUFBLE1BQUFBLENBQUEsQ0FBQTRuQixRQUFBO0FBQUEsS0FBQTtBQUFBLFFBQUEzakIsQ0FBQSxHQUFBLFNBQUFBLENBQUEsQ0FBQWpFLENBQUEsRUFBQVMsQ0FBQSxFQUFBO0FBQUEsVUFBQSxVQUFBVCxDQUFBLENBQUE2bkIsUUFBQSxJQUFBN25CLENBQUEsQ0FBQThuQixZQUFBLENBQUEsS0FBQSxDQUFBLEVBQUE7QUFBQSxZQUFBcG5CLENBQUEsR0FBQSxLQUFBVixDQUFBLENBQUErbkIsWUFBQSxDQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsTUFBQXJuQixDQUFBLENBQUFtQixPQUFBLENBQUEsYUFBQSxDQUFBLEVBQUEsT0FBQW1tQixRQUFBLENBQUF0bkIsQ0FBQSxDQUFBO0FBQUEsWUFBQUMsQ0FBQSxHQUFBa0UsQ0FBQSxDQUFBb2pCLFFBQUEsQ0FBQXZuQixDQUFBLENBQUE7QUFBQSxZQUFBLEtBQUEsQ0FBQSxLQUFBQyxDQUFBLEVBQUEsT0FBQVcsSUFBQSxDQUFBWCxDQUFBLENBQUE7QUFBQTs7QUFBQSxVQUFBLGFBQUFYLENBQUEsQ0FBQTZuQixRQUFBLEVBQUE7QUFBQSxZQUFBam5CLENBQUEsR0FBQVosQ0FBQTtBQUFBLGVBQUFBLENBQUEsQ0FBQWtvQixTQUFBLENBQUEsWUFBQSxFQUFBLENBQUEsQ0FBQTtBQUFBOztBQUFBLE9BQUF0bkIsQ0FBQSxHQUFBbVYsUUFBQSxDQUFBb1MsYUFBQSxDQUFBLFFBQUEsQ0FBQSxFQUFBM0gsS0FBQSxHQUFBeGdCLENBQUEsQ0FBQW9vQixXQUFBLElBQUFwb0IsQ0FBQSxDQUFBd2dCLEtBQUEsRUFBQTVmLENBQUEsQ0FBQTZmLE1BQUEsR0FBQXpnQixDQUFBLENBQUFxb0IsWUFBQSxJQUFBcm9CLENBQUEsQ0FBQXlnQixNQUFBO0FBQUEsVUFBQTVmLENBQUEsR0FBQUQsQ0FBQSxDQUFBMG5CLFVBQUEsQ0FBQSxJQUFBLENBQUE7QUFBQSxVQUFBLENBQUF6bkIsQ0FBQSxFQUFBLE1BQUEsc0RBQUE7QUFBQSxhQUFBQSxDQUFBLENBQUEwbkIsU0FBQSxDQUFBdm9CLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBWSxDQUFBLENBQUE0ZixLQUFBLEVBQUE1ZixDQUFBLENBQUE2ZixNQUFBLEdBQUE3ZixDQUFBLENBQUFzbkIsU0FBQSxDQUFBLFNBQUEsQ0FBQSxLQUFBem5CLENBQUEsRUFBQThILFdBQUEsRUFBQSxHQUFBLFdBQUEsR0FBQSxZQUFBLENBQUE7QUFBQSxLQUFBO0FBQUEsUUFBQXJFLENBQUEsR0FBQSxTQUFBQSxDQUFBLENBQUFsRSxDQUFBLEVBQUFTLENBQUEsRUFBQTtBQUFBLFVBQUFDLENBQUE7QUFBQSxVQUFBRCxDQUFBLEVBQUEsS0FBQSxJQUFBRSxDQUFBLElBQUFGLENBQUE7QUFBQSxZQUFBVCxDQUFBLEtBQUFTLENBQUEsQ0FBQUUsQ0FBQSxDQUFBLENBQUE2bkIsS0FBQSxFQUFBO0FBQUE5bkIsVUFBQUEsQ0FBQSxHQUFBRCxDQUFBLENBQUFFLENBQUEsQ0FBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGFBQUFELENBQUE7QUFBQSxLQUFBOztBQUFBbUUsSUFBQUEsQ0FBQSxDQUFBdWlCLFlBQUEsR0FBQTtBQUFBcUIsTUFBQUEsVUFBQSxFQUFBLFdBQUE7QUFBQUMsTUFBQUEsV0FBQSxFQUFBLFlBQUE7QUFBQW5CLE1BQUFBLFdBQUEsRUFBQSxZQUFBO0FBQUFvQixNQUFBQSxRQUFBLEVBQUEsU0FBQTtBQUFBQyxNQUFBQSxPQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxHQUFBLEVBQUEsS0FBQTtBQUFBQyxNQUFBQSxTQUFBLEVBQUEsVUFBQTtBQUFBekIsTUFBQUEsT0FBQSxFQUFBLFNBQUE7QUFBQTBCLE1BQUFBLE9BQUEsRUFBQSxTQUFBO0FBQUFDLE1BQUFBLFVBQUEsRUFBQSxZQUFBO0FBQUFDLE1BQUFBLFFBQUEsRUFBQTtBQUFBLEtBQUEsRUFBQXBrQixDQUFBLENBQUFxa0IsTUFBQSxHQUFBO0FBQUFDLE1BQUFBLFVBQUEsRUFBQSxXQUFBO0FBQUFDLE1BQUFBLFlBQUEsRUFBQSxhQUFBO0FBQUFDLE1BQUFBLFVBQUEsRUFBQSxXQUFBO0FBQUFDLE1BQUFBLFVBQUEsRUFBQSxXQUFBO0FBQUFDLE1BQUFBLFlBQUEsRUFBQSxhQUFBO0FBQUFDLE1BQUFBLGNBQUEsRUFBQSxlQUFBO0FBQUFDLE1BQUFBLGdCQUFBLEVBQUEsZ0JBQUE7QUFBQUMsTUFBQUEsaUJBQUEsRUFBQSxpQkFBQTtBQUFBQyxNQUFBQSxnQkFBQSxFQUFBO0FBQUEsS0FBQSxFQUFBOWtCLENBQUEsQ0FBQStrQixpQkFBQSxHQUFBO0FBQUFDLE1BQUFBLElBQUEsRUFBQSxNQUFBO0FBQUFDLE1BQUFBLElBQUEsRUFBQSxNQUFBO0FBQUFDLE1BQUFBLE1BQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLElBQUEsRUFBQTtBQUFBLEtBQUEsRUFBQW5sQixDQUFBLENBQUFvbEIsU0FBQSxHQUFBLFVBQUFqcUIsQ0FBQSxFQUFBO0FBQUEsVUFBQVMsQ0FBQTtBQUFBLFVBQUFDLENBQUEsR0FBQSxDQUFBO0FBQUEsVUFBQSxNQUFBLENBQUFWLENBQUEsR0FBQUEsQ0FBQSxJQUFBLEVBQUEsRUFBQXlCLE1BQUEsRUFBQSxPQUFBZixDQUFBOztBQUFBLFdBQUFELENBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUEsR0FBQVQsQ0FBQSxDQUFBeUIsTUFBQSxFQUFBaEIsQ0FBQSxFQUFBO0FBQUFDLFFBQUFBLENBQUEsR0FBQSxDQUFBQSxDQUFBLElBQUEsQ0FBQSxJQUFBQSxDQUFBLEdBQUFWLENBQUEsQ0FBQXVCLFVBQUEsQ0FBQWQsQ0FBQSxDQUFBLEVBQUFDLENBQUEsSUFBQSxDQUFBO0FBQUE7O0FBQUEsYUFBQUEsQ0FBQTtBQUFBLEtBQUEsRUFBQW1FLENBQUEsQ0FBQXFsQixRQUFBLEdBQUEsVUFBQWxxQixDQUFBLEVBQUE7QUFBQSxhQUFBLFlBQUEsT0FBQUEsQ0FBQTtBQUFBLEtBQUEsRUFBQTZFLENBQUEsQ0FBQXNsQixzQkFBQSxHQUFBLFVBQUFucUIsQ0FBQSxFQUFBO0FBQUEsT0FBQUEsQ0FBQSxHQUFBQSxDQUFBLElBQUEsRUFBQSxFQUFBdUMsUUFBQSxHQUFBWSxJQUFBO0FBQUEsVUFBQTFDLENBQUEsR0FBQSxDQUFBLENBQUE7QUFBQSxhQUFBLE1BQUFULENBQUEsQ0FBQXlCLE1BQUEsS0FBQWhCLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQVQsQ0FBQSxDQUFBeUIsTUFBQSxHQUFBLENBQUEsSUFBQSxDQUFBLEtBQUFoQixDQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsS0FBQSxvQkFBQWdNLElBQUEsQ0FBQXpNLENBQUEsQ0FBQXNNLE1BQUEsQ0FBQSxDQUFBLEVBQUF0TSxDQUFBLENBQUF5QixNQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsS0FBQWhCLENBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxLQUFBLG1EQUFBZ00sSUFBQSxDQUFBek0sQ0FBQSxDQUFBc00sTUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsS0FBQTdMLENBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxFQUFBQSxDQUFBO0FBQUEsS0FBQSxFQUFBb0UsQ0FBQSxDQUFBdWxCLDRCQUFBLEdBQUEsVUFBQXBxQixDQUFBLEVBQUE7QUFBQSxhQUFBLDhDQUFBMGlCLElBQUEsQ0FBQTFpQixDQUFBLENBQUE7QUFBQSxLQUFBLEVBQUE2RSxDQUFBLENBQUF3bEIsdUJBQUEsR0FBQSxVQUFBcnFCLENBQUEsRUFBQTtBQUFBLFVBQUFTLENBQUEsR0FBQSxDQUFBVCxDQUFBLEdBQUFBLENBQUEsSUFBQSxFQUFBLEVBQUFlLEtBQUEsQ0FBQSxTQUFBLENBQUE7QUFBQSxVQUFBTCxDQUFBLEdBQUEsSUFBQTs7QUFBQSxVQUFBLE1BQUFELENBQUEsQ0FBQWdCLE1BQUEsRUFBQTtBQUFBLFlBQUFkLENBQUEsR0FBQSwwQ0FBQStoQixJQUFBLENBQUFqaUIsQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBO0FBQUF1QixRQUFBQSxLQUFBLENBQUFNLE9BQUEsQ0FBQTNCLENBQUEsTUFBQUQsQ0FBQSxHQUFBO0FBQUE0cEIsVUFBQUEsUUFBQSxFQUFBM3BCLENBQUEsQ0FBQSxDQUFBLENBQUE7QUFBQTRwQixVQUFBQSxPQUFBLEVBQUE1cEIsQ0FBQSxDQUFBLENBQUEsQ0FBQTtBQUFBd1AsVUFBQUEsSUFBQSxFQUFBMVAsQ0FBQSxDQUFBLENBQUE7QUFBQSxTQUFBO0FBQUE7O0FBQUEsYUFBQUMsQ0FBQTtBQUFBLEtBQUEsRUFBQW1FLENBQUEsQ0FBQTJsQixtQkFBQSxHQUFBLFlBQUE7QUFBQSxhQUFBLGVBQUEsT0FBQXZkLFdBQUEsSUFBQSxlQUFBLE9BQUFDLFVBQUE7QUFBQSxLQUFBLEVBQUFySSxDQUFBLENBQUE0bEIsYUFBQSxHQUFBLFVBQUF6cUIsQ0FBQSxFQUFBO0FBQUEsYUFBQSxDQUFBLENBQUEsS0FBQXdxQixtQkFBQSxFQUFBLElBQUF4cUIsQ0FBQSxZQUFBaU4sV0FBQTtBQUFBLEtBQUEsRUFBQXBJLENBQUEsQ0FBQW9pQixpQkFBQSxHQUFBLFVBQUFqbkIsQ0FBQSxFQUFBO0FBQUEsYUFBQSxDQUFBLENBQUEsS0FBQXdxQixtQkFBQSxFQUFBLElBQUEsZUFBQSxPQUFBRSxXQUFBLEtBQUExcUIsQ0FBQSxZQUFBMnFCLFNBQUEsSUFBQTNxQixDQUFBLFlBQUFrTixVQUFBLElBQUEsZUFBQSxPQUFBMGQsaUJBQUEsSUFBQTVxQixDQUFBLFlBQUE0cUIsaUJBQUEsSUFBQTVxQixDQUFBLFlBQUE2cUIsVUFBQSxJQUFBN3FCLENBQUEsWUFBQThxQixXQUFBLElBQUE5cUIsQ0FBQSxZQUFBK3FCLFVBQUEsSUFBQS9xQixDQUFBLFlBQUEwcUIsV0FBQSxJQUFBMXFCLENBQUEsWUFBQWdyQixZQUFBLElBQUFockIsQ0FBQSxZQUFBaXJCLFlBQUEsQ0FBQTtBQUFBLEtBQUEsRUFBQXBtQixDQUFBLENBQUFxbUIsd0JBQUEsR0FBQSxVQUFBbHJCLENBQUEsRUFBQTtBQUFBLFdBQUEsSUFBQVMsQ0FBQSxHQUFBVCxDQUFBLENBQUF5QixNQUFBLEVBQUFmLENBQUEsR0FBQSxJQUFBd00sVUFBQSxDQUFBek0sQ0FBQSxDQUFBLEVBQUFFLENBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUEsR0FBQUYsQ0FBQSxFQUFBRSxDQUFBLEVBQUE7QUFBQUQsUUFBQUEsQ0FBQSxDQUFBQyxDQUFBLENBQUEsR0FBQVgsQ0FBQSxDQUFBdUIsVUFBQSxDQUFBWixDQUFBLENBQUE7QUFBQTs7QUFBQSxhQUFBRCxDQUFBO0FBQUEsS0FBQSxFQUFBbUUsQ0FBQSxDQUFBcWlCLHlCQUFBLEdBQUEsVUFBQWxuQixDQUFBLEVBQUE7QUFBQSxVQUFBLGNBQUEsT0FBQTRCLElBQUEsRUFBQSxPQUFBQSxJQUFBLENBQUEsS0FBQXVwQixtQkFBQSxDQUFBbnJCLENBQUEsQ0FBQSxDQUFBO0FBQUEsS0FBQSxFQUFBNkUsQ0FBQSxDQUFBc21CLG1CQUFBLEdBQUEsVUFBQW5yQixDQUFBLEVBQUE7QUFBQSxXQUFBLElBQUFTLENBQUEsRUFBQUMsQ0FBQSxHQUFBLEVBQUEsRUFBQUMsQ0FBQSxHQUFBLGtFQUFBLEVBQUFDLENBQUEsR0FBQSxJQUFBc00sVUFBQSxDQUFBbE4sQ0FBQSxDQUFBLEVBQUFhLENBQUEsR0FBQUQsQ0FBQSxDQUFBd3FCLFVBQUEsRUFBQXRxQixDQUFBLEdBQUFELENBQUEsR0FBQSxDQUFBLEVBQUFJLENBQUEsR0FBQUosQ0FBQSxHQUFBQyxDQUFBLEVBQUFJLENBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUEsR0FBQUQsQ0FBQSxFQUFBQyxDQUFBLElBQUEsQ0FBQTtBQUFBUixRQUFBQSxDQUFBLElBQUFDLENBQUEsQ0FBQSxDQUFBLFlBQUFGLENBQUEsR0FBQUcsQ0FBQSxDQUFBTSxDQUFBLENBQUEsSUFBQSxFQUFBLEdBQUFOLENBQUEsQ0FBQU0sQ0FBQSxHQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQU4sQ0FBQSxDQUFBTSxDQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsS0FBQSxFQUFBLENBQUEsR0FBQVAsQ0FBQSxDQUFBLENBQUEsU0FBQUYsQ0FBQSxLQUFBLEVBQUEsQ0FBQSxHQUFBRSxDQUFBLENBQUEsQ0FBQSxPQUFBRixDQUFBLEtBQUEsQ0FBQSxDQUFBLEdBQUFFLENBQUEsQ0FBQSxLQUFBRixDQUFBLENBQUE7QUFBQTs7QUFBQSxhQUFBLEtBQUFLLENBQUEsR0FBQUosQ0FBQSxJQUFBQyxDQUFBLENBQUEsQ0FBQSxPQUFBRixDQUFBLEdBQUFHLENBQUEsQ0FBQUssQ0FBQSxDQUFBLENBQUEsS0FBQSxDQUFBLENBQUEsR0FBQU4sQ0FBQSxDQUFBLENBQUEsSUFBQUYsQ0FBQSxLQUFBLENBQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxLQUFBSyxDQUFBLEtBQUFKLENBQUEsSUFBQUMsQ0FBQSxDQUFBLENBQUEsU0FBQUYsQ0FBQSxHQUFBRyxDQUFBLENBQUFLLENBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQUwsQ0FBQSxDQUFBSyxDQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsS0FBQSxFQUFBLENBQUEsR0FBQU4sQ0FBQSxDQUFBLENBQUEsT0FBQUYsQ0FBQSxLQUFBLENBQUEsQ0FBQSxHQUFBRSxDQUFBLENBQUEsQ0FBQSxLQUFBRixDQUFBLEtBQUEs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QUE7QUFBQSxjQUFBLFFBQUFySCxDQUFBLENBQUF1QixVQUFBLENBQUFaLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxRQUFBWCxDQUFBLENBQUF1QixVQUFBLENBQUFaLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxRQUFBWCxDQUFBLENBQUF1QixVQUFBLENBQUFaLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxRQUFBWCxDQUFBLENBQUF1QixVQUFBLENBQUFaLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxRQUFBWCxDQUFBLENBQUF1QixVQUFBLENBQUFaLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxRQUFBWCxDQUFBLENBQUF1QixVQUFBLENBQUFaLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxRQUFBWCxDQUFBLENBQUF1QixVQUFBLENBQUFaLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxRQUFBWCxDQUFBLENBQUF1QixVQUFBLENBQUFaLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxPQUFBRixDQUFBLEdBQUEsTUFBQVQsQ0FBQSxDQUFBdUIsVUFBQSxDQUFBWixDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUFYLENBQUEsQ0FBQXVCLFVBQUEsQ0FBQVosQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsTUFBQVgsQ0FBQSxDQUFBdUIsVUFBQSxDQUFBWixDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUFYLENBQUEsQ0FBQXVCLFVBQUEsQ0FBQVosQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBRixDQUFBLEVBQUFULENBQUEsQ0FBQXVCLFVBQUEsQ0FBQVosQ0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBO0FBQUFBLFVBQUFBLENBQUEsSUFBQSxDQUFBLEVBQUFELENBQUEsR0FBQSxNQUFBVixDQUFBLENBQUF1QixVQUFBLENBQUFaLENBQUEsQ0FBQSxHQUFBWCxDQUFBLENBQUF1QixVQUFBLENBQUFaLENBQUEsR0FBQSxDQUFBLENBQUE7QUFBQTtBQUFBLE9BQUEsQ0FBQVgsQ0FBQSxDQUFBLEdBQUEs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O0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLENBQUE7QUFBQSxZQUFBLENBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUEsWUFBQSxDQUFBLEtBQUEsRUFBQSxLQUFBO0FBQUEsS0FBQTtBQUFBLFFBQUFMLENBQUEsR0FBQTtBQUFBLGFBQUE7QUFBQSxlQUFBLEtBQUE7QUFBQSxlQUFBLEtBQUE7QUFBQSxlQUFBLEtBQUE7QUFBQSxlQUFBO0FBQUEsT0FBQTtBQUFBLGFBQUE7QUFBQSxlQUFBLEtBQUE7QUFBQSxlQUFBLEtBQUE7QUFBQSxlQUFBLEtBQUE7QUFBQSxlQUFBO0FBQUEsT0FBQTtBQUFBLGFBQUE7QUFBQSxlQUFBO0FBQUEsaUJB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cnZCLENBQUEsRUFBQVMsQ0FBQSxFQUFBO0FBQUEsUUFBQUMsQ0FBQTtBQUFBLFFBQUFDLENBQUE7QUFBQSxRQUFBQyxDQUFBO0FBQUEsUUFBQUMsQ0FBQSxHQUFBYixDQUFBLENBQUEsQ0FBQSxDQUFBOztBQUFBLFNBQUFVLENBQUEsR0FBQSxDQUFBLEVBQUFDLENBQUEsR0FBQVgsQ0FBQSxDQUFBeUIsTUFBQSxFQUFBZixDQUFBLEdBQUFDLENBQUEsRUFBQUQsQ0FBQSxJQUFBLENBQUE7QUFBQUUsTUFBQUEsQ0FBQSxHQUFBWixDQUFBLENBQUFVLENBQUEsQ0FBQSxFQUFBRCxDQUFBLEdBQUEsQ0FBQSxDQUFBLEtBQUFBLENBQUEsQ0FBQUksQ0FBQSxFQUFBRCxDQUFBLENBQUEsS0FBQUMsQ0FBQSxHQUFBRCxDQUFBLENBQUEsR0FBQUMsQ0FBQSxHQUFBRCxDQUFBLEtBQUFDLENBQUEsR0FBQUQsQ0FBQSxDQUFBO0FBQUE7O0FBQUEsV0FBQUMsQ0FBQTtBQUFBLEdBbkRBLEVBbURBbUQsQ0FBQSxDQUFBc3JCLEtBQUEsR0FBQSxVQUFBdHZCLENBQUEsRUFBQVMsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxFQUFBO0FBQUEsUUFBQSxDQUFBRixDQUFBLEVBQUEsTUFBQSx1QkFBQTtBQUFBLFFBQUFHLENBQUE7QUFBQSxRQUFBQyxDQUFBO0FBQUEsUUFBQUcsQ0FBQTtBQUFBLFFBQUFDLENBQUE7QUFBQSxRQUFBQyxDQUFBO0FBQUEsUUFBQUMsQ0FBQTtBQUFBLFFBQUFDLENBQUE7QUFBQSxRQUFBaUQsQ0FBQTtBQUFBLFFBQUFILENBQUE7QUFBQSxRQUFBQyxDQUFBO0FBQUEsUUFBQUcsQ0FBQSxHQUFBLEVBQUE7QUFBQSxRQUFBQyxDQUFBLEdBQUEsRUFBQTtBQUFBLFFBQUFDLENBQUEsR0FBQSxFQUFBO0FBQUEsUUFBQUMsQ0FBQSxHQUFBLEVBQUE7QUFBQSxRQUFBQyxDQUFBLEdBQUEsRUFBQTtBQUFBLFFBQUFDLENBQUEsR0FBQSxFQUFBO0FBQUEsUUFBQUMsQ0FBQSxH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QUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLENBQUEsTUFBQSxFQUFBLE1BQUEsQ0FBQTtBQUFBQyxNQUFBQSxFQUFBLEVBQUEsQ0FBQSxNQUFBLEVBQUEsTUFBQSxDQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxDQUFBLE1BQUEsRUFBQSxNQUFBLENBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLENBQUEsTUFBQSxFQUFBLE1BQUEsQ0FBQTtBQUFBQyxNQUFBQSxFQUFBLEVBQUEsQ0FBQSxLQUFBLEVBQUEsTUFBQSxDQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxDQUFBLE1BQUEsRUFBQSxLQUFBLENBQUE7QUFBQUMsTUFBQUEsR0FBQSxFQUFBLENBQUEsSUFBQSxFQUFBLE1BQUEsQ0FBQTtBQUFBQyxNQUFBQSxFQUFBLEVBQUEsQ0FBQSxPQUFBLEVBQUEsT0FBQSxDQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxDQUFBLE9BQUEsRUFBQSxPQUFBLENBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLENBQUEsT0FBQSxFQUFBLE9BQUEsQ0FBQTtBQUFBQyxNQUFBQSxFQUFBLEVBQUEsQ0FBQSxPQUFBLEVBQUEsT0FBQSxDQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxDQUFBLE1BQUEsRUFBQSxPQUFBLENBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLENBQUEsS0FBQSxFQUFBLE1BQUEsQ0FBQTtBQUFBQyxNQUFBQSxFQUFBLEVBQUEsQ0FBQSxNQUFBLEVBQUEsS0FBQSxDQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxDQUFBLE1BQUEsRUFBQSxNQUFBLENBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLENBQUEsTUFBQSxFQUFBLE1BQUEsQ0FBQTtBQUFBQyxNQUFBQSxFQUFBLEVBQUEsQ0FBQSxNQUFBLEVBQUEsTUFBQSxDQUFBO0FBQUFDLE1BQUFBLEdBQUEsRUFBQSxDQUFBLEtBQUEsRUFBQSxNQUFBLENBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLENBQUEsT0FBQSxFQUFBLE9BQUEsQ0FBQTtBQUFBQyxNQUFBQSxFQUFBLEVBQUEsQ0FBQSxPQUFBLEVBQUEsT0FBQSxDQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxDQUFBLE9BQUEsRUFBQSxPQUFBLENBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLENBQUEsTUFBQSxFQUFBLE9BQUEsQ0FBQTtBQUFBQyxNQUFBQSxFQUFBLEVBQUEsQ0FBQSxNQUFBLEVBQUEsTUFBQSxDQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxDQUFBLE1BQUEsRUFBQSxNQUFBLENBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLENBQUEsTUFBQSxFQUFBLE1BQUEsQ0FBQTtBQUFBQyxNQUFBQSxFQUFBLEVBQUEsQ0FBQSxNQUFBLEVBQUEsTUFBQSxDQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxDQUFBLE1BQUEsRUFBQSxNQUFBLENBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLENBQUEsTUFBQSxFQUFBLE1BQUEsQ0FBQTtBQUFBQyxNQUFBQSxHQUFBLEVBQUEsQ0FBQSxLQUFBLEVBQUEsTUFBQSxDQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxDQUFBLE1BQUEsRUFBQSxNQUFBLENBQUE7QUFBQUMsTUFBQUEsTUFBQSxFQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQ0FBQTtBQUFBLDJCQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsQ0FBQTtBQUFBQyxNQUFBQSxLQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsSUFBQSxDQUFBO0FBQUEsc0JBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxDQUFBO0FBQUFDLE1BQUFBLE1BQUEsRUFBQSxDQUFBLElBQUEsRUFBQSxHQUFBLENBQUE7QUFBQUMsTUFBQUEsT0FBQSxFQUFBLENBQUEsR0FBQSxFQUFBLElBQUEsQ0FBQTtBQUFBLHFCQUFBLENBQUEsR0FBQSxFQUFBLEdBQUE7QUFBQSxLQUFBOztBQUFBLFlBQUExSyxDQUFBO0FBQUEsV0FBQSxJQUFBO0FBQUEsWUFBQUssQ0FBQSxHQUFBLENBQUE7QUFBQTs7QUFBQSxXQUFBLElBQUE7QUFBQUEs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QUEsQ0FBQUMsWUFBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLEtBQUEsQ0FBQSxLQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxXQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxVQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxtQkFBQTtBQUFBLGVBQUEsa0JBQUE7QUFBQSxlQUFBLGtCQUFBO0FBQUEsZUFBQSxnQkFBQTtBQUFBLGVBQUEsZUFBQTtBQUFBLGVBQUEsaUJBQUE7QUFBQSxlQUFBLGlCQUFBO0FBQUEsZUFBQSxrQkFBQTtBQUFBLGVBQUEsZ0JBQUE7QUFBQSxlQUFBLGtCQUFBO0FBQUEsZUFBQSxlQUFBO0FBQUEsZUFBQSxnQkFBQTtBQUFBLGVBQUEsdUJBQUE7QUFBQSxlQUFBLGdCQUFBO0FBQUEsZUFBQSxrQkFBQTtBQUFBLGVBQUEsaUJBQUE7QUFBQSxlQUFBLGdCQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxXQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxVQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxVQUFBO0FBQUFDLE1BQUFBLEdBQUEsRUFBQSxVQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxhQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxZQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxTQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxTQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxXQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxTQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxTQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxVQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxTQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxTQUFBO0FBQUEsZUFBQSxxQkFBQTtBQUFBLGVBQUEsZUFBQTtBQUFBLGVBQUEscUJBQUE7QUFBQSxlQUFBLGtCQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFB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RUFBQSxXQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxRQUFBO0FBQUExdUIsTUFBQUEsRUFBQSxFQUFBLFFBQUE7QUFBQTJ1QixNQUFBQSxFQUFBLEVBQUEsV0FBQTtBQUFBQyxNQUFBQSxFQUFBLEVBQUEsb0JBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLHFCQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxTQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxPQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxPQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxTQUFBO0FBQUEsZUFBQSxjQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxRQUFBO0FBQUFyeUIsTUFBQUEsRUFBQSxFQUFBLFlBQUE7QUFBQSxlQUFBLHFCQUFBO0FBQUFzeUIsTUFBQUEsRUFBQSxFQUFBLFNBQUE7QUFBQSxlQUFBLGlCQUFBO0FBQUEsZUFBQSxvQkFBQTtBQUFBQyxNQUFBQSxFQUFBLEVBQUEsU0FBQTtBQUFBQyxNQUFBQSxFQUFBLEVBQUEsZ0JBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLFVBQUE7QUFBQSxlQUFBLHFCQUFBO0FBQUFDLE1BQUFBLEVBQUEsRUFBQSxTQUFBO0FBQUEsZUFBQSxvQkFBQTtBQUFBQyxNQUFBQSxFQUFBLEVBQUEsZ0JBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLE9BQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLFVBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLFdBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLFlBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLFNBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLFdBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLFNBQUE7QUFBQUMsTUFBQUEsRUFBQSxFQUFBLFNBQUE7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QUFBLFVBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLFVBQUEsRUFBQSxRQUFBLENBQUE7QUFBQUMsUUFBQUEsVUFBQSxFQUFBO0FBQUEsT0FBQTtBQUFBUyxNQUFBQSxRQUFBLEVBQUE7QUFBQVosUUFBQUEsWUFBQSxFQUFBLFNBQUE7QUFBQWpsQyxRQUFBQSxLQUFBLEVBQUEsU0FBQTtBQUFBNFMsUUFBQUEsSUFBQSxFQUFBLE1BQUE7QUFBQXN5QixRQUFBQSxXQUFBLEVBQUEsQ0FBQSxDQUFBO0FBQUFDLFFBQUFBLFFBQUEsRUFBQSxDQUFBLFVBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLFVBQUEsRUFBQSxRQUFBLENBQUE7QUFBQUMsUUFBQUEsVUFBQSxFQUFBO0FBQUEsT0FBQTtBQUFBVSxNQUFBQSxTQUFBLEVBQUE7QUFBQWIsUUFBQUEsWUFBQSxFQUFBLFNBQUE7QUFBQWpsQyxRQUFBQSxLQUFBLEVBQUEsU0FBQTtBQUFBNFMsUUFBQUEsSUFBQSxFQUFBLE1BQUE7QUFBQXN5QixRQUFBQSxXQUFBLEVBQUEsQ0FBQSxDQUFBO0FBQUFDLFFBQUFBLFFBQUEsRUFBQSxDQUFBLFVBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLFVBQUEsRUFBQSxRQUFBLENBQUE7QUFBQUMsUUFBQUEsVUFBQSxFQUFBO0FBQUEsT0FBQTtBQUFBVyxNQUFBQSxTQUFBLEVBQUE7QUFBQWQsUUFBQUEsWUFBQSxFQUFBLFNBQUE7QUFBQWpsQyxRQUFBQSxLQUFBLEVBQUEsU0FBQTtBQUFBNFMsUUFBQUEsSUFBQSxFQUFBLE1BQUE7QUFBQXN5QixRQUFBQSxXQUFBLEVBQUEsQ0FBQSxDQUFBO0FBQUFDLFFBQUFBLFFBQUEsRUFBQSxDQUFBLFVBQUEsRUFBQSxTQUFBLEVBQUEsU0FBQSxFQUFBLFVBQUEsRUFBQSxRQUFBLENBQUE7QUFBQUMsUUFBQUEsVUFBQSxFQUFBO0FBQUEsT0FBQTtBQUFBWSxNQUFBQSxZQUFBLEVBQUE7QUFBQWYsUUFBQUEsWUFBQSxFQUFBLFlBQUE7QUFBQWpsQyxRQUFBQSxLQUFB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QUFBLGFBQUEsQ0FBQSxDQUFBLElBQUEsUUFBQSxNQUFBLGFBQUFGLENBQUEsQ0FBQSxZQUFBLENBQUEsR0FBQUEsQ0FBQSxDQUFBLFlBQUEsQ0FBQSxHQUFBQyxDQUFBLEdBQUFELENBQUEsQ0FBQSxZQUFBLENBQUEsR0FBQUMsQ0FBQSxHQUFBRCxDQUFBLENBQUEsWUFBQSxDQUFBLENBQUEsRUFBQUEsQ0FBQSxDQUFBLFdBQUEsQ0FBQSxHQUFBMEQsQ0FBQSxDQUFBeEQsQ0FBQSxDQUFBLFdBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxFQUFBRixDQUFBLENBQUEsYUFBQSxDQUFBLEdBQUEwRCxDQUFBLENBQUF4RCxDQUFBLENBQUEsYUFBQSxDQUFBLENBQUEsSUFBQSxDQUFBLEVBQUFGLENBQUEsQ0FBQWk0QixPQUFBLEdBQUEsYUFBQS8zQixDQUFBLENBQUEsU0FBQSxDQUFBLEdBQUEsUUFBQSxHQUFBLE9BQUEsRUFBQUQsQ0FBQSxHQUFBLFlBQUFELENBQUEsQ0FBQWk0QixPQUFBLEVBQUFqNEIsQ0FBQSxDQUFBLFlBQUEsQ0FBQSxHQUFBQyxDQUFBLElBQUF5RCxDQUFBLENBQUF4RCxDQUFBLENBQUEsWUFBQSxDQUFBLENBQUEsSUFBQSxDQUFBLEVBQUFGLENBQUEsQ0FBQSxlQUFBLENBQUEsR0FBQUMsQ0FBQSxJQUFBeUQsQ0FBQSxDQUFBeEQsQ0FBQSxDQUFBLGVBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxFQUFBRixDQUFBLENBQUEsYUFBQSxDQUFBLEdBQUFDLENBQUEsSUFBQXlELENBQUEsQ0FBQXhELENBQUEsQ0FBQSxhQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsRUFBQUYsQ0FBQSxDQUFBLGdCQUFBLENBQUEsR0FBQUMsQ0FBQSxJQUFBeUQsQ0FBQSxDQUFBeEQsQ0FBQSxDQUFBLGdCQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsRUFBQUYsQ0FBQSxDQUFBLGFBQUEsQ0FBQSxHQUFBQyxDQUFBLElBQUF5RCxDQUFBLENBQUF4RCxDQUFBLENBQUEsYUFBQSxDQUFBLENBQUEsSUFBQSxDQUFB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LENBQUEsSUFBQSxNQUFBNkUsQ0FBQSxDQUFBN0UsQ0FBQSxHQUFBLENBQUEsQ0FBQSxJQUFBLE1BQUE2RSxDQUFBLENBQUE3RSxDQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsTUFBQTZFLENBQUEsQ0FBQTdFLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxNQUFBNkUsQ0FBQSxDQUFBN0UsQ0FBQSxHQUFBLENBQUEsQ0FBQSxJQUFBLE1BQUE2RSxDQUFBLENBQUE3RSxDQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsTUFBQTZFLENBQUEsQ0FBQTdFLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxNQUFBNkUsQ0FBQSxDQUFBN0UsQ0FBQSxHQUFBLENBQUEsQ0FBQSxJQUFBLE1BQUE2RSxDQUFBLENBQUE3RSxDQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUEsTUFBQTZFLENBQUEsQ0FBQTdFLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxNQUFBNkUsQ0FBQSxDQUFBN0UsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxJQUFBLE1BQUE2RSxDQUFBLENBQUE3RSxDQUFBLEdBQUEsRUFBQSxDQUFBLElBQUEsS0FBQTZFLENBQUEsQ0FBQTdFLENBQUEsR0FBQSxFQUFBLENBQUEsSUFBQSxLQUFBNkUsQ0FBQSxDQUFBN0UsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxJQUFBLEtBQUE2RSxDQUFBLENBQUE3RSxDQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUFBLENBQUEsSUFBQSxFQUFBLEVBQUFxQixDQUFBLEdBQUF3RCxDQUFBLENBQUE3RSxDQUFBLEVBQUEsQ0FBQSxHQUFBNkUsQ0FBQSxDQUFBN0UsQ0FBQSxFQUFBLENBQUEsSUFBQSxDQUFBLEVBQUFBLENBQUEsRUFBQSxDQUFBLEtBQUEsS0FBQUEsQ0FBQSxJQUFBLEVBQUEsSUFBQTtBQUFBLG9CQUFBLE9BQUFtRixDQUFBLEdBQUFOLENBQUEsQ0FBQTdFLENBQUEsRUFBQSxDQUFBLENBQUEsRUFBQTtBQUFBQSxnQkFBQUEsQ0FBQSxJQUFBbUYsQ0FBQTtBQUFBO0FBQUE7O0FBQUEsaUJB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QUEsQ0FBQTFELENBQUEsQ0FBQTtBQUFBd0QsUUFBQUEsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBdkQsQ0FBQSxJQUFBLEVBQUEsR0FBQSxHQUFBLEVBQUFzRCxDQUFBLENBQUFDLENBQUEsRUFBQSxDQUFBLEdBQUF2RCxDQUFBLElBQUEsQ0FBQSxHQUFBLEdBQUEsRUFBQXNELENBQUEsQ0FBQUMsQ0FBQSxFQUFBLENBQUEsR0FBQSxNQUFBdkQsQ0FBQTtBQUFBOztBQUFBLFVBQUEsU0FBQVIsQ0FBQSxFQUFBO0FBQUEsWUFBQUEsQ0FBQSxHQUFBLENBQUEsSUFBQSxRQUFBQSxDQUFBLEVBQUEsTUFBQSxxQkFBQTtBQUFBOEQsUUFBQUEsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsRUFBQUQsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBLEdBQUEsRUFBQUQsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsRUFBQUQsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsRUFBQUQsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsRUFBQUQsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsRUFBQUQsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsRUFBQUQsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsRUFBQUQsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsRUFBQUQsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsRUFBQUQsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsRUFBQUQsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsRUFBQUQsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsRUFBQUQsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBLEVBQUEsRUFBQUQsQ0FB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LElBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxLQUFBaUQsQ0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQUcsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBLE1BQUF0RCxDQUFBLEVBQUFxRCxDQUFBLENBQUFDLENBQUEsRUFBQSxDQUFBLEdBQUF0RCxDQUFBLElBQUEsQ0FBQSxHQUFBLEdBQUEsRUFBQXFELENBQUEsQ0FBQUMsQ0FBQSxFQUFBLENBQUEsR0FBQVAsQ0FBQSxFQUFBTSxDQUFBLENBQUFDLENBQUEsRUFBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBRCxDQUFBLENBQUFDLENBQUEsRUFBQSxDQUFBLEdBQUEsRUFBQSxFQUFBRCxDQUFBLENBQUFDLENBQUEsRUFBQSxDQUFBLEdBQUEsTUFBQTFFLENBQUEsRUFBQXlFLENBQUEsQ0FBQUMsQ0FBQSxFQUFBLENBQUEsR0FBQTFFLENBQUEsSUFBQSxDQUFBLEdBQUEsR0FBQSxFQUFBeUUsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBLE1BQUFqRSxDQUFBLEVBQUFnRSxDQUFBLENBQUFDLENBQUEsRUFBQSxDQUFBLEdBQUFqRSxDQUFBLElBQUEsQ0FBQSxHQUFBLEdBQUEsRUFBQWdFLENBQUEsQ0FBQUMsQ0FBQSxFQUFBLENBQUEsR0FBQSxNQUFBaEUsQ0FBQSxFQUFBK0QsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBaEUsQ0FBQSxJQUFBLENBQUEsR0FBQSxHQUFBLEVBQUErRCxDQUFBLENBQUFDLENBQUEsRUFBQSxDQUFBLEdBQUEsTUFBQS9ELENBQUEsRUFBQThELENBQUEsQ0FBQUMsQ0FBQSxFQUFBLENBQUEsR0FBQS9ELENBQUEsSUFBQSxDQUFBLEdBQUEsR0FBQSxFQUFBOEQsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxLQUFBNUQsQ0FBQSxHQUFBLE1BQUFLLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxLQUFBTCxDQUFBLEVBQUEsS0FBQSxJQUFBc0QsQ0FBQSxHQUFBLENBQUEsRUFBQUcsQ0FBQSxHQUFBdEQsQ0FBQSxDQUFBUSxNQUFBLEVBQUEyQyxDQUFBLEdBQUFHLENBQUEsRUFBQSxFQUFBSCxDQUFBLEVBQUE7QUFBQSxjQUFBSSxDQUFBLEdBQUF2RCxDQUFBLENBQUFtRCxDQUFBLENBQUE7QUFBQUssVUFBQUEsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBRixDQUFBLElBQUEsRUFBQSxHQUFBLEdBQUEsRUFBQUMsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBRixDQUFBLElBQUEsQ0FBQSxHQUFBLEdBQUEsRUFBQUMsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBLE1BQUFGLENBQUE7QUFBQTs7QUFBQUUsUUFBQUEsQ0FBQSxHQUFBLFVBQUFqRSxDQUFBLEVBQUFDLENBQUEsRUFBQVYsQ0FBQSxFQUFBVyxDQUFBLEVBQUE7QUFBQUYsVUFBQUEsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBVixDQUFBO0FBQUEsY0FBQVksQ0FBQSxHQUFBRixDQUFBLEVBQUE7QUFBQSxjQUFBRyxDQUFBLEdBQUEsS0FBQWIsQ0FBQTtBQUFBLGNBQUFjLENBQUEsR0FBQUQsQ0FBQSxHQUFBLENBQUE7QUFBQSxjQUFBSSxDQUFBLEdBQUFKLENBQUEsR0FBQSxDQUFBO0FBQUEsY0FBQUssQ0FBQSxHQUFBRCxDQUFBLEdBQUEsQ0FBQTtBQUFBLGNBQUFFLENBQUEsR0FBQW5CLENBQUEsR0FBQSxDQUFBO0FBQUEsY0FBQW9CLENBQUEsR0FBQSxDQUFBO0FBQUEsY0FBQUMsQ0FBQSxHQUFBLENBQUE7O0FBQUEsbUJBQUFpRCxDQUFBLENBQUF0RSxDQUFBLEVBQUE7QUFBQSxtQkFBQUEsQ0FBQSxJQUFBb0IsQ0FBQTtBQUFBWCxjQUFBQSxDQUFBLENBQUFDLENBQUEsRUFBQSxDQUFBLEdBQUEsTUFBQVcsQ0FBQSxFQUFBQSxDQUFBLEtBQUEsQ0FBQSxFQUFBRCxDQUFBLElBQUEsQ0FBQSxFQUFBVixDQUFBLEtBQUFFLENBQUEsR0FBQSxHQUFBLEtBQUFILENBQUEsQ0FBQUcsQ0FBQSxDQUFBLEdBQUEsR0FBQSxFQUFBQSxDQUFBLEdBQUFGLENBQUEsRUFBQSxDQUFBO0FBQUE7QUFBQTs7QUFBQSxtQkFBQXlELENBQUEsQ0FBQW5FLENBQUEsRUFBQTtBQUFBcUIsWUFBQUEsQ0FBQSxJQUFBckIsQ0FBQSxJQUFBb0IsQ0FBQSxFQUFBQSxDQUFBLElBQUFELENBQUEsRUFBQW1ELENBQUEsQ0FBQSxDQUFBLENBQUE7QUFBQTs7QUFBQSxjQUFBRixDQUFBLEdBQUF6RCxDQUFBLENBQUEsQ0FBQSxDQUFBLEdBQUFHLENBQUE7QUFBQSxjQUFBeUQsQ0FBQSxHQUFBLEVBQUE7QUFBQUosVUFBQUEsQ0FBQSxDQUFBdEQsQ0FBQSxDQUFBOztBQUFBLGVBQUEsSUFBQTJELENBQUEsR0FBQSxDQUFBLEVBQUFDLENBQUEsR0FBQTlELENBQUEsQ0FBQWMsTUFBQSxFQUFBK0MsQ0FBQSxHQUFBQyxDQUFBLEVBQUEsRUFBQUQsQ0FBQSxFQUFBO0FBQUEsZ0JBQUFFLENBQUEsR0FBQS9ELENBQUEsQ0FBQTZELENBQUEsQ0FBQSxHQUFBMUQsQ0FBQTtBQUFBLGdCQUFBNkQsQ0FBQSxHQUFBUCxDQUFBLElBQUEsQ0FBQSxHQUFBTSxDQUFBO0FBQUEsZ0JBQUFFLENBQUEsR0FBQUwsQ0FBQSxDQUFBSSxDQUFBLENBQUE7O0FBQUEsZ0JBQUEsS0FBQSxDQUFBLEtBQUFDLENBQUEsRUFBQTtBQUFBLG1CQUFBdkQsQ0FBQSxJQUFBK0MsQ0FBQSxJQUFBaEQsQ0FBQSxFQUFBQSxDQUFBLElBQUFELENBQUEsRUFBQSxLQUFBQyxDQUFBO0FBQUFYLGdCQUFBQSxDQUFBLENBQUFDLENBQUEsRUFBQSxDQUFBLEdBQUEsTUFBQVcsQ0FBQSxFQUFBQSxDQUFBLEtBQUEsQ0FBQSxFQUFBRCxDQUFBLElBQUEsQ0FBQSxFQUFBVixDQUFBLEtBQUFFLENBQUEsR0FBQSxHQUFBLEtBQUFILENBQUEsQ0FBQUcsQ0FBQSxDQUFBLEdBQUEsR0FBQSxFQUFBQSxDQUFBLEdBQUFGLENBQUEsRUFBQSxDQUFBO0FBQUE7O0FBQUEsdUJBQUFRLENBQUEsSUFBQWlELENBQUEsQ0FBQXRELENBQUEsQ0FBQSxFQUFBSyxDQUFBLEdBQUFELENBQUEsR0FBQSxDQUFBLEVBQUFFLENBQUEsR0FBQW5CLENBQUEsR0FBQSxDQUFBLEVBQUF1RSxDQUFBLEdBQUEsRUFBQSxLQUFBLEtBQUFwRCxDQUFBLElBQUFELENBQUEsSUFBQSxFQUFBQyxDQUFBLEVBQUFvRCxDQUFBLENBQUFJLENBQUEsQ0FBQSxHQUFBekQsQ0FBQSxFQUFBLEdBQUFrRCxDQUFBLEdBQUFNLENBQUE7QUFBQSxhQUFBLE1BQUFOLENBQUEsR0FBQVEsQ0FBQTtBQUFBOztBQUFBLGlCQUFBVCxDQUFBLENBQUFDLENBQUEsQ0FBQSxFQUFBRCxDQUFBLENBQUFsRCxDQUFBLENBQUEsRUFBQXFELENBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQTFELENBQUEsR0FBQSxDQUFBLEtBQUFGLENBQUEsR0FBQUQsQ0FBQSxDQUFBRyxDQUFBLENBQUEsR0FBQSxDQUFBLElBQUFILENBQUEsQ0FBQUcsQ0FBQSxDQUFBLEdBQUFGLENBQUEsR0FBQUUsQ0FBQSxHQUFBLENBQUEsRUFBQUgsQ0FBQSxDQUFBQyxDQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBQSxDQUFBO0FBQUEsU0FBQSxDQUFBK0QsQ0FBQSxFQUFBQyxDQUFBLEVBQUF2RCxDQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQUEsQ0FBQSxFQUFBUCxDQUFBLENBQUE7QUFBQSxPQUFBLEVBQUEsS0FBQTh5QyxHQUFBLEdBQUEsWUFBQTtBQUFBLGVBQUEsQ0FBQSxDQUFBLEtBQUE3dUMsQ0FBQSxLQUFBSixDQUFBLENBQUFDLENBQUEsRUFBQSxDQUFBLEdBQUEsRUFBQSxFQUFBRyxDQUFBLEdBQUEsQ0FBQSxDQUFBLEdBQUFILENBQUE7QUFBQSxPQUFBO0FBQUEsS0FBQSxFQUFBeWEsT0FBQSxDQUFBdzBCLFNBQUEsR0FBQXIvQixFQUFBO0FBQUEsR0FBQSxDQUFBLE9BQUF0VSxDQUFBLEVBQUEsQ0FBQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUErQkEsV0FBQTRVLEVBQUEsQ0FBQTVVLENBQUEsRUFBQTtBQUFBLFFBQUFpRixDQUFBO0FBQUEsUUFBQUMsQ0FBQTtBQUFBLFFBQUFDLENBQUE7QUFBQSxRQUFBQyxDQUFBO0FBQUEsUUFBQTNFLENBQUE7QUFBQSxRQUFBWSxDQUFBLEdBQUFxQyxJQUFBLENBQUFDLEtBQUE7QUFBQSxRQUFBSyxDQUFBLEdBQUEsSUFBQWhDLEtBQUEsQ0FBQSxFQUFBLENBQUE7QUFBQSxRQUFBaUMsQ0FBQSxHQUFBLElBQUFqQyxLQUFBLENBQUEsRUFBQSxDQUFBO0FBQUEsUUFBQWtDLENBQUEsR0FBQSxJQUFBbEMsS0FBQSxDQUFBLEVBQUEsQ0FBQTtBQUFBLFFBQUFxQyxDQUFBLEdBQUEsSUFBQXJDLEtBQUEsQ0FBQSxFQUFBLENBQUE7QUFBQSxRQUFBeUMsQ0FBQSxHQUFBLElBQUF6QyxLQUFBLENBQUEsS0FBQSxDQUFBO0FBQUEsUUFBQTBDLENBQUEsR0FBQSxJQUFBMUMsS0FBQSxDQUFBLEtBQUEsQ0FBQTtBQUFBLFFBQUF1RSxDQUFBLEdBQUEsSUFBQXZFLEtBQUEsQ0FBQSxFQUFBLENBQUE7QUFBQSxRQUFBMkMsQ0FBQSxHQUFBLElBQUEzQyxLQUFBLENBQUEsRUFBQSxDQUFBO0FBQUEsUUFBQThDLENBQUEsR0FBQSxFQUFBO0FBQUEsUUFBQUMsQ0FBQSxHQUFBLENBQUE7QUFBQSxRQUFBQyxDQUFBLEdBQUEsQ0FBQTtBQUFBLFFBQUFLLENBQUEsR0FBQSxJQUFBckQsS0FBQSxDQUFBLEVBQUEsQ0FBQTtBQUFBLFFBQUFzRCxDQUFBLEdBQUEsSUFBQXRELEtBQUEsQ0FBQSxFQUFBLENBQUE7QUFBQSxRQUFBdUQsQ0FBQSxHQUFBLElBQUF2RCxLQUFBLENBQUEsRUFBQSxDQUFBO0FBQUEsUUFBQXRCLENBQUEsR0FBQSxJQUFBc0IsS0FBQSxDQUFBLEdBQUEsQ0FBQTtBQUFBLFFBQUF3RCxDQUFBLEdBQUEsSUFBQXhELEtBQUEsQ0FBQSxJQUFBLENBQUE7QUFBQSxRQUFBNEMsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBO0FBQUEsUUFBQWEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQTtBQUFBLFFBQUFDLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBO0FBQUEsUUFBQUMsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsQ0FBQTtBQUFBLFFBQUFDLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxDQUFBO0FBQUEsUUFBQUMsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQTtBQUFBLFFBQUFDLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBO0FBQUEsUUFBQUMsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsQ0FBQTtBQUFBLFFBQUFDLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxDQUFBOztBQUFBLGFBQUFyRixDQUFBLENBQUFYLENBQUEsRUFBQVMsQ0FBQSxFQUFBO0FBQUEsV0FBQSxJQUFBQyxDQUFBLEdBQUEsQ0FBQSxFQUFBQyxDQUFBLEdBQUEsQ0FBQSxFQUFBQyxDQUFBLEdBQUEsSUFBQW9CLEtBQUEsRUFBQSxFQUFBbkIsQ0FBQSxHQUFBLENBQUEsRUFBQUEsQ0FBQSxJQUFBLEVBQUEsRUFBQUEsQ0FBQSxFQUFBLEVBQUE7QUFBQSxhQUFBLElBQUFDLENBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUEsSUFBQWQsQ0FBQSxDQUFBYSxDQUFBLENBQUEsRUFBQUMsQ0FBQSxFQUFBO0FBQUFGLFVBQUFBLENBQUEsQ0FBQUgsQ0FBQSxDQUFBRSxDQUFBLENBQUEsQ0FBQSxHQUFBLEVBQUEsRUFBQUMs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QUEsQ0FBQSxFQUFBOEIsQ0FBQSxDQUFBckYsQ0FBQSxDQUFBLENBQUEyRCxDQUFBLElBQUEsQ0FBQSxJQUFBRyxDQUFBLENBQUE3RCxDQUFBLENBQUEsQ0FBQSxDQUFBLEVBQUFvRixDQUFBLENBQUF4QixDQUFBLENBQUE1RCxDQUFBLENBQUEsQ0FBQSxFQUFBc0QsQ0FBQSxFQUFBO0FBQUE7O0FBQUEsYUFBQSxNQUFBOUMsQ0FBQSxJQUFBNEUsQ0FBQSxDQUFBbkYsQ0FBQSxDQUFBLEVBQUFKLENBQUE7QUFBQTs7QUFBQSxhQUFBMkYsQ0FBQSxDQUFBckcsQ0FBQSxFQUFBO0FBQUEsVUFBQUEsQ0FBQSxJQUFBLENBQUEsS0FBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxNQUFBQSxDQUFBLEtBQUFBLENBQUEsR0FBQSxHQUFBLENBQUEsRUFBQVMsQ0FBQSxJQUFBVCxDQUFBLEVBQUE7QUFBQSxTQUFBLFVBQUFBLENBQUEsRUFBQTtBQUFBLGVBQUEsSUFBQVMsQ0FBQSxHQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUFDLENBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUEsR0FBQSxFQUFBLEVBQUFBLENBQUEsRUFBQSxFQUFBO0FBQUEsZ0JBQUFDLENBQUEsR0FBQVUsQ0FBQSxDQUFBLENBQUFaLENBQUEsQ0FBQUMsQ0FBQSxDQUFBLEdBQUFWLENBQUEsR0FBQSxFQUFBLElBQUEsR0FBQSxDQUFBO0FBQUFXLFlBQUFBLENBQUEsR0FBQSxDQUFBLEdBQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsTUFBQUEsQ0FBQSxLQUFBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLEVBQUFxRCxDQUFBLENBQUFZLENBQUEsQ0FBQWxFLENBQUEsQ0FBQSxDQUFBLEdBQUFDLENBQUE7QUFBQTs7QUFBQSxlQUFBLElBQUFDLENBQUEsR0FBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBQyxDQUFBLEdBQUEsQ0FBQSxFQUFBQSxDQUFBLEdBQUEsRUFBQSxFQUFBQSxDQUFBLEVBQUEsRUFBQTtBQUFBLGdCQUFBQyxDQUFBLEdBQUFPLENBQUEsQ0FBQSxDQUFBVCxDQUFBLENBQUFDLENBQUEsQ0FBQSxHQUFBYixDQUFBLEdBQUEsRUFBQSxJQUFBLEdBQUEsQ0FBQTtBQUFBYyxZQUFBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLE1BQUFBLENBQUEsS0FBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxFQUFBbUQsQ0FBQSxDQUFBVyxDQUFBLENBQUEvRCxDQUFBLENBQUEsQ0FBQSxHQUFBQyxDQUFBO0FBQUE7O0FBQUEsZUFBQSxJQUFBRyxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsV0FBQSxFQUFBLFdBQUEsRUFBQSxXQUFBLEVBQUEsQ0FBQSxFQUFBLFVBQUEsRUFBQSxRQUFBLEVBQUEsVUFBQSxDQUFBLEVBQUFDLENBQUEsR0FBQSxDQUFBLEVBQUFDLENBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUEsRUFBQTtBQUFBLGlCQUFBLElBQUFDLENBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUEsRUFBQTtBQUFBOEMsY0FBQUEsQ0FBQSxDQUFBaEQsQ0FBQSxDQUFBLEdBQUEsS0FBQThDLENBQUEsQ0FBQVksQ0FBQSxDQUFB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QSxFQUFBLENBQUEsRUFBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxFQUFBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEVBQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxFQUFBLFlBQUE7QUFBQUMsUUFBQUEsQ0FBQSxDQUFBLEtBQUEsQ0FBQSxFQUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLEVBQUFELENBQUEsQ0FBQSxDQUFBLENBQUE7O0FBQUEsYUFBQSxJQUFBbEcsQ0FBQSxHQUFBLENBQUEsRUFBQUEsQ0FBQSxHQUFBLEVBQUEsRUFBQUEsQ0FBQSxFQUFBO0FBQUFrRyxVQUFBQSxDQUFBLENBQUFULENBQUEsQ0FBQXpGLENBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQTtBQUFBOztBQUFBLGFBQUEsSUFBQVMsQ0FBQSxHQUFBLENBQUEsRUFBQUEsQ0FBQSxJQUFBLEVBQUEsRUFBQUEsQ0FBQSxFQUFBO0FBQUF5RixVQUFBQSxDQUFBLENBQUFSLENBQUEsQ0FBQWpGLENBQUEsQ0FBQSxDQUFBO0FBQUE7O0FBQUF5RixRQUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBOztBQUFBLGFBQUEsSUFBQXhGLENBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUEsR0FBQSxFQUFBLEVBQUFBLENBQUEsRUFBQTtBQUFBd0YsVUFBQUEsQ0FBQSxDQUFBUCxDQUFBLENBQUFqRixDQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUE7QUFBQTs7QUFBQSxhQUFBLElBQUFDLENBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUEsSUFBQSxHQUFBLEVBQUFBLENBQUEsRUFBQTtBQUFBdUYsVUFBQUEsQ0FBQSxDQUFBTixDQUFBLENBQUFqRixDQUFBLENBQUEsQ0FBQTtBQUFBOztBQUFBdUYsUUFBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQTs7QUFBQSxhQUFBLElBQUF0RixDQUFBLEdBQUEsQ0FBQSxFQUFBQSxDQUFBLEdBQUEsRUFBQSxFQUFBQSxDQUFBLEVBQUE7QUFBQXNGLFVBQUFBLENBQUEsQ0FBQUwsQ0FBQSxD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QUEsQ0FBQSxFQUFBLFlBQUE7QUFBQSxhQUFBLElBQUFoRyxDQUFBLEdBQUEsQ0FBQSxFQUFBUyxDQUFBLEdBQUEsQ0FBQSxFQUFBQyxDQUFBLEdBQUEsQ0FBQSxFQUFBQSxDQUFBLElBQUEsRUFBQSxFQUFBQSxDQUFBLEVBQUEsRUFBQTtBQUFBLGVBQUEsSUFBQUMsQ0FBQSxHQUFBWCxDQUFBLEVBQUFXLENBQUEsR0FBQUYsQ0FBQSxFQUFBRSxDQUFBLEVBQUE7QUFBQStELFlBQUFBLENBQUEsQ0FBQSxRQUFBL0QsQ0FBQSxDQUFBLEdBQUFELENBQUEsRUFBQStELENBQUEsQ0FBQSxRQUFBOUQsQ0FBQSxDQUFBLEdBQUEsRUFBQSxFQUFBOEQsQ0FBQSxDQUFBLFFBQUE5RCxDQUFBLENBQUEsQ0FBQSxDQUFBLElBQUFELENBQUEsRUFBQStELENBQUEsQ0FBQSxRQUFBOUQsQ0FBQSxDQUFBLENBQUEsQ0FBQSxJQUFBQSxDQUFBO0FBQUE7O0FBQUEsZUFBQSxJQUFBQyxDQUFBLEdBQUEsRUFBQUgsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBRyxDQUFBLElBQUEsQ0FBQVosQ0FBQSxFQUFBWSxDQUFBLEVBQUE7QUFBQThELFlBQUFBLENBQUEsQ0FBQSxRQUFBOUQsQ0FBQSxDQUFBLEdBQUFGLENBQUEsRUFBQStELENBQUEsQ0FBQSxRQUFBN0QsQ0FBQSxDQUFBLEdBQUEsRUFBQSxFQUFBNkQsQ0FBQSxDQUFBLFFBQUE3RCxDQUFBLENBQUEsQ0FBQSxDQUFBLElBQUFGLENBQUEsRUFBQStELENBQUEsQ0FBQSxRQUFBN0QsQ0FBQSxDQUFBLENBQUEsQ0FBQSxJQUFBSCxDQUFBLEdBQUEsQ0FBQSxHQUFBRyxDQUFBO0FBQUE7O0FBQUFaLFVBQUFBLENBQUEsS0FBQSxDQUFBLEVBQUFTLENBQUEsS0FBQSxDQUFBO0FBQUE7QUFBQSxPQUFBLEVBQUEsRUFBQSxZQUFBO0FBQUEsYUFBQSxJQUFBVCxDQUFBLEdBQUEsQ0FBQSxFQUFBQSxDQUFBLEdBQUEsR0FBQSxFQUFBQSxDQUFBLEVBQUE7QUFBQXdGLFVBQUFB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QSxDQUFBLEVBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUE7QUFBQSxVQUFBQyxDQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxDQUFBO0FBQUEsVUFBQUMsQ0FBQSxHQUFBO0FBQUFRLFFBQUFBLENBQUEsRUFBQSxDQUFBO0FBQUFTLFFBQUFBLENBQUEsRUFBQSxDQUFBO0FBQUFtdkMsUUFBQUEsRUFBQSxFQUFBLENBQUE7QUFBQUMsUUFBQUEsRUFBQSxFQUFBLENBQUE7QUFBQTl2QyxRQUFBQSxDQUFBLEVBQUEsQ0FBQTtBQUFBRCxRQUFBQSxDQUFBLEVBQUEsQ0FBQTtBQUFBSSxRQUFBQSxDQUFBLEVBQUE7QUFBQSxPQUFBO0FBQUEsVUFBQWxFLENBQUEsR0FBQTtBQUFBLFdBQUEsQ0FBQTtBQUFBLFdBQUEsQ0FBQTtBQUFBLFdBQUEsQ0FBQTtBQUFBLFdBQUEsQ0FBQTtBQUFBLFlBQUEsQ0FBQTtBQUFBLGFBQUEsQ0FBQTtBQUFBLGFBQUEsQ0FBQTtBQUFBLGFBQUE7QUFBQSxPQUFBO0FBQUEsVUFBQUMsQ0FBQSxHQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLENBQUE7QUFBQSxVQUFBQyxDQUFBLEdBQUEsSUFBQXUwQixNQUFBLENBQUEsbUdBQUEsQ0FBQTtBQUFBLFVBQUFoeEIsQ0FBQSxHQUFBLENBQUEsQ0FBQTtBQUFBLFVBQUFDLENBQUEsR0FBQSxDQUFBO0FBQUEsV0FBQWl3QyxjQUFBLEdBQUEsRUFBQTs7QUFBQSxVQUFBaHdDLENBQUEsR0FBQSxTQUFBQSxDQUFBLENBQUE3RSxDQUFBLEVBQUE7QUFBQSxZQUFBUyxDQUFBLEdBQUFULENBQUEsQ0FBQXVCLFVBQUEsRUFBQTtBQUFBLFlBQUFiLENBQUEsR0FBQUQsQ0FBQSxJQUFBLENBQUE7QUFBQSxZQUFBRSxDQUFBLEdBQUFPLENBQUEsQ0FBQVIsQ0FBQSxDQUFBO0FBQUEsZUFBQSxLQUFBLENBQUEsS0FBQUMsQ0FBQSxH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QUFBczFDLG1CQUFBLENBQUE7QUFBQSxPQUFBLEVBQUEsS0FBQVQsY0FBQSxDQUFBanlCLFVBQUEsQ0FBQTVpQixDQUFBLENBQUEsRUFBQSxLQUFBNjBDLGNBQUE7QUFBQSxLQUFBOztBQUFBLFFBQUFwMEMsQ0FBQSxHQUFBLENBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsQ0FBQTtBQUFBLFFBQUFJLENBQUEsR0FBQSxJQUFBYixDQUFBLENBQUE2MEMsY0FBQSxDQUFBO0FBQUFLLE1BQUFBLGFBQUEsRUFBQSxDQUFBO0FBQUEsS0FBQSxD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QUFBQTtBQUFBLEdBQUEsRUFBQWdVLEVBQUEsQ0FBQXZVLFNBQUEsQ0FBQTg5QixPQUFBLEdBQUEsWUFBQTtBQUFBLFdBQUEsS0FBQWx1QixJQUFBO0FBQUEsR0FBQSxFQUFBdE0sTUFBQSxDQUFBMmlCLEdBQUEsR0FBQTFSLEVBQUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkJBLFlBQUE5VSxDQUFBLEVBQUE7QUFBQSxRQUFBb0UsQ0FBQSxHQUFBLEVBQUE7QUFBQSxRQUFBRyxDQUFBLEdBQUEsR0FBQTtBQUFBLFFBQUE5RCxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBOztBQUFBLGFBQUFzUCxFQUFBLEdBQUE7QUFBQSxVQUFBNUwsQ0FBQSxHQUFBLElBQUE7O0FBQUEsZUFBQWpELENBQUEsQ0FBQWxCLENBQUEsRUFBQVMsQ0FBQSxFQUFBO0FBQUEsYUFBQSxJQUFBQyxDQUFBLEdBQUEsQ0FBQSxFQUFBQSxDQUFBLElBQUEsSUFBQVYsQ0FBQSxFQUFBQSxDQUFBLE1BQUEsQ0FBQSxFQUFBVSxDQUFBLEtBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQUQsQ0FBQTtBQUFBO0FBQUE7O0FBQUEsZUFBQUMsQ0FBQSxLQUFBLENBQUE7QUFBQTs7QUFBQXlELE1BQUFBLENBQUEsQ0FBQTR5QyxVQUFBLEdBQUEsVUFBQS8yQyxDQUFBLEVBQUE7QUFBQSxZQUFBUyxDQUFBO0FBQUEsWUFBQUMsQ0FBQTtBQUFBLFlBQUFDLENBQUE7QUFBQSxZQUFBQyxDQUFBLEdBQUF1RCxDQUFBLENBQUE2eUMsUUFBQTtBQUFBLFlBQUFuMkMsQ0FBQSxHQUFBc0QsQ0FBQSxDQUFBOHlDLFNBQUEsQ0FBQUMsV0FBQTtBQUFBLFlBQUFwMkMsQ0FBQSxHQUFBcUQsQ0FBQSxDQUFBOHlDLFNBQUEsQ0FBQUUsS0FBQTtBQUFBLFlBQUFsMkMsQ0FBQSxHQUFBLENBQUEsQ0FBQTs7QUFBQSxhQUFBakIsQ0FBQSxDQUFBbzNDLFFBQUEsR0FBQSxDQUFBLEVBQUFwM0MsQ0FBQSxDQUFBcTNDLFFBQUEsR0FBQTl5QyxDQUFBLEVBQUE5RCxDQUFBLEdBQUEsQ0FBQSxFQUFBQSxDQUFBLEdBQUFLLENBQUEsRUFBQUwsQ0FBQSxFQUFBO0FBQUEsZ0JBQUFHLENBQUEsQ0FBQSxJQUFBSCxDQUFBLENBQUEsSUFBQVQsQ0FBQSxDQUFBczNDLElBQUEsQ0FBQSxFQUFBdDNDLENBQUEsQ0FBQW8zQyxRQUFBLElBQUFuMkMsQ0FBQSxHQUFBUixDQUFBLEVBQUFULENBQUEsQ0FBQXUzQyxLQUFBLENBQUE5MkMsQ0FBQSxJQUFBLENBQUEsSUFBQUcsQ0FBQSxDQUFBLElBQUFILENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxDQUFBO0FBQUE7O0FBQUEsZUFBQVQsQ0FBQSxDQUFBbzNDLFFBQUEsR0FBQSxDQUFBO0FBQUF4MkMsVUFBQUEsQ0FBQSxDQUFBLEtBQUFELENBQUEsR0FBQVgsQ0FBQSxDQUFBczNDLElBQUEsQ0FBQSxFQUFBdDNDLENBQUEsQ0FBQW8zQyxRQUFBLElBQUFuMkMsQ0FBQSxHQUFBLENBQUEsR0FBQSxFQUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsR0FBQSxDQUFBLEVBQUFqQixDQUFBLENBQUF1M0MsS0FBQSxDQUFBNTJDLENBQUEsSUFBQSxDQUFBLEVBQUFYLENBQUEsQ0FBQXczQyxPQUFBLEVBQUEsRUFBQTMyQyxDQUFBLEtBQUFiLENBQUEsQ0FBQXkzQyxVQUFBLElBQUE1MkMsQ0FBQSxDQUFBLElBQUFGLENBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQTtBQUFBOztBQUFBLGFBQUF3RCxDQUFBLENBQUF1ekMsUUFBQSxHQUFBejJDLENBQUEsRUFBQVIsQ0FBQSxHQUFBaUQsSUFBQSxDQUFBQyxLQUFBLENBQUEzRCxDQUFBLENBQUFvM0MsUUFBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLEtBQUEzMkMsQ0FBQSxFQUFBQSxDQUFBLEVBQUE7QUFBQVQsVUFBQUEsQ0FBQSxDQUFBMjNDLFVBQUEsQ0FBQS8yQyxDQUFBLEVBQUFILENBQUE7QUFBQTs7QUFBQSxhQUFBRSxDQUFBLEdBQUFHLENBQUEsRUFBQUwsQ0FBQSxHQUFBVCxDQUFBLENBQUFzM0MsSUFBQSxDQUFBLENBQUEsQ0FBQSxFQUFBdDNDLENBQUEsQ0FBQXMzQyxJQUFBLENBQUEsQ0FBQSxJQUFBdDNDLENBQUEsQ0FBQXMzQyxJQUFBLENBQUF0M0MsQ0FBQSxDQUFBbzNDLFFBQUEsRUFBQSxDQUFBLEVBQUFwM0MsQ0FBQSxDQUFBMjNDLFVBQUEsQ0FBQS8yQyxDQUFBLEVBQUEsQ0FBQSxDQUFBLEVBQUFGLENBQUEsR0FBQVYsQ0FBQSxDQUFBczNDLElBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQXQzQyxDQUFBLENBQUFzM0MsSUFBQSxDQUFBLEVBQUF0M0MsQ0FBQSxDQUFBcTNDLFFBQUEsSUFBQTUyQyxDQUFBLEVBQUFULENBQUEsQ0FBQXMzQyxJQUFBLENBQUEsRUFBQXQzQyxDQUFBLENBQUFxM0MsUUFBQSxJQUFBMzJDLENBQUEsRUFBQUUsQ0FBQSxDQUFBLElBQUFELENBQUEsQ0FBQSxHQUFBQyxDQUFBLENBQUEsSUFBQUgsQ0FBQSxDQUFBLEdBQUFHLENBQUEsQ0FBQSxJQUFBRixDQUFBLENBQUEsRUFBQVYsQ0FBQSxDQUFBdTNDLEtBQUEsQ0FBQTUyQyxDQUFBLElBQUErQyxJQUFBLENBQUEwVixHQUFBLENBQUFwWixDQUFBLENBQUF1M0MsS0FBQSxDQUFBOTJDLENBQUEsQ0FBQSxFQUFBVCxDQUFBLENBQUF1M0MsS0FBQSxDQUFBNzJDLENBQUEsQ0FBQSxJQUFBLENBQUEsRUFBQUUsQ0FBQSxDQUFBLElBQUFILENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQUcsQ0FBQSxDQUFBLElBQUFGLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQUMsQ0FBQSxFQUFBWCxDQUFBLENBQUFzM0MsSUFBQSxDQUFBLENBQUEsSUFBQTMyQyxDQUFBLEVBQUEsRUFBQVgsQ0FBQSxDQUFBMjNDLFVBQUEsQ0FBQS8yQyxDQUFBLEVBQUEsQ0FBQSxDQUFBLEVBQUEsS0FBQVosQ0FBQSxDQUFBbzNDLFFBQUE7QUFBQTtBQUFBOztBQUFBcDNDLFFBQUFBLENBQUEsQ0FBQXMzQyxJQUFBLENBQUEsRUFBQXQzQyxDQUFBLENBQUFxM0MsUUFBQSxJQUFBcjNDLENBQUEsQ0FBQXMzQyxJQUFBLENBQUEsQ0FBQSxDQUFBLEVBQUEsVUFBQXQzQyxDQUFBLEVBQUE7QUFBQSxjQUFBUyxDQUFBO0FBQUEsY0FBQUMsQ0FBQTtBQUFBLGNBQUFDLENBQUE7QUFBQSxjQUFBQyxDQUFBO0FBQUEsY0FBQUMsQ0FBQTtBQUFBLGNBQUFDLENBQUE7QUFBQSxjQUFBRyxDQUFBLEdBQUFrRCxDQUFBLENBQUE2eUMsUUFBQTtBQUFBLGNBQUE5MUMsQ0FBQSxHQUFBaUQsQ0FBQSxDQUFBOHlDLFNBQUEsQ0FBQUMsV0FBQTtBQUFBLGNBQUEvMUMsQ0FBQSxHQUFBZ0QsQ0FBQSxDQUFBOHlDLFNBQUEsQ0FBQVcsVUFBQTtBQUFBLGNBQUF4MkMsQ0FBQSxHQUFBK0MsQ0FBQSxDQUFBOHlDLFNBQUEsQ0FBQVksVUFBQTtBQUFBLGNBQUF4MkMsQ0FBQSxHQUFBOEMsQ0FBQSxDQUFBOHlDLFNBQUEsQ0FBQWEsVUFBQTtBQUFBLGNBQUF4ekMsQ0FBQSxHQUFBLENBQUE7O0FBQUEsZUFBQTFELENBQUEsR0FBQSxDQUFBLEVBQUFBLENBQUEsSUFBQXdELENBQUEsRUFBQXhELENBQUEsRUFBQTtBQUFBWixZQUFBQSxDQUFBLENBQUErM0MsUUFBQSxDQUFBbjNDLENBQUEsSUFBQSxDQUFBO0FBQUE7O0FBQUEsZUFBQUssQ0FBQSxDQUFBLElBQUFqQixDQUFBLENBQUFzM0MsSUFBQSxDQUFBdDNDLENBQUEsQ0FBQXEzQyxRQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQSxDQUFBLEVBQUE1MkMsQ0FBQSxHQUFBVCxDQUFBLENBQUFxM0MsUUFBQSxHQUFBLENBQUEsRUFBQTUyQyxDQUFBLEdBQUE4RCxDQUFBLEVBQUE5RCxDQUFBLEVBQUE7QUFBQVksWUFBQUEsQ0FBQSxJQUFBVCxDQUFBLEdBQUFLLENBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUEsS0FBQVAsQ0FBQSxHQUFBVixDQUFBLENBQUFzM0MsSUFBQSxDQUFBNzJDLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxLQUFBRyxDQUFBLEdBQUFTLENBQUEsRUFBQWlELENBQUEsRUFBQSxHQUFBckQsQ0FBQSxDQUFBLElBQUFQLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQUUsQ0FBQSxFQUFBRixDQUFBLEdBQUF5RCxDQUFBLENBQUF1ekMsUUFBQSxLQUFBMTNDLENBQUEsQ0FBQSszQyxRQUFBLENBQUFuM0MsQ0FBQSxLQUFBQyxDQUFBLEdBQUEsQ0FBQSxFQUFBTyxDQUFBLElBQUFWLENBQUEsS0FBQUcsQ0FBQSxHQUFBTSxDQUFBLENBQUFULENBQUEsR0FBQVUsQ0FBQSxDQUFBLENBQUEsRUFBQU4sQ0FBQSxHQUFBRyxDQUFBLENBQUEsSUFBQVAsQ0FBQSxDQUFBLEVBQUFWLENBQUEsQ0FBQXczQyxPQUFBLElBQUExMkMsQ0FBQSxJQUFBRixDQUFBLEdBQUFDLENBQUEsQ0FBQSxFQUFBSyxDQUFBLEtBQUFsQixDQUFBLENBQUF5M0MsVUFBQSxJQUFBMzJDLENBQUEsSUFBQUksQ0FBQSxDQUFBLElBQUFSLENBQUEsR0FBQSxDQUFBLENBQUEsR0FBQUcsQ0FBQSxDQUFBLENBQUEsQ0FBQTtBQUFBOztBQUFBLGNBQUEsTUFBQXlELENBQUEsRUFBQTtBQUFBLGVBQUE7QUFBQSxtQkFBQTFELENBQUEsR0FBQVMsQ0FBQSxHQUFBLENBQUEsRUFBQSxNQUFBckIsQ0FBQSxDQUFBKzNDLFFBQUEsQ0FBQW4zQyxDQUFBLENBQUE7QUFBQUEsZ0JBQUFBLENBQUE7QUFBQTs7QUFBQVosY0FBQUEsQ0FBQSxDQUFBKzNDLFFBQUEsQ0FBQW4zQyxDQUFBLEtBQUFaLENBQUEsQ0FBQSszQyxRQUFBLENBQUFuM0MsQ0FBQSxHQUFBLENBQUEsS0FBQSxDQUFBLEVBQUFaLENBQUEsQ0FBQSszQyxRQUFBLENBQUExMkMsQ0FBQSxHQUFBLEVBQUFpRCxDQUFBLElBQUEsQ0FBQTtBQUFBLGFBQUEsUUFBQSxJQUFBQSxDQUFBOztBQUFBLGlCQUFBMUQsQ0FBQSxHQUFBUyxDQUFBLEVBQUEsTUFBQVQsQ0FBQSxFQUFBQSxDQUFBLEVBQUE7QUFBQSxtQkFBQUYsQ0FBQSxHQUFBVixDQUFBLENBQUErM0MsUUFBQSxDQUFBbjNDLENBQUEsQ0FBQSxFQUFBLE1BQUFGLENBQUE7QUFBQSxpQkFBQUMsQ0FBQSxHQUFBWCxDQUFBLENBQUFzM0MsSUFBQSxDQUFBLEVBQUE3MkMsQ0FBQSxDQUFBLElBQUEwRCxDQUFBLENBQUF1ekMsUUFBQSxLQUFBejJDLENBQUEsQ0FBQSxJQUFBTixDQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUFDLENBQUEsS0FBQVosQ0FBQSxDQUFBdzNDLE9BQUEsSUFBQSxDQUFBNTJDLENBQUEsR0FBQUssQ0FBQSxDQUFBLElBQUFOLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQU0sQ0FBQSxDQUFBLElBQUFOLENBQUEsQ0FBQSxFQUFBTSxDQUFBLENBQUEsSUFBQU4sQ0FBQSxHQUFBLENBQUEsQ0FBQSxHQUFBQyxDQUFBLEdBQUFGLENBQUEsRUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFNBQUEsQ0FBQVYsQ0FBQSxDQUFBLEVBQUEsVUFBQUEsQ0FBQSxFQUFBUyxDQUFBLEVBQUFDLENBQUEsRUFBQTtBQUFBLGNBQUFDLENBQUE7QUFBQSxjQUFBQyxDQUFBO0FBQUEsY0FBQUMsQ0FBQTtBQUFBLGNBQUFDLENBQUEsR0FBQSxFQUFBO0FBQUEsY0FBQUcsQ0FBQSxHQUFBLENBQUE7O0FBQUEsZUFBQU4sQ0FBQSxHQUFBLENBQUEsRUFBQUEsQ0FBQSxJQUFBeUQsQ0FBQSxFQUFBekQsQ0FBQSxFQUFBO0FBQUFHLFlBQUFBLENBQUEsQ0FBQUgsQ0FBQSxDQUFBLEdBQUFNLENBQUEsR0FBQUEsQ0FBQSxHQUFBUCxDQUFBLENBQUFDLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBO0FBQUE7O0FBQUEsZUFBQUMsQ0FBQSxHQUFBLENBQUEsRUFBQUEsQ0FBQSxJQUFBSCxDQUFBLEVBQUFHLENBQUEsRUFBQTtBQUFBLG1CQUFBQyxDQUFBLEdBQUFiLENBQUEsQ0FBQSxJQUFBWSxDQUFBLEdBQUEsQ0FBQSxDQUFBLE1BQUFaLENBQUEsQ0FBQSxJQUFBWSxDQUFBLENBQUEsR0FBQU0sQ0FBQSxDQUFBSixDQUFBLENBQUFELENBQUEsQ0FBQSxFQUFBLEVBQUFBLENBQUEsQ0FBQTtBQUFBO0FBQUEsU0FBQSxDQUFBRCxDQUFBLEVBQUF1RCxDQUFBLENBQUF1ekMsUUFBQSxFQUFBMTNDLENBQUEsQ0FBQSszQyxRQUFBLENBQUE7QUFBQSxPQUFBO0FBQUE7O0FBQUEsYUFBQTluQyxFQUFBLENBQUFqUSxDQUFBLEVBQUFTLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsRUFBQTtBQUFBLFdBQUFzMkMsV0FBQSxHQUFBbDNDLENBQUEsRUFBQSxLQUFBNDNDLFVBQUEsR0FBQW4zQyxDQUFBLEVBQUEsS0FBQW8zQyxVQUFBLEdBQUFuM0MsQ0FBQSxFQUFBLEtBQUF5MkMsS0FBQSxHQUFBeDJDLENBQUEsRUFBQSxLQUFBbTNDLFVBQUEsR0FBQWwzQyxDQUFBO0FBQUE7O0FBQUFtUCxJQUFBQSxFQUFBLENBQUFpb0MsWUFBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUFqb0MsRUFBQSxDQUFBa29DLFdBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsRUFBQWxvQyxFQUFBLENBQUFtb0MsU0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLENBQUEsRUFBQW5vQyxFQUFBLENBQUFvb0MsTUFBQSxHQUFBLFVBQUFuNEMsQ0FBQSxFQUFBO0FBQUEsYUFBQUEsQ0FBQSxHQUFBLEdBQUEsR0FBQVMsQ0FBQSxDQUFBVCxDQUFBLENBQUEsR0FBQVMsQ0FBQSxDQUFBLE9BQUFULENBQUEsS0FBQSxDQUFBLENBQUEsQ0FBQTtBQUFBLEtBQUEsRUFBQStQLEVBQUEsQ0FBQXFvQyxXQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLEVBQUFyb0MsRUFBQSxDQUFBc29DLFdBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUF0b0MsRUFBQSxDQUFBdW9DLFlBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxFQUFBdm9DLEVBQUEsQ0FBQXdvQyxRQUFBLEdBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLENBQUEsRUFBQXRvQyxFQUFBLENBQUF1b0MsWUFBQSxHQUFBLENBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsRUFBQXZvQyxFQUFBLENBQUF3b0MsWUFBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLENBQUEsRUFBQXhvQyxFQUFBLENBQUF5b0MsYUFBQSxHQUFBLElBQUF6b0MsRUFBQSxDQUFBQSxFQUFBLENBQUF1b0MsWUFBQSxFQUFBem9DLEVBQUEsQ0FBQXFvQyxXQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQWgwQyxDQUFBLENBQUEsRUFBQTZMLEVBQUEsQ0FBQTBvQyxhQUFBLEdBQUEsSUFBQTFvQyxFQUFBLENBQUFBLEVBQUEsQ0FBQXdvQyxZQUFBLEVBQUExb0MsRUFBQSxDQUFBc29DLFdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBajBDLENBQUEsQ0FBQSxFQUFBNkwsRUFBQSxDQUFBMm9DLGNBQUEsR0FBQSxJQUFBM29DLEVBQUEsQ0FBQSxJQUFBLEVBQUFGLEVBQUEsQ0FBQXVvQyxZQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLENBQUE7O0FBQUEsYUFBQTUzQyxDQUFBLENBQUFWLENBQUEsRUFBQVMsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxFQUFBO0FBQUEsV0FBQWk0QyxXQUFBLEdBQUE3NEMsQ0FBQSxFQUFBLEtBQUE4NEMsUUFBQSxHQUFBcjRDLENBQUEsRUFBQSxLQUFBczRDLFdBQUEsR0FBQXI0QyxDQUFBLEVBQUEsS0FBQXM0QyxTQUFBLEdBQUFyNEMsQ0FBQSxFQUFBLEtBQUFzNEMsSUFBQSxHQUFBcjRDLENBQUE7QUFBQTs7QUFBQSxRQUFBK1AsRUFBQSxHQUFBLENBQUEsSUFBQWpRLENBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLEVBQUEsSUFBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsRUFBQSxJQUFBQSxDQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLElBQUFBLENBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxDQUFBLEVBQUEsSUFBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLENBQUEsRUFBQSxJQUFBQSxDQUFBLENBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLElBQUFBLENBQUEsQ0FBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxDQUFBLEVBQUEsSUFBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLENBQUEsRUFBQSxJQUFBQSxDQUFBLENBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsQ0FBQSxFQUFBLElBQUFBLENBQUEsQ0FBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUE7QUFBQSxRQUFBbVIsRUFBQSxHQUFBLENBQUEsaUJBQUEsRUFBQSxZQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxjQUFBLEVBQUEsWUFBQSxFQUFBLEVBQUEsRUFBQSxjQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQTs7QUFBQSxhQUFBRSxFQUFBLENBQUEvUixDQUFBLEVBQUFTLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEVBQUE7QUFBQSxVQUFBQyxDQUFBLEdBQUFaLENBQUEsQ0FBQSxJQUFBUyxDQUFBLENBQUE7QUFBQSxVQUFBSSxDQUFBLEdBQUFiLENBQUEsQ0FBQSxJQUFBVSxDQUFBLENBQUE7QUFBQSxhQUFBRSxDQUFBLEdBQUFDLENBQUEsSUFBQUQsQ0FBQSxJQUFBQyxDQUFBLElBQUFGLENBQUEsQ0FBQUYsQ0FBQSxDQUFBLElBQUFFLENBQUEsQ0FBQUQsQ0FBQSxDQUFBO0FBQUE7O0FBQUEsYUFBQUMsQ0FBQSxHQUFBO0FBQUEsVUFBQU8sQ0FBQTtBQUFBLFVBQUFDLENBQUE7QUFBQSxVQUFBQyxDQUFBO0FBQUEsVUFBQUMsQ0FBQTtBQUFBLFVBQUFpRCxDQUFBO0FBQUEsVUFBQUgsQ0FBQTtBQUFBLFVBQUFDLENBQUE7QUFBQSxVQUFBRyxDQUFBO0FBQUEsVUFBQTNELENBQUE7QUFBQSxVQUFBNEQsQ0FBQTtBQUFBLFVBQUFDLENBQUE7QUFBQSxVQUFBQyxDQUFBO0FBQUEsVUFBQUMsQ0FBQTtBQUFBLFVBQUE3RCxDQUFBO0FBQUEsVUFBQThELENBQUE7QUFBQSxVQUFBQyxDQUFBO0FBQUEsVUFBQUksQ0FBQTtBQUFBLFVBQUFDLENBQUE7QUFBQSxVQUFBQyxDQUFBO0FBQUEsVUFBQUMsQ0FBQTtBQUFBLFVBQUFwQixDQUFBO0FBQUEsVUFBQUMsQ0FBQTtBQUFBLFVBQUFDLENBQUE7QUFBQSxVQUFBRyxDQUFBO0FBQUEsVUFBQVMsQ0FBQTtBQUFBLFVBQUFDLENBQUE7QUFBQSxVQUFBQyxDQUFBO0FBQUEsVUFBQUssQ0FBQTtBQUFBLFVBQUFDLENBQUE7QUFBQSxVQUFBQyxDQUFBO0FBQUEsVUFBQXRFLENBQUE7QUFBQSxVQUFBdUUsQ0FBQTtBQUFBLFVBQUFDLENBQUE7QUFBQSxVQUFBQyxDQUFBO0FBQUEsVUFBQUMsQ0FBQTtBQUFBLFVBQUFDLENBQUE7QUFB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QUFBQSxjQUFBSyxDQUFBLENBQUEsQ0FBQTlELENBQUEsR0FBQVQsQ0FBQSxJQUFBYSxDQUFBLENBQUEsSUFBQVEsQ0FBQSxJQUFBa0QsQ0FBQSxDQUFBOUQsQ0FBQSxHQUFBSSxDQUFBLEdBQUEsQ0FBQSxDQUFBLElBQUFPLENBQUEsSUFBQW1ELENBQUEsQ0FBQTlELENBQUEsQ0FBQSxJQUFBOEQsQ0FBQSxDQUFBM0QsQ0FBQSxDQUFBLElBQUEyRCxDQUFBLENBQUEsRUFBQTlELENBQUEsQ0FBQSxJQUFBOEQsQ0FBQSxDQUFBM0QsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBO0FBQUFBLFlBQUFBLENBQUEsSUFBQSxDQUFBLEVBQUFILENBQUEsRUFBQTs7QUFBQSxlQUFBLENBQUEsQ0FBQSxRQUFBOEQsQ0FBQSxDQUFBLEVBQUEzRCxDQUFBLENBQUEsSUFBQTJELENBQUEsQ0FBQSxFQUFBOUQsQ0FBQSxDQUFBLElBQUE4RCxDQUFBLENBQUEsRUFBQTNELENBQUEsQ0FBQSxJQUFBMkQsQ0FBQSxDQUFBLEVBQUE5RCxDQUFBLENBQUEsSUFBQThELENBQUEsQ0FBQSxFQUFBM0QsQ0FBQSxDQUFBLElBQUEyRCxDQUFBLENBQUEsRUFBQTlELENBQUEsQ0FBQSxJQUFBOEQsQ0FBQSxDQUFBLEVBQUEzRCxDQUFBLENBQUEsSUFBQTJELENBQUEsQ0FBQSxFQUFBOUQsQ0FBQSxDQUFBLElBQUE4RCxDQUFBLENBQUEsRUFBQTNELENBQUEsQ0FBQSxJQUFBMkQsQ0FBQSxDQUFBLEVBQUE5RCxDQUFBLENBQUEsSUFBQThELENBQUEsQ0FBQSxFQUFBM0QsQ0FBQSxDQUFBLElBQUEyRCxDQUFBLENBQUEsRUFBQTlELENBQUEsQ0FBQSxJQUFBOEQsQ0FBQSxDQUFBLEVBQUEzRCxDQUFBLENBQUEsSUFBQTJELENBQUEsQ0FBQSxFQUFBOUQsQ0FBQSxDQUFBLElBQUE4RCxDQUFBLENBQUEsRUFBQTNELENBQUEsQ0FBQSxJQUFBMkQsQ0FBQSxDQUFBLEVBQUE5RCxDQUFBLENBQUEsSUFBQUcsQ0FBQSxHQUFBTyxDQUFBOztB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T0FBQTdQLENBQUEsQ0FBQXdCLE1BQUEsQ0FBQSxDQUFBLENBQUEsS0FBQXhCLENBQUEsR0FBQUEsQ0FBQSxDQUFBc00sTUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsQ0FBQSxFQUFBdE0sQ0FBQSxHQUFBLENBQUFBLENBQUEsR0FBQUEsQ0FBQSxDQUFBb0QsT0FBQSxDQUFBLElBQUEsRUFBQSxFQUFBLENBQUEsRUFBQW1GLFdBQUEsRUFBQTtBQUFBLFFBQUE3SCxDQUFBLEdBQUE7QUFBQSs1QyxNQUFBQSxTQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxZQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxJQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxVQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxLQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxLQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxNQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxLQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxjQUFBLEVBQUEsUUFBQTtBQUFBM0UsTUFBQUEsSUFBQSxFQUFBLFFBQUE7QUFBQTRFLE1BQUFBLFVBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLEtBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFNBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFNBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFVBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFNBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLEtBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLGNBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFFBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLE9BQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLElBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFFBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFFBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLGFBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFFBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFNBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFNBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFdBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLGNBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFVBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFVBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLE9BQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFVBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFlBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLGFBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLGFBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLGFBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFVBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFFBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFdBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLE9BQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFVBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFFBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFNBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFdBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFdBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLE9BQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFNBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFVBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLElBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFNBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLElBQUEsRUFBQSxRQUFBO0FBQUF0SCxNQUFBQSxLQUFBLEVBQUEsUUFBQTtBQUFBdUgsTUFBQUEsV0FBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsUUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsT0FBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsU0FBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsTUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsS0FBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsS0FBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsUUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsYUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsU0FBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsWUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsU0FBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsVUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsU0FBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsb0JBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFNBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFVBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFNBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFdBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLGFBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFlBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLGNBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLGNBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLGNBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFdBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLElBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLFNBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLEtBQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLE9BQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLE1BQUEsRUFBQSxRQUFBO0FBQUFDLE1BQUFBLGdCQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxVQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxZQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxZQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxjQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxlQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxpQkFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsZUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsZUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsWUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsU0FBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsU0FBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsUUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsV0FBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsSUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsT0FBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsS0FBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsU0FBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsTUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsU0FBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsTUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsYUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsU0FBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsYUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsYUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsVUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsU0FBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsSUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsSUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsSUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsVUFBQSxFQUFBLFFBQUE7QUFBQUMsTUFBQUEsTUFBQSxFQUFBLFFBQUE7QUFBQXJMLE1BQUFBLEdBQUEsRUFBQSxRQUFBO0FBQUFzTCxNQUFBQSxTQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxTQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxXQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxNQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxVQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxRQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxRQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxNQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxNQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxPQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxTQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxTQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxJQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxXQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxTQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxHQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxJQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxPQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxNQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxTQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxNQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxTQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxLQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxLQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxVQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxNQUFBLEVBQUEsUUFBQTtBQUFBQyxNQUFBQSxXQUFBLEVBQUE7QUFBQSxLQUFBOztBQUFBLFNBQUEsSUFBQXppRCxDQUFBLElBQUFELENBQUE7QUFBQVYsTUFBQUEsQ0FBQSxJQUFBVyxDQUFBLEtBQUFYLENBQUEsR0FBQVUsQ0FBQSxDQUFBQyxDQUFBLENBQUE7QUFBQTs7QUFBQSxTQUFBLElBQUFDLENBQUEsR0FBQSxDQUFBO0FBQUFpZCxNQUFBQSxFQUFBLEVBQUEsOENBQUE7QUFBQXdsQyxNQUFBQSxPQUFBLEVBQUEsQ0FBQSxtQkFBQSxFQUFBLGtCQUFBLENBQUE7QUFBQUMsTUFBQUEsT0FBQSxFQUFBLGlCQUFBdGpELENBQUEsRUFBQTtBQUFBLGVBQUEsQ0FBQXFNLFFBQUEsQ0FBQXJNLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxFQUFBcU0sUUFBQSxDQUFBck0sQ0FBQSxDQUFBLENBQUEsQ0FBQSxDQUFBLEVBQUFxTSxRQUFBLENBQUFyTSxDQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsQ0FB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QUMsQ0FBQSxJQUFBLENBQUE7QUFBQVMsWUFBQUEsQ0FBQSxDQUFBLENBQUEsWUFBQVAsQ0FBQSxHQUFBUSxDQUFBLENBQUFwQixDQUFBLENBQUF3QixNQUFBLENBQUFmLENBQUEsQ0FBQSxDQUFBLElBQUEsRUFBQSxHQUFBVyxDQUFBLENBQUFwQixDQUFBLENBQUF3QixNQUFBLENBQUFmLENBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLEVBQUEsR0FBQVcsQ0FBQSxDQUFBcEIsQ0FBQSxDQUFBd0IsTUFBQSxDQUFBZixDQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLEdBQUFXLENBQUEsQ0FBQXBCLENBQUEsQ0FBQXdCLE1BQUEsQ0FBQWYsQ0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsS0FBQSxFQUFBLENBQUEsRUFBQVUsQ0FBQSxDQUFBLENBQUEsUUFBQVAsQ0FBQSxLQUFBLENBQUEsQ0FBQSxFQUFBTyxDQUFBLENBQUEsTUFBQVAsQ0FBQSxDQUFBO0FBQUE7O0FBQUEsaUJBQUEsTUFBQUMsQ0FBQSxHQUFBTSxDQUFBLENBQUEsT0FBQVAsQ0FBQSxHQUFBUSxDQUFBLENBQUFwQixDQUFBLENBQUF3QixNQUFBLENBQUFmLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBVyxDQUFBLENBQUFwQixDQUFBLENBQUF3QixNQUFBLENBQUFmLENBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxDQUFBLEdBQUEsTUFBQUksQ0FBQSxLQUFBTSxDQUFBLENBQUEsQ0FBQVAsQ0FBQSxHQUFBUSxDQUFBLENBQUFwQixDQUFBLENBQUF3QixNQUFBLENBQUFmLENBQUEsQ0FBQSxDQUFBLElBQUEsRUFBQSxHQUFBVyxDQUFBLENBQUFwQixDQUFBLENBQUF3QixNQUFBLENBQUFmLENBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQVcsQ0FBQSxDQUFBcEIsQ0FBQSxDQUFBd0IsTUFBQSxDQUFBZixDQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsSUFB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QUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLENBQUEsQ0FBQTtBQUFBLFVBQUE1bEIsQ0FBQSxHQUFBLElBQUE0bEIsV0FBQSxDQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxDQUFBLENBQUE7QUFBQSxVQUFBM2xCLENBQUEsR0FBQSxJQUFBMmxCLFdBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxDQUFBLENBQUE7QUFBQSxVQUFBMWxCLENBQUEsR0FBQSxDQUFBLElBQUEwbEIsV0FBQSxDQUFBLENBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBO0FBQUEsVUFBQXJsQixDQUFBLEdBQUEsQ0FBQSxJQUFBcWxCLFdBQUEsQ0FBQSxDQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLENBQUEsRUFB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QkE7O0FBQ0EsWUFBQUUsYUFBQSxHQUFBRCxhQUFBLENBQUFqdkMsU0FBQSxDQUFBLFdBQUEsRUFBQSxHQUFBLENBQUE7QUFFQSxZQUFBMUgsS0FBQSxHQUFBMjJDLGFBQUEsQ0FBQTMyQyxLQUFBO0FBQ0EsWUFBQUMsTUFBQSxHQUFBMDJDLGFBQUEsQ0FBQTl1QyxZQUFBLENBekJBLENBMkJBO0FBQ0E7O0FBQ0EsWUFBQXpuQixDQUFBLEdBQUEsQ0FBQSxFQUFBO0FBQ0F3dEIsVUFBQUEsR0FBQSxDQUFBdFgsT0FBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLEVBREEsQ0FDQTtBQUNBLFNBL0JBLENBZ0NBOzs7QUFDQXNYLFFBQUFBLEdBQUEsQ0FBQXJYLE9BQUEsQ0FBQW5XLENBQUEsR0FBQSxDQUFBLEVBakNBLENBa0NBOztBQUNBd3RCLFFBQUFBLEdBQUEsQ0FBQTlDLFFBQUEsQ0FBQThyQyxhQUFBLEVBQUEsS0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUE1MkMsS0FBQSxHQUFBLEdBQUEsRUFBQUMsTUFBQSxHQUFBLEdBQUE7QUFFQSxPQXpDQSxDQTBDQTs7O0FBQ0EyTixNQUFBQSxHQUFBLENBQUF6WSxJQUFBLENBQUEsZ0JBQUE7QUFDQTRnRCxNQUFBQSxXQUFBLENBQUF2a0IsTUFBQTtBQUdBLEtBL0NBO0FBaURBLEdBckVBO0FBdUVBLENBbGVBLEVBa2VBdnJDLENBbGVBLEVBa2VBMlksS0FsZUEsRUFrZUE0WSxXQWxlQSIsImZpbGUiOiJhbGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24odCl7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZSh0KTp0KCl9KGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7XHJcbi8qKiBAbGljZW5zZVxyXG4gICAqIGpzUERGIC0gUERGIERvY3VtZW50IGNyZWF0aW9uIGZyb20gSmF2YVNjcmlwdFxyXG4gICAqIFZlcnNpb24gMS41LjMgQnVpbHQgb24gMjAxOC0xMi0yN1QxNDoxMTo0Mi42OTZaXHJcbiAgICogICAgICAgICAgICAgICAgICAgICAgQ29tbWl0SUQgZDkzZDI4ZGIxNFxyXG4gICAqXHJcbiAgICogQ29weXJpZ2h0IChjKSAyMDEwLTIwMTYgSmFtZXMgSGFsbCA8amFtZXNAcGFyYWxsLmF4PiwgaHR0cHM6Ly9naXRodWIuY29tL01yUmlvL2pzUERGXHJcbiAgICogICAgICAgICAgICAgICAyMDEwIEFhcm9uIFNwaWtlLCBodHRwczovL2dpdGh1Yi5jb20vYWNzcGlrZVxyXG4gICAqICAgICAgICAgICAgICAgMjAxMiBXaWxsb3cgU3lzdGVtcyBDb3Jwb3JhdGlvbiwgd2lsbG93LXN5c3RlbXMuY29tXHJcbiAgICogICAgICAgICAgICAgICAyMDEyIFBhYmxvIEhlc3MsIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWJsb2hlc3NcclxuICAgKiAgICAgICAgICAgICAgIDIwMTIgRmxvcmlhbiBKZW5ldHQsIGh0dHBzOi8vZ2l0aHViLmNvbS9mamVuZXR0XHJcbiAgICogICAgICAgICAgICAgICAyMDEzIFdhcnJlbiBXZWNrZXNzZXIsIGh0dHBzOi8vZ2l0aHViLmNvbS93YXJyZW53ZWNrZXNzZXJcclxuICAgKiAgICAgICAgICAgICAgIDIwMTMgWW91c3NlZiBCZWRkYWQsIGh0dHBzOi8vZ2l0aHViLmNvbS9saWZvZlxyXG4gICAqICAgICAgICAgICAgICAgMjAxMyBMZWUgRHJpc2NvbGwsIGh0dHBzOi8vZ2l0aHViLmNvbS9sc2RyaXNjb2xsXHJcbiAgICogICAgICAgICAgICAgICAyMDEzIFN0ZWZhbiBTbG9uZXZza2l5LCBodHRwczovL2dpdGh1Yi5jb20vc3RlZnNsb25cclxuICAgKiAgICAgICAgICAgICAgIDIwMTMgSmVyZW15IE1vcmVsLCBodHRwczovL2dpdGh1Yi5jb20vam1vcmVsXHJcbiAgICogICAgICAgICAgICAgICAyMDEzIENocmlzdG9waCBIYXJ0bWFubiwgaHR0cHM6Ly9naXRodWIuY29tL2NocmlzLXJvY2tcclxuICAgKiAgICAgICAgICAgICAgIDIwMTQgSnVhbiBQYWJsbyBHYXZpcmlhLCBodHRwczovL2dpdGh1Yi5jb20vanVhbnBnYXZpcmlhXHJcbiAgICogICAgICAgICAgICAgICAyMDE0IEphbWVzIE1ha2VzLCBodHRwczovL2dpdGh1Yi5jb20vZG9sbGFydXdcclxuICAgKiAgICAgICAgICAgICAgIDIwMTQgRGllZ28gQ2Fzb3JyYW4sIGh0dHBzOi8vZ2l0aHViLmNvbS9kaWVnb2NyXHJcbiAgICogICAgICAgICAgICAgICAyMDE0IFN0ZXZlbiBTcHVuZ2luLCBodHRwczovL2dpdGh1Yi5jb20vRmxhbWVuY29cclxuICAgKiAgICAgICAgICAgICAgIDIwMTQgS2VubmV0aCBHbGFzc2V5LCBodHRwczovL2dpdGh1Yi5jb20vR2F2dmVyc1xyXG4gICAqXHJcbiAgICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXHJcbiAgICpcclxuICAgKiBDb250cmlidXRvcihzKTpcclxuICAgKiAgICBzaWVma2VuaiwgYWh3b2xmLCByaWNreWd1LCBNaWRuaXRoLCBzYWludGNsYWlyLCBlYXBhcmFuZ28sXHJcbiAgICogICAga2ltM2VyLCBtZm8sIGFsbm9ydGgsIEZsYW1lbmNvXHJcbiAgICovZnVuY3Rpb24gc2UodCl7cmV0dXJuKHNlPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIHR9KSh0KX0hZnVuY3Rpb24odCl7aWYoXCJvYmplY3RcIiE9PXNlKHQuY29uc29sZSkpe3QuY29uc29sZT17fTtmb3IodmFyIGUsbixyPXQuY29uc29sZSxpPWZ1bmN0aW9uKCl7fSxvPVtcIm1lbW9yeVwiXSxhPVwiYXNzZXJ0LGNsZWFyLGNvdW50LGRlYnVnLGRpcixkaXJ4bWwsZXJyb3IsZXhjZXB0aW9uLGdyb3VwLGdyb3VwQ29sbGFwc2VkLGdyb3VwRW5kLGluZm8sbG9nLG1hcmtUaW1lbGluZSxwcm9maWxlLHByb2ZpbGVzLHByb2ZpbGVFbmQsc2hvdyx0YWJsZSx0aW1lLHRpbWVFbmQsdGltZWxpbmUsdGltZWxpbmVFbmQsdGltZVN0YW1wLHRyYWNlLHdhcm5cIi5zcGxpdChcIixcIik7ZT1vLnBvcCgpOylyW2VdfHwocltlXT17fSk7Zm9yKDtuPWEucG9wKCk7KXJbbl18fChyW25dPWkpfXZhciBzLGwsaCx1LGM9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiO3ZvaWQgMD09PXQuYnRvYSYmKHQuYnRvYT1mdW5jdGlvbih0KXt2YXIgZSxuLHIsaSxvLGE9MCxzPTAsbD1cIlwiLGg9W107aWYoIXQpcmV0dXJuIHQ7Zm9yKDtlPShvPXQuY2hhckNvZGVBdChhKyspPDwxNnx0LmNoYXJDb2RlQXQoYSsrKTw8OHx0LmNoYXJDb2RlQXQoYSsrKSk+PjE4JjYzLG49bz4+MTImNjMscj1vPj42JjYzLGk9NjMmbyxoW3MrK109Yy5jaGFyQXQoZSkrYy5jaGFyQXQobikrYy5jaGFyQXQocikrYy5jaGFyQXQoaSksYTx0Lmxlbmd0aDspO2w9aC5qb2luKFwiXCIpO3ZhciB1PXQubGVuZ3RoJTM7cmV0dXJuKHU/bC5zbGljZSgwLHUtMyk6bCkrXCI9PT1cIi5zbGljZSh1fHwzKX0pLHZvaWQgMD09PXQuYXRvYiYmKHQuYXRvYj1mdW5jdGlvbih0KXt2YXIgZSxuLHIsaSxvLGEscz0wLGw9MCxoPVtdO2lmKCF0KXJldHVybiB0O2Zvcih0Kz1cIlwiO2U9KGE9Yy5pbmRleE9mKHQuY2hhckF0KHMrKykpPDwxOHxjLmluZGV4T2YodC5jaGFyQXQocysrKSk8PDEyfChpPWMuaW5kZXhPZih0LmNoYXJBdChzKyspKSk8PDZ8KG89Yy5pbmRleE9mKHQuY2hhckF0KHMrKykpKSk+PjE2JjI1NSxuPWE+PjgmMjU1LHI9MjU1JmEsaFtsKytdPTY0PT1pP1N0cmluZy5mcm9tQ2hhckNvZGUoZSk6NjQ9PW8/U3RyaW5nLmZyb21DaGFyQ29kZShlLG4pOlN0cmluZy5mcm9tQ2hhckNvZGUoZSxuLHIpLHM8dC5sZW5ndGg7KTtyZXR1cm4gaC5qb2luKFwiXCIpfSksQXJyYXkucHJvdG90eXBlLm1hcHx8KEFycmF5LnByb3RvdHlwZS5tYXA9ZnVuY3Rpb24odCl7aWYobnVsbD09dGhpc3x8XCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yO2Zvcih2YXIgZT1PYmplY3QodGhpcyksbj1lLmxlbmd0aD4+PjAscj1uZXcgQXJyYXkobiksaT0xPGFyZ3VtZW50cy5sZW5ndGg/YXJndW1lbnRzWzFdOnZvaWQgMCxvPTA7bzxuO28rKylvIGluIGUmJihyW29dPXQuY2FsbChpLGVbb10sbyxlKSk7cmV0dXJuIHJ9KSxBcnJheS5pc0FycmF5fHwoQXJyYXkuaXNBcnJheT1mdW5jdGlvbih0KXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCl9KSxBcnJheS5wcm90b3R5cGUuZm9yRWFjaHx8KEFycmF5LnByb3RvdHlwZS5mb3JFYWNoPWZ1bmN0aW9uKHQsZSl7aWYobnVsbD09dGhpc3x8XCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yO2Zvcih2YXIgbj1PYmplY3QodGhpcykscj1uLmxlbmd0aD4+PjAsaT0wO2k8cjtpKyspaSBpbiBuJiZ0LmNhbGwoZSxuW2ldLGksbil9KSxBcnJheS5wcm90b3R5cGUuZmluZHx8T2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSxcImZpbmRcIix7dmFsdWU6ZnVuY3Rpb24odCl7aWYobnVsbD09dGhpcyl0aHJvdyBuZXcgVHlwZUVycm9yKCdcInRoaXNcIiBpcyBudWxsIG9yIG5vdCBkZWZpbmVkJyk7dmFyIGU9T2JqZWN0KHRoaXMpLG49ZS5sZW5ndGg+Pj4wO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcihcInByZWRpY2F0ZSBtdXN0IGJlIGEgZnVuY3Rpb25cIik7Zm9yKHZhciByPWFyZ3VtZW50c1sxXSxpPTA7aTxuOyl7dmFyIG89ZVtpXTtpZih0LmNhbGwocixvLGksZSkpcmV0dXJuIG87aSsrfX0sY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSksT2JqZWN0LmtleXN8fChPYmplY3Qua2V5cz0ocz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGw9IXt0b1N0cmluZzpudWxsfS5wcm9wZXJ0eUlzRW51bWVyYWJsZShcInRvU3RyaW5nXCIpLHU9KGg9W1widG9TdHJpbmdcIixcInRvTG9jYWxlU3RyaW5nXCIsXCJ2YWx1ZU9mXCIsXCJoYXNPd25Qcm9wZXJ0eVwiLFwiaXNQcm90b3R5cGVPZlwiLFwicHJvcGVydHlJc0VudW1lcmFibGVcIixcImNvbnN0cnVjdG9yXCJdKS5sZW5ndGgsZnVuY3Rpb24odCl7aWYoXCJvYmplY3RcIiE9PXNlKHQpJiYoXCJmdW5jdGlvblwiIT10eXBlb2YgdHx8bnVsbD09PXQpKXRocm93IG5ldyBUeXBlRXJyb3I7dmFyIGUsbixyPVtdO2ZvcihlIGluIHQpcy5jYWxsKHQsZSkmJnIucHVzaChlKTtpZihsKWZvcihuPTA7bjx1O24rKylzLmNhbGwodCxoW25dKSYmci5wdXNoKGhbbl0pO3JldHVybiByfSkpLFwiZnVuY3Rpb25cIiE9dHlwZW9mIE9iamVjdC5hc3NpZ24mJihPYmplY3QuYXNzaWduPWZ1bmN0aW9uKHQpe2lmKG51bGw9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdFwiKTt0PU9iamVjdCh0KTtmb3IodmFyIGU9MTtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXt2YXIgbj1hcmd1bWVudHNbZV07aWYobnVsbCE9bilmb3IodmFyIHIgaW4gbilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixyKSYmKHRbcl09bltyXSl9cmV0dXJuIHR9KSxTdHJpbmcucHJvdG90eXBlLnRyaW18fChTdHJpbmcucHJvdG90eXBlLnRyaW09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLFwiXCIpfSksU3RyaW5nLnByb3RvdHlwZS50cmltTGVmdHx8KFN0cmluZy5wcm90b3R5cGUudHJpbUxlZnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZXBsYWNlKC9eXFxzKy9nLFwiXCIpfSksU3RyaW5nLnByb3RvdHlwZS50cmltUmlnaHR8fChTdHJpbmcucHJvdG90eXBlLnRyaW1SaWdodD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlcGxhY2UoL1xccyskL2csXCJcIil9KSxOdW1iZXIuaXNJbnRlZ2VyPU51bWJlci5pc0ludGVnZXJ8fGZ1bmN0aW9uKHQpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiB0JiZpc0Zpbml0ZSh0KSYmTWF0aC5mbG9vcih0KT09PXR9fShcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZnx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93fHxcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsJiZnbG9iYWx8fEZ1bmN0aW9uKCdyZXR1cm4gdHlwZW9mIHRoaXMgPT09IFwib2JqZWN0XCIgJiYgdGhpcy5jb250ZW50JykoKXx8RnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpKTt2YXIgdCxlLG4sXyxsLEYsUCxwLGQsayxhLG8scyxoLHUsYyxyLGksZixnLG0seSx2LHcsYix4LEksQyxCLE4sTCxBLFMsaixFLE0sTyxxLFQsUixELFUseixILFcsVixHLFksSixYLEssWixRLCQsdHQsZXQsbnQscnQsaXQsb3QsYXQsc3QsbHQ9ZnVuY3Rpb24oaWUpe2Z1bmN0aW9uIG9lKG8pe2lmKFwib2JqZWN0XCIhPT1zZShvKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIENvbnRleHQgcGFzc2VkIHRvIGluaXRpYWxpemUgUHViU3ViIChqc1BERi1tb2R1bGUpXCIpO3ZhciBhPXt9O3RoaXMuc3Vic2NyaWJlPWZ1bmN0aW9uKHQsZSxuKXtpZihuPW58fCExLFwic3RyaW5nXCIhPXR5cGVvZiB0fHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBlfHxcImJvb2xlYW5cIiE9dHlwZW9mIG4pdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudHMgcGFzc2VkIHRvIFB1YlN1Yi5zdWJzY3JpYmUgKGpzUERGLW1vZHVsZSlcIik7YS5oYXNPd25Qcm9wZXJ0eSh0KXx8KGFbdF09e30pO3ZhciByPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzUpO3JldHVybiBhW3RdW3JdPVtlLCEhbl0scn0sdGhpcy51bnN1YnNjcmliZT1mdW5jdGlvbih0KXtmb3IodmFyIGUgaW4gYSlpZihhW2VdW3RdKXJldHVybiBkZWxldGUgYVtlXVt0XSwwPT09T2JqZWN0LmtleXMoYVtlXSkubGVuZ3RoJiZkZWxldGUgYVtlXSwhMDtyZXR1cm4hMX0sdGhpcy5wdWJsaXNoPWZ1bmN0aW9uKHQpe2lmKGEuaGFzT3duUHJvcGVydHkodCkpe3ZhciBlPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSxuPVtdO2Zvcih2YXIgciBpbiBhW3RdKXt2YXIgaT1hW3RdW3JdO3RyeXtpWzBdLmFwcGx5KG8sZSl9Y2F0Y2godCl7aWUuY29uc29sZSYmY29uc29sZS5lcnJvcihcImpzUERGIFB1YlN1YiBFcnJvclwiLHQubWVzc2FnZSx0KX1pWzFdJiZuLnB1c2gocil9bi5sZW5ndGgmJm4uZm9yRWFjaCh0aGlzLnVuc3Vic2NyaWJlKX19LHRoaXMuZ2V0VG9waWNzPWZ1bmN0aW9uKCl7cmV0dXJuIGF9fWZ1bmN0aW9uIGFlKHQsZSxpLG4pe3ZhciByPXt9LG89W10sYT0xO1wib2JqZWN0XCI9PT1zZSh0KSYmKHQ9KHI9dCkub3JpZW50YXRpb24sZT1yLnVuaXR8fGUsaT1yLmZvcm1hdHx8aSxuPXIuY29tcHJlc3N8fHIuY29tcHJlc3NQZGZ8fG4sbz1yLmZpbHRlcnN8fCghMD09PW4/W1wiRmxhdGVFbmNvZGVcIl06byksYT1cIm51bWJlclwiPT10eXBlb2Ygci51c2VyVW5pdD9NYXRoLmFicyhyLnVzZXJVbml0KToxKSxlPWV8fFwibW1cIix0PShcIlwiKyh0fHxcIlBcIikpLnRvTG93ZXJDYXNlKCk7dmFyIHM9ci5wdXRPbmx5VXNlZEZvbnRzfHwhMCxLPXt9LGw9e2ludGVybmFsOnt9LF9fcHJpdmF0ZV9fOnt9fTtsLl9fcHJpdmF0ZV9fLlB1YlN1Yj1vZTt2YXIgaD1cIjEuM1wiLHU9bC5fX3ByaXZhdGVfXy5nZXRQZGZWZXJzaW9uPWZ1bmN0aW9uKCl7cmV0dXJuIGh9LGM9KGwuX19wcml2YXRlX18uc2V0UGRmVmVyc2lvbj1mdW5jdGlvbih0KXtoPXR9LHthMDpbMjM4My45NCwzMzcwLjM5XSxhMTpbMTY4My43OCwyMzgzLjk0XSxhMjpbMTE5MC41NSwxNjgzLjc4XSxhMzpbODQxLjg5LDExOTAuNTVdLGE0Ols1OTUuMjgsODQxLjg5XSxhNTpbNDE5LjUzLDU5NS4yOF0sYTY6WzI5Ny42NCw0MTkuNTNdLGE3OlsyMDkuNzYsMjk3LjY0XSxhODpbMTQ3LjQsMjA5Ljc2XSxhOTpbMTA0Ljg4LDE0Ny40XSxhMTA6WzczLjcsMTA0Ljg4XSxiMDpbMjgzNC42NSw0MDA4LjE5XSxiMTpbMjAwNC4wOSwyODM0LjY1XSxiMjpbMTQxNy4zMiwyMDA0LjA5XSxiMzpbMTAwMC42MywxNDE3LjMyXSxiNDpbNzA4LjY2LDEwMDAuNjNdLGI1Ols0OTguOSw3MDguNjZdLGI2OlszNTQuMzMsNDk4LjldLGI3OlsyNDkuNDUsMzU0LjMzXSxiODpbMTc1Ljc1LDI0OS40NV0sYjk6WzEyNC43MiwxNzUuNzVdLGIxMDpbODcuODcsMTI0LjcyXSxjMDpbMjU5OS4zNywzNjc2LjU0XSxjMTpbMTgzNi44NSwyNTk5LjM3XSxjMjpbMTI5OC4yNywxODM2Ljg1XSxjMzpbOTE4LjQzLDEyOTguMjddLGM0Ols2NDkuMTMsOTE4LjQzXSxjNTpbNDU5LjIxLDY0OS4xM10sYzY6WzMyMy4xNSw0NTkuMjFdLGM3OlsyMjkuNjEsMzIzLjE1XSxjODpbMTYxLjU3LDIyOS42MV0sYzk6WzExMy4zOSwxNjEuNTddLGMxMDpbNzkuMzcsMTEzLjM5XSxkbDpbMzExLjgxLDYyMy42Ml0sbGV0dGVyOls2MTIsNzkyXSxcImdvdmVybm1lbnQtbGV0dGVyXCI6WzU3Niw3NTZdLGxlZ2FsOls2MTIsMTAwOF0sXCJqdW5pb3ItbGVnYWxcIjpbNTc2LDM2MF0sbGVkZ2VyOlsxMjI0LDc5Ml0sdGFibG9pZDpbNzkyLDEyMjRdLFwiY3JlZGl0LWNhcmRcIjpbMTUzLDI0M119KSxmPShsLl9fcHJpdmF0ZV9fLmdldFBhZ2VGb3JtYXRzPWZ1bmN0aW9uKCl7cmV0dXJuIGN9LGwuX19wcml2YXRlX18uZ2V0UGFnZUZvcm1hdD1mdW5jdGlvbih0KXtyZXR1cm4gY1t0XX0pO1wic3RyaW5nXCI9PXR5cGVvZiBpJiYoaT1mKGkpKSxpPWl8fGYoXCJhNFwiKTt2YXIgcCxaPWwuZjI9bC5fX3ByaXZhdGVfXy5mMj1mdW5jdGlvbih0KXtpZihpc05hTih0KSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCB0byBqc1BERi5mMlwiKTtyZXR1cm4gdC50b0ZpeGVkKDIpfSxRPWwuX19wcml2YXRlX18uZjM9ZnVuY3Rpb24odCl7aWYoaXNOYU4odCkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudCBwYXNzZWQgdG8ganNQREYuZjNcIik7cmV0dXJuIHQudG9GaXhlZCgzKX0sZD1cIjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsZz1sLl9fcHJpdmF0ZV9fLmdldEZpbGVJZD1mdW5jdGlvbigpe3JldHVybiBkfSxtPWwuX19wcml2YXRlX18uc2V0RmlsZUlkPWZ1bmN0aW9uKHQpe3JldHVybiB0PXR8fFwiMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTJcIi5zcGxpdChcIlwiKS5tYXAoZnVuY3Rpb24oKXtyZXR1cm5cIkFCQ0RFRjAxMjM0NTY3ODlcIi5jaGFyQXQoTWF0aC5mbG9vcigxNipNYXRoLnJhbmRvbSgpKSl9KS5qb2luKFwiXCIpLGQ9dH07bC5zZXRGaWxlSWQ9ZnVuY3Rpb24odCl7cmV0dXJuIG0odCksdGhpc30sbC5nZXRGaWxlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZygpfTt2YXIgeT1sLl9fcHJpdmF0ZV9fLmNvbnZlcnREYXRlVG9QREZEYXRlPWZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0VGltZXpvbmVPZmZzZXQoKSxuPWU8MD9cIitcIjpcIi1cIixyPU1hdGguZmxvb3IoTWF0aC5hYnMoZS82MCkpLGk9TWF0aC5hYnMoZSU2MCksbz1bbixQKHIpLFwiJ1wiLFAoaSksXCInXCJdLmpvaW4oXCJcIik7cmV0dXJuW1wiRDpcIix0LmdldEZ1bGxZZWFyKCksUCh0LmdldE1vbnRoKCkrMSksUCh0LmdldERhdGUoKSksUCh0LmdldEhvdXJzKCkpLFAodC5nZXRNaW51dGVzKCkpLFAodC5nZXRTZWNvbmRzKCkpLG9dLmpvaW4oXCJcIil9LHY9bC5fX3ByaXZhdGVfXy5jb252ZXJ0UERGRGF0ZVRvRGF0ZT1mdW5jdGlvbih0KXt2YXIgZT1wYXJzZUludCh0LnN1YnN0cigyLDQpLDEwKSxuPXBhcnNlSW50KHQuc3Vic3RyKDYsMiksMTApLTEscj1wYXJzZUludCh0LnN1YnN0cig4LDIpLDEwKSxpPXBhcnNlSW50KHQuc3Vic3RyKDEwLDIpLDEwKSxvPXBhcnNlSW50KHQuc3Vic3RyKDEyLDIpLDEwKSxhPXBhcnNlSW50KHQuc3Vic3RyKDE0LDIpLDEwKTtwYXJzZUludCh0LnN1YnN0cigxNiwyKSwxMCkscGFyc2VJbnQodC5zdWJzdHIoMjAsMiksMTApO3JldHVybiBuZXcgRGF0ZShlLG4scixpLG8sYSwwKX0sdz1sLl9fcHJpdmF0ZV9fLnNldENyZWF0aW9uRGF0ZT1mdW5jdGlvbih0KXt2YXIgZTtpZih2b2lkIDA9PT10JiYodD1uZXcgRGF0ZSksXCJvYmplY3RcIj09PXNlKHQpJiZcIltvYmplY3QgRGF0ZV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSllPXkodCk7ZWxzZXtpZighL15EOigyMFswLTJdWzAtOV18MjAzWzAtN118MTlbNy05XVswLTldKSgwWzAtOV18MVswLTJdKShbMC0yXVswLTldfDNbMC0xXSkoMFswLTldfDFbMC05XXwyWzAtM10pKDBbMC05XXxbMS01XVswLTldKSgwWzAtOV18WzEtNV1bMC05XSkoXFwrMFswLTldfFxcKzFbMC00XXxcXC0wWzAtOV18XFwtMVswLTFdKVxcJygwWzAtOV18WzEtNV1bMC05XSlcXCc/JC8udGVzdCh0KSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCB0byBqc1BERi5zZXRDcmVhdGlvbkRhdGVcIik7ZT10fXJldHVybiBwPWV9LGI9bC5fX3ByaXZhdGVfXy5nZXRDcmVhdGlvbkRhdGU9ZnVuY3Rpb24odCl7dmFyIGU9cDtyZXR1cm5cImpzRGF0ZVwiPT09dCYmKGU9dihwKSksZX07bC5zZXRDcmVhdGlvbkRhdGU9ZnVuY3Rpb24odCl7cmV0dXJuIHcodCksdGhpc30sbC5nZXRDcmVhdGlvbkRhdGU9ZnVuY3Rpb24odCl7cmV0dXJuIGIodCl9O3ZhciB4LE4sTCxBLFMsJCxfLEYsUD1sLl9fcHJpdmF0ZV9fLnBhZGQyPWZ1bmN0aW9uKHQpe3JldHVybihcIjBcIitwYXJzZUludCh0KSkuc2xpY2UoLTIpfSxrPSExLEk9W10sQz1bXSxCPTAsdHQ9KGwuX19wcml2YXRlX18uc2V0Q3VzdG9tT3V0cHV0RGVzdGluYXRpb249ZnVuY3Rpb24odCl7Tj10fSxsLl9fcHJpdmF0ZV9fLnJlc2V0Q3VzdG9tT3V0cHV0RGVzdGluYXRpb249ZnVuY3Rpb24odCl7Tj12b2lkIDB9LGwuX19wcml2YXRlX18ub3V0PWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiB0PVwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6dC50b1N0cmluZygpLChlPXZvaWQgMD09PU4/az9JW3hdOkM6TikucHVzaCh0KSxrfHwoQis9dC5sZW5ndGgrMSksZX0pLGo9bC5fX3ByaXZhdGVfXy53cml0ZT1mdW5jdGlvbih0KXtyZXR1cm4gdHQoMT09PWFyZ3VtZW50cy5sZW5ndGg/dC50b1N0cmluZygpOkFycmF5LnByb3RvdHlwZS5qb2luLmNhbGwoYXJndW1lbnRzLFwiIFwiKSl9LEU9bC5fX3ByaXZhdGVfXy5nZXRBcnJheUJ1ZmZlcj1mdW5jdGlvbih0KXtmb3IodmFyIGU9dC5sZW5ndGgsbj1uZXcgQXJyYXlCdWZmZXIoZSkscj1uZXcgVWludDhBcnJheShuKTtlLS07KXJbZV09dC5jaGFyQ29kZUF0KGUpO3JldHVybiBufSxNPVtbXCJIZWx2ZXRpY2FcIixcImhlbHZldGljYVwiLFwibm9ybWFsXCIsXCJXaW5BbnNpRW5jb2RpbmdcIl0sW1wiSGVsdmV0aWNhLUJvbGRcIixcImhlbHZldGljYVwiLFwiYm9sZFwiLFwiV2luQW5zaUVuY29kaW5nXCJdLFtcIkhlbHZldGljYS1PYmxpcXVlXCIsXCJoZWx2ZXRpY2FcIixcIml0YWxpY1wiLFwiV2luQW5zaUVuY29kaW5nXCJdLFtcIkhlbHZldGljYS1Cb2xkT2JsaXF1ZVwiLFwiaGVsdmV0aWNhXCIsXCJib2xkaXRhbGljXCIsXCJXaW5BbnNpRW5jb2RpbmdcIl0sW1wiQ291cmllclwiLFwiY291cmllclwiLFwibm9ybWFsXCIsXCJXaW5BbnNpRW5jb2RpbmdcIl0sW1wiQ291cmllci1Cb2xkXCIsXCJjb3VyaWVyXCIsXCJib2xkXCIsXCJXaW5BbnNpRW5jb2RpbmdcIl0sW1wiQ291cmllci1PYmxpcXVlXCIsXCJjb3VyaWVyXCIsXCJpdGFsaWNcIixcIldpbkFuc2lFbmNvZGluZ1wiXSxbXCJDb3VyaWVyLUJvbGRPYmxpcXVlXCIsXCJjb3VyaWVyXCIsXCJib2xkaXRhbGljXCIsXCJXaW5BbnNpRW5jb2RpbmdcIl0sW1wiVGltZXMtUm9tYW5cIixcInRpbWVzXCIsXCJub3JtYWxcIixcIldpbkFuc2lFbmNvZGluZ1wiXSxbXCJUaW1lcy1Cb2xkXCIsXCJ0aW1lc1wiLFwiYm9sZFwiLFwiV2luQW5zaUVuY29kaW5nXCJdLFtcIlRpbWVzLUl0YWxpY1wiLFwidGltZXNcIixcIml0YWxpY1wiLFwiV2luQW5zaUVuY29kaW5nXCJdLFtcIlRpbWVzLUJvbGRJdGFsaWNcIixcInRpbWVzXCIsXCJib2xkaXRhbGljXCIsXCJXaW5BbnNpRW5jb2RpbmdcIl0sW1wiWmFwZkRpbmdiYXRzXCIsXCJ6YXBmZGluZ2JhdHNcIixcIm5vcm1hbFwiLG51bGxdLFtcIlN5bWJvbFwiLFwic3ltYm9sXCIsXCJub3JtYWxcIixudWxsXV0sZXQ9KGwuX19wcml2YXRlX18uZ2V0U3RhbmRhcmRGb250cz1mdW5jdGlvbih0KXtyZXR1cm4gTX0sci5mb250U2l6ZXx8MTYpLE89KGwuX19wcml2YXRlX18uc2V0Rm9udFNpemU9bC5zZXRGb250U2l6ZT1mdW5jdGlvbih0KXtyZXR1cm4gZXQ9dCx0aGlzfSxsLl9fcHJpdmF0ZV9fLmdldEZvbnRTaXplPWwuZ2V0Rm9udFNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gZXR9KSxudD1yLlIyTHx8ITEscT0obC5fX3ByaXZhdGVfXy5zZXRSMkw9bC5zZXRSMkw9ZnVuY3Rpb24odCl7cmV0dXJuIG50PXQsdGhpc30sbC5fX3ByaXZhdGVfXy5nZXRSMkw9bC5nZXRSMkw9ZnVuY3Rpb24odCl7cmV0dXJuIG50fSxsLl9fcHJpdmF0ZV9fLnNldFpvb21Nb2RlPWZ1bmN0aW9uKHQpe3ZhciBlPVt2b2lkIDAsbnVsbCxcImZ1bGx3aWR0aFwiLFwiZnVsbGhlaWdodFwiLFwiZnVsbHBhZ2VcIixcIm9yaWdpbmFsXCJdO2lmKC9eXFxkKlxcLj9cXGQqXFwlJC8udGVzdCh0KSlMPXQ7ZWxzZSBpZihpc05hTih0KSl7aWYoLTE9PT1lLmluZGV4T2YodCkpdGhyb3cgbmV3IEVycm9yKCd6b29tIG11c3QgYmUgSW50ZWdlciAoZS5nLiAyKSwgYSBwZXJjZW50YWdlIFZhbHVlIChlLmcuIDMwMCUpIG9yIGZ1bGx3aWR0aCwgZnVsbGhlaWdodCwgZnVsbHBhZ2UsIG9yaWdpbmFsLiBcIicrdCsnXCIgaXMgbm90IHJlY29nbml6ZWQuJyk7TD10fWVsc2UgTD1wYXJzZUludCh0LDEwKX0pLFQ9KGwuX19wcml2YXRlX18uZ2V0Wm9vbU1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gTH0sbC5fX3ByaXZhdGVfXy5zZXRQYWdlTW9kZT1mdW5jdGlvbih0KXtpZigtMT09W3ZvaWQgMCxudWxsLFwiVXNlTm9uZVwiLFwiVXNlT3V0bGluZXNcIixcIlVzZVRodW1ic1wiLFwiRnVsbFNjcmVlblwiXS5pbmRleE9mKHQpKXRocm93IG5ldyBFcnJvcignUGFnZSBtb2RlIG11c3QgYmUgb25lIG9mIFVzZU5vbmUsIFVzZU91dGxpbmVzLCBVc2VUaHVtYnMsIG9yIEZ1bGxTY3JlZW4uIFwiJyt0KydcIiBpcyBub3QgcmVjb2duaXplZC4nKTtBPXR9KSxSPShsLl9fcHJpdmF0ZV9fLmdldFBhZ2VNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEF9LGwuX19wcml2YXRlX18uc2V0TGF5b3V0TW9kZT1mdW5jdGlvbih0KXtpZigtMT09W3ZvaWQgMCxudWxsLFwiY29udGludW91c1wiLFwic2luZ2xlXCIsXCJ0d29sZWZ0XCIsXCJ0d29yaWdodFwiLFwidHdvXCJdLmluZGV4T2YodCkpdGhyb3cgbmV3IEVycm9yKCdMYXlvdXQgbW9kZSBtdXN0IGJlIG9uZSBvZiBjb250aW51b3VzLCBzaW5nbGUsIHR3b2xlZnQsIHR3b3JpZ2h0LiBcIicrdCsnXCIgaXMgbm90IHJlY29nbml6ZWQuJyk7Uz10fSksRD0obC5fX3ByaXZhdGVfXy5nZXRMYXlvdXRNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIFN9LGwuX19wcml2YXRlX18uc2V0RGlzcGxheU1vZGU9bC5zZXREaXNwbGF5TW9kZT1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHEodCksUihlKSxUKG4pLHRoaXN9LHt0aXRsZTpcIlwiLHN1YmplY3Q6XCJcIixhdXRob3I6XCJcIixrZXl3b3JkczpcIlwiLGNyZWF0b3I6XCJcIn0pLFU9KGwuX19wcml2YXRlX18uZ2V0RG9jdW1lbnRQcm9wZXJ0eT1mdW5jdGlvbih0KXtpZigtMT09PU9iamVjdC5rZXlzKEQpLmluZGV4T2YodCkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudCBwYXNzZWQgdG8ganNQREYuZ2V0RG9jdW1lbnRQcm9wZXJ0eVwiKTtyZXR1cm4gRFt0XX0sbC5fX3ByaXZhdGVfXy5nZXREb2N1bWVudFByb3BlcnRpZXM9ZnVuY3Rpb24odCl7cmV0dXJuIER9LGwuX19wcml2YXRlX18uc2V0RG9jdW1lbnRQcm9wZXJ0aWVzPWwuc2V0UHJvcGVydGllcz1sLnNldERvY3VtZW50UHJvcGVydGllcz1mdW5jdGlvbih0KXtmb3IodmFyIGUgaW4gRClELmhhc093blByb3BlcnR5KGUpJiZ0W2VdJiYoRFtlXT10W2VdKTtyZXR1cm4gdGhpc30sbC5fX3ByaXZhdGVfXy5zZXREb2N1bWVudFByb3BlcnR5PWZ1bmN0aW9uKHQsZSl7aWYoLTE9PT1PYmplY3Qua2V5cyhEKS5pbmRleE9mKHQpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5zZXREb2N1bWVudFByb3BlcnR5XCIpO3JldHVybiBEW3RdPWV9LDApLHo9W10scnQ9e30sSD17fSxXPTAsVj1bXSxHPVtdLGl0PW5ldyBvZShsKSxZPXIuaG90Zml4ZXN8fFtdLEo9bC5fX3ByaXZhdGVfXy5uZXdPYmplY3Q9ZnVuY3Rpb24oKXt2YXIgdD1YKCk7cmV0dXJuIG90KHQsITApLHR9LFg9bC5fX3ByaXZhdGVfXy5uZXdPYmplY3REZWZlcnJlZD1mdW5jdGlvbigpe3JldHVybiB6WysrVV09ZnVuY3Rpb24oKXtyZXR1cm4gQn0sVX0sb3Q9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZT1cImJvb2xlYW5cIj09dHlwZW9mIGUmJmUselt0XT1CLGUmJnR0KHQrXCIgMCBvYmpcIiksdH0sYXQ9bC5fX3ByaXZhdGVfXy5uZXdBZGRpdGlvbmFsT2JqZWN0PWZ1bmN0aW9uKCl7dmFyIHQ9e29iaklkOlgoKSxjb250ZW50OlwiXCJ9O3JldHVybiBHLnB1c2godCksdH0sc3Q9WCgpLGx0PVgoKSxodD1sLl9fcHJpdmF0ZV9fLmRlY29kZUNvbG9yU3RyaW5nPWZ1bmN0aW9uKHQpe3ZhciBlPXQuc3BsaXQoXCIgXCIpO2lmKDI9PT1lLmxlbmd0aCYmKFwiZ1wiPT09ZVsxXXx8XCJHXCI9PT1lWzFdKSl7dmFyIG49cGFyc2VGbG9hdChlWzBdKTtlPVtuLG4sbixcInJcIl19Zm9yKHZhciByPVwiI1wiLGk9MDtpPDM7aSsrKXIrPShcIjBcIitNYXRoLmZsb29yKDI1NSpwYXJzZUZsb2F0KGVbaV0pKS50b1N0cmluZygxNikpLnNsaWNlKC0yKTtyZXR1cm4gcn0sdXQ9bC5fX3ByaXZhdGVfXy5lbmNvZGVDb2xvclN0cmluZz1mdW5jdGlvbih0KXt2YXIgZTtcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9e2NoMTp0fSk7dmFyIG49dC5jaDEscj10LmNoMixpPXQuY2gzLG89dC5jaDQsYT0odC5wcmVjaXNpb24sXCJkcmF3XCI9PT10LnBkZkNvbG9yVHlwZT9bXCJHXCIsXCJSR1wiLFwiS1wiXTpbXCJnXCIsXCJyZ1wiLFwia1wiXSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIG4mJlwiI1wiIT09bi5jaGFyQXQoMCkpe3ZhciBzPW5ldyBSR0JDb2xvcihuKTtpZihzLm9rKW49cy50b0hleCgpO2Vsc2UgaWYoIS9eXFxkKlxcLj9cXGQqJC8udGVzdChuKSl0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29sb3IgXCInK24rJ1wiIHBhc3NlZCB0byBqc1BERi5lbmNvZGVDb2xvclN0cmluZy4nKX1pZihcInN0cmluZ1wiPT10eXBlb2YgbiYmL14jWzAtOUEtRmEtZl17M30kLy50ZXN0KG4pJiYobj1cIiNcIituWzFdK25bMV0rblsyXStuWzJdK25bM10rblszXSksXCJzdHJpbmdcIj09dHlwZW9mIG4mJi9eI1swLTlBLUZhLWZdezZ9JC8udGVzdChuKSl7dmFyIGw9cGFyc2VJbnQobi5zdWJzdHIoMSksMTYpO249bD4+MTYmMjU1LHI9bD4+OCYyNTUsaT0yNTUmbH1pZih2b2lkIDA9PT1yfHx2b2lkIDA9PT1vJiZuPT09ciYmcj09PWkpaWYoXCJzdHJpbmdcIj09dHlwZW9mIG4pZT1uK1wiIFwiK2FbMF07ZWxzZSBzd2l0Y2godC5wcmVjaXNpb24pe2Nhc2UgMjplPVoobi8yNTUpK1wiIFwiK2FbMF07YnJlYWs7Y2FzZSAzOmRlZmF1bHQ6ZT1RKG4vMjU1KStcIiBcIithWzBdfWVsc2UgaWYodm9pZCAwPT09b3x8XCJvYmplY3RcIj09PXNlKG8pKXtpZihvJiYhaXNOYU4oby5hKSYmMD09PW8uYSlyZXR1cm4gZT1bXCIxLjAwMFwiLFwiMS4wMDBcIixcIjEuMDAwXCIsYVsxXV0uam9pbihcIiBcIik7aWYoXCJzdHJpbmdcIj09dHlwZW9mIG4pZT1bbixyLGksYVsxXV0uam9pbihcIiBcIik7ZWxzZSBzd2l0Y2godC5wcmVjaXNpb24pe2Nhc2UgMjplPVtaKG4vMjU1KSxaKHIvMjU1KSxaKGkvMjU1KSxhWzFdXS5qb2luKFwiIFwiKTticmVhaztkZWZhdWx0OmNhc2UgMzplPVtRKG4vMjU1KSxRKHIvMjU1KSxRKGkvMjU1KSxhWzFdXS5qb2luKFwiIFwiKX19ZWxzZSBpZihcInN0cmluZ1wiPT10eXBlb2YgbillPVtuLHIsaSxvLGFbMl1dLmpvaW4oXCIgXCIpO2Vsc2Ugc3dpdGNoKHQucHJlY2lzaW9uKXtjYXNlIDI6ZT1bWihuLzI1NSksWihyLzI1NSksWihpLzI1NSksWihvLzI1NSksYVsyXV0uam9pbihcIiBcIik7YnJlYWs7Y2FzZSAzOmRlZmF1bHQ6ZT1bUShuLzI1NSksUShyLzI1NSksUShpLzI1NSksUShvLzI1NSksYVsyXV0uam9pbihcIiBcIil9cmV0dXJuIGV9LGN0PWwuX19wcml2YXRlX18uZ2V0RmlsdGVycz1mdW5jdGlvbigpe3JldHVybiBvfSxmdD1sLl9fcHJpdmF0ZV9fLnB1dFN0cmVhbT1mdW5jdGlvbih0KXt2YXIgZT0odD10fHx7fSkuZGF0YXx8XCJcIixuPXQuZmlsdGVyc3x8Y3QoKSxyPXQuYWxyZWFkeUFwcGxpZWRGaWx0ZXJzfHxbXSxpPXQuYWRkTGVuZ3RoMXx8ITEsbz1lLmxlbmd0aCxhPXt9OyEwPT09biYmKG49W1wiRmxhdGVFbmNvZGVcIl0pO3ZhciBzPXQuYWRkaXRpb25hbEtleVZhbHVlc3x8W10sbD0oYT12b2lkIDAhPT1hZS5BUEkucHJvY2Vzc0RhdGFCeUZpbHRlcnM/YWUuQVBJLnByb2Nlc3NEYXRhQnlGaWx0ZXJzKGUsbik6e2RhdGE6ZSxyZXZlcnNlQ2hhaW46W119KS5yZXZlcnNlQ2hhaW4rKEFycmF5LmlzQXJyYXkocik/ci5qb2luKFwiIFwiKTpyLnRvU3RyaW5nKCkpOzAhPT1hLmRhdGEubGVuZ3RoJiYocy5wdXNoKHtrZXk6XCJMZW5ndGhcIix2YWx1ZTphLmRhdGEubGVuZ3RofSksITA9PT1pJiZzLnB1c2goe2tleTpcIkxlbmd0aDFcIix2YWx1ZTpvfSkpLDAhPWwubGVuZ3RoJiYobC5zcGxpdChcIi9cIikubGVuZ3RoLTE9PTE/cy5wdXNoKHtrZXk6XCJGaWx0ZXJcIix2YWx1ZTpsfSk6cy5wdXNoKHtrZXk6XCJGaWx0ZXJcIix2YWx1ZTpcIltcIitsK1wiXVwifSkpLHR0KFwiPDxcIik7Zm9yKHZhciBoPTA7aDxzLmxlbmd0aDtoKyspdHQoXCIvXCIrc1toXS5rZXkrXCIgXCIrc1toXS52YWx1ZSk7dHQoXCI+PlwiKSwwIT09YS5kYXRhLmxlbmd0aCYmKHR0KFwic3RyZWFtXCIpLHR0KGEuZGF0YSksdHQoXCJlbmRzdHJlYW1cIikpfSxwdD1sLl9fcHJpdmF0ZV9fLnB1dFBhZ2U9ZnVuY3Rpb24odCl7dC5tZWRpYUJveDt2YXIgZT10Lm51bWJlcixuPXQuZGF0YSxyPXQub2JqSWQsaT10LmNvbnRlbnRzT2JqSWQ7b3QociwhMCk7Vlt4XS5tZWRpYUJveC50b3BSaWdodFgsVlt4XS5tZWRpYUJveC5ib3R0b21MZWZ0WCxWW3hdLm1lZGlhQm94LnRvcFJpZ2h0WSxWW3hdLm1lZGlhQm94LmJvdHRvbUxlZnRZO3R0KFwiPDwvVHlwZSAvUGFnZVwiKSx0dChcIi9QYXJlbnQgXCIrdC5yb290RGljdGlvbmFyeU9iaklkK1wiIDAgUlwiKSx0dChcIi9SZXNvdXJjZXMgXCIrdC5yZXNvdXJjZURpY3Rpb25hcnlPYmpJZCtcIiAwIFJcIiksdHQoXCIvTWVkaWFCb3ggW1wiK3BhcnNlRmxvYXQoWih0Lm1lZGlhQm94LmJvdHRvbUxlZnRYKSkrXCIgXCIrcGFyc2VGbG9hdChaKHQubWVkaWFCb3guYm90dG9tTGVmdFkpKStcIiBcIitaKHQubWVkaWFCb3gudG9wUmlnaHRYKStcIiBcIitaKHQubWVkaWFCb3gudG9wUmlnaHRZKStcIl1cIiksbnVsbCE9PXQuY3JvcEJveCYmdHQoXCIvQ3JvcEJveCBbXCIrWih0LmNyb3BCb3guYm90dG9tTGVmdFgpK1wiIFwiK1oodC5jcm9wQm94LmJvdHRvbUxlZnRZKStcIiBcIitaKHQuY3JvcEJveC50b3BSaWdodFgpK1wiIFwiK1oodC5jcm9wQm94LnRvcFJpZ2h0WSkrXCJdXCIpLG51bGwhPT10LmJsZWVkQm94JiZ0dChcIi9CbGVlZEJveCBbXCIrWih0LmJsZWVkQm94LmJvdHRvbUxlZnRYKStcIiBcIitaKHQuYmxlZWRCb3guYm90dG9tTGVmdFkpK1wiIFwiK1oodC5ibGVlZEJveC50b3BSaWdodFgpK1wiIFwiK1oodC5ibGVlZEJveC50b3BSaWdodFkpK1wiXVwiKSxudWxsIT09dC50cmltQm94JiZ0dChcIi9UcmltQm94IFtcIitaKHQudHJpbUJveC5ib3R0b21MZWZ0WCkrXCIgXCIrWih0LnRyaW1Cb3guYm90dG9tTGVmdFkpK1wiIFwiK1oodC50cmltQm94LnRvcFJpZ2h0WCkrXCIgXCIrWih0LnRyaW1Cb3gudG9wUmlnaHRZKStcIl1cIiksbnVsbCE9PXQuYXJ0Qm94JiZ0dChcIi9BcnRCb3ggW1wiK1oodC5hcnRCb3guYm90dG9tTGVmdFgpK1wiIFwiK1oodC5hcnRCb3guYm90dG9tTGVmdFkpK1wiIFwiK1oodC5hcnRCb3gudG9wUmlnaHRYKStcIiBcIitaKHQuYXJ0Qm94LnRvcFJpZ2h0WSkrXCJdXCIpLFwibnVtYmVyXCI9PXR5cGVvZiB0LnVzZXJVbml0JiYxIT09dC51c2VyVW5pdCYmdHQoXCIvVXNlclVuaXQgXCIrdC51c2VyVW5pdCksaXQucHVibGlzaChcInB1dFBhZ2VcIix7b2JqSWQ6cixwYWdlQ29udGV4dDpWW2VdLHBhZ2VOdW1iZXI6ZSxwYWdlOm59KSx0dChcIi9Db250ZW50cyBcIitpK1wiIDAgUlwiKSx0dChcIj4+XCIpLHR0KFwiZW5kb2JqXCIpO3ZhciBvPW4uam9pbihcIlxcblwiKTtyZXR1cm4gb3QoaSwhMCksZnQoe2RhdGE6byxmaWx0ZXJzOmN0KCl9KSx0dChcImVuZG9ialwiKSxyfSxkdD1sLl9fcHJpdmF0ZV9fLnB1dFBhZ2VzPWZ1bmN0aW9uKCl7dmFyIHQsZSxuPVtdO2Zvcih0PTE7dDw9Vzt0KyspVlt0XS5vYmpJZD1YKCksVlt0XS5jb250ZW50c09iaklkPVgoKTtmb3IodD0xO3Q8PVc7dCsrKW4ucHVzaChwdCh7bnVtYmVyOnQsZGF0YTpJW3RdLG9iaklkOlZbdF0ub2JqSWQsY29udGVudHNPYmpJZDpWW3RdLmNvbnRlbnRzT2JqSWQsbWVkaWFCb3g6Vlt0XS5tZWRpYUJveCxjcm9wQm94OlZbdF0uY3JvcEJveCxibGVlZEJveDpWW3RdLmJsZWVkQm94LHRyaW1Cb3g6Vlt0XS50cmltQm94LGFydEJveDpWW3RdLmFydEJveCx1c2VyVW5pdDpWW3RdLnVzZXJVbml0LHJvb3REaWN0aW9uYXJ5T2JqSWQ6c3QscmVzb3VyY2VEaWN0aW9uYXJ5T2JqSWQ6bHR9KSk7b3Qoc3QsITApLHR0KFwiPDwvVHlwZSAvUGFnZXNcIik7dmFyIHI9XCIvS2lkcyBbXCI7Zm9yKGU9MDtlPFc7ZSsrKXIrPW5bZV0rXCIgMCBSIFwiO3R0KHIrXCJdXCIpLHR0KFwiL0NvdW50IFwiK1cpLHR0KFwiPj5cIiksdHQoXCJlbmRvYmpcIiksaXQucHVibGlzaChcInBvc3RQdXRQYWdlc1wiKX0sZ3Q9ZnVuY3Rpb24oKXshZnVuY3Rpb24oKXtmb3IodmFyIHQgaW4gcnQpcnQuaGFzT3duUHJvcGVydHkodCkmJighMT09PXN8fCEwPT09cyYmSy5oYXNPd25Qcm9wZXJ0eSh0KSkmJihlPXJ0W3RdLGl0LnB1Ymxpc2goXCJwdXRGb250XCIse2ZvbnQ6ZSxvdXQ6dHQsbmV3T2JqZWN0OkoscHV0U3RyZWFtOmZ0fSksITAhPT1lLmlzQWxyZWFkeVB1dHRlZCYmKGUub2JqZWN0TnVtYmVyPUooKSx0dChcIjw8XCIpLHR0KFwiL1R5cGUgL0ZvbnRcIiksdHQoXCIvQmFzZUZvbnQgL1wiK2UucG9zdFNjcmlwdE5hbWUpLHR0KFwiL1N1YnR5cGUgL1R5cGUxXCIpLFwic3RyaW5nXCI9PXR5cGVvZiBlLmVuY29kaW5nJiZ0dChcIi9FbmNvZGluZyAvXCIrZS5lbmNvZGluZyksdHQoXCIvRmlyc3RDaGFyIDMyXCIpLHR0KFwiL0xhc3RDaGFyIDI1NVwiKSx0dChcIj4+XCIpLHR0KFwiZW5kb2JqXCIpKSk7dmFyIGV9KCksaXQucHVibGlzaChcInB1dFJlc291cmNlc1wiKSxvdChsdCwhMCksdHQoXCI8PFwiKSxmdW5jdGlvbigpe2Zvcih2YXIgdCBpbiB0dChcIi9Qcm9jU2V0IFsvUERGIC9UZXh0IC9JbWFnZUIgL0ltYWdlQyAvSW1hZ2VJXVwiKSx0dChcIi9Gb250IDw8XCIpLHJ0KXJ0Lmhhc093blByb3BlcnR5KHQpJiYoITE9PT1zfHwhMD09PXMmJksuaGFzT3duUHJvcGVydHkodCkpJiZ0dChcIi9cIit0K1wiIFwiK3J0W3RdLm9iamVjdE51bWJlcitcIiAwIFJcIik7dHQoXCI+PlwiKSx0dChcIi9YT2JqZWN0IDw8XCIpLGl0LnB1Ymxpc2goXCJwdXRYb2JqZWN0RGljdFwiKSx0dChcIj4+XCIpfSgpLHR0KFwiPj5cIiksdHQoXCJlbmRvYmpcIiksaXQucHVibGlzaChcInBvc3RQdXRSZXNvdXJjZXNcIil9LG10PWZ1bmN0aW9uKHQsZSxuKXtILmhhc093blByb3BlcnR5KGUpfHwoSFtlXT17fSksSFtlXVtuXT10fSx5dD1mdW5jdGlvbih0LGUsbixyLGkpe2k9aXx8ITE7dmFyIG89XCJGXCIrKE9iamVjdC5rZXlzKHJ0KS5sZW5ndGgrMSkudG9TdHJpbmcoMTApLGE9e2lkOm8scG9zdFNjcmlwdE5hbWU6dCxmb250TmFtZTplLGZvbnRTdHlsZTpuLGVuY29kaW5nOnIsaXNTdGFuZGFyZEZvbnQ6aSxtZXRhZGF0YTp7fX07cmV0dXJuIGl0LnB1Ymxpc2goXCJhZGRGb250XCIse2ZvbnQ6YSxpbnN0YW5jZTp0aGlzfSksdm9pZCAwIT09byYmKHJ0W29dPWEsbXQobyxlLG4pKSxvfSx2dD1sLl9fcHJpdmF0ZV9fLnBkZkVzY2FwZT1sLnBkZkVzY2FwZT1mdW5jdGlvbih0LGUpe3JldHVybiBmdW5jdGlvbih0LGUpe3ZhciBuLHIsaSxvLGEscyxsLGgsdTtpZihpPShlPWV8fHt9KS5zb3VyY2VFbmNvZGluZ3x8XCJVbmljb2RlXCIsYT1lLm91dHB1dEVuY29kaW5nLChlLmF1dG9lbmNvZGV8fGEpJiZydFskXS5tZXRhZGF0YSYmcnRbJF0ubWV0YWRhdGFbaV0mJnJ0WyRdLm1ldGFkYXRhW2ldLmVuY29kaW5nJiYobz1ydFskXS5tZXRhZGF0YVtpXS5lbmNvZGluZywhYSYmcnRbJF0uZW5jb2RpbmcmJihhPXJ0WyRdLmVuY29kaW5nKSwhYSYmby5jb2RlUGFnZXMmJihhPW8uY29kZVBhZ2VzWzBdKSxcInN0cmluZ1wiPT10eXBlb2YgYSYmKGE9b1thXSksYSkpe2ZvcihsPSExLHM9W10sbj0wLHI9dC5sZW5ndGg7bjxyO24rKykoaD1hW3QuY2hhckNvZGVBdChuKV0pP3MucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGgpKTpzLnB1c2godFtuXSksc1tuXS5jaGFyQ29kZUF0KDApPj44JiYobD0hMCk7dD1zLmpvaW4oXCJcIil9Zm9yKG49dC5sZW5ndGg7dm9pZCAwPT09bCYmMCE9PW47KXQuY2hhckNvZGVBdChuLTEpPj44JiYobD0hMCksbi0tO2lmKCFsKXJldHVybiB0O2ZvcihzPWUubm9CT00/W106WzI1NCwyNTVdLG49MCxyPXQubGVuZ3RoO248cjtuKyspe2lmKCh1PShoPXQuY2hhckNvZGVBdChuKSk+PjgpPj44KXRocm93IG5ldyBFcnJvcihcIkNoYXJhY3RlciBhdCBwb3NpdGlvbiBcIituK1wiIG9mIHN0cmluZyAnXCIrdCtcIicgZXhjZWVkcyAxNmJpdHMuIENhbm5vdCBiZSBlbmNvZGVkIGludG8gVUNTLTIgQkVcIik7cy5wdXNoKHUpLHMucHVzaChoLSh1PDw4KSl9cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkodm9pZCAwLHMpfSh0LGUpLnJlcGxhY2UoL1xcXFwvZyxcIlxcXFxcXFxcXCIpLnJlcGxhY2UoL1xcKC9nLFwiXFxcXChcIikucmVwbGFjZSgvXFwpL2csXCJcXFxcKVwiKX0sd3Q9bC5fX3ByaXZhdGVfXy5iZWdpblBhZ2U9ZnVuY3Rpb24odCxlKXt2YXIgbixyPVwic3RyaW5nXCI9PXR5cGVvZiBlJiZlLnRvTG93ZXJDYXNlKCk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQmJihuPWYodC50b0xvd2VyQ2FzZSgpKSkmJih0PW5bMF0sZT1uWzFdKSxBcnJheS5pc0FycmF5KHQpJiYoZT10WzFdLHQ9dFswXSksKGlzTmFOKHQpfHxpc05hTihlKSkmJih0PWlbMF0sZT1pWzFdKSxyKXtzd2l0Y2goci5zdWJzdHIoMCwxKSl7Y2FzZVwibFwiOnQ8ZSYmKHI9XCJzXCIpO2JyZWFrO2Nhc2VcInBcIjplPHQmJihyPVwic1wiKX1cInNcIj09PXImJihuPXQsdD1lLGU9bil9KDE0NDAwPHR8fDE0NDAwPGUpJiYoY29uc29sZS53YXJuKFwiQSBwYWdlIGluIGEgUERGIGNhbiBub3QgYmUgd2lkZXIgb3IgdGFsbGVyIHRoYW4gMTQ0MDAgdXNlclVuaXQuIGpzUERGIGxpbWl0cyB0aGUgd2lkdGgvaGVpZ2h0IHRvIDE0NDAwXCIpLHQ9TWF0aC5taW4oMTQ0MDAsdCksZT1NYXRoLm1pbigxNDQwMCxlKSksaT1bdCxlXSxrPSEwLElbKytXXT1bXSxWW1ddPXtvYmpJZDowLGNvbnRlbnRzT2JqSWQ6MCx1c2VyVW5pdDpOdW1iZXIoYSksYXJ0Qm94Om51bGwsYmxlZWRCb3g6bnVsbCxjcm9wQm94Om51bGwsdHJpbUJveDpudWxsLG1lZGlhQm94Ontib3R0b21MZWZ0WDowLGJvdHRvbUxlZnRZOjAsdG9wUmlnaHRYOk51bWJlcih0KSx0b3BSaWdodFk6TnVtYmVyKGUpfX0seHQoVyl9LGJ0PWZ1bmN0aW9uKCl7d3QuYXBwbHkodGhpcyxhcmd1bWVudHMpLER0KFJ0KSx0dChKdCksMCE9PXRlJiZ0dCh0ZStcIiBKXCIpLDAhPT1uZSYmdHQobmUrXCIgalwiKSxpdC5wdWJsaXNoKFwiYWRkUGFnZVwiLHtwYWdlTnVtYmVyOld9KX0seHQ9ZnVuY3Rpb24odCl7MDx0JiZ0PD1XJiYoeD10KX0sTnQ9bC5fX3ByaXZhdGVfXy5nZXROdW1iZXJPZlBhZ2VzPWwuZ2V0TnVtYmVyT2ZQYWdlcz1mdW5jdGlvbigpe3JldHVybiBJLmxlbmd0aC0xfSxMdD1mdW5jdGlvbih0LGUsbil7dmFyIHIsaT12b2lkIDA7cmV0dXJuIG49bnx8e30sdD12b2lkIDAhPT10P3Q6cnRbJF0uZm9udE5hbWUsZT12b2lkIDAhPT1lP2U6cnRbJF0uZm9udFN0eWxlLHI9dC50b0xvd2VyQ2FzZSgpLHZvaWQgMCE9PUhbcl0mJnZvaWQgMCE9PUhbcl1bZV0/aT1IW3JdW2VdOnZvaWQgMCE9PUhbdF0mJnZvaWQgMCE9PUhbdF1bZV0/aT1IW3RdW2VdOiExPT09bi5kaXNhYmxlV2FybmluZyYmY29uc29sZS53YXJuKFwiVW5hYmxlIHRvIGxvb2sgdXAgZm9udCBsYWJlbCBmb3IgZm9udCAnXCIrdCtcIicsICdcIitlK1wiJy4gUmVmZXIgdG8gZ2V0Rm9udExpc3QoKSBmb3IgYXZhaWxhYmxlIGZvbnRzLlwiKSxpfHxuLm5vRmFsbGJhY2t8fG51bGw9PShpPUgudGltZXNbZV0pJiYoaT1ILnRpbWVzLm5vcm1hbCksaX0sQXQ9bC5fX3ByaXZhdGVfXy5wdXRJbmZvPWZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIEooKSx0dChcIjw8XCIpLHR0KFwiL1Byb2R1Y2VyIChqc1BERiBcIithZS52ZXJzaW9uK1wiKVwiKSxEKUQuaGFzT3duUHJvcGVydHkodCkmJkRbdF0mJnR0KFwiL1wiK3Quc3Vic3RyKDAsMSkudG9VcHBlckNhc2UoKSt0LnN1YnN0cigxKStcIiAoXCIrdnQoRFt0XSkrXCIpXCIpO3R0KFwiL0NyZWF0aW9uRGF0ZSAoXCIrcCtcIilcIiksdHQoXCI+PlwiKSx0dChcImVuZG9ialwiKX0sU3Q9bC5fX3ByaXZhdGVfXy5wdXRDYXRhbG9nPWZ1bmN0aW9uKHQpe3ZhciBlPSh0PXR8fHt9KS5yb290RGljdGlvbmFyeU9iaklkfHxzdDtzd2l0Y2goSigpLHR0KFwiPDxcIiksdHQoXCIvVHlwZSAvQ2F0YWxvZ1wiKSx0dChcIi9QYWdlcyBcIitlK1wiIDAgUlwiKSxMfHwoTD1cImZ1bGx3aWR0aFwiKSxMKXtjYXNlXCJmdWxsd2lkdGhcIjp0dChcIi9PcGVuQWN0aW9uIFszIDAgUiAvRml0SCBudWxsXVwiKTticmVhaztjYXNlXCJmdWxsaGVpZ2h0XCI6dHQoXCIvT3BlbkFjdGlvbiBbMyAwIFIgL0ZpdFYgbnVsbF1cIik7YnJlYWs7Y2FzZVwiZnVsbHBhZ2VcIjp0dChcIi9PcGVuQWN0aW9uIFszIDAgUiAvRml0XVwiKTticmVhaztjYXNlXCJvcmlnaW5hbFwiOnR0KFwiL09wZW5BY3Rpb24gWzMgMCBSIC9YWVogbnVsbCBudWxsIDFdXCIpO2JyZWFrO2RlZmF1bHQ6dmFyIG49XCJcIitMO1wiJVwiPT09bi5zdWJzdHIobi5sZW5ndGgtMSkmJihMPXBhcnNlSW50KEwpLzEwMCksXCJudW1iZXJcIj09dHlwZW9mIEwmJnR0KFwiL09wZW5BY3Rpb24gWzMgMCBSIC9YWVogbnVsbCBudWxsIFwiK1ooTCkrXCJdXCIpfXN3aXRjaChTfHwoUz1cImNvbnRpbnVvdXNcIiksUyl7Y2FzZVwiY29udGludW91c1wiOnR0KFwiL1BhZ2VMYXlvdXQgL09uZUNvbHVtblwiKTticmVhaztjYXNlXCJzaW5nbGVcIjp0dChcIi9QYWdlTGF5b3V0IC9TaW5nbGVQYWdlXCIpO2JyZWFrO2Nhc2VcInR3b1wiOmNhc2VcInR3b2xlZnRcIjp0dChcIi9QYWdlTGF5b3V0IC9Ud29Db2x1bW5MZWZ0XCIpO2JyZWFrO2Nhc2VcInR3b3JpZ2h0XCI6dHQoXCIvUGFnZUxheW91dCAvVHdvQ29sdW1uUmlnaHRcIil9QSYmdHQoXCIvUGFnZU1vZGUgL1wiK0EpLGl0LnB1Ymxpc2goXCJwdXRDYXRhbG9nXCIpLHR0KFwiPj5cIiksdHQoXCJlbmRvYmpcIil9LF90PWwuX19wcml2YXRlX18ucHV0VHJhaWxlcj1mdW5jdGlvbigpe3R0KFwidHJhaWxlclwiKSx0dChcIjw8XCIpLHR0KFwiL1NpemUgXCIrKFUrMSkpLHR0KFwiL1Jvb3QgXCIrVStcIiAwIFJcIiksdHQoXCIvSW5mbyBcIisoVS0xKStcIiAwIFJcIiksdHQoXCIvSUQgWyA8XCIrZCtcIj4gPFwiK2QrXCI+IF1cIiksdHQoXCI+PlwiKX0sRnQ9bC5fX3ByaXZhdGVfXy5wdXRIZWFkZXI9ZnVuY3Rpb24oKXt0dChcIiVQREYtXCIraCksdHQoXCIlwrrDn8Ksw6BcIil9LFB0PWwuX19wcml2YXRlX18ucHV0WFJlZj1mdW5jdGlvbigpe3ZhciB0PTEsZT1cIjAwMDAwMDAwMDBcIjtmb3IodHQoXCJ4cmVmXCIpLHR0KFwiMCBcIisoVSsxKSksdHQoXCIwMDAwMDAwMDAwIDY1NTM1IGYgXCIpLHQ9MTt0PD1VO3QrKyl7XCJmdW5jdGlvblwiPT10eXBlb2Ygelt0XT90dCgoZSt6W3RdKCkpLnNsaWNlKC0xMCkrXCIgMDAwMDAgbiBcIik6dm9pZCAwIT09elt0XT90dCgoZSt6W3RdKS5zbGljZSgtMTApK1wiIDAwMDAwIG4gXCIpOnR0KFwiMDAwMDAwMDAwMCAwMDAwMCBuIFwiKX19LGt0PWwuX19wcml2YXRlX18uYnVpbGREb2N1bWVudD1mdW5jdGlvbigpe2s9ITEsQj1VPTAsQz1bXSx6PVtdLEc9W10sc3Q9WCgpLGx0PVgoKSxpdC5wdWJsaXNoKFwiYnVpbGREb2N1bWVudFwiKSxGdCgpLGR0KCksZnVuY3Rpb24oKXtpdC5wdWJsaXNoKFwicHV0QWRkaXRpb25hbE9iamVjdHNcIik7Zm9yKHZhciB0PTA7dDxHLmxlbmd0aDt0Kyspe3ZhciBlPUdbdF07b3QoZS5vYmpJZCwhMCksdHQoZS5jb250ZW50KSx0dChcImVuZG9ialwiKX1pdC5wdWJsaXNoKFwicG9zdFB1dEFkZGl0aW9uYWxPYmplY3RzXCIpfSgpLGd0KCksQXQoKSxTdCgpO3ZhciB0PUI7cmV0dXJuIFB0KCksX3QoKSx0dChcInN0YXJ0eHJlZlwiKSx0dChcIlwiK3QpLHR0KFwiJSVFT0ZcIiksaz0hMCxDLmpvaW4oXCJcXG5cIil9LEl0PWwuX19wcml2YXRlX18uZ2V0QmxvYj1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IEJsb2IoW0UodCldLHt0eXBlOlwiYXBwbGljYXRpb24vcGRmXCJ9KX0sQ3Q9bC5vdXRwdXQ9bC5fX3ByaXZhdGVfXy5vdXRwdXQ9KChGPWZ1bmN0aW9uKHQsZSl7ZT1lfHx7fTt2YXIgbj1rdCgpO3N3aXRjaChcInN0cmluZ1wiPT10eXBlb2YgZT9lPXtmaWxlbmFtZTplfTplLmZpbGVuYW1lPWUuZmlsZW5hbWV8fFwiZ2VuZXJhdGVkLnBkZlwiLHQpe2Nhc2Ugdm9pZCAwOnJldHVybiBuO2Nhc2VcInNhdmVcIjpsLnNhdmUoZS5maWxlbmFtZSk7YnJlYWs7Y2FzZVwiYXJyYXlidWZmZXJcIjpyZXR1cm4gRShuKTtjYXNlXCJibG9iXCI6cmV0dXJuIEl0KG4pO2Nhc2VcImJsb2J1cmlcIjpjYXNlXCJibG9idXJsXCI6aWYodm9pZCAwIT09aWUuVVJMJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBpZS5VUkwuY3JlYXRlT2JqZWN0VVJMKXJldHVybiBpZS5VUkwmJmllLlVSTC5jcmVhdGVPYmplY3RVUkwoSXQobikpfHx2b2lkIDA7Y29uc29sZS53YXJuKFwiYmxvYnVybCBpcyBub3Qgc3VwcG9ydGVkIGJ5IHlvdXIgc3lzdGVtLCBiZWNhdXNlIFVSTC5jcmVhdGVPYmplY3RVUkwgaXMgbm90IHN1cHBvcnRlZCBieSB5b3VyIGJyb3dzZXIuXCIpO2JyZWFrO2Nhc2VcImRhdGF1cmlzdHJpbmdcIjpjYXNlXCJkYXRhdXJsc3RyaW5nXCI6cmV0dXJuXCJkYXRhOmFwcGxpY2F0aW9uL3BkZjtmaWxlbmFtZT1cIitlLmZpbGVuYW1lK1wiO2Jhc2U2NCxcIitidG9hKG4pO2Nhc2VcImRhdGF1cmxuZXd3aW5kb3dcIjp2YXIgcj0nPGh0bWw+PHN0eWxlPmh0bWwsIGJvZHkgeyBwYWRkaW5nOiAwOyBtYXJnaW46IDA7IH0gaWZyYW1lIHsgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgYm9yZGVyOiAwO30gIDwvc3R5bGU+PGJvZHk+PGlmcmFtZSBzcmM9XCInK3RoaXMub3V0cHV0KFwiZGF0YXVyaXN0cmluZ1wiKSsnXCI+PC9pZnJhbWU+PC9ib2R5PjwvaHRtbD4nLGk9aWUub3BlbigpO2lmKG51bGwhPT1pJiZpLmRvY3VtZW50LndyaXRlKHIpLGl8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiBzYWZhcmkpcmV0dXJuIGk7Y2FzZVwiZGF0YXVyaVwiOmNhc2VcImRhdGF1cmxcIjpyZXR1cm4gaWUuZG9jdW1lbnQubG9jYXRpb24uaHJlZj1cImRhdGE6YXBwbGljYXRpb24vcGRmO2ZpbGVuYW1lPVwiK2UuZmlsZW5hbWUrXCI7YmFzZTY0LFwiK2J0b2Eobik7ZGVmYXVsdDpyZXR1cm4gbnVsbH19KS5mb289ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIEYuYXBwbHkodGhpcyxhcmd1bWVudHMpfWNhdGNoKHQpe3ZhciBlPXQuc3RhY2t8fFwiXCI7fmUuaW5kZXhPZihcIiBhdCBcIikmJihlPWUuc3BsaXQoXCIgYXQgXCIpWzFdKTt2YXIgbj1cIkVycm9yIGluIGZ1bmN0aW9uIFwiK2Uuc3BsaXQoXCJcXG5cIilbMF0uc3BsaXQoXCI8XCIpWzBdK1wiOiBcIit0Lm1lc3NhZ2U7aWYoIWllLmNvbnNvbGUpdGhyb3cgbmV3IEVycm9yKG4pO2llLmNvbnNvbGUuZXJyb3Iobix0KSxpZS5hbGVydCYmYWxlcnQobil9fSwoRi5mb28uYmFyPUYpLmZvbyksQnQ9ZnVuY3Rpb24odCl7cmV0dXJuITA9PT1BcnJheS5pc0FycmF5KFkpJiYtMTxZLmluZGV4T2YodCl9O3N3aXRjaChlKXtjYXNlXCJwdFwiOl89MTticmVhaztjYXNlXCJtbVwiOl89NzIvMjUuNDticmVhaztjYXNlXCJjbVwiOl89NzIvMi41NDticmVhaztjYXNlXCJpblwiOl89NzI7YnJlYWs7Y2FzZVwicHhcIjpfPTE9PUJ0KFwicHhfc2NhbGluZ1wiKT8uNzU6OTYvNzI7YnJlYWs7Y2FzZVwicGNcIjpjYXNlXCJlbVwiOl89MTI7YnJlYWs7Y2FzZVwiZXhcIjpfPTY7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHVuaXQ6IFwiK2UpfXcoKSxtKCk7dmFyIGp0PWwuX19wcml2YXRlX18uZ2V0UGFnZUluZm89ZnVuY3Rpb24odCl7aWYoaXNOYU4odCl8fHQlMSE9MCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCB0byBqc1BERi5nZXRQYWdlSW5mb1wiKTtyZXR1cm57b2JqSWQ6Vlt0XS5vYmpJZCxwYWdlTnVtYmVyOnQscGFnZUNvbnRleHQ6Vlt0XX19LEV0PWwuX19wcml2YXRlX18uZ2V0UGFnZUluZm9CeU9iaklkPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZSBpbiBWKWlmKFZbZV0ub2JqSWQ9PT10KWJyZWFrO2lmKGlzTmFOKHQpfHx0JTEhPTApdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudCBwYXNzZWQgdG8ganNQREYuZ2V0UGFnZUluZm9CeU9iaklkXCIpO3JldHVybiBqdChlKX0sTXQ9bC5fX3ByaXZhdGVfXy5nZXRDdXJyZW50UGFnZUluZm89ZnVuY3Rpb24oKXtyZXR1cm57b2JqSWQ6Vlt4XS5vYmpJZCxwYWdlTnVtYmVyOngscGFnZUNvbnRleHQ6Vlt4XX19O2wuYWRkUGFnZT1mdW5jdGlvbigpe3JldHVybiBidC5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpc30sbC5zZXRQYWdlPWZ1bmN0aW9uKCl7cmV0dXJuIHh0LmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzfSxsLmluc2VydFBhZ2U9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuYWRkUGFnZSgpLHRoaXMubW92ZVBhZ2UoeCx0KSx0aGlzfSxsLm1vdmVQYWdlPWZ1bmN0aW9uKHQsZSl7aWYoZTx0KXtmb3IodmFyIG49SVt0XSxyPVZbdF0saT10O2U8aTtpLS0pSVtpXT1JW2ktMV0sVltpXT1WW2ktMV07SVtlXT1uLFZbZV09cix0aGlzLnNldFBhZ2UoZSl9ZWxzZSBpZih0PGUpe2ZvcihuPUlbdF0scj1WW3RdLGk9dDtpPGU7aSsrKUlbaV09SVtpKzFdLFZbaV09VltpKzFdO0lbZV09bixWW2VdPXIsdGhpcy5zZXRQYWdlKGUpfXJldHVybiB0aGlzfSxsLmRlbGV0ZVBhZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7MDx0JiZ0PD1XJiYoSS5zcGxpY2UodCwxKSwtLVc8eCYmKHg9VyksdGhpcy5zZXRQYWdlKHgpKX0uYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXN9O2wuX19wcml2YXRlX18udGV4dD1sLnRleHQ9ZnVuY3Rpb24odCxlLG4saSl7dmFyIHI7XCJudW1iZXJcIiE9dHlwZW9mIHR8fFwibnVtYmVyXCIhPXR5cGVvZiBlfHxcInN0cmluZ1wiIT10eXBlb2YgbiYmIUFycmF5LmlzQXJyYXkobil8fChyPW4sbj1lLGU9dCx0PXIpO3ZhciBvPWFyZ3VtZW50c1szXSxhPWFyZ3VtZW50c1s0XSxzPWFyZ3VtZW50c1s1XTtpZihcIm9iamVjdFwiPT09c2UobykmJm51bGwhPT1vfHwoXCJzdHJpbmdcIj09dHlwZW9mIGEmJihzPWEsYT1udWxsKSxcInN0cmluZ1wiPT10eXBlb2YgbyYmKHM9byxvPW51bGwpLFwibnVtYmVyXCI9PXR5cGVvZiBvJiYoYT1vLG89bnVsbCksaT17ZmxhZ3M6byxhbmdsZTphLGFsaWduOnN9KSwobz1vfHx7fSkubm9CT009by5ub0JPTXx8ITAsby5hdXRvZW5jb2RlPW8uYXV0b2VuY29kZXx8ITAsaXNOYU4oZSl8fGlzTmFOKG4pfHxudWxsPT10KXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi50ZXh0XCIpO2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gYzt2YXIgbCxoPVwiXCIsdT1cIm51bWJlclwiPT10eXBlb2YgaS5saW5lSGVpZ2h0RmFjdG9yP2kubGluZUhlaWdodEZhY3RvcjpUdCxjPWkuc2NvcGV8fHRoaXM7ZnVuY3Rpb24gZih0KXtmb3IodmFyIGUsbj10LmNvbmNhdCgpLHI9W10saT1uLmxlbmd0aDtpLS07KVwic3RyaW5nXCI9PXR5cGVvZihlPW4uc2hpZnQoKSk/ci5wdXNoKGUpOkFycmF5LmlzQXJyYXkodCkmJjE9PT1lLmxlbmd0aD9yLnB1c2goZVswXSk6ci5wdXNoKFtlWzBdLGVbMV0sZVsyXV0pO3JldHVybiByfWZ1bmN0aW9uIHAodCxlKXt2YXIgbjtpZihcInN0cmluZ1wiPT10eXBlb2YgdCluPWUodClbMF07ZWxzZSBpZihBcnJheS5pc0FycmF5KHQpKXtmb3IodmFyIHIsaSxvPXQuY29uY2F0KCksYT1bXSxzPW8ubGVuZ3RoO3MtLTspXCJzdHJpbmdcIj09dHlwZW9mKHI9by5zaGlmdCgpKT9hLnB1c2goZShyKVswXSk6QXJyYXkuaXNBcnJheShyKSYmXCJzdHJpbmdcIj09PXJbMF0mJihpPWUoclswXSxyWzFdLHJbMl0pLGEucHVzaChbaVswXSxpWzFdLGlbMl1dKSk7bj1hfXJldHVybiBufXZhciBkPSExLGc9ITA7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpZD0hMDtlbHNlIGlmKEFycmF5LmlzQXJyYXkodCkpe2Zvcih2YXIgbSx5PXQuY29uY2F0KCksdj1bXSx3PXkubGVuZ3RoO3ctLTspKFwic3RyaW5nXCIhPXR5cGVvZihtPXkuc2hpZnQoKSl8fEFycmF5LmlzQXJyYXkobSkmJlwic3RyaW5nXCIhPXR5cGVvZiBtWzBdKSYmKGc9ITEpO2Q9Z31pZighMT09PWQpdGhyb3cgbmV3IEVycm9yKCdUeXBlIG9mIHRleHQgbXVzdCBiZSBzdHJpbmcgb3IgQXJyYXkuIFwiJyt0KydcIiBpcyBub3QgcmVjb2duaXplZC4nKTt2YXIgYj1ydFskXS5lbmNvZGluZztcIldpbkFuc2lFbmNvZGluZ1wiIT09YiYmXCJTdGFuZGFyZEVuY29kaW5nXCIhPT1ifHwodD1wKHQsZnVuY3Rpb24odCxlLG4pe3JldHVyblsocj10LHI9ci5zcGxpdChcIlxcdFwiKS5qb2luKEFycmF5KGkuVGFiTGVufHw5KS5qb2luKFwiIFwiKSksdnQocixvKSksZSxuXTt2YXIgcn0pKSxcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9dC5tYXRjaCgvW1xccj9cXG5dLyk/dC5zcGxpdCgvXFxyXFxufFxccnxcXG4vZyk6W3RdKTt2YXIgeD1ldC9jLmludGVybmFsLnNjYWxlRmFjdG9yLE49eCooVHQtMSk7c3dpdGNoKGkuYmFzZWxpbmUpe2Nhc2VcImJvdHRvbVwiOm4tPU47YnJlYWs7Y2FzZVwidG9wXCI6bis9eC1OO2JyZWFrO2Nhc2VcImhhbmdpbmdcIjpuKz14LTIqTjticmVhaztjYXNlXCJtaWRkbGVcIjpuKz14LzItTn0wPChPPWkubWF4V2lkdGh8fDApJiYoXCJzdHJpbmdcIj09dHlwZW9mIHQ/dD1jLnNwbGl0VGV4dFRvU2l6ZSh0LE8pOlwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSYmKHQ9Yy5zcGxpdFRleHRUb1NpemUodC5qb2luKFwiIFwiKSxPKSkpO3ZhciBMPXt0ZXh0OnQseDplLHk6bixvcHRpb25zOmksbXV0ZXg6e3BkZkVzY2FwZTp2dCxhY3RpdmVGb250S2V5OiQsZm9udHM6cnQsYWN0aXZlRm9udFNpemU6ZXR9fTtpdC5wdWJsaXNoKFwicHJlUHJvY2Vzc1RleHRcIixMKSx0PUwudGV4dDthPShpPUwub3B0aW9ucykuYW5nbGU7dmFyIEE9Yy5pbnRlcm5hbC5zY2FsZUZhY3RvcixTPVtdO2lmKGEpe2EqPU1hdGguUEkvMTgwO3ZhciBfPU1hdGguY29zKGEpLEY9TWF0aC5zaW4oYSk7Uz1bWihfKSxaKEYpLFooLTEqRiksWihfKV19dm9pZCAwIT09KE09aS5jaGFyU3BhY2UpJiYoaCs9UShNKkEpK1wiIFRjXFxuXCIpO2kubGFuZzt2YXIgUD0tMSxrPXZvaWQgMCE9PWkucmVuZGVyaW5nTW9kZT9pLnJlbmRlcmluZ01vZGU6aS5zdHJva2UsST1jLmludGVybmFsLmdldEN1cnJlbnRQYWdlSW5mbygpLnBhZ2VDb250ZXh0O3N3aXRjaChrKXtjYXNlIDA6Y2FzZSExOmNhc2VcImZpbGxcIjpQPTA7YnJlYWs7Y2FzZSAxOmNhc2UhMDpjYXNlXCJzdHJva2VcIjpQPTE7YnJlYWs7Y2FzZSAyOmNhc2VcImZpbGxUaGVuU3Ryb2tlXCI6UD0yO2JyZWFrO2Nhc2UgMzpjYXNlXCJpbnZpc2libGVcIjpQPTM7YnJlYWs7Y2FzZSA0OmNhc2VcImZpbGxBbmRBZGRGb3JDbGlwcGluZ1wiOlA9NDticmVhaztjYXNlIDU6Y2FzZVwic3Ryb2tlQW5kQWRkUGF0aEZvckNsaXBwaW5nXCI6UD01O2JyZWFrO2Nhc2UgNjpjYXNlXCJmaWxsVGhlblN0cm9rZUFuZEFkZFRvUGF0aEZvckNsaXBwaW5nXCI6UD02O2JyZWFrO2Nhc2UgNzpjYXNlXCJhZGRUb1BhdGhGb3JDbGlwcGluZ1wiOlA9N312YXIgQz12b2lkIDAhPT1JLnVzZWRSZW5kZXJpbmdNb2RlP0kudXNlZFJlbmRlcmluZ01vZGU6LTE7LTEhPT1QP2grPVArXCIgVHJcXG5cIjotMSE9PUMmJihoKz1cIjAgVHJcXG5cIiksLTEhPT1QJiYoSS51c2VkUmVuZGVyaW5nTW9kZT1QKTtzPWkuYWxpZ258fFwibGVmdFwiO3ZhciBCPWV0KnUsaj1jLmludGVybmFsLnBhZ2VTaXplLmdldFdpZHRoKCksRT0oQT1jLmludGVybmFsLnNjYWxlRmFjdG9yLHJ0WyRdKSxNPWkuY2hhclNwYWNlfHxRdCxPPWkubWF4V2lkdGh8fDAscT0obz17fSxbXSk7aWYoXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKXt2YXIgVCxSO3Y9Zih0KTtcImxlZnRcIiE9PXMmJihSPXYubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBjLmdldFN0cmluZ1VuaXRXaWR0aCh0LHtmb250OkUsY2hhclNwYWNlOk0sZm9udFNpemU6ZXR9KSpldC9BfSkpO3ZhciBELFU9TWF0aC5tYXguYXBwbHkoTWF0aCxSKSx6PTA7aWYoXCJyaWdodFwiPT09cyl7ZS09UlswXSx0PVtdO3ZhciBIPTA7Zm9yKHc9di5sZW5ndGg7SDx3O0grKylVLVJbSF0sVD0wPT09SD8oRD1XdChlKSxWdChuKSk6KEQ9KHotUltIXSkqQSwtQiksdC5wdXNoKFt2W0hdLEQsVF0pLHo9UltIXX1lbHNlIGlmKFwiY2VudGVyXCI9PT1zKXtlLT1SWzBdLzIsdD1bXTtmb3IoSD0wLHc9di5sZW5ndGg7SDx3O0grKykoVS1SW0hdKS8yLFQ9MD09PUg/KEQ9V3QoZSksVnQobikpOihEPSh6LVJbSF0pLzIqQSwtQiksdC5wdXNoKFt2W0hdLEQsVF0pLHo9UltIXX1lbHNlIGlmKFwibGVmdFwiPT09cyl7dD1bXTtmb3IoSD0wLHc9di5sZW5ndGg7SDx3O0grKylUPTA9PT1IP1Z0KG4pOi1CLEQ9MD09PUg/V3QoZSk6MCx0LnB1c2godltIXSl9ZWxzZXtpZihcImp1c3RpZnlcIiE9PXMpdGhyb3cgbmV3IEVycm9yKCdVbnJlY29nbml6ZWQgYWxpZ25tZW50IG9wdGlvbiwgdXNlIFwibGVmdFwiLCBcImNlbnRlclwiLCBcInJpZ2h0XCIgb3IgXCJqdXN0aWZ5XCIuJyk7dD1bXTtmb3IoTz0wIT09Tz9POmosSD0wLHc9di5sZW5ndGg7SDx3O0grKylUPTA9PT1IP1Z0KG4pOi1CLEQ9MD09PUg/V3QoZSk6MCxIPHctMSYmcS5wdXNoKCgoTy1SW0hdKS8odltIXS5zcGxpdChcIiBcIikubGVuZ3RoLTEpKkEpLnRvRml4ZWQoMikpLHQucHVzaChbdltIXSxELFRdKX19ITA9PT0oXCJib29sZWFuXCI9PXR5cGVvZiBpLlIyTD9pLlIyTDpudCkmJih0PXAodCxmdW5jdGlvbih0LGUsbil7cmV0dXJuW3Quc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIiksZSxuXX0pKTtMPXt0ZXh0OnQseDplLHk6bixvcHRpb25zOmksbXV0ZXg6e3BkZkVzY2FwZTp2dCxhY3RpdmVGb250S2V5OiQsZm9udHM6cnQsYWN0aXZlRm9udFNpemU6ZXR9fTtpdC5wdWJsaXNoKFwicG9zdFByb2Nlc3NUZXh0XCIsTCksdD1MLnRleHQsbD1MLm11dGV4LmlzSGV4O3Y9Zih0KTt0PVtdO3ZhciBXLFYsRyxZPTAsSj0odz12Lmxlbmd0aCxcIlwiKTtmb3IoSD0wO0g8dztIKyspSj1cIlwiLEFycmF5LmlzQXJyYXkodltIXSk/KFc9cGFyc2VGbG9hdCh2W0hdWzFdKSxWPXBhcnNlRmxvYXQodltIXVsyXSksRz0obD9cIjxcIjpcIihcIikrdltIXVswXSsobD9cIj5cIjpcIilcIiksWT0xKTooVz1XdChlKSxWPVZ0KG4pLEc9KGw/XCI8XCI6XCIoXCIpK3ZbSF0rKGw/XCI+XCI6XCIpXCIpKSx2b2lkIDAhPT1xJiZ2b2lkIDAhPT1xW0hdJiYoSj1xW0hdK1wiIFR3XFxuXCIpLDAhPT1TLmxlbmd0aCYmMD09PUg/dC5wdXNoKEorUy5qb2luKFwiIFwiKStcIiBcIitXLnRvRml4ZWQoMikrXCIgXCIrVi50b0ZpeGVkKDIpK1wiIFRtXFxuXCIrRyk6MT09PVl8fDA9PT1ZJiYwPT09SD90LnB1c2goSitXLnRvRml4ZWQoMikrXCIgXCIrVi50b0ZpeGVkKDIpK1wiIFRkXFxuXCIrRyk6dC5wdXNoKEorRyk7dD0wPT09WT90LmpvaW4oXCIgVGpcXG5UKiBcIik6dC5qb2luKFwiIFRqXFxuXCIpLHQrPVwiIFRqXFxuXCI7dmFyIFg9XCJCVFxcbi9cIiskK1wiIFwiK2V0K1wiIFRmXFxuXCIrKGV0KnUpLnRvRml4ZWQoMikrXCIgVExcXG5cIitLdCtcIlxcblwiO3JldHVybiBYKz1oLFgrPXQsdHQoWCs9XCJFVFwiKSxLWyRdPSEwLGN9LGwuX19wcml2YXRlX18ubHN0ZXh0PWwubHN0ZXh0PWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiBjb25zb2xlLndhcm4oXCJqc1BERi5sc3RleHQgaXMgZGVwcmVjYXRlZFwiKSx0aGlzLnRleHQodCxlLG4se2NoYXJTcGFjZTpyfSl9LGwuX19wcml2YXRlX18uY2xpcD1sLmNsaXA9ZnVuY3Rpb24odCl7dHQoXCJldmVub2RkXCI9PT10P1wiVypcIjpcIldcIiksdHQoXCJuXCIpfSxsLl9fcHJpdmF0ZV9fLmNsaXBfZml4ZWQ9bC5jbGlwX2ZpeGVkPWZ1bmN0aW9uKHQpe2NvbnNvbGUubG9nKFwiY2xpcF9maXhlZCBpcyBkZXByZWNhdGVkXCIpLGwuY2xpcCh0KX07dmFyIE90PWwuX19wcml2YXRlX18uaXNWYWxpZFN0eWxlPWZ1bmN0aW9uKHQpe3ZhciBlPSExO3JldHVybi0xIT09W3ZvaWQgMCxudWxsLFwiU1wiLFwiRlwiLFwiREZcIixcIkZEXCIsXCJmXCIsXCJmKlwiLFwiQlwiLFwiQipcIl0uaW5kZXhPZih0KSYmKGU9ITApLGV9LHF0PWwuX19wcml2YXRlX18uZ2V0U3R5bGU9ZnVuY3Rpb24odCl7dmFyIGU9XCJTXCI7cmV0dXJuXCJGXCI9PT10P2U9XCJmXCI6XCJGRFwiPT09dHx8XCJERlwiPT09dD9lPVwiQlwiOlwiZlwiIT09dCYmXCJmKlwiIT09dCYmXCJCXCIhPT10JiZcIkIqXCIhPT10fHwoZT10KSxlfTtsLl9fcHJpdmF0ZV9fLmxpbmU9bC5saW5lPWZ1bmN0aW9uKHQsZSxuLHIpe2lmKGlzTmFOKHQpfHxpc05hTihlKXx8aXNOYU4obil8fGlzTmFOKHIpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5saW5lXCIpO3JldHVybiB0aGlzLmxpbmVzKFtbbi10LHItZV1dLHQsZSl9LGwuX19wcml2YXRlX18ubGluZXM9bC5saW5lcz1mdW5jdGlvbih0LGUsbixyLGksbyl7dmFyIGEscyxsLGgsdSxjLGYscCxkLGcsbSx5O2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0JiYoeT1uLG49ZSxlPXQsdD15KSxyPXJ8fFsxLDFdLG89b3x8ITEsaXNOYU4oZSl8fGlzTmFOKG4pfHwhQXJyYXkuaXNBcnJheSh0KXx8IUFycmF5LmlzQXJyYXkocil8fCFPdChpKXx8XCJib29sZWFuXCIhPXR5cGVvZiBvKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5saW5lc1wiKTtmb3IodHQoUShXdChlKSkrXCIgXCIrUShWdChuKSkrXCIgbSBcIiksYT1yWzBdLHM9clsxXSxoPXQubGVuZ3RoLGc9ZSxtPW4sbD0wO2w8aDtsKyspMj09PSh1PXRbbF0pLmxlbmd0aD8oZz11WzBdKmErZyxtPXVbMV0qcyttLHR0KFEoV3QoZykpK1wiIFwiK1EoVnQobSkpK1wiIGxcIikpOihjPXVbMF0qYStnLGY9dVsxXSpzK20scD11WzJdKmErZyxkPXVbM10qcyttLGc9dVs0XSphK2csbT11WzVdKnMrbSx0dChRKFd0KGMpKStcIiBcIitRKFZ0KGYpKStcIiBcIitRKFd0KHApKStcIiBcIitRKFZ0KGQpKStcIiBcIitRKFd0KGcpKStcIiBcIitRKFZ0KG0pKStcIiBjXCIpKTtyZXR1cm4gbyYmdHQoXCIgaFwiKSxudWxsIT09aSYmdHQocXQoaSkpLHRoaXN9LGwuX19wcml2YXRlX18ucmVjdD1sLnJlY3Q9ZnVuY3Rpb24odCxlLG4scixpKXtpZihpc05hTih0KXx8aXNOYU4oZSl8fGlzTmFOKG4pfHxpc05hTihyKXx8IU90KGkpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5yZWN0XCIpO3JldHVybiB0dChbWihXdCh0KSksWihWdChlKSksWihuKl8pLFooLXIqXyksXCJyZVwiXS5qb2luKFwiIFwiKSksbnVsbCE9PWkmJnR0KHF0KGkpKSx0aGlzfSxsLl9fcHJpdmF0ZV9fLnRyaWFuZ2xlPWwudHJpYW5nbGU9ZnVuY3Rpb24odCxlLG4scixpLG8sYSl7aWYoaXNOYU4odCl8fGlzTmFOKGUpfHxpc05hTihuKXx8aXNOYU4ocil8fGlzTmFOKGkpfHxpc05hTihvKXx8IU90KGEpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi50cmlhbmdsZVwiKTtyZXR1cm4gdGhpcy5saW5lcyhbW24tdCxyLWVdLFtpLW4sby1yXSxbdC1pLGUtb11dLHQsZSxbMSwxXSxhLCEwKSx0aGlzfSxsLl9fcHJpdmF0ZV9fLnJvdW5kZWRSZWN0PWwucm91bmRlZFJlY3Q9ZnVuY3Rpb24odCxlLG4scixpLG8sYSl7aWYoaXNOYU4odCl8fGlzTmFOKGUpfHxpc05hTihuKXx8aXNOYU4ocil8fGlzTmFOKGkpfHxpc05hTihvKXx8IU90KGEpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5yb3VuZGVkUmVjdFwiKTt2YXIgcz00LzMqKE1hdGguU1FSVDItMSk7cmV0dXJuIHRoaXMubGluZXMoW1tuLTIqaSwwXSxbaSpzLDAsaSxvLW8qcyxpLG9dLFswLHItMipvXSxbMCxvKnMsLWkqcyxvLC1pLG9dLFsyKmktbiwwXSxbLWkqcywwLC1pLC1vKnMsLWksLW9dLFswLDIqby1yXSxbMCwtbypzLGkqcywtbyxpLC1vXV0sdCtpLGUsWzEsMV0sYSksdGhpc30sbC5fX3ByaXZhdGVfXy5lbGxpcHNlPWwuZWxsaXBzZT1mdW5jdGlvbih0LGUsbixyLGkpe2lmKGlzTmFOKHQpfHxpc05hTihlKXx8aXNOYU4obil8fGlzTmFOKHIpfHwhT3QoaSkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudHMgcGFzc2VkIHRvIGpzUERGLmVsbGlwc2VcIik7dmFyIG89NC8zKihNYXRoLlNRUlQyLTEpKm4sYT00LzMqKE1hdGguU1FSVDItMSkqcjtyZXR1cm4gdHQoW1ooV3QodCtuKSksWihWdChlKSksXCJtXCIsWihXdCh0K24pKSxaKFZ0KGUtYSkpLFooV3QodCtvKSksWihWdChlLXIpKSxaKFd0KHQpKSxaKFZ0KGUtcikpLFwiY1wiXS5qb2luKFwiIFwiKSksdHQoW1ooV3QodC1vKSksWihWdChlLXIpKSxaKFd0KHQtbikpLFooVnQoZS1hKSksWihXdCh0LW4pKSxaKFZ0KGUpKSxcImNcIl0uam9pbihcIiBcIikpLHR0KFtaKFd0KHQtbikpLFooVnQoZSthKSksWihXdCh0LW8pKSxaKFZ0KGUrcikpLFooV3QodCkpLFooVnQoZStyKSksXCJjXCJdLmpvaW4oXCIgXCIpKSx0dChbWihXdCh0K28pKSxaKFZ0KGUrcikpLFooV3QodCtuKSksWihWdChlK2EpKSxaKFd0KHQrbikpLFooVnQoZSkpLFwiY1wiXS5qb2luKFwiIFwiKSksbnVsbCE9PWkmJnR0KHF0KGkpKSx0aGlzfSxsLl9fcHJpdmF0ZV9fLmNpcmNsZT1sLmNpcmNsZT1mdW5jdGlvbih0LGUsbixyKXtpZihpc05hTih0KXx8aXNOYU4oZSl8fGlzTmFOKG4pfHwhT3QocikpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudHMgcGFzc2VkIHRvIGpzUERGLmNpcmNsZVwiKTtyZXR1cm4gdGhpcy5lbGxpcHNlKHQsZSxuLG4scil9O2wuc2V0Rm9udD1mdW5jdGlvbih0LGUpe3JldHVybiAkPUx0KHQsZSx7ZGlzYWJsZVdhcm5pbmc6ITF9KSx0aGlzfSxsLnNldEZvbnRTdHlsZT1sLnNldEZvbnRUeXBlPWZ1bmN0aW9uKHQpe3JldHVybiAkPUx0KHZvaWQgMCx0KSx0aGlzfTtsLl9fcHJpdmF0ZV9fLmdldEZvbnRMaXN0PWwuZ2V0Rm9udExpc3Q9ZnVuY3Rpb24oKXt2YXIgdCxlLG4scj17fTtmb3IodCBpbiBIKWlmKEguaGFzT3duUHJvcGVydHkodCkpZm9yKGUgaW4gclt0XT1uPVtdLEhbdF0pSFt0XS5oYXNPd25Qcm9wZXJ0eShlKSYmbi5wdXNoKGUpO3JldHVybiByfTtsLmFkZEZvbnQ9ZnVuY3Rpb24odCxlLG4scil7eXQuY2FsbCh0aGlzLHQsZSxuLHI9cnx8XCJJZGVudGl0eS1IXCIpfTt2YXIgVHQsUnQ9ci5saW5lV2lkdGh8fC4yMDAwMjUsRHQ9bC5fX3ByaXZhdGVfXy5zZXRMaW5lV2lkdGg9bC5zZXRMaW5lV2lkdGg9ZnVuY3Rpb24odCl7cmV0dXJuIHR0KCh0Kl8pLnRvRml4ZWQoMikrXCIgd1wiKSx0aGlzfSxVdD0obC5fX3ByaXZhdGVfXy5zZXRMaW5lRGFzaD1hZS5BUEkuc2V0TGluZURhc2g9ZnVuY3Rpb24odCxlKXtpZih0PXR8fFtdLGU9ZXx8MCxpc05hTihlKXx8IUFycmF5LmlzQXJyYXkodCkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudHMgcGFzc2VkIHRvIGpzUERGLnNldExpbmVEYXNoXCIpO3JldHVybiB0PXQubWFwKGZ1bmN0aW9uKHQpe3JldHVybih0Kl8pLnRvRml4ZWQoMyl9KS5qb2luKFwiIFwiKSxlPXBhcnNlRmxvYXQoKGUqXykudG9GaXhlZCgzKSksdHQoXCJbXCIrdCtcIl0gXCIrZStcIiBkXCIpLHRoaXN9LGwuX19wcml2YXRlX18uZ2V0TGluZUhlaWdodD1sLmdldExpbmVIZWlnaHQ9ZnVuY3Rpb24oKXtyZXR1cm4gZXQqVHR9KSx6dD0oVXQ9bC5fX3ByaXZhdGVfXy5nZXRMaW5lSGVpZ2h0PWwuZ2V0TGluZUhlaWdodD1mdW5jdGlvbigpe3JldHVybiBldCpUdH0sbC5fX3ByaXZhdGVfXy5zZXRMaW5lSGVpZ2h0RmFjdG9yPWwuc2V0TGluZUhlaWdodEZhY3Rvcj1mdW5jdGlvbih0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YodD10fHwxLjE1KSYmKFR0PXQpLHRoaXN9KSxIdD1sLl9fcHJpdmF0ZV9fLmdldExpbmVIZWlnaHRGYWN0b3I9bC5nZXRMaW5lSGVpZ2h0RmFjdG9yPWZ1bmN0aW9uKCl7cmV0dXJuIFR0fTt6dChyLmxpbmVIZWlnaHQpO3ZhciBXdD1sLl9fcHJpdmF0ZV9fLmdldEhvcml6b250YWxDb29yZGluYXRlPWZ1bmN0aW9uKHQpe3JldHVybiB0Kl99LFZ0PWwuX19wcml2YXRlX18uZ2V0VmVydGljYWxDb29yZGluYXRlPWZ1bmN0aW9uKHQpe3JldHVybiBWW3hdLm1lZGlhQm94LnRvcFJpZ2h0WS1WW3hdLm1lZGlhQm94LmJvdHRvbUxlZnRZLXQqX30sR3Q9bC5fX3ByaXZhdGVfXy5nZXRIb3Jpem9udGFsQ29vcmRpbmF0ZVN0cmluZz1mdW5jdGlvbih0KXtyZXR1cm4gWih0Kl8pfSxZdD1sLl9fcHJpdmF0ZV9fLmdldFZlcnRpY2FsQ29vcmRpbmF0ZVN0cmluZz1mdW5jdGlvbih0KXtyZXR1cm4gWihWW3hdLm1lZGlhQm94LnRvcFJpZ2h0WS1WW3hdLm1lZGlhQm94LmJvdHRvbUxlZnRZLXQqXyl9LEp0PXIuc3Ryb2tlQ29sb3J8fFwiMCBHXCIsWHQ9KGwuX19wcml2YXRlX18uZ2V0U3Ryb2tlQ29sb3I9bC5nZXREcmF3Q29sb3I9ZnVuY3Rpb24oKXtyZXR1cm4gaHQoSnQpfSxsLl9fcHJpdmF0ZV9fLnNldFN0cm9rZUNvbG9yPWwuc2V0RHJhd0NvbG9yPWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiBKdD11dCh7Y2gxOnQsY2gyOmUsY2gzOm4sY2g0OnIscGRmQ29sb3JUeXBlOlwiZHJhd1wiLHByZWNpc2lvbjoyfSksdHQoSnQpLHRoaXN9LHIuZmlsbENvbG9yfHxcIjAgZ1wiKSxLdD0obC5fX3ByaXZhdGVfXy5nZXRGaWxsQ29sb3I9bC5nZXRGaWxsQ29sb3I9ZnVuY3Rpb24oKXtyZXR1cm4gaHQoWHQpfSxsLl9fcHJpdmF0ZV9fLnNldEZpbGxDb2xvcj1sLnNldEZpbGxDb2xvcj1mdW5jdGlvbih0LGUsbixyKXtyZXR1cm4gWHQ9dXQoe2NoMTp0LGNoMjplLGNoMzpuLGNoNDpyLHBkZkNvbG9yVHlwZTpcImZpbGxcIixwcmVjaXNpb246Mn0pLHR0KFh0KSx0aGlzfSxyLnRleHRDb2xvcnx8XCIwIGdcIiksWnQ9bC5fX3ByaXZhdGVfXy5nZXRUZXh0Q29sb3I9bC5nZXRUZXh0Q29sb3I9ZnVuY3Rpb24oKXtyZXR1cm4gaHQoS3QpfSxRdD0obC5fX3ByaXZhdGVfXy5zZXRUZXh0Q29sb3I9bC5zZXRUZXh0Q29sb3I9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIEt0PXV0KHtjaDE6dCxjaDI6ZSxjaDM6bixjaDQ6cixwZGZDb2xvclR5cGU6XCJ0ZXh0XCIscHJlY2lzaW9uOjN9KSx0aGlzfSxyLmNoYXJTcGFjZXx8MCksJHQ9bC5fX3ByaXZhdGVfXy5nZXRDaGFyU3BhY2U9bC5nZXRDaGFyU3BhY2U9ZnVuY3Rpb24oKXtyZXR1cm4gUXR9LHRlPShsLl9fcHJpdmF0ZV9fLnNldENoYXJTcGFjZT1sLnNldENoYXJTcGFjZT1mdW5jdGlvbih0KXtpZihpc05hTih0KSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCB0byBqc1BERi5zZXRDaGFyU3BhY2VcIik7cmV0dXJuIFF0PXQsdGhpc30sMCk7bC5DYXBKb2luU3R5bGVzPXswOjAsYnV0dDowLGJ1dDowLG1pdGVyOjAsMToxLHJvdW5kOjEscm91bmRlZDoxLGNpcmNsZToxLDI6Mixwcm9qZWN0aW5nOjIscHJvamVjdDoyLHNxdWFyZToyLGJldmVsOjJ9O2wuX19wcml2YXRlX18uc2V0TGluZUNhcD1sLnNldExpbmVDYXA9ZnVuY3Rpb24odCl7dmFyIGU9bC5DYXBKb2luU3R5bGVzW3RdO2lmKHZvaWQgMD09PWUpdGhyb3cgbmV3IEVycm9yKFwiTGluZSBjYXAgc3R5bGUgb2YgJ1wiK3QrXCInIGlzIG5vdCByZWNvZ25pemVkLiBTZWUgb3IgZXh0ZW5kIC5DYXBKb2luU3R5bGVzIHByb3BlcnR5IGZvciB2YWxpZCBzdHlsZXNcIik7cmV0dXJuIHR0KCh0ZT1lKStcIiBKXCIpLHRoaXN9O3ZhciBlZSxuZT0wO2wuX19wcml2YXRlX18uc2V0TGluZUpvaW49bC5zZXRMaW5lSm9pbj1mdW5jdGlvbih0KXt2YXIgZT1sLkNhcEpvaW5TdHlsZXNbdF07aWYodm9pZCAwPT09ZSl0aHJvdyBuZXcgRXJyb3IoXCJMaW5lIGpvaW4gc3R5bGUgb2YgJ1wiK3QrXCInIGlzIG5vdCByZWNvZ25pemVkLiBTZWUgb3IgZXh0ZW5kIC5DYXBKb2luU3R5bGVzIHByb3BlcnR5IGZvciB2YWxpZCBzdHlsZXNcIik7cmV0dXJuIHR0KChuZT1lKStcIiBqXCIpLHRoaXN9LGwuX19wcml2YXRlX18uc2V0TWl0ZXJMaW1pdD1sLnNldE1pdGVyTGltaXQ9ZnVuY3Rpb24odCl7aWYodD10fHwwLGlzTmFOKHQpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQgcGFzc2VkIHRvIGpzUERGLnNldE1pdGVyTGltaXRcIik7cmV0dXJuIGVlPXBhcnNlRmxvYXQoWih0Kl8pKSx0dChlZStcIiBNXCIpLHRoaXN9O2Zvcih2YXIgcmUgaW4gbC5zYXZlPWZ1bmN0aW9uKHIsdCl7aWYocj1yfHxcImdlbmVyYXRlZC5wZGZcIiwodD10fHx7fSkucmV0dXJuUHJvbWlzZT10LnJldHVyblByb21pc2V8fCExLCExIT09dC5yZXR1cm5Qcm9taXNlKXJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbih0LGUpe3RyeXt2YXIgbj1sZShJdChrdCgpKSxyKTtcImZ1bmN0aW9uXCI9PXR5cGVvZiBsZS51bmxvYWQmJmllLnNldFRpbWVvdXQmJnNldFRpbWVvdXQobGUudW5sb2FkLDkxMSksdChuKX1jYXRjaCh0KXtlKHQubWVzc2FnZSl9fSk7bGUoSXQoa3QoKSksciksXCJmdW5jdGlvblwiPT10eXBlb2YgbGUudW5sb2FkJiZpZS5zZXRUaW1lb3V0JiZzZXRUaW1lb3V0KGxlLnVubG9hZCw5MTEpfSxhZS5BUEkpYWUuQVBJLmhhc093blByb3BlcnR5KHJlKSYmKFwiZXZlbnRzXCI9PT1yZSYmYWUuQVBJLmV2ZW50cy5sZW5ndGg/ZnVuY3Rpb24odCxlKXt2YXIgbixyLGk7Zm9yKGk9ZS5sZW5ndGgtMTstMSE9PWk7aS0tKW49ZVtpXVswXSxyPWVbaV1bMV0sdC5zdWJzY3JpYmUuYXBwbHkodCxbbl0uY29uY2F0KFwiZnVuY3Rpb25cIj09dHlwZW9mIHI/W3JdOnIpKX0oaXQsYWUuQVBJLmV2ZW50cyk6bFtyZV09YWUuQVBJW3JlXSk7cmV0dXJuIGwuaW50ZXJuYWw9e3BkZkVzY2FwZTp2dCxnZXRTdHlsZTpxdCxnZXRGb250OmZ1bmN0aW9uKCl7cmV0dXJuIHJ0W0x0LmFwcGx5KGwsYXJndW1lbnRzKV19LGdldEZvbnRTaXplOk8sZ2V0Q2hhclNwYWNlOiR0LGdldFRleHRDb2xvcjpadCxnZXRMaW5lSGVpZ2h0OlV0LGdldExpbmVIZWlnaHRGYWN0b3I6SHQsd3JpdGU6aixnZXRIb3Jpem9udGFsQ29vcmRpbmF0ZTpXdCxnZXRWZXJ0aWNhbENvb3JkaW5hdGU6VnQsZ2V0Q29vcmRpbmF0ZVN0cmluZzpHdCxnZXRWZXJ0aWNhbENvb3JkaW5hdGVTdHJpbmc6WXQsY29sbGVjdGlvbnM6e30sbmV3T2JqZWN0OkosbmV3QWRkaXRpb25hbE9iamVjdDphdCxuZXdPYmplY3REZWZlcnJlZDpYLG5ld09iamVjdERlZmVycmVkQmVnaW46b3QsZ2V0RmlsdGVyczpjdCxwdXRTdHJlYW06ZnQsZXZlbnRzOml0LHNjYWxlRmFjdG9yOl8scGFnZVNpemU6e2dldFdpZHRoOmZ1bmN0aW9uKCl7cmV0dXJuKFZbeF0ubWVkaWFCb3gudG9wUmlnaHRYLVZbeF0ubWVkaWFCb3guYm90dG9tTGVmdFgpL199LHNldFdpZHRoOmZ1bmN0aW9uKHQpe1ZbeF0ubWVkaWFCb3gudG9wUmlnaHRYPXQqXytWW3hdLm1lZGlhQm94LmJvdHRvbUxlZnRYfSxnZXRIZWlnaHQ6ZnVuY3Rpb24oKXtyZXR1cm4oVlt4XS5tZWRpYUJveC50b3BSaWdodFktVlt4XS5tZWRpYUJveC5ib3R0b21MZWZ0WSkvX30sc2V0SGVpZ2h0OmZ1bmN0aW9uKHQpe1ZbeF0ubWVkaWFCb3gudG9wUmlnaHRZPXQqXytWW3hdLm1lZGlhQm94LmJvdHRvbUxlZnRZfX0sb3V0cHV0OkN0LGdldE51bWJlck9mUGFnZXM6TnQscGFnZXM6SSxvdXQ6dHQsZjI6WixmMzpRLGdldFBhZ2VJbmZvOmp0LGdldFBhZ2VJbmZvQnlPYmpJZDpFdCxnZXRDdXJyZW50UGFnZUluZm86TXQsZ2V0UERGVmVyc2lvbjp1LGhhc0hvdGZpeDpCdH0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGwuaW50ZXJuYWwucGFnZVNpemUsXCJ3aWR0aFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4oVlt4XS5tZWRpYUJveC50b3BSaWdodFgtVlt4XS5tZWRpYUJveC5ib3R0b21MZWZ0WCkvX30sc2V0OmZ1bmN0aW9uKHQpe1ZbeF0ubWVkaWFCb3gudG9wUmlnaHRYPXQqXytWW3hdLm1lZGlhQm94LmJvdHRvbUxlZnRYfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShsLmludGVybmFsLnBhZ2VTaXplLFwiaGVpZ2h0XCIse2dldDpmdW5jdGlvbigpe3JldHVybihWW3hdLm1lZGlhQm94LnRvcFJpZ2h0WS1WW3hdLm1lZGlhQm94LmJvdHRvbUxlZnRZKS9ffSxzZXQ6ZnVuY3Rpb24odCl7Vlt4XS5tZWRpYUJveC50b3BSaWdodFk9dCpfK1ZbeF0ubWVkaWFCb3guYm90dG9tTGVmdFl9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZnVuY3Rpb24odCl7Zm9yKHZhciBlPTAsbj1NLmxlbmd0aDtlPG47ZSsrKXt2YXIgcj15dCh0W2VdWzBdLHRbZV1bMV0sdFtlXVsyXSxNW2VdWzNdLCEwKTtLW3JdPSEwO3ZhciBpPXRbZV1bMF0uc3BsaXQoXCItXCIpO210KHIsaVswXSxpWzFdfHxcIlwiKX1pdC5wdWJsaXNoKFwiYWRkRm9udHNcIix7Zm9udHM6cnQsZGljdGlvbmFyeTpIfSl9KE0pLCQ9XCJGMVwiLGJ0KGksdCksaXQucHVibGlzaChcImluaXRpYWxpemVkXCIpLGx9cmV0dXJuIGFlLkFQST17ZXZlbnRzOltdfSxhZS52ZXJzaW9uPVwiMS41LjNcIixcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwianNQREZcIixmdW5jdGlvbigpe3JldHVybiBhZX0pOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzPyhtb2R1bGUuZXhwb3J0cz1hZSxtb2R1bGUuZXhwb3J0cy5qc1BERj1hZSk6aWUuanNQREY9YWUsYWV9KFwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmfHxcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3d8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWwmJmdsb2JhbHx8RnVuY3Rpb24oJ3JldHVybiB0eXBlb2YgdGhpcyA9PT0gXCJvYmplY3RcIiAmJiB0aGlzLmNvbnRlbnQnKSgpfHxGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkpO1xyXG4vKipcclxuICAgKiBAbGljZW5zZVxyXG4gICAqIENvcHlyaWdodCAoYykgMjAxNiBBbGV4YW5kZXIgV2VpZHQsXHJcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL0JpZ2dBOTRcclxuICAgKiBcclxuICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxyXG4gICAqL1xyXG4oZnVuY3Rpb24odCxlKXt2YXIgQSxuPTEsUz1mdW5jdGlvbih0KXtyZXR1cm4gdC5yZXBsYWNlKC9cXFxcL2csXCJcXFxcXFxcXFwiKS5yZXBsYWNlKC9cXCgvZyxcIlxcXFwoXCIpLnJlcGxhY2UoL1xcKS9nLFwiXFxcXClcIil9LHk9ZnVuY3Rpb24odCl7cmV0dXJuIHQucmVwbGFjZSgvXFxcXFxcXFwvZyxcIlxcXFxcIikucmVwbGFjZSgvXFxcXFxcKC9nLFwiKFwiKS5yZXBsYWNlKC9cXFxcXFwpL2csXCIpXCIpfSxfPWZ1bmN0aW9uKHQpe2lmKGlzTmFOKHQpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQgcGFzc2VkIHRvIGpzUERGLmYyXCIpO3JldHVybiB0LnRvRml4ZWQoMil9LHM9ZnVuY3Rpb24odCl7aWYoaXNOYU4odCkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudCBwYXNzZWQgdG8ganNQREYuZjJcIik7cmV0dXJuIHQudG9GaXhlZCg1KX07dC5fX2Fjcm9mb3JtX189e307dmFyIHI9ZnVuY3Rpb24odCxlKXt0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUucHJvdG90eXBlKSx0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj10fSx2PWZ1bmN0aW9uKHQpe3JldHVybiB0Km59LHc9ZnVuY3Rpb24odCl7cmV0dXJuIHQvbn0sbD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgaixuPVkuaW50ZXJuYWwuZ2V0SGVpZ2h0KHQpfHwwLHI9WS5pbnRlcm5hbC5nZXRXaWR0aCh0KXx8MDtyZXR1cm4gZS5CQm94PVswLDAsTnVtYmVyKF8ocikpLE51bWJlcihfKG4pKV0sZX0saT10Ll9fYWNyb2Zvcm1fXy5zZXRCaXQ9ZnVuY3Rpb24odCxlKXtpZih0PXR8fDAsZT1lfHwwLGlzTmFOKHQpfHxpc05hTihlKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYuQVBJLl9fYWNyb2Zvcm1fXy5zZXRCaXRcIik7cmV0dXJuIHR8PTE8PGV9LG89dC5fX2Fjcm9mb3JtX18uY2xlYXJCaXQ9ZnVuY3Rpb24odCxlKXtpZih0PXR8fDAsZT1lfHwwLGlzTmFOKHQpfHxpc05hTihlKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYuQVBJLl9fYWNyb2Zvcm1fXy5jbGVhckJpdFwiKTtyZXR1cm4gdCY9figxPDxlKX0sYT10Ll9fYWNyb2Zvcm1fXy5nZXRCaXQ9ZnVuY3Rpb24odCxlKXtpZihpc05hTih0KXx8aXNOYU4oZSkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudHMgcGFzc2VkIHRvIGpzUERGLkFQSS5fX2Fjcm9mb3JtX18uZ2V0Qml0XCIpO3JldHVybiAwPT0odCYxPDxlKT8wOjF9LGI9dC5fX2Fjcm9mb3JtX18uZ2V0Qml0Rm9yUGRmPWZ1bmN0aW9uKHQsZSl7aWYoaXNOYU4odCl8fGlzTmFOKGUpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5BUEkuX19hY3JvZm9ybV9fLmdldEJpdEZvclBkZlwiKTtyZXR1cm4gYSh0LGUtMSl9LHg9dC5fX2Fjcm9mb3JtX18uc2V0Qml0Rm9yUGRmPWZ1bmN0aW9uKHQsZSl7aWYoaXNOYU4odCl8fGlzTmFOKGUpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5BUEkuX19hY3JvZm9ybV9fLnNldEJpdEZvclBkZlwiKTtyZXR1cm4gaSh0LGUtMSl9LE49dC5fX2Fjcm9mb3JtX18uY2xlYXJCaXRGb3JQZGY9ZnVuY3Rpb24odCxlLG4pe2lmKGlzTmFOKHQpfHxpc05hTihlKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYuQVBJLl9fYWNyb2Zvcm1fXy5jbGVhckJpdEZvclBkZlwiKTtyZXR1cm4gbyh0LGUtMSl9LGM9dC5fX2Fjcm9mb3JtX18uY2FsY3VsYXRlQ29vcmRpbmF0ZXM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5pbnRlcm5hbC5nZXRIb3Jpem9udGFsQ29vcmRpbmF0ZSxuPXRoaXMuaW50ZXJuYWwuZ2V0VmVydGljYWxDb29yZGluYXRlLHI9dFswXSxpPXRbMV0sbz10WzJdLGE9dFszXSxzPXt9O3JldHVybiBzLmxvd2VyTGVmdF9YPWUocil8fDAscy5sb3dlckxlZnRfWT1uKGkrYSl8fDAscy51cHBlclJpZ2h0X1g9ZShyK28pfHwwLHMudXBwZXJSaWdodF9ZPW4oaSl8fDAsW051bWJlcihfKHMubG93ZXJMZWZ0X1gpKSxOdW1iZXIoXyhzLmxvd2VyTGVmdF9ZKSksTnVtYmVyKF8ocy51cHBlclJpZ2h0X1gpKSxOdW1iZXIoXyhzLnVwcGVyUmlnaHRfWSkpXX0sZj1mdW5jdGlvbih0KXtpZih0LmFwcGVhcmFuY2VTdHJlYW1Db250ZW50KXJldHVybiB0LmFwcGVhcmFuY2VTdHJlYW1Db250ZW50O2lmKHQuVnx8dC5EVil7dmFyIGU9W10sbj10LlZ8fHQuRFYscj1oKHQsbiksaT1BLmludGVybmFsLmdldEZvbnQodC5mb250TmFtZSx0LmZvbnRTdHlsZSkuaWQ7ZS5wdXNoKFwiL1R4IEJNQ1wiKSxlLnB1c2goXCJxXCIpLGUucHVzaChcIkJUXCIpLGUucHVzaChBLl9fcHJpdmF0ZV9fLmVuY29kZUNvbG9yU3RyaW5nKHQuY29sb3IpKSxlLnB1c2goXCIvXCIraStcIiBcIitfKHIuZm9udFNpemUpK1wiIFRmXCIpLGUucHVzaChcIjEgMCAwIDEgMCAwIFRtXCIpLGUucHVzaChyLnRleHQpLGUucHVzaChcIkVUXCIpLGUucHVzaChcIlFcIiksZS5wdXNoKFwiRU1DXCIpO3ZhciBvPW5ldyBsKHQpO3JldHVybiBvLnN0cmVhbT1lLmpvaW4oXCJcXG5cIiksb319LGg9ZnVuY3Rpb24oaSx0KXt2YXIgZT1pLm1heEZvbnRTaXplfHwxMixuPShpLmZvbnROYW1lLHt0ZXh0OlwiXCIsZm9udFNpemU6XCJcIn0pLG89KHQ9XCIpXCI9PSh0PVwiKFwiPT10LnN1YnN0cigwLDEpP3Quc3Vic3RyKDEpOnQpLnN1YnN0cih0Lmxlbmd0aC0xKT90LnN1YnN0cigwLHQubGVuZ3RoLTEpOnQpLnNwbGl0KFwiIFwiKSxyPShBLl9fcHJpdmF0ZV9fLmVuY29kZUNvbG9yU3RyaW5nKGkuY29sb3IpLGUpLGE9WS5pbnRlcm5hbC5nZXRIZWlnaHQoaSl8fDA7YT1hPDA/LWE6YTt2YXIgcz1ZLmludGVybmFsLmdldFdpZHRoKGkpfHwwO3M9czwwPy1zOnM7dmFyIGw9ZnVuY3Rpb24odCxlLG4pe2lmKHQrMTxvLmxlbmd0aCl7dmFyIHI9ZStcIiBcIitvW3QrMV07cmV0dXJuIEYocixpLG4pLndpZHRoPD1zLTR9cmV0dXJuITF9O3IrKzt0OmZvcig7Oyl7dD1cIlwiO3ZhciBoPUYoXCIzXCIsaSwtLXIpLmhlaWdodCx1PWkubXVsdGlsaW5lP2EtcjooYS1oKS8yLGM9LTIsZj11Kz0yLHA9MCxkPTAsZz0wO2lmKHI8PTApe3Q9XCIoLi4uKSBUalxcblwiLHQrPVwiJSBXaWR0aCBvZiBUZXh0OiBcIitGKHQsaSxyPTEyKS53aWR0aCtcIiwgRmllbGRXaWR0aDpcIitzK1wiXFxuXCI7YnJlYWt9Zz1GKG9bMF0rXCIgXCIsaSxyKS53aWR0aDt2YXIgbT1cIlwiLHk9MDtmb3IodmFyIHYgaW4gbylpZihvLmhhc093blByb3BlcnR5KHYpKXttPVwiIFwiPT0obSs9b1t2XStcIiBcIikuc3Vic3RyKG0ubGVuZ3RoLTEpP20uc3Vic3RyKDAsbS5sZW5ndGgtMSk6bTt2YXIgdz1wYXJzZUludCh2KTtnPUYobStcIiBcIixpLHIpLndpZHRoO3ZhciBiPWwodyxtLHIpLHg9dj49by5sZW5ndGgtMTtpZihiJiYheCl7bSs9XCIgXCI7Y29udGludWV9aWYoYnx8eCl7aWYoeClkPXc7ZWxzZSBpZihpLm11bHRpbGluZSYmYTwoaCsyKSooeSsyKSsyKWNvbnRpbnVlIHR9ZWxzZXtpZighaS5tdWx0aWxpbmUpY29udGludWUgdDtpZihhPChoKzIpKih5KzIpKzIpY29udGludWUgdDtkPXd9Zm9yKHZhciBOPVwiXCIsTD1wO0w8PWQ7TCsrKU4rPW9bTF0rXCIgXCI7c3dpdGNoKE49XCIgXCI9PU4uc3Vic3RyKE4ubGVuZ3RoLTEpP04uc3Vic3RyKDAsTi5sZW5ndGgtMSk6TixnPUYoTixpLHIpLndpZHRoLGkudGV4dEFsaWduKXtjYXNlXCJyaWdodFwiOmM9cy1nLTI7YnJlYWs7Y2FzZVwiY2VudGVyXCI6Yz0ocy1nKS8yO2JyZWFrO2Nhc2VcImxlZnRcIjpkZWZhdWx0OmM9Mn10Kz1fKGMpK1wiIFwiK18oZikrXCIgVGRcXG5cIix0Kz1cIihcIitTKE4pK1wiKSBUalxcblwiLHQrPS1fKGMpK1wiIDAgVGRcXG5cIixmPS0ocisyKSxnPTAscD1kKzEseSsrLG09XCJcIn1lbHNlO2JyZWFrfXJldHVybiBuLnRleHQ9dCxuLmZvbnRTaXplPXIsbn0sRj1mdW5jdGlvbih0LGUsbil7dmFyIHI9QS5pbnRlcm5hbC5nZXRGb250KGUuZm9udE5hbWUsZS5mb250U3R5bGUpLGk9QS5nZXRTdHJpbmdVbml0V2lkdGgodCx7Zm9udDpyLGZvbnRTaXplOnBhcnNlRmxvYXQobiksY2hhclNwYWNlOjB9KSpwYXJzZUZsb2F0KG4pO3JldHVybntoZWlnaHQ6QS5nZXRTdHJpbmdVbml0V2lkdGgoXCIzXCIse2ZvbnQ6cixmb250U2l6ZTpwYXJzZUZsb2F0KG4pLGNoYXJTcGFjZTowfSkqcGFyc2VGbG9hdChuKSoxLjUsd2lkdGg6aX19LHU9e2ZpZWxkczpbXSx4Rm9ybXM6W10sYWNyb0Zvcm1EaWN0aW9uYXJ5Um9vdDpudWxsLHByaW50ZWRPdXQ6ITEsaW50ZXJuYWw6bnVsbCxpc0luaXRpYWxpemVkOiExfSxwPWZ1bmN0aW9uKCl7QS5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi5hY3JvRm9ybURpY3Rpb25hcnlSb290Lm9iaklkPXZvaWQgMDt2YXIgdD1BLmludGVybmFsLmFjcm9mb3JtUGx1Z2luLmFjcm9Gb3JtRGljdGlvbmFyeVJvb3QuRmllbGRzO2Zvcih2YXIgZSBpbiB0KWlmKHQuaGFzT3duUHJvcGVydHkoZSkpe3ZhciBuPXRbZV07bi5vYmpJZD12b2lkIDAsbi5oYXNBbm5vdGF0aW9uJiZkLmNhbGwoQSxuKX19LGQ9ZnVuY3Rpb24odCl7dmFyIGU9e3R5cGU6XCJyZWZlcmVuY2VcIixvYmplY3Q6dH07dm9pZCAwPT09QS5pbnRlcm5hbC5nZXRQYWdlSW5mbyh0LnBhZ2UpLnBhZ2VDb250ZXh0LmFubm90YXRpb25zLmZpbmQoZnVuY3Rpb24odCl7cmV0dXJuIHQudHlwZT09PWUudHlwZSYmdC5vYmplY3Q9PT1lLm9iamVjdH0pJiZBLmludGVybmFsLmdldFBhZ2VJbmZvKHQucGFnZSkucGFnZUNvbnRleHQuYW5ub3RhdGlvbnMucHVzaChlKX0sZz1mdW5jdGlvbigpe2lmKHZvaWQgMD09PUEuaW50ZXJuYWwuYWNyb2Zvcm1QbHVnaW4uYWNyb0Zvcm1EaWN0aW9uYXJ5Um9vdCl0aHJvdyBuZXcgRXJyb3IoXCJwdXRDYXRhbG9nQ2FsbGJhY2s6IFJvb3QgbWlzc2luZy5cIik7QS5pbnRlcm5hbC53cml0ZShcIi9BY3JvRm9ybSBcIitBLmludGVybmFsLmFjcm9mb3JtUGx1Z2luLmFjcm9Gb3JtRGljdGlvbmFyeVJvb3Qub2JqSWQrXCIgMCBSXCIpfSxtPWZ1bmN0aW9uKCl7QS5pbnRlcm5hbC5ldmVudHMudW5zdWJzY3JpYmUoQS5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi5hY3JvRm9ybURpY3Rpb25hcnlSb290Ll9ldmVudElEKSxkZWxldGUgQS5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi5hY3JvRm9ybURpY3Rpb25hcnlSb290Ll9ldmVudElELEEuaW50ZXJuYWwuYWNyb2Zvcm1QbHVnaW4ucHJpbnRlZE91dD0hMH0sTD1mdW5jdGlvbih0KXt2YXIgZT0hdDt0fHwoQS5pbnRlcm5hbC5uZXdPYmplY3REZWZlcnJlZEJlZ2luKEEuaW50ZXJuYWwuYWNyb2Zvcm1QbHVnaW4uYWNyb0Zvcm1EaWN0aW9uYXJ5Um9vdC5vYmpJZCwhMCksQS5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi5hY3JvRm9ybURpY3Rpb25hcnlSb290LnB1dFN0cmVhbSgpKTt0PXR8fEEuaW50ZXJuYWwuYWNyb2Zvcm1QbHVnaW4uYWNyb0Zvcm1EaWN0aW9uYXJ5Um9vdC5LaWRzO2Zvcih2YXIgbiBpbiB0KWlmKHQuaGFzT3duUHJvcGVydHkobikpe3ZhciByPXRbbl0saT1bXSxvPXIuUmVjdDtpZihyLlJlY3QmJihyLlJlY3Q9Yy5jYWxsKHRoaXMsci5SZWN0KSksQS5pbnRlcm5hbC5uZXdPYmplY3REZWZlcnJlZEJlZ2luKHIub2JqSWQsITApLHIuREE9WS5jcmVhdGVEZWZhdWx0QXBwZWFyYW5jZVN0cmVhbShyKSxcIm9iamVjdFwiPT09c2UocikmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHIuZ2V0S2V5VmFsdWVMaXN0Rm9yU3RyZWFtJiYoaT1yLmdldEtleVZhbHVlTGlzdEZvclN0cmVhbSgpKSxyLlJlY3Q9byxyLmhhc0FwcGVhcmFuY2VTdHJlYW0mJiFyLmFwcGVhcmFuY2VTdHJlYW1Db250ZW50KXt2YXIgYT1mLmNhbGwodGhpcyxyKTtpLnB1c2goe2tleTpcIkFQXCIsdmFsdWU6XCI8PC9OIFwiK2ErXCI+PlwifSksQS5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi54Rm9ybXMucHVzaChhKX1pZihyLmFwcGVhcmFuY2VTdHJlYW1Db250ZW50KXt2YXIgcz1cIlwiO2Zvcih2YXIgbCBpbiByLmFwcGVhcmFuY2VTdHJlYW1Db250ZW50KWlmKHIuYXBwZWFyYW5jZVN0cmVhbUNvbnRlbnQuaGFzT3duUHJvcGVydHkobCkpe3ZhciBoPXIuYXBwZWFyYW5jZVN0cmVhbUNvbnRlbnRbbF07aWYocys9XCIvXCIrbCtcIiBcIixzKz1cIjw8XCIsMTw9T2JqZWN0LmtleXMoaCkubGVuZ3RofHxBcnJheS5pc0FycmF5KGgpKWZvcih2YXIgbiBpbiBoKXt2YXIgdTtpZihoLmhhc093blByb3BlcnR5KG4pKVwiZnVuY3Rpb25cIj09dHlwZW9mKHU9aFtuXSkmJih1PXUuY2FsbCh0aGlzLHIpKSxzKz1cIi9cIituK1wiIFwiK3UrXCIgXCIsMDw9QS5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi54Rm9ybXMuaW5kZXhPZih1KXx8QS5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi54Rm9ybXMucHVzaCh1KX1lbHNlXCJmdW5jdGlvblwiPT10eXBlb2YodT1oKSYmKHU9dS5jYWxsKHRoaXMscikpLHMrPVwiL1wiK24rXCIgXCIrdSwwPD1BLmludGVybmFsLmFjcm9mb3JtUGx1Z2luLnhGb3Jtcy5pbmRleE9mKHUpfHxBLmludGVybmFsLmFjcm9mb3JtUGx1Z2luLnhGb3Jtcy5wdXNoKHUpO3MrPVwiPj5cIn1pLnB1c2goe2tleTpcIkFQXCIsdmFsdWU6XCI8PFxcblwiK3MrXCI+PlwifSl9QS5pbnRlcm5hbC5wdXRTdHJlYW0oe2FkZGl0aW9uYWxLZXlWYWx1ZXM6aX0pLEEuaW50ZXJuYWwub3V0KFwiZW5kb2JqXCIpfWUmJlAuY2FsbCh0aGlzLEEuaW50ZXJuYWwuYWNyb2Zvcm1QbHVnaW4ueEZvcm1zKX0sUD1mdW5jdGlvbih0KXtmb3IodmFyIGUgaW4gdClpZih0Lmhhc093blByb3BlcnR5KGUpKXt2YXIgbj1lLHI9dFtlXTtBLmludGVybmFsLm5ld09iamVjdERlZmVycmVkQmVnaW4ociYmci5vYmpJZCwhMCksXCJvYmplY3RcIj09PXNlKHIpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiByLnB1dFN0cmVhbSYmci5wdXRTdHJlYW0oKSxkZWxldGUgdFtuXX19LGs9ZnVuY3Rpb24oKXtpZih2b2lkIDAhPT10aGlzLmludGVybmFsJiYodm9pZCAwPT09dGhpcy5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbnx8ITE9PT10aGlzLmludGVybmFsLmFjcm9mb3JtUGx1Z2luLmlzSW5pdGlhbGl6ZWQpKXtpZihBPXRoaXMsTS5GaWVsZE51bT0wLHRoaXMuaW50ZXJuYWwuYWNyb2Zvcm1QbHVnaW49SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh1KSksdGhpcy5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi5hY3JvRm9ybURpY3Rpb25hcnlSb290KXRocm93IG5ldyBFcnJvcihcIkV4Y2VwdGlvbiB3aGlsZSBjcmVhdGluZyBBY3JvZm9ybURpY3Rpb25hcnlcIik7bj1BLmludGVybmFsLnNjYWxlRmFjdG9yLEEuaW50ZXJuYWwuYWNyb2Zvcm1QbHVnaW4uYWNyb0Zvcm1EaWN0aW9uYXJ5Um9vdD1uZXcgRSxBLmludGVybmFsLmFjcm9mb3JtUGx1Z2luLmFjcm9Gb3JtRGljdGlvbmFyeVJvb3QuX2V2ZW50SUQ9QS5pbnRlcm5hbC5ldmVudHMuc3Vic2NyaWJlKFwicG9zdFB1dFJlc291cmNlc1wiLG0pLEEuaW50ZXJuYWwuZXZlbnRzLnN1YnNjcmliZShcImJ1aWxkRG9jdW1lbnRcIixwKSxBLmludGVybmFsLmV2ZW50cy5zdWJzY3JpYmUoXCJwdXRDYXRhbG9nXCIsZyksQS5pbnRlcm5hbC5ldmVudHMuc3Vic2NyaWJlKFwicG9zdFB1dFBhZ2VzXCIsTCksQS5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi5pc0luaXRpYWxpemVkPSEwfX0sST10Ll9fYWNyb2Zvcm1fXy5hcnJheVRvUGRmQXJyYXk9ZnVuY3Rpb24odCl7aWYoQXJyYXkuaXNBcnJheSh0KSl7Zm9yKHZhciBlPVwiW1wiLG49MDtuPHQubGVuZ3RoO24rKylzd2l0Y2goMCE9PW4mJihlKz1cIiBcIiksc2UodFtuXSkpe2Nhc2VcImJvb2xlYW5cIjpjYXNlXCJudW1iZXJcIjpjYXNlXCJvYmplY3RcIjplKz10W25dLnRvU3RyaW5nKCk7YnJlYWs7Y2FzZVwic3RyaW5nXCI6XCIvXCIhPT10W25dLnN1YnN0cigwLDEpP2UrPVwiKFwiK1ModFtuXS50b1N0cmluZygpKStcIilcIjplKz10W25dLnRvU3RyaW5nKCl9cmV0dXJuIGUrPVwiXVwifXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQgcGFzc2VkIHRvIGpzUERGLl9fYWNyb2Zvcm1fXy5hcnJheVRvUGRmQXJyYXlcIil9O3ZhciBDPWZ1bmN0aW9uKHQpe3JldHVybih0PXR8fFwiXCIpLnRvU3RyaW5nKCksdD1cIihcIitTKHQpK1wiKVwifSxCPWZ1bmN0aW9uKCl7dmFyIGU7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJvYmpJZFwiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7aWYoZXx8KGU9QS5pbnRlcm5hbC5uZXdPYmplY3REZWZlcnJlZCgpKSwhZSl0aHJvdyBuZXcgRXJyb3IoXCJBY3JvRm9ybVBERk9iamVjdDogQ291bGRuJ3QgY3JlYXRlIE9iamVjdCBJRFwiKTtyZXR1cm4gZX0sc2V0OmZ1bmN0aW9uKHQpe2U9dH19KX07Qi5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vYmpJZCtcIiAwIFJcIn0sQi5wcm90b3R5cGUucHV0U3RyZWFtPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRLZXlWYWx1ZUxpc3RGb3JTdHJlYW0oKTtBLmludGVybmFsLnB1dFN0cmVhbSh7ZGF0YTp0aGlzLnN0cmVhbSxhZGRpdGlvbmFsS2V5VmFsdWVzOnR9KSxBLmludGVybmFsLm91dChcImVuZG9ialwiKX0sQi5wcm90b3R5cGUuZ2V0S2V5VmFsdWVMaXN0Rm9yU3RyZWFtPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBlPVtdLG49T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCkuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVyblwiY29udGVudFwiIT10JiZcImFwcGVhcmFuY2VTdHJlYW1Db250ZW50XCIhPXQmJlwiX1wiIT10LnN1YnN0cmluZygwLDEpfSk7Zm9yKHZhciByIGluIG4paWYoITE9PT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsbltyXSkuY29uZmlndXJhYmxlKXt2YXIgaT1uW3JdLG89dFtpXTtvJiYoQXJyYXkuaXNBcnJheShvKT9lLnB1c2goe2tleTppLHZhbHVlOkkobyl9KTpvIGluc3RhbmNlb2YgQj9lLnB1c2goe2tleTppLHZhbHVlOm8ub2JqSWQrXCIgMCBSXCJ9KTpcImZ1bmN0aW9uXCIhPXR5cGVvZiBvJiZlLnB1c2goe2tleTppLHZhbHVlOm99KSl9cmV0dXJuIGV9KHRoaXMpfTt2YXIgaj1mdW5jdGlvbigpe0IuY2FsbCh0aGlzKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIlR5cGVcIix7dmFsdWU6XCIvWE9iamVjdFwiLGNvbmZpZ3VyYWJsZTohMSx3cml0ZWFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIlN1YnR5cGVcIix7dmFsdWU6XCIvRm9ybVwiLGNvbmZpZ3VyYWJsZTohMSx3cml0ZWFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIkZvcm1UeXBlXCIse3ZhbHVlOjEsY29uZmlndXJhYmxlOiExLHdyaXRlYWJsZTohMH0pO3ZhciBlLG49W107T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJCQm94XCIse2NvbmZpZ3VyYWJsZTohMSx3cml0ZWFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG59LHNldDpmdW5jdGlvbih0KXtuPXR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJSZXNvdXJjZXNcIix7dmFsdWU6XCIyIDAgUlwiLGNvbmZpZ3VyYWJsZTohMSx3cml0ZWFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInN0cmVhbVwiLHtlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMCxzZXQ6ZnVuY3Rpb24odCl7ZT10LnRyaW0oKX0sZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGV8fG51bGx9fSl9O3IoaixCKTt2YXIgRT1mdW5jdGlvbigpe0IuY2FsbCh0aGlzKTt2YXIgZSx0PVtdO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiS2lkc1wiLHtlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gMDx0Lmxlbmd0aD90OnZvaWQgMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIkZpZWxkc1wiLHtlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIkRBXCIse2VudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiExLGdldDpmdW5jdGlvbigpe2lmKGUpcmV0dXJuXCIoXCIrZStcIilcIn0sc2V0OmZ1bmN0aW9uKHQpe2U9dH19KX07cihFLEIpO3ZhciBNPWZ1bmN0aW9uIHQoKXtCLmNhbGwodGhpcyk7dmFyIGU9NDtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIkZcIix7ZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGV9LHNldDpmdW5jdGlvbih0KXtpZihpc05hTih0KSl0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgXCInK3QrJ1wiIGZvciBhdHRyaWJ1dGUgRiBzdXBwbGllZC4nKTtlPXR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJzaG93V2hlblByaW50ZWRcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oYihlLDMpKX0sc2V0OmZ1bmN0aW9uKHQpeyEwPT09Qm9vbGVhbih0KT90aGlzLkY9eChlLDMpOnRoaXMuRj1OKGUsMyl9fSk7dmFyIG49MDtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIkZmXCIse2VudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiBufSxzZXQ6ZnVuY3Rpb24odCl7aWYoaXNOYU4odCkpdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIFwiJyt0KydcIiBmb3IgYXR0cmlidXRlIEZmIHN1cHBsaWVkLicpO249dH19KTt2YXIgcj1bXTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIlJlY3RcIix7ZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7aWYoMCE9PXIubGVuZ3RoKXJldHVybiByfSxzZXQ6ZnVuY3Rpb24odCl7cj12b2lkIDAhPT10P3Q6W119fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJ4XCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiFyfHxpc05hTihyWzBdKT8wOncoclswXSl9LHNldDpmdW5jdGlvbih0KXtyWzBdPXYodCl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJ5XCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiFyfHxpc05hTihyWzFdKT8wOncoclsxXSl9LHNldDpmdW5jdGlvbih0KXtyWzFdPXYodCl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJ3aWR0aFwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4hcnx8aXNOYU4oclsyXSk/MDp3KHJbMl0pfSxzZXQ6ZnVuY3Rpb24odCl7clsyXT12KHQpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaGVpZ2h0XCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiFyfHxpc05hTihyWzNdKT8wOncoclszXSl9LHNldDpmdW5jdGlvbih0KXtyWzNdPXYodCl9fSk7dmFyIGk9XCJcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIkZUXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiBpfSxzZXQ6ZnVuY3Rpb24odCl7c3dpdGNoKHQpe2Nhc2VcIi9CdG5cIjpjYXNlXCIvVHhcIjpjYXNlXCIvQ2hcIjpjYXNlXCIvU2lnXCI6aT10O2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIFwiJyt0KydcIiBmb3IgYXR0cmlidXRlIEZUIHN1cHBsaWVkLicpfX19KTt2YXIgbz1udWxsO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiVFwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtpZighb3x8by5sZW5ndGg8MSl7aWYodGhpcyBpbnN0YW5jZW9mIEgpcmV0dXJuO289XCJGaWVsZE9iamVjdFwiK3QuRmllbGROdW0rK31yZXR1cm5cIihcIitTKG8pK1wiKVwifSxzZXQ6ZnVuY3Rpb24odCl7bz10LnRvU3RyaW5nKCl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJmaWVsZE5hbWVcIix7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG99LHNldDpmdW5jdGlvbih0KXtvPXR9fSk7dmFyIGE9XCJoZWx2ZXRpY2FcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImZvbnROYW1lXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBhfSxzZXQ6ZnVuY3Rpb24odCl7YT10fX0pO3ZhciBzPVwibm9ybWFsXCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJmb250U3R5bGVcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHN9LHNldDpmdW5jdGlvbih0KXtzPXR9fSk7dmFyIGw9MDtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImZvbnRTaXplXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB3KGwpfSxzZXQ6ZnVuY3Rpb24odCl7bD12KHQpfX0pO3ZhciBoPTUwO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwibWF4Rm9udFNpemVcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHcoaCl9LHNldDpmdW5jdGlvbih0KXtoPXYodCl9fSk7dmFyIHU9XCJibGFja1wiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiY29sb3JcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHV9LHNldDpmdW5jdGlvbih0KXt1PXR9fSk7dmFyIGM9XCIvRjEgMCBUZiAwIGdcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIkRBXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiExLGdldDpmdW5jdGlvbigpe2lmKCEoIWN8fHRoaXMgaW5zdGFuY2VvZiBIfHx0aGlzIGluc3RhbmNlb2YgVikpcmV0dXJuIEMoYyl9LHNldDpmdW5jdGlvbih0KXt0PXQudG9TdHJpbmcoKSxjPXR9fSk7dmFyIGY9bnVsbDtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIkRWXCIse2VudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiExLGdldDpmdW5jdGlvbigpe2lmKGYpcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBEPT0hMT9DKGYpOmZ9LHNldDpmdW5jdGlvbih0KXt0PXQudG9TdHJpbmcoKSxmPXRoaXMgaW5zdGFuY2VvZiBEPT0hMT9cIihcIj09PXQuc3Vic3RyKDAsMSk/eSh0LnN1YnN0cigxLHQubGVuZ3RoLTIpKTp5KHQpOnR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJkZWZhdWx0VmFsdWVcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBEPT0hMD95KGYuc3Vic3RyKDEsZi5sZW5ndGgtMSkpOmZ9LHNldDpmdW5jdGlvbih0KXt0PXQudG9TdHJpbmcoKSxmPXRoaXMgaW5zdGFuY2VvZiBEPT0hMD9cIi9cIit0OnR9fSk7dmFyIHA9bnVsbDtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIlZcIix7ZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7aWYocClyZXR1cm4gdGhpcyBpbnN0YW5jZW9mIEQ9PSExP0MocCk6cH0sc2V0OmZ1bmN0aW9uKHQpe3Q9dC50b1N0cmluZygpLHA9dGhpcyBpbnN0YW5jZW9mIEQ9PSExP1wiKFwiPT09dC5zdWJzdHIoMCwxKT95KHQuc3Vic3RyKDEsdC5sZW5ndGgtMikpOnkodCk6dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInZhbHVlXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzIGluc3RhbmNlb2YgRD09ITA/eShwLnN1YnN0cigxLHAubGVuZ3RoLTEpKTpwfSxzZXQ6ZnVuY3Rpb24odCl7dD10LnRvU3RyaW5nKCkscD10aGlzIGluc3RhbmNlb2YgRD09ITA/XCIvXCIrdDp0fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaGFzQW5ub3RhdGlvblwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5SZWN0fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oYXNBbm5vdGF0aW9uP1wiL0Fubm90XCI6bnVsbH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIlN1YnR5cGVcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGFzQW5ub3RhdGlvbj9cIi9XaWRnZXRcIjpudWxsfX0pO3ZhciBkLGc9ITE7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJoYXNBcHBlYXJhbmNlU3RyZWFtXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRlYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZ30sc2V0OmZ1bmN0aW9uKHQpe3Q9Qm9vbGVhbih0KSxnPXR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJwYWdlXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRlYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtpZihkKXJldHVybiBkfSxzZXQ6ZnVuY3Rpb24odCl7ZD10fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicmVhZE9ubHlcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oYih0aGlzLkZmLDEpKX0sc2V0OmZ1bmN0aW9uKHQpeyEwPT09Qm9vbGVhbih0KT90aGlzLkZmPXgodGhpcy5GZiwxKTp0aGlzLkZmPU4odGhpcy5GZiwxKX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInJlcXVpcmVkXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBCb29sZWFuKGIodGhpcy5GZiwyKSl9LHNldDpmdW5jdGlvbih0KXshMD09PUJvb2xlYW4odCk/dGhpcy5GZj14KHRoaXMuRmYsMik6dGhpcy5GZj1OKHRoaXMuRmYsMil9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJub0V4cG9ydFwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQm9vbGVhbihiKHRoaXMuRmYsMykpfSxzZXQ6ZnVuY3Rpb24odCl7ITA9PT1Cb29sZWFuKHQpP3RoaXMuRmY9eCh0aGlzLkZmLDMpOnRoaXMuRmY9Tih0aGlzLkZmLDMpfX0pO3ZhciBtPW51bGw7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJRXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiExLGdldDpmdW5jdGlvbigpe2lmKG51bGwhPT1tKXJldHVybiBtfSxzZXQ6ZnVuY3Rpb24odCl7aWYoLTE9PT1bMCwxLDJdLmluZGV4T2YodCkpdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIFwiJyt0KydcIiBmb3IgYXR0cmlidXRlIFEgc3VwcGxpZWQuJyk7bT10fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwidGV4dEFsaWduXCIse2dldDpmdW5jdGlvbigpe3ZhciB0PVwibGVmdFwiO3N3aXRjaChtKXtjYXNlIDA6ZGVmYXVsdDp0PVwibGVmdFwiO2JyZWFrO2Nhc2UgMTp0PVwiY2VudGVyXCI7YnJlYWs7Y2FzZSAyOnQ9XCJyaWdodFwifXJldHVybiB0fSxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCxzZXQ6ZnVuY3Rpb24odCl7c3dpdGNoKHQpe2Nhc2VcInJpZ2h0XCI6Y2FzZSAyOm09MjticmVhaztjYXNlXCJjZW50ZXJcIjpjYXNlIDE6bT0xO2JyZWFrO2Nhc2VcImxlZnRcIjpjYXNlIDA6ZGVmYXVsdDptPTB9fX0pfTtyKE0sQik7dmFyIE89ZnVuY3Rpb24oKXtNLmNhbGwodGhpcyksdGhpcy5GVD1cIi9DaFwiLHRoaXMuVj1cIigpXCIsdGhpcy5mb250TmFtZT1cInphcGZkaW5nYmF0c1wiO3ZhciBlPTA7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJUSVwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZX0sc2V0OmZ1bmN0aW9uKHQpe2U9dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInRvcEluZGV4XCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlfSxzZXQ6ZnVuY3Rpb24odCl7ZT10fX0pO3ZhciByPVtdO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiT3B0XCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiBJKHIpfSxzZXQ6ZnVuY3Rpb24odCl7dmFyIGUsbjtuPVtdLFwic3RyaW5nXCI9PXR5cGVvZihlPXQpJiYobj1mdW5jdGlvbih0LGUsbil7bnx8KG49MSk7Zm9yKHZhciByLGk9W107cj1lLmV4ZWModCk7KWkucHVzaChyW25dKTtyZXR1cm4gaX0oZSwvXFwoKC4qPylcXCkvZykpLHI9bn19KSx0aGlzLmdldE9wdGlvbnM9ZnVuY3Rpb24oKXtyZXR1cm4gcn0sdGhpcy5zZXRPcHRpb25zPWZ1bmN0aW9uKHQpe3I9dCx0aGlzLnNvcnQmJnIuc29ydCgpfSx0aGlzLmFkZE9wdGlvbj1mdW5jdGlvbih0KXt0PSh0PXR8fFwiXCIpLnRvU3RyaW5nKCksci5wdXNoKHQpLHRoaXMuc29ydCYmci5zb3J0KCl9LHRoaXMucmVtb3ZlT3B0aW9uPWZ1bmN0aW9uKHQsZSl7Zm9yKGU9ZXx8ITEsdD0odD10fHxcIlwiKS50b1N0cmluZygpOy0xIT09ci5pbmRleE9mKHQpJiYoci5zcGxpY2Uoci5pbmRleE9mKHQpLDEpLCExIT09ZSk7KTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiY29tYm9cIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oYih0aGlzLkZmLDE4KSl9LHNldDpmdW5jdGlvbih0KXshMD09PUJvb2xlYW4odCk/dGhpcy5GZj14KHRoaXMuRmYsMTgpOnRoaXMuRmY9Tih0aGlzLkZmLDE4KX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImVkaXRcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oYih0aGlzLkZmLDE5KSl9LHNldDpmdW5jdGlvbih0KXshMD09PXRoaXMuY29tYm8mJighMD09PUJvb2xlYW4odCk/dGhpcy5GZj14KHRoaXMuRmYsMTkpOnRoaXMuRmY9Tih0aGlzLkZmLDE5KSl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJzb3J0XCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBCb29sZWFuKGIodGhpcy5GZiwyMCkpfSxzZXQ6ZnVuY3Rpb24odCl7ITA9PT1Cb29sZWFuKHQpPyh0aGlzLkZmPXgodGhpcy5GZiwyMCksci5zb3J0KCkpOnRoaXMuRmY9Tih0aGlzLkZmLDIwKX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIm11bHRpU2VsZWN0XCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBCb29sZWFuKGIodGhpcy5GZiwyMikpfSxzZXQ6ZnVuY3Rpb24odCl7ITA9PT1Cb29sZWFuKHQpP3RoaXMuRmY9eCh0aGlzLkZmLDIyKTp0aGlzLkZmPU4odGhpcy5GZiwyMil9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJkb05vdFNwZWxsQ2hlY2tcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oYih0aGlzLkZmLDIzKSl9LHNldDpmdW5jdGlvbih0KXshMD09PUJvb2xlYW4odCk/dGhpcy5GZj14KHRoaXMuRmYsMjMpOnRoaXMuRmY9Tih0aGlzLkZmLDIzKX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImNvbW1pdE9uU2VsQ2hhbmdlXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBCb29sZWFuKGIodGhpcy5GZiwyNykpfSxzZXQ6ZnVuY3Rpb24odCl7ITA9PT1Cb29sZWFuKHQpP3RoaXMuRmY9eCh0aGlzLkZmLDI3KTp0aGlzLkZmPU4odGhpcy5GZiwyNyl9fSksdGhpcy5oYXNBcHBlYXJhbmNlU3RyZWFtPSExfTtyKE8sTSk7dmFyIHE9ZnVuY3Rpb24oKXtPLmNhbGwodGhpcyksdGhpcy5mb250TmFtZT1cImhlbHZldGljYVwiLHRoaXMuY29tYm89ITF9O3IocSxPKTt2YXIgVD1mdW5jdGlvbigpe3EuY2FsbCh0aGlzKSx0aGlzLmNvbWJvPSEwfTtyKFQscSk7dmFyIFI9ZnVuY3Rpb24oKXtULmNhbGwodGhpcyksdGhpcy5lZGl0PSEwfTtyKFIsVCk7dmFyIEQ9ZnVuY3Rpb24oKXtNLmNhbGwodGhpcyksdGhpcy5GVD1cIi9CdG5cIixPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIm5vVG9nZ2xlVG9PZmZcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oYih0aGlzLkZmLDE1KSl9LHNldDpmdW5jdGlvbih0KXshMD09PUJvb2xlYW4odCk/dGhpcy5GZj14KHRoaXMuRmYsMTUpOnRoaXMuRmY9Tih0aGlzLkZmLDE1KX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInJhZGlvXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBCb29sZWFuKGIodGhpcy5GZiwxNikpfSxzZXQ6ZnVuY3Rpb24odCl7ITA9PT1Cb29sZWFuKHQpP3RoaXMuRmY9eCh0aGlzLkZmLDE2KTp0aGlzLkZmPU4odGhpcy5GZiwxNil9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJwdXNoQnV0dG9uXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBCb29sZWFuKGIodGhpcy5GZiwxNykpfSxzZXQ6ZnVuY3Rpb24odCl7ITA9PT1Cb29sZWFuKHQpP3RoaXMuRmY9eCh0aGlzLkZmLDE3KTp0aGlzLkZmPU4odGhpcy5GZiwxNyl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJyYWRpb0lzVW5pc29uXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBCb29sZWFuKGIodGhpcy5GZiwyNikpfSxzZXQ6ZnVuY3Rpb24odCl7ITA9PT1Cb29sZWFuKHQpP3RoaXMuRmY9eCh0aGlzLkZmLDI2KTp0aGlzLkZmPU4odGhpcy5GZiwyNil9fSk7dmFyIGUsbj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIk1LXCIse2VudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiExLGdldDpmdW5jdGlvbigpe2lmKDAhPT1PYmplY3Qua2V5cyhuKS5sZW5ndGgpe3ZhciB0LGU9W107Zm9yKHQgaW4gZS5wdXNoKFwiPDxcIiksbillLnB1c2goXCIvXCIrdCtcIiAoXCIrblt0XStcIilcIik7cmV0dXJuIGUucHVzaChcIj4+XCIpLGUuam9pbihcIlxcblwiKX19LHNldDpmdW5jdGlvbih0KXtcIm9iamVjdFwiPT09c2UodCkmJihuPXQpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiY2FwdGlvblwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbi5DQXx8XCJcIn0sc2V0OmZ1bmN0aW9uKHQpe1wic3RyaW5nXCI9PXR5cGVvZiB0JiYobi5DQT10KX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIkFTXCIse2VudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiBlfSxzZXQ6ZnVuY3Rpb24odCl7ZT10fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiYXBwZWFyYW5jZVN0YXRlXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLnN1YnN0cigxLGUubGVuZ3RoLTEpfSxzZXQ6ZnVuY3Rpb24odCl7ZT1cIi9cIit0fX0pfTtyKEQsTSk7dmFyIFU9ZnVuY3Rpb24oKXtELmNhbGwodGhpcyksdGhpcy5wdXNoQnV0dG9uPSEwfTtyKFUsRCk7dmFyIHo9ZnVuY3Rpb24oKXtELmNhbGwodGhpcyksdGhpcy5yYWRpbz0hMCx0aGlzLnB1c2hCdXR0b249ITE7dmFyIGU9W107T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJLaWRzXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiBlfSxzZXQ6ZnVuY3Rpb24odCl7ZT12b2lkIDAhPT10P3Q6W119fSl9O3IoeixEKTt2YXIgSD1mdW5jdGlvbigpe3ZhciBlLG47TS5jYWxsKHRoaXMpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiUGFyZW50XCIse2VudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiBlfSxzZXQ6ZnVuY3Rpb24odCl7ZT10fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwib3B0aW9uTmFtZVwiLHtlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sc2V0OmZ1bmN0aW9uKHQpe249dH19KTt2YXIgcixpPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiTUtcIix7ZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7dmFyIHQsZT1bXTtmb3IodCBpbiBlLnB1c2goXCI8PFwiKSxpKWUucHVzaChcIi9cIit0K1wiIChcIitpW3RdK1wiKVwiKTtyZXR1cm4gZS5wdXNoKFwiPj5cIiksZS5qb2luKFwiXFxuXCIpfSxzZXQ6ZnVuY3Rpb24odCl7XCJvYmplY3RcIj09PXNlKHQpJiYoaT10KX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImNhcHRpb25cIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGkuQ0F8fFwiXCJ9LHNldDpmdW5jdGlvbih0KXtcInN0cmluZ1wiPT10eXBlb2YgdCYmKGkuQ0E9dCl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJBU1wiLHtlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn0sc2V0OmZ1bmN0aW9uKHQpe3I9dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImFwcGVhcmFuY2VTdGF0ZVwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gci5zdWJzdHIoMSxyLmxlbmd0aC0xKX0sc2V0OmZ1bmN0aW9uKHQpe3I9XCIvXCIrdH19KSx0aGlzLm9wdGlvbk5hbWU9bmFtZSx0aGlzLmNhcHRpb249XCJsXCIsdGhpcy5hcHBlYXJhbmNlU3RhdGU9XCJPZmZcIix0aGlzLl9BcHBlYXJhbmNlVHlwZT1ZLlJhZGlvQnV0dG9uLkNpcmNsZSx0aGlzLmFwcGVhcmFuY2VTdHJlYW1Db250ZW50PXRoaXMuX0FwcGVhcmFuY2VUeXBlLmNyZWF0ZUFwcGVhcmFuY2VTdHJlYW0obmFtZSl9O3IoSCxNKSx6LnByb3RvdHlwZS5zZXRBcHBlYXJhbmNlPWZ1bmN0aW9uKHQpe2lmKCEoXCJjcmVhdGVBcHBlYXJhbmNlU3RyZWFtXCJpbiB0JiZcImdldENBXCJpbiB0KSl0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBhc3NpZ24gQXBwZWFyYW5jZSB0byBSYWRpb0J1dHRvbi4gQXBwZWFyYW5jZSB3YXMgSW52YWxpZCFcIik7Zm9yKHZhciBlIGluIHRoaXMuS2lkcylpZih0aGlzLktpZHMuaGFzT3duUHJvcGVydHkoZSkpe3ZhciBuPXRoaXMuS2lkc1tlXTtuLmFwcGVhcmFuY2VTdHJlYW1Db250ZW50PXQuY3JlYXRlQXBwZWFyYW5jZVN0cmVhbShuLm9wdGlvbk5hbWUpLG4uY2FwdGlvbj10LmdldENBKCl9fSx6LnByb3RvdHlwZS5jcmVhdGVPcHRpb249ZnVuY3Rpb24odCl7dGhpcy5LaWRzLmxlbmd0aDt2YXIgZT1uZXcgSDtyZXR1cm4gZS5QYXJlbnQ9dGhpcyxlLm9wdGlvbk5hbWU9dCx0aGlzLktpZHMucHVzaChlKSxKLmNhbGwodGhpcyxlKSxlfTt2YXIgVz1mdW5jdGlvbigpe0QuY2FsbCh0aGlzKSx0aGlzLmZvbnROYW1lPVwiemFwZmRpbmdiYXRzXCIsdGhpcy5jYXB0aW9uPVwiM1wiLHRoaXMuYXBwZWFyYW5jZVN0YXRlPVwiT25cIix0aGlzLnZhbHVlPVwiT25cIix0aGlzLnRleHRBbGlnbj1cImNlbnRlclwiLHRoaXMuYXBwZWFyYW5jZVN0cmVhbUNvbnRlbnQ9WS5DaGVja0JveC5jcmVhdGVBcHBlYXJhbmNlU3RyZWFtKCl9O3IoVyxEKTt2YXIgVj1mdW5jdGlvbigpe00uY2FsbCh0aGlzKSx0aGlzLkZUPVwiL1R4XCIsT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJtdWx0aWxpbmVcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oYih0aGlzLkZmLDEzKSl9LHNldDpmdW5jdGlvbih0KXshMD09PUJvb2xlYW4odCk/dGhpcy5GZj14KHRoaXMuRmYsMTMpOnRoaXMuRmY9Tih0aGlzLkZmLDEzKX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImZpbGVTZWxlY3RcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oYih0aGlzLkZmLDIxKSl9LHNldDpmdW5jdGlvbih0KXshMD09PUJvb2xlYW4odCk/dGhpcy5GZj14KHRoaXMuRmYsMjEpOnRoaXMuRmY9Tih0aGlzLkZmLDIxKX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImRvTm90U3BlbGxDaGVja1wiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQm9vbGVhbihiKHRoaXMuRmYsMjMpKX0sc2V0OmZ1bmN0aW9uKHQpeyEwPT09Qm9vbGVhbih0KT90aGlzLkZmPXgodGhpcy5GZiwyMyk6dGhpcy5GZj1OKHRoaXMuRmYsMjMpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiZG9Ob3RTY3JvbGxcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oYih0aGlzLkZmLDI0KSl9LHNldDpmdW5jdGlvbih0KXshMD09PUJvb2xlYW4odCk/dGhpcy5GZj14KHRoaXMuRmYsMjQpOnRoaXMuRmY9Tih0aGlzLkZmLDI0KX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImNvbWJcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oYih0aGlzLkZmLDI1KSl9LHNldDpmdW5jdGlvbih0KXshMD09PUJvb2xlYW4odCk/dGhpcy5GZj14KHRoaXMuRmYsMjUpOnRoaXMuRmY9Tih0aGlzLkZmLDI1KX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInJpY2hUZXh0XCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBCb29sZWFuKGIodGhpcy5GZiwyNikpfSxzZXQ6ZnVuY3Rpb24odCl7ITA9PT1Cb29sZWFuKHQpP3RoaXMuRmY9eCh0aGlzLkZmLDI2KTp0aGlzLkZmPU4odGhpcy5GZiwyNil9fSk7dmFyIGU9bnVsbDtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIk1heExlblwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZX0sc2V0OmZ1bmN0aW9uKHQpe2U9dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIm1heExlbmd0aFwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZX0sc2V0OmZ1bmN0aW9uKHQpe051bWJlci5pc0ludGVnZXIodCkmJihlPXQpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaGFzQXBwZWFyYW5jZVN0cmVhbVwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5WfHx0aGlzLkRWfX0pfTtyKFYsTSk7dmFyIEc9ZnVuY3Rpb24oKXtWLmNhbGwodGhpcyksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJwYXNzd29yZFwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQm9vbGVhbihiKHRoaXMuRmYsMTQpKX0sc2V0OmZ1bmN0aW9uKHQpeyEwPT09Qm9vbGVhbih0KT90aGlzLkZmPXgodGhpcy5GZiwxNCk6dGhpcy5GZj1OKHRoaXMuRmYsMTQpfX0pLHRoaXMucGFzc3dvcmQ9ITB9O3IoRyxWKTt2YXIgWT17Q2hlY2tCb3g6e2NyZWF0ZUFwcGVhcmFuY2VTdHJlYW06ZnVuY3Rpb24oKXtyZXR1cm57Tjp7T246WS5DaGVja0JveC5ZZXNOb3JtYWx9LEQ6e09uOlkuQ2hlY2tCb3guWWVzUHVzaERvd24sT2ZmOlkuQ2hlY2tCb3guT2ZmUHVzaERvd259fX0sWWVzUHVzaERvd246ZnVuY3Rpb24odCl7dmFyIGU9bCh0KSxuPVtdLHI9QS5pbnRlcm5hbC5nZXRGb250KHQuZm9udE5hbWUsdC5mb250U3R5bGUpLmlkLGk9QS5fX3ByaXZhdGVfXy5lbmNvZGVDb2xvclN0cmluZyh0LmNvbG9yKSxvPWgodCx0LmNhcHRpb24pO3JldHVybiBuLnB1c2goXCIwLjc0OTAyMyBnXCIpLG4ucHVzaChcIjAgMCBcIitfKFkuaW50ZXJuYWwuZ2V0V2lkdGgodCkpK1wiIFwiK18oWS5pbnRlcm5hbC5nZXRIZWlnaHQodCkpK1wiIHJlXCIpLG4ucHVzaChcImZcIiksbi5wdXNoKFwiQk1DXCIpLG4ucHVzaChcInFcIiksbi5wdXNoKFwiMCAwIDEgcmdcIiksbi5wdXNoKFwiL1wiK3IrXCIgXCIrXyhvLmZvbnRTaXplKStcIiBUZiBcIitpKSxuLnB1c2goXCJCVFwiKSxuLnB1c2goby50ZXh0KSxuLnB1c2goXCJFVFwiKSxuLnB1c2goXCJRXCIpLG4ucHVzaChcIkVNQ1wiKSxlLnN0cmVhbT1uLmpvaW4oXCJcXG5cIiksZX0sWWVzTm9ybWFsOmZ1bmN0aW9uKHQpe3ZhciBlPWwodCksbj1BLmludGVybmFsLmdldEZvbnQodC5mb250TmFtZSx0LmZvbnRTdHlsZSkuaWQscj1BLl9fcHJpdmF0ZV9fLmVuY29kZUNvbG9yU3RyaW5nKHQuY29sb3IpLGk9W10sbz1ZLmludGVybmFsLmdldEhlaWdodCh0KSxhPVkuaW50ZXJuYWwuZ2V0V2lkdGgodCkscz1oKHQsdC5jYXB0aW9uKTtyZXR1cm4gaS5wdXNoKFwiMSBnXCIpLGkucHVzaChcIjAgMCBcIitfKGEpK1wiIFwiK18obykrXCIgcmVcIiksaS5wdXNoKFwiZlwiKSxpLnB1c2goXCJxXCIpLGkucHVzaChcIjAgMCAxIHJnXCIpLGkucHVzaChcIjAgMCBcIitfKGEtMSkrXCIgXCIrXyhvLTEpK1wiIHJlXCIpLGkucHVzaChcIldcIiksaS5wdXNoKFwiblwiKSxpLnB1c2goXCIwIGdcIiksaS5wdXNoKFwiQlRcIiksaS5wdXNoKFwiL1wiK24rXCIgXCIrXyhzLmZvbnRTaXplKStcIiBUZiBcIityKSxpLnB1c2gocy50ZXh0KSxpLnB1c2goXCJFVFwiKSxpLnB1c2goXCJRXCIpLGUuc3RyZWFtPWkuam9pbihcIlxcblwiKSxlfSxPZmZQdXNoRG93bjpmdW5jdGlvbih0KXt2YXIgZT1sKHQpLG49W107cmV0dXJuIG4ucHVzaChcIjAuNzQ5MDIzIGdcIiksbi5wdXNoKFwiMCAwIFwiK18oWS5pbnRlcm5hbC5nZXRXaWR0aCh0KSkrXCIgXCIrXyhZLmludGVybmFsLmdldEhlaWdodCh0KSkrXCIgcmVcIiksbi5wdXNoKFwiZlwiKSxlLnN0cmVhbT1uLmpvaW4oXCJcXG5cIiksZX19LFJhZGlvQnV0dG9uOntDaXJjbGU6e2NyZWF0ZUFwcGVhcmFuY2VTdHJlYW06ZnVuY3Rpb24odCl7dmFyIGU9e0Q6e09mZjpZLlJhZGlvQnV0dG9uLkNpcmNsZS5PZmZQdXNoRG93bn0sTjp7fX07cmV0dXJuIGUuTlt0XT1ZLlJhZGlvQnV0dG9uLkNpcmNsZS5ZZXNOb3JtYWwsZS5EW3RdPVkuUmFkaW9CdXR0b24uQ2lyY2xlLlllc1B1c2hEb3duLGV9LGdldENBOmZ1bmN0aW9uKCl7cmV0dXJuXCJsXCJ9LFllc05vcm1hbDpmdW5jdGlvbih0KXt2YXIgZT1sKHQpLG49W10scj1ZLmludGVybmFsLmdldFdpZHRoKHQpPD1ZLmludGVybmFsLmdldEhlaWdodCh0KT9ZLmludGVybmFsLmdldFdpZHRoKHQpLzQ6WS5pbnRlcm5hbC5nZXRIZWlnaHQodCkvNDtyPU51bWJlcigoLjkqcikudG9GaXhlZCg1KSk7dmFyIGk9WS5pbnRlcm5hbC5CZXppZXJfQyxvPU51bWJlcigocippKS50b0ZpeGVkKDUpKTtyZXR1cm4gbi5wdXNoKFwicVwiKSxuLnB1c2goXCIxIDAgMCAxIFwiK3MoWS5pbnRlcm5hbC5nZXRXaWR0aCh0KS8yKStcIiBcIitzKFkuaW50ZXJuYWwuZ2V0SGVpZ2h0KHQpLzIpK1wiIGNtXCIpLG4ucHVzaChyK1wiIDAgbVwiKSxuLnB1c2gocitcIiBcIitvK1wiIFwiK28rXCIgXCIrcitcIiAwIFwiK3IrXCIgY1wiKSxuLnB1c2goXCItXCIrbytcIiBcIityK1wiIC1cIityK1wiIFwiK28rXCIgLVwiK3IrXCIgMCBjXCIpLG4ucHVzaChcIi1cIityK1wiIC1cIitvK1wiIC1cIitvK1wiIC1cIityK1wiIDAgLVwiK3IrXCIgY1wiKSxuLnB1c2gobytcIiAtXCIrcitcIiBcIityK1wiIC1cIitvK1wiIFwiK3IrXCIgMCBjXCIpLG4ucHVzaChcImZcIiksbi5wdXNoKFwiUVwiKSxlLnN0cmVhbT1uLmpvaW4oXCJcXG5cIiksZX0sWWVzUHVzaERvd246ZnVuY3Rpb24odCl7dmFyIGU9bCh0KSxuPVtdLHI9WS5pbnRlcm5hbC5nZXRXaWR0aCh0KTw9WS5pbnRlcm5hbC5nZXRIZWlnaHQodCk/WS5pbnRlcm5hbC5nZXRXaWR0aCh0KS80OlkuaW50ZXJuYWwuZ2V0SGVpZ2h0KHQpLzQsaT0ocj1OdW1iZXIoKC45KnIpLnRvRml4ZWQoNSkpLE51bWJlcigoMipyKS50b0ZpeGVkKDUpKSksbz1OdW1iZXIoKGkqWS5pbnRlcm5hbC5CZXppZXJfQykudG9GaXhlZCg1KSksYT1OdW1iZXIoKHIqWS5pbnRlcm5hbC5CZXppZXJfQykudG9GaXhlZCg1KSk7cmV0dXJuIG4ucHVzaChcIjAuNzQ5MDIzIGdcIiksbi5wdXNoKFwicVwiKSxuLnB1c2goXCIxIDAgMCAxIFwiK3MoWS5pbnRlcm5hbC5nZXRXaWR0aCh0KS8yKStcIiBcIitzKFkuaW50ZXJuYWwuZ2V0SGVpZ2h0KHQpLzIpK1wiIGNtXCIpLG4ucHVzaChpK1wiIDAgbVwiKSxuLnB1c2goaStcIiBcIitvK1wiIFwiK28rXCIgXCIraStcIiAwIFwiK2krXCIgY1wiKSxuLnB1c2goXCItXCIrbytcIiBcIitpK1wiIC1cIitpK1wiIFwiK28rXCIgLVwiK2krXCIgMCBjXCIpLG4ucHVzaChcIi1cIitpK1wiIC1cIitvK1wiIC1cIitvK1wiIC1cIitpK1wiIDAgLVwiK2krXCIgY1wiKSxuLnB1c2gobytcIiAtXCIraStcIiBcIitpK1wiIC1cIitvK1wiIFwiK2krXCIgMCBjXCIpLG4ucHVzaChcImZcIiksbi5wdXNoKFwiUVwiKSxuLnB1c2goXCIwIGdcIiksbi5wdXNoKFwicVwiKSxuLnB1c2goXCIxIDAgMCAxIFwiK3MoWS5pbnRlcm5hbC5nZXRXaWR0aCh0KS8yKStcIiBcIitzKFkuaW50ZXJuYWwuZ2V0SGVpZ2h0KHQpLzIpK1wiIGNtXCIpLG4ucHVzaChyK1wiIDAgbVwiKSxuLnB1c2gocitcIiBcIithK1wiIFwiK2ErXCIgXCIrcitcIiAwIFwiK3IrXCIgY1wiKSxuLnB1c2goXCItXCIrYStcIiBcIityK1wiIC1cIityK1wiIFwiK2ErXCIgLVwiK3IrXCIgMCBjXCIpLG4ucHVzaChcIi1cIityK1wiIC1cIithK1wiIC1cIithK1wiIC1cIityK1wiIDAgLVwiK3IrXCIgY1wiKSxuLnB1c2goYStcIiAtXCIrcitcIiBcIityK1wiIC1cIithK1wiIFwiK3IrXCIgMCBjXCIpLG4ucHVzaChcImZcIiksbi5wdXNoKFwiUVwiKSxlLnN0cmVhbT1uLmpvaW4oXCJcXG5cIiksZX0sT2ZmUHVzaERvd246ZnVuY3Rpb24odCl7dmFyIGU9bCh0KSxuPVtdLHI9WS5pbnRlcm5hbC5nZXRXaWR0aCh0KTw9WS5pbnRlcm5hbC5nZXRIZWlnaHQodCk/WS5pbnRlcm5hbC5nZXRXaWR0aCh0KS80OlkuaW50ZXJuYWwuZ2V0SGVpZ2h0KHQpLzQsaT0ocj1OdW1iZXIoKC45KnIpLnRvRml4ZWQoNSkpLE51bWJlcigoMipyKS50b0ZpeGVkKDUpKSksbz1OdW1iZXIoKGkqWS5pbnRlcm5hbC5CZXppZXJfQykudG9GaXhlZCg1KSk7cmV0dXJuIG4ucHVzaChcIjAuNzQ5MDIzIGdcIiksbi5wdXNoKFwicVwiKSxuLnB1c2goXCIxIDAgMCAxIFwiK3MoWS5pbnRlcm5hbC5nZXRXaWR0aCh0KS8yKStcIiBcIitzKFkuaW50ZXJuYWwuZ2V0SGVpZ2h0KHQpLzIpK1wiIGNtXCIpLG4ucHVzaChpK1wiIDAgbVwiKSxuLnB1c2goaStcIiBcIitvK1wiIFwiK28rXCIgXCIraStcIiAwIFwiK2krXCIgY1wiKSxuLnB1c2goXCItXCIrbytcIiBcIitpK1wiIC1cIitpK1wiIFwiK28rXCIgLVwiK2krXCIgMCBjXCIpLG4ucHVzaChcIi1cIitpK1wiIC1cIitvK1wiIC1cIitvK1wiIC1cIitpK1wiIDAgLVwiK2krXCIgY1wiKSxuLnB1c2gobytcIiAtXCIraStcIiBcIitpK1wiIC1cIitvK1wiIFwiK2krXCIgMCBjXCIpLG4ucHVzaChcImZcIiksbi5wdXNoKFwiUVwiKSxlLnN0cmVhbT1uLmpvaW4oXCJcXG5cIiksZX19LENyb3NzOntjcmVhdGVBcHBlYXJhbmNlU3RyZWFtOmZ1bmN0aW9uKHQpe3ZhciBlPXtEOntPZmY6WS5SYWRpb0J1dHRvbi5Dcm9zcy5PZmZQdXNoRG93bn0sTjp7fX07cmV0dXJuIGUuTlt0XT1ZLlJhZGlvQnV0dG9uLkNyb3NzLlllc05vcm1hbCxlLkRbdF09WS5SYWRpb0J1dHRvbi5Dcm9zcy5ZZXNQdXNoRG93bixlfSxnZXRDQTpmdW5jdGlvbigpe3JldHVyblwiOFwifSxZZXNOb3JtYWw6ZnVuY3Rpb24odCl7dmFyIGU9bCh0KSxuPVtdLHI9WS5pbnRlcm5hbC5jYWxjdWxhdGVDcm9zcyh0KTtyZXR1cm4gbi5wdXNoKFwicVwiKSxuLnB1c2goXCIxIDEgXCIrXyhZLmludGVybmFsLmdldFdpZHRoKHQpLTIpK1wiIFwiK18oWS5pbnRlcm5hbC5nZXRIZWlnaHQodCktMikrXCIgcmVcIiksbi5wdXNoKFwiV1wiKSxuLnB1c2goXCJuXCIpLG4ucHVzaChfKHIueDEueCkrXCIgXCIrXyhyLngxLnkpK1wiIG1cIiksbi5wdXNoKF8oci54Mi54KStcIiBcIitfKHIueDIueSkrXCIgbFwiKSxuLnB1c2goXyhyLng0LngpK1wiIFwiK18oci54NC55KStcIiBtXCIpLG4ucHVzaChfKHIueDMueCkrXCIgXCIrXyhyLngzLnkpK1wiIGxcIiksbi5wdXNoKFwic1wiKSxuLnB1c2goXCJRXCIpLGUuc3RyZWFtPW4uam9pbihcIlxcblwiKSxlfSxZZXNQdXNoRG93bjpmdW5jdGlvbih0KXt2YXIgZT1sKHQpLG49WS5pbnRlcm5hbC5jYWxjdWxhdGVDcm9zcyh0KSxyPVtdO3JldHVybiByLnB1c2goXCIwLjc0OTAyMyBnXCIpLHIucHVzaChcIjAgMCBcIitfKFkuaW50ZXJuYWwuZ2V0V2lkdGgodCkpK1wiIFwiK18oWS5pbnRlcm5hbC5nZXRIZWlnaHQodCkpK1wiIHJlXCIpLHIucHVzaChcImZcIiksci5wdXNoKFwicVwiKSxyLnB1c2goXCIxIDEgXCIrXyhZLmludGVybmFsLmdldFdpZHRoKHQpLTIpK1wiIFwiK18oWS5pbnRlcm5hbC5nZXRIZWlnaHQodCktMikrXCIgcmVcIiksci5wdXNoKFwiV1wiKSxyLnB1c2goXCJuXCIpLHIucHVzaChfKG4ueDEueCkrXCIgXCIrXyhuLngxLnkpK1wiIG1cIiksci5wdXNoKF8obi54Mi54KStcIiBcIitfKG4ueDIueSkrXCIgbFwiKSxyLnB1c2goXyhuLng0LngpK1wiIFwiK18obi54NC55KStcIiBtXCIpLHIucHVzaChfKG4ueDMueCkrXCIgXCIrXyhuLngzLnkpK1wiIGxcIiksci5wdXNoKFwic1wiKSxyLnB1c2goXCJRXCIpLGUuc3RyZWFtPXIuam9pbihcIlxcblwiKSxlfSxPZmZQdXNoRG93bjpmdW5jdGlvbih0KXt2YXIgZT1sKHQpLG49W107cmV0dXJuIG4ucHVzaChcIjAuNzQ5MDIzIGdcIiksbi5wdXNoKFwiMCAwIFwiK18oWS5pbnRlcm5hbC5nZXRXaWR0aCh0KSkrXCIgXCIrXyhZLmludGVybmFsLmdldEhlaWdodCh0KSkrXCIgcmVcIiksbi5wdXNoKFwiZlwiKSxlLnN0cmVhbT1uLmpvaW4oXCJcXG5cIiksZX19fSxjcmVhdGVEZWZhdWx0QXBwZWFyYW5jZVN0cmVhbTpmdW5jdGlvbih0KXt2YXIgZT1BLmludGVybmFsLmdldEZvbnQodC5mb250TmFtZSx0LmZvbnRTdHlsZSkuaWQsbj1BLl9fcHJpdmF0ZV9fLmVuY29kZUNvbG9yU3RyaW5nKHQuY29sb3IpO3JldHVyblwiL1wiK2UrXCIgXCIrdC5mb250U2l6ZStcIiBUZiBcIitufX07WS5pbnRlcm5hbD17QmV6aWVyX0M6LjU1MTkxNTAyNDQ5NCxjYWxjdWxhdGVDcm9zczpmdW5jdGlvbih0KXt2YXIgZT1ZLmludGVybmFsLmdldFdpZHRoKHQpLG49WS5pbnRlcm5hbC5nZXRIZWlnaHQodCkscj1NYXRoLm1pbihlLG4pO3JldHVybnt4MTp7eDooZS1yKS8yLHk6KG4tcikvMityfSx4Mjp7eDooZS1yKS8yK3IseToobi1yKS8yfSx4Mzp7eDooZS1yKS8yLHk6KG4tcikvMn0seDQ6e3g6KGUtcikvMityLHk6KG4tcikvMityfX19fSxZLmludGVybmFsLmdldFdpZHRoPWZ1bmN0aW9uKHQpe3ZhciBlPTA7cmV0dXJuXCJvYmplY3RcIj09PXNlKHQpJiYoZT12KHQuUmVjdFsyXSkpLGV9LFkuaW50ZXJuYWwuZ2V0SGVpZ2h0PWZ1bmN0aW9uKHQpe3ZhciBlPTA7cmV0dXJuXCJvYmplY3RcIj09PXNlKHQpJiYoZT12KHQuUmVjdFszXSkpLGV9O3ZhciBKPXQuYWRkRmllbGQ9ZnVuY3Rpb24odCl7aWYoay5jYWxsKHRoaXMpLCEodCBpbnN0YW5jZW9mIE0pKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQgcGFzc2VkIHRvIGpzUERGLmFkZEZpZWxkLlwiKTtyZXR1cm4gZnVuY3Rpb24odCl7QS5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi5wcmludGVkT3V0JiYoQS5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi5wcmludGVkT3V0PSExLEEuaW50ZXJuYWwuYWNyb2Zvcm1QbHVnaW4uYWNyb0Zvcm1EaWN0aW9uYXJ5Um9vdD1udWxsKSxBLmludGVybmFsLmFjcm9mb3JtUGx1Z2luLmFjcm9Gb3JtRGljdGlvbmFyeVJvb3R8fGsuY2FsbChBKSxBLmludGVybmFsLmFjcm9mb3JtUGx1Z2luLmFjcm9Gb3JtRGljdGlvbmFyeVJvb3QuRmllbGRzLnB1c2godCl9LmNhbGwodGhpcyx0KSx0LnBhZ2U9QS5pbnRlcm5hbC5nZXRDdXJyZW50UGFnZUluZm8oKS5wYWdlTnVtYmVyLHRoaXN9O3QuYWRkQnV0dG9uPWZ1bmN0aW9uKHQpe2lmKHQgaW5zdGFuY2VvZiBEPT0hMSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCB0byBqc1BERi5hZGRCdXR0b24uXCIpO3JldHVybiBKLmNhbGwodGhpcyx0KX0sdC5hZGRUZXh0RmllbGQ9ZnVuY3Rpb24odCl7aWYodCBpbnN0YW5jZW9mIFY9PSExKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQgcGFzc2VkIHRvIGpzUERGLmFkZFRleHRGaWVsZC5cIik7cmV0dXJuIEouY2FsbCh0aGlzLHQpfSx0LmFkZENob2ljZUZpZWxkPWZ1bmN0aW9uKHQpe2lmKHQgaW5zdGFuY2VvZiBPPT0hMSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCB0byBqc1BERi5hZGRDaG9pY2VGaWVsZC5cIik7cmV0dXJuIEouY2FsbCh0aGlzLHQpfTtcIm9iamVjdFwiPT1zZShlKSYmdm9pZCAwPT09ZS5DaG9pY2VGaWVsZCYmdm9pZCAwPT09ZS5MaXN0Qm94JiZ2b2lkIDA9PT1lLkNvbWJvQm94JiZ2b2lkIDA9PT1lLkVkaXRCb3gmJnZvaWQgMD09PWUuQnV0dG9uJiZ2b2lkIDA9PT1lLlB1c2hCdXR0b24mJnZvaWQgMD09PWUuUmFkaW9CdXR0b24mJnZvaWQgMD09PWUuQ2hlY2tCb3gmJnZvaWQgMD09PWUuVGV4dEZpZWxkJiZ2b2lkIDA9PT1lLlBhc3N3b3JkRmllbGQ/KGUuQ2hvaWNlRmllbGQ9TyxlLkxpc3RCb3g9cSxlLkNvbWJvQm94PVQsZS5FZGl0Qm94PVIsZS5CdXR0b249RCxlLlB1c2hCdXR0b249VSxlLlJhZGlvQnV0dG9uPXosZS5DaGVja0JveD1XLGUuVGV4dEZpZWxkPVYsZS5QYXNzd29yZEZpZWxkPUcsZS5BY3JvRm9ybT17QXBwZWFyYW5jZTpZfSk6Y29uc29sZS53YXJuKFwiQWNyb0Zvcm0tQ2xhc3NlcyBhcmUgbm90IHBvcHVsYXRlZCBpbnRvIGdsb2JhbC1uYW1lc3BhY2UsIGJlY2F1c2UgdGhlIGNsYXNzLU5hbWVzIGV4aXN0IGFscmVhZHkuXCIpLHQuQWNyb0Zvcm1DaG9pY2VGaWVsZD1PLHQuQWNyb0Zvcm1MaXN0Qm94PXEsdC5BY3JvRm9ybUNvbWJvQm94PVQsdC5BY3JvRm9ybUVkaXRCb3g9Uix0LkFjcm9Gb3JtQnV0dG9uPUQsdC5BY3JvRm9ybVB1c2hCdXR0b249VSx0LkFjcm9Gb3JtUmFkaW9CdXR0b249eix0LkFjcm9Gb3JtQ2hlY2tCb3g9Vyx0LkFjcm9Gb3JtVGV4dEZpZWxkPVYsdC5BY3JvRm9ybVBhc3N3b3JkRmllbGQ9Ryx0LkFjcm9Gb3JtQXBwZWFyYW5jZT1ZLHQuQWNyb0Zvcm09e0Nob2ljZUZpZWxkOk8sTGlzdEJveDpxLENvbWJvQm94OlQsRWRpdEJveDpSLEJ1dHRvbjpELFB1c2hCdXR0b246VSxSYWRpb0J1dHRvbjp6LENoZWNrQm94OlcsVGV4dEZpZWxkOlYsUGFzc3dvcmRGaWVsZDpHLEFwcGVhcmFuY2U6WX19KSgod2luZG93LnRtcD1sdCkuQVBJLFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvd3x8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbCYmZ2xvYmFsKSxcclxuLyoqIEBsaWNlbnNlXHJcbiAgICoganNQREYgYWRkSW1hZ2UgcGx1Z2luXHJcbiAgICogQ29weXJpZ2h0IChjKSAyMDEyIEphc29uIFNpZWZrZW4sIGh0dHBzOi8vZ2l0aHViLmNvbS9zaWVma2Vuai9cclxuICAgKiAgICAgICAgICAgICAgIDIwMTMgQ2hyaXMgRG93bGluZywgaHR0cHM6Ly9naXRodWIuY29tL2dpbmdlcmNocmlzXHJcbiAgICogICAgICAgICAgICAgICAyMDEzIFRyaW5oIEhvLCBodHRwczovL2dpdGh1Yi5jb20vaW5lZWRmYXRcclxuICAgKiAgICAgICAgICAgICAgIDIwMTMgRWR3aW4gQWxlamFuZHJvIFBlcmV6LCBodHRwczovL2dpdGh1Yi5jb20vZWFwYXJhbmdvXHJcbiAgICogICAgICAgICAgICAgICAyMDEzIE5vcmFoIFNtaXRoLCBodHRwczovL2dpdGh1Yi5jb20vYnVybmJ1cm5yb2NrZXRcclxuICAgKiAgICAgICAgICAgICAgIDIwMTQgRGllZ28gQ2Fzb3JyYW4sIGh0dHBzOi8vZ2l0aHViLmNvbS9kaWVnb2NyXHJcbiAgICogICAgICAgICAgICAgICAyMDE0IEphbWVzIFJvYmIsIGh0dHBzOi8vZ2l0aHViLmNvbS9qYW1lc2Jyb2JiXHJcbiAgICpcclxuICAgKiBcclxuICAgKi9cclxuZnVuY3Rpb24oeCl7dmFyIE49XCJhZGRJbWFnZV9cIixsPXtQTkc6W1sxMzcsODAsNzgsNzFdXSxUSUZGOltbNzcsNzcsMCw0Ml0sWzczLDczLDQyLDBdXSxKUEVHOltbMjU1LDIxNiwyNTUsMjI0LHZvaWQgMCx2b2lkIDAsNzQsNzAsNzMsNzAsMF0sWzI1NSwyMTYsMjU1LDIyNSx2b2lkIDAsdm9pZCAwLDY5LDEyMCwxMDUsMTAyLDAsMF1dLEpQRUcyMDAwOltbMCwwLDAsMTIsMTA2LDgwLDMyLDMyXV0sR0lGODdhOltbNzEsNzMsNzAsNTYsNTUsOTddXSxHSUY4OWE6W1s3MSw3Myw3MCw1Niw1Nyw5N11dLEJNUDpbWzY2LDc3XSxbNjYsNjVdLFs2Nyw3M10sWzY3LDgwXSxbNzMsNjddLFs4MCw4NF1dfSxoPXguZ2V0SW1hZ2VGaWxlVHlwZUJ5SW1hZ2VEYXRhPWZ1bmN0aW9uKHQsZSl7dmFyIG4scjtlPWV8fFwiVU5LTk9XTlwiO3ZhciBpLG8sYSxzPVwiVU5LTk9XTlwiO2ZvcihhIGluIHguaXNBcnJheUJ1ZmZlclZpZXcodCkmJih0PXguYXJyYXlCdWZmZXJUb0JpbmFyeVN0cmluZyh0KSksbClmb3IoaT1sW2FdLG49MDtuPGkubGVuZ3RoO24rPTEpe2ZvcihvPSEwLHI9MDtyPGlbbl0ubGVuZ3RoO3IrPTEpaWYodm9pZCAwIT09aVtuXVtyXSYmaVtuXVtyXSE9PXQuY2hhckNvZGVBdChyKSl7bz0hMTticmVha31pZighMD09PW8pe3M9YTticmVha319cmV0dXJuXCJVTktOT1dOXCI9PT1zJiZcIlVOS05PV05cIiE9PWUmJihjb25zb2xlLndhcm4oJ0ZpbGVUeXBlIG9mIEltYWdlIG5vdCByZWNvZ25pemVkLiBQcm9jZXNzaW5nIGltYWdlIGFzIFwiJytlKydcIi4nKSxzPWUpLHN9LG49ZnVuY3Rpb24gdChlKXtmb3IodmFyIG49dGhpcy5pbnRlcm5hbC5uZXdPYmplY3QoKSxyPXRoaXMuaW50ZXJuYWwud3JpdGUsaT10aGlzLmludGVybmFsLnB1dFN0cmVhbSxvPSgwLHRoaXMuaW50ZXJuYWwuZ2V0RmlsdGVycykoKTstMSE9PW8uaW5kZXhPZihcIkZsYXRlRW5jb2RlXCIpOylvLnNwbGljZShvLmluZGV4T2YoXCJGbGF0ZUVuY29kZVwiKSwxKTtlLm49bjt2YXIgYT1bXTtpZihhLnB1c2goe2tleTpcIlR5cGVcIix2YWx1ZTpcIi9YT2JqZWN0XCJ9KSxhLnB1c2goe2tleTpcIlN1YnR5cGVcIix2YWx1ZTpcIi9JbWFnZVwifSksYS5wdXNoKHtrZXk6XCJXaWR0aFwiLHZhbHVlOmUud30pLGEucHVzaCh7a2V5OlwiSGVpZ2h0XCIsdmFsdWU6ZS5ofSksZS5jcz09PXRoaXMuY29sb3Jfc3BhY2VzLklOREVYRUQ/YS5wdXNoKHtrZXk6XCJDb2xvclNwYWNlXCIsdmFsdWU6XCJbL0luZGV4ZWQgL0RldmljZVJHQiBcIisoZS5wYWwubGVuZ3RoLzMtMSkrXCIgXCIrKFwic21hc2tcImluIGU/bisyOm4rMSkrXCIgMCBSXVwifSk6KGEucHVzaCh7a2V5OlwiQ29sb3JTcGFjZVwiLHZhbHVlOlwiL1wiK2UuY3N9KSxlLmNzPT09dGhpcy5jb2xvcl9zcGFjZXMuREVWSUNFX0NNWUsmJmEucHVzaCh7a2V5OlwiRGVjb2RlXCIsdmFsdWU6XCJbMSAwIDEgMCAxIDAgMSAwXVwifSkpLGEucHVzaCh7a2V5OlwiQml0c1BlckNvbXBvbmVudFwiLHZhbHVlOmUuYnBjfSksXCJkcFwiaW4gZSYmYS5wdXNoKHtrZXk6XCJEZWNvZGVQYXJtc1wiLHZhbHVlOlwiPDxcIitlLmRwK1wiPj5cIn0pLFwidHJuc1wiaW4gZSYmZS50cm5zLmNvbnN0cnVjdG9yPT1BcnJheSl7Zm9yKHZhciBzPVwiXCIsbD0wLGg9ZS50cm5zLmxlbmd0aDtsPGg7bCsrKXMrPWUudHJuc1tsXStcIiBcIitlLnRybnNbbF0rXCIgXCI7YS5wdXNoKHtrZXk6XCJNYXNrXCIsdmFsdWU6XCJbXCIrcytcIl1cIn0pfVwic21hc2tcImluIGUmJmEucHVzaCh7a2V5OlwiU01hc2tcIix2YWx1ZTpuKzErXCIgMCBSXCJ9KTt2YXIgdT12b2lkIDAhPT1lLmY/W1wiL1wiK2UuZl06dm9pZCAwO2lmKGkoe2RhdGE6ZS5kYXRhLGFkZGl0aW9uYWxLZXlWYWx1ZXM6YSxhbHJlYWR5QXBwbGllZEZpbHRlcnM6dX0pLHIoXCJlbmRvYmpcIiksXCJzbWFza1wiaW4gZSl7dmFyIGM9XCIvUHJlZGljdG9yIFwiK2UucCtcIiAvQ29sb3JzIDEgL0JpdHNQZXJDb21wb25lbnQgXCIrZS5icGMrXCIgL0NvbHVtbnMgXCIrZS53LGY9e3c6ZS53LGg6ZS5oLGNzOlwiRGV2aWNlR3JheVwiLGJwYzplLmJwYyxkcDpjLGRhdGE6ZS5zbWFza307XCJmXCJpbiBlJiYoZi5mPWUuZiksdC5jYWxsKHRoaXMsZil9ZS5jcz09PXRoaXMuY29sb3Jfc3BhY2VzLklOREVYRUQmJih0aGlzLmludGVybmFsLm5ld09iamVjdCgpLGkoe2RhdGE6dGhpcy5hcnJheUJ1ZmZlclRvQmluYXJ5U3RyaW5nKG5ldyBVaW50OEFycmF5KGUucGFsKSl9KSxyKFwiZW5kb2JqXCIpKX0sTD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuaW50ZXJuYWwuY29sbGVjdGlvbnNbTitcImltYWdlc1wiXTtmb3IodmFyIGUgaW4gdCluLmNhbGwodGhpcyx0W2VdKX0sQT1mdW5jdGlvbigpe3ZhciB0LGU9dGhpcy5pbnRlcm5hbC5jb2xsZWN0aW9uc1tOK1wiaW1hZ2VzXCJdLG49dGhpcy5pbnRlcm5hbC53cml0ZTtmb3IodmFyIHIgaW4gZSluKFwiL0lcIisodD1lW3JdKS5pLHQubixcIjBcIixcIlJcIil9LFM9ZnVuY3Rpb24odCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgeFtcInByb2Nlc3NcIit0LnRvVXBwZXJDYXNlKCldfSxfPWZ1bmN0aW9uKHQpe3JldHVyblwib2JqZWN0XCI9PT1zZSh0KSYmMT09PXQubm9kZVR5cGV9LEY9ZnVuY3Rpb24odCxlKXtpZihcIklNR1wiPT09dC5ub2RlTmFtZSYmdC5oYXNBdHRyaWJ1dGUoXCJzcmNcIikpe3ZhciBuPVwiXCIrdC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7aWYoMD09PW4uaW5kZXhPZihcImRhdGE6aW1hZ2UvXCIpKXJldHVybiB1bmVzY2FwZShuKTt2YXIgcj14LmxvYWRGaWxlKG4pO2lmKHZvaWQgMCE9PXIpcmV0dXJuIGJ0b2Eocil9aWYoXCJDQU5WQVNcIj09PXQubm9kZU5hbWUpe3ZhciBpPXQ7cmV0dXJuIHQudG9EYXRhVVJMKFwiaW1hZ2UvanBlZ1wiLDEpfShpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikpLndpZHRoPXQuY2xpZW50V2lkdGh8fHQud2lkdGgsaS5oZWlnaHQ9dC5jbGllbnRIZWlnaHR8fHQuaGVpZ2h0O3ZhciBvPWkuZ2V0Q29udGV4dChcIjJkXCIpO2lmKCFvKXRocm93XCJhZGRJbWFnZSByZXF1aXJlcyBjYW52YXMgdG8gYmUgc3VwcG9ydGVkIGJ5IGJyb3dzZXIuXCI7cmV0dXJuIG8uZHJhd0ltYWdlKHQsMCwwLGkud2lkdGgsaS5oZWlnaHQpLGkudG9EYXRhVVJMKFwicG5nXCI9PShcIlwiK2UpLnRvTG93ZXJDYXNlKCk/XCJpbWFnZS9wbmdcIjpcImltYWdlL2pwZWdcIil9LFA9ZnVuY3Rpb24odCxlKXt2YXIgbjtpZihlKWZvcih2YXIgciBpbiBlKWlmKHQ9PT1lW3JdLmFsaWFzKXtuPWVbcl07YnJlYWt9cmV0dXJuIG59O3guY29sb3Jfc3BhY2VzPXtERVZJQ0VfUkdCOlwiRGV2aWNlUkdCXCIsREVWSUNFX0dSQVk6XCJEZXZpY2VHcmF5XCIsREVWSUNFX0NNWUs6XCJEZXZpY2VDTVlLXCIsQ0FMX0dSRVk6XCJDYWxHcmF5XCIsQ0FMX1JHQjpcIkNhbFJHQlwiLExBQjpcIkxhYlwiLElDQ19CQVNFRDpcIklDQ0Jhc2VkXCIsSU5ERVhFRDpcIkluZGV4ZWRcIixQQVRURVJOOlwiUGF0dGVyblwiLFNFUEFSQVRJT046XCJTZXBhcmF0aW9uXCIsREVWSUNFX046XCJEZXZpY2VOXCJ9LHguZGVjb2RlPXtEQ1RfREVDT0RFOlwiRENURGVjb2RlXCIsRkxBVEVfREVDT0RFOlwiRmxhdGVEZWNvZGVcIixMWldfREVDT0RFOlwiTFpXRGVjb2RlXCIsSlBYX0RFQ09ERTpcIkpQWERlY29kZVwiLEpCSUcyX0RFQ09ERTpcIkpCSUcyRGVjb2RlXCIsQVNDSUk4NV9ERUNPREU6XCJBU0NJSTg1RGVjb2RlXCIsQVNDSUlfSEVYX0RFQ09ERTpcIkFTQ0lJSGV4RGVjb2RlXCIsUlVOX0xFTkdUSF9ERUNPREU6XCJSdW5MZW5ndGhEZWNvZGVcIixDQ0lUVF9GQVhfREVDT0RFOlwiQ0NJVFRGYXhEZWNvZGVcIn0seC5pbWFnZV9jb21wcmVzc2lvbj17Tk9ORTpcIk5PTkVcIixGQVNUOlwiRkFTVFwiLE1FRElVTTpcIk1FRElVTVwiLFNMT1c6XCJTTE9XXCJ9LHguc0hhc2hDb2RlPWZ1bmN0aW9uKHQpe3ZhciBlLG49MDtpZigwPT09KHQ9dHx8XCJcIikubGVuZ3RoKXJldHVybiBuO2ZvcihlPTA7ZTx0Lmxlbmd0aDtlKyspbj0objw8NSktbit0LmNoYXJDb2RlQXQoZSksbnw9MDtyZXR1cm4gbn0seC5pc1N0cmluZz1mdW5jdGlvbih0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdH0seC52YWxpZGF0ZVN0cmluZ0FzQmFzZTY0PWZ1bmN0aW9uKHQpeyh0PXR8fFwiXCIpLnRvU3RyaW5nKCkudHJpbSgpO3ZhciBlPSEwO3JldHVybiAwPT09dC5sZW5ndGgmJihlPSExKSx0Lmxlbmd0aCU0IT0wJiYoZT0hMSksITE9PT0vXltBLVphLXowLTkrXFwvXSskLy50ZXN0KHQuc3Vic3RyKDAsdC5sZW5ndGgtMikpJiYoZT0hMSksITE9PT0vXltBLVphLXowLTlcXC9dW0EtWmEtejAtOStcXC9dfFtBLVphLXowLTkrXFwvXT18PT0kLy50ZXN0KHQuc3Vic3RyKC0yKSkmJihlPSExKSxlfSx4LmV4dHJhY3RJbmZvRnJvbUJhc2U2NERhdGFVUkk9ZnVuY3Rpb24odCl7cmV0dXJuL15kYXRhOihbXFx3XSs/XFwvKFtcXHddKz8pKTtcXFMqOypiYXNlNjQsKC4rKSQvZy5leGVjKHQpfSx4LmV4dHJhY3RJbWFnZUZyb21EYXRhVXJsPWZ1bmN0aW9uKHQpe3ZhciBlPSh0PXR8fFwiXCIpLnNwbGl0KFwiYmFzZTY0LFwiKSxuPW51bGw7aWYoMj09PWUubGVuZ3RoKXt2YXIgcj0vXmRhdGE6KFxcdypcXC9cXHcqKTsqKGNoYXJzZXQ9W1xcdz0tXSopKjsqJC8uZXhlYyhlWzBdKTtBcnJheS5pc0FycmF5KHIpJiYobj17bWltZVR5cGU6clsxXSxjaGFyc2V0OnJbMl0sZGF0YTplWzFdfSl9cmV0dXJuIG59LHguc3VwcG9ydHNBcnJheUJ1ZmZlcj1mdW5jdGlvbigpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQ4QXJyYXl9LHguaXNBcnJheUJ1ZmZlcj1mdW5jdGlvbih0KXtyZXR1cm4hIXRoaXMuc3VwcG9ydHNBcnJheUJ1ZmZlcigpJiZ0IGluc3RhbmNlb2YgQXJyYXlCdWZmZXJ9LHguaXNBcnJheUJ1ZmZlclZpZXc9ZnVuY3Rpb24odCl7cmV0dXJuISF0aGlzLnN1cHBvcnRzQXJyYXlCdWZmZXIoKSYmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50MzJBcnJheSYmKHQgaW5zdGFuY2VvZiBJbnQ4QXJyYXl8fHQgaW5zdGFuY2VvZiBVaW50OEFycmF5fHxcInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhDbGFtcGVkQXJyYXkmJnQgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheXx8dCBpbnN0YW5jZW9mIEludDE2QXJyYXl8fHQgaW5zdGFuY2VvZiBVaW50MTZBcnJheXx8dCBpbnN0YW5jZW9mIEludDMyQXJyYXl8fHQgaW5zdGFuY2VvZiBVaW50MzJBcnJheXx8dCBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheXx8dCBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheSkpfSx4LmJpbmFyeVN0cmluZ1RvVWludDhBcnJheT1mdW5jdGlvbih0KXtmb3IodmFyIGU9dC5sZW5ndGgsbj1uZXcgVWludDhBcnJheShlKSxyPTA7cjxlO3IrKyluW3JdPXQuY2hhckNvZGVBdChyKTtyZXR1cm4gbn0seC5hcnJheUJ1ZmZlclRvQmluYXJ5U3RyaW5nPWZ1bmN0aW9uKHQpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGF0b2IpcmV0dXJuIGF0b2IodGhpcy5hcnJheUJ1ZmZlclRvQmFzZTY0KHQpKX0seC5hcnJheUJ1ZmZlclRvQmFzZTY0PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZSxuPVwiXCIscj1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIixpPW5ldyBVaW50OEFycmF5KHQpLG89aS5ieXRlTGVuZ3RoLGE9byUzLHM9by1hLGw9MDtsPHM7bCs9MyluKz1yWygxNjUxNTA3MiYoZT1pW2xdPDwxNnxpW2wrMV08PDh8aVtsKzJdKSk+PjE4XStyWygyNTgwNDgmZSk+PjEyXStyWyg0MDMyJmUpPj42XStyWzYzJmVdO3JldHVybiAxPT1hP24rPXJbKDI1MiYoZT1pW3NdKSk+PjJdK3JbKDMmZSk8PDRdK1wiPT1cIjoyPT1hJiYobis9clsoNjQ1MTImKGU9aVtzXTw8OHxpW3MrMV0pKT4+MTBdK3JbKDEwMDgmZSk+PjRdK3JbKDE1JmUpPDwyXStcIj1cIiksbn0seC5jcmVhdGVJbWFnZUluZm89ZnVuY3Rpb24odCxlLG4scixpLG8sYSxzLGwsaCx1LGMsZil7dmFyIHA9e2FsaWFzOnMsdzplLGg6bixjczpyLGJwYzppLGk6YSxkYXRhOnR9O3JldHVybiBvJiYocC5mPW8pLGwmJihwLmRwPWwpLGgmJihwLnRybnM9aCksdSYmKHAucGFsPXUpLGMmJihwLnNtYXNrPWMpLGYmJihwLnA9ZikscH0seC5hZGRJbWFnZT1mdW5jdGlvbih0LGUsbixyLGksbyxhLHMsbCl7dmFyIGg9XCJcIjtpZihcInN0cmluZ1wiIT10eXBlb2YgZSl7dmFyIHU9bztvPWksaT1yLHI9bixuPWUsZT11fWlmKFwib2JqZWN0XCI9PT1zZSh0KSYmIV8odCkmJlwiaW1hZ2VEYXRhXCJpbiB0KXt2YXIgYz10O3Q9Yy5pbWFnZURhdGEsZT1jLmZvcm1hdHx8ZXx8XCJVTktOT1dOXCIsbj1jLnh8fG58fDAscj1jLnl8fHJ8fDAsaT1jLnd8fGksbz1jLmh8fG8sYT1jLmFsaWFzfHxhLHM9Yy5jb21wcmVzc2lvbnx8cyxsPWMucm90YXRpb258fGMuYW5nbGV8fGx9dmFyIGY9dGhpcy5pbnRlcm5hbC5nZXRGaWx0ZXJzKCk7aWYodm9pZCAwPT09cyYmLTEhPT1mLmluZGV4T2YoXCJGbGF0ZUVuY29kZVwiKSYmKHM9XCJTTE9XXCIpLFwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD11bmVzY2FwZSh0KSksaXNOYU4obil8fGlzTmFOKHIpKXRocm93IGNvbnNvbGUuZXJyb3IoXCJqc1BERi5hZGRJbWFnZTogSW52YWxpZCBjb29yZGluYXRlc1wiLGFyZ3VtZW50cyksbmV3IEVycm9yKFwiSW52YWxpZCBjb29yZGluYXRlcyBwYXNzZWQgdG8ganNQREYuYWRkSW1hZ2VcIik7dmFyIHAsZCxnLG0seSx2LHcsYj1mdW5jdGlvbigpe3ZhciB0PXRoaXMuaW50ZXJuYWwuY29sbGVjdGlvbnNbTitcImltYWdlc1wiXTtyZXR1cm4gdHx8KHRoaXMuaW50ZXJuYWwuY29sbGVjdGlvbnNbTitcImltYWdlc1wiXT10PXt9LHRoaXMuaW50ZXJuYWwuZXZlbnRzLnN1YnNjcmliZShcInB1dFJlc291cmNlc1wiLEwpLHRoaXMuaW50ZXJuYWwuZXZlbnRzLnN1YnNjcmliZShcInB1dFhvYmplY3REaWN0XCIsQSkpLHR9LmNhbGwodGhpcyk7aWYoISgocD1QKHQsYikpfHwoXyh0KSYmKHQ9Rih0LGUpKSwobnVsbD09KHc9YSl8fDA9PT13Lmxlbmd0aCkmJihhPVwic3RyaW5nXCI9PXR5cGVvZih2PXQpP3guc0hhc2hDb2RlKHYpOnguaXNBcnJheUJ1ZmZlclZpZXcodik/eC5zSGFzaENvZGUoeC5hcnJheUJ1ZmZlclRvQmluYXJ5U3RyaW5nKHYpKTpudWxsKSxwPVAoYSxiKSkpKXtpZih0aGlzLmlzU3RyaW5nKHQpJiYoXCJcIiE9PShoPXRoaXMuY29udmVydFN0cmluZ1RvSW1hZ2VEYXRhKHQpKT90PWg6dm9pZCAwIT09KGg9eC5sb2FkRmlsZSh0KSkmJih0PWgpKSxlPXRoaXMuZ2V0SW1hZ2VGaWxlVHlwZUJ5SW1hZ2VEYXRhKHQsZSksIVMoZSkpdGhyb3cgbmV3IEVycm9yKFwiYWRkSW1hZ2UgZG9lcyBub3Qgc3VwcG9ydCBmaWxlcyBvZiB0eXBlICdcIitlK1wiJywgcGxlYXNlIGVuc3VyZSB0aGF0IGEgcGx1Z2luIGZvciAnXCIrZStcIicgc3VwcG9ydCBpcyBhZGRlZC5cIik7aWYodGhpcy5zdXBwb3J0c0FycmF5QnVmZmVyKCkmJih0IGluc3RhbmNlb2YgVWludDhBcnJheXx8KGQ9dCx0PXRoaXMuYmluYXJ5U3RyaW5nVG9VaW50OEFycmF5KHQpKSksIShwPXRoaXNbXCJwcm9jZXNzXCIrZS50b1VwcGVyQ2FzZSgpXSh0LCh5PTAsKG09YikmJih5PU9iamVjdC5rZXlzP09iamVjdC5rZXlzKG0pLmxlbmd0aDpmdW5jdGlvbih0KXt2YXIgZT0wO2Zvcih2YXIgbiBpbiB0KXQuaGFzT3duUHJvcGVydHkobikmJmUrKztyZXR1cm4gZX0obSkpLHkpLGEsKChnPXMpJiZcInN0cmluZ1wiPT10eXBlb2YgZyYmKGc9Zy50b1VwcGVyQ2FzZSgpKSxnIGluIHguaW1hZ2VfY29tcHJlc3Npb24/Zzp4LmltYWdlX2NvbXByZXNzaW9uLk5PTkUpLGQpKSl0aHJvdyBuZXcgRXJyb3IoXCJBbiB1bmtub3duIGVycm9yIG9jY3VycmVkIHdoaWxzdCBwcm9jZXNzaW5nIHRoZSBpbWFnZVwiKX1yZXR1cm4gZnVuY3Rpb24odCxlLG4scixpLG8sYSxzKXt2YXIgbD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHR8fGV8fChlPXQ9LTk2KSx0PDAmJih0PS0xKm4udyo3Mi90L3RoaXMuaW50ZXJuYWwuc2NhbGVGYWN0b3IpLGU8MCYmKGU9LTEqbi5oKjcyL2UvdGhpcy5pbnRlcm5hbC5zY2FsZUZhY3RvciksMD09PXQmJih0PWUqbi53L24uaCksMD09PWUmJihlPXQqbi5oL24udyksW3QsZV19LmNhbGwodGhpcyxuLHIsaSksaD10aGlzLmludGVybmFsLmdldENvb3JkaW5hdGVTdHJpbmcsdT10aGlzLmludGVybmFsLmdldFZlcnRpY2FsQ29vcmRpbmF0ZVN0cmluZztpZihuPWxbMF0scj1sWzFdLGFbb109aSxzKXtzKj1NYXRoLlBJLzE4MDt2YXIgYz1NYXRoLmNvcyhzKSxmPU1hdGguc2luKHMpLHA9ZnVuY3Rpb24odCl7cmV0dXJuIHQudG9GaXhlZCg0KX0sZD1bcChjKSxwKGYpLHAoLTEqZikscChjKSwwLDAsXCJjbVwiXX10aGlzLmludGVybmFsLndyaXRlKFwicVwiKSxzPyh0aGlzLmludGVybmFsLndyaXRlKFsxLFwiMFwiLFwiMFwiLDEsaCh0KSx1KGUrciksXCJjbVwiXS5qb2luKFwiIFwiKSksdGhpcy5pbnRlcm5hbC53cml0ZShkLmpvaW4oXCIgXCIpKSx0aGlzLmludGVybmFsLndyaXRlKFtoKG4pLFwiMFwiLFwiMFwiLGgociksXCIwXCIsXCIwXCIsXCJjbVwiXS5qb2luKFwiIFwiKSkpOnRoaXMuaW50ZXJuYWwud3JpdGUoW2gobiksXCIwXCIsXCIwXCIsaChyKSxoKHQpLHUoZStyKSxcImNtXCJdLmpvaW4oXCIgXCIpKSx0aGlzLmludGVybmFsLndyaXRlKFwiL0lcIitpLmkrXCIgRG9cIiksdGhpcy5pbnRlcm5hbC53cml0ZShcIlFcIil9LmNhbGwodGhpcyxuLHIsaSxvLHAscC5pLGIsbCksdGhpc30seC5jb252ZXJ0U3RyaW5nVG9JbWFnZURhdGE9ZnVuY3Rpb24odCl7dmFyIGUsbj1cIlwiO2lmKHRoaXMuaXNTdHJpbmcodCkpe3ZhciByO2U9bnVsbCE9PShyPXRoaXMuZXh0cmFjdEltYWdlRnJvbURhdGFVcmwodCkpP3IuZGF0YTp0O3RyeXtuPWF0b2IoZSl9Y2F0Y2godCl7dGhyb3cgeC52YWxpZGF0ZVN0cmluZ0FzQmFzZTY0KGUpP25ldyBFcnJvcihcImF0b2ItRXJyb3IgaW4ganNQREYuY29udmVydFN0cmluZ1RvSW1hZ2VEYXRhIFwiK3QubWVzc2FnZSk6bmV3IEVycm9yKFwiU3VwcGxpZWQgRGF0YSBpcyBub3QgYSB2YWxpZCBiYXNlNjQtU3RyaW5nIGpzUERGLmNvbnZlcnRTdHJpbmdUb0ltYWdlRGF0YSBcIil9fXJldHVybiBufTt2YXIgdT1mdW5jdGlvbih0LGUpe3JldHVybiB0LnN1YmFycmF5KGUsZSs1KX07eC5wcm9jZXNzSlBFRz1mdW5jdGlvbih0LGUsbixyLGksbyl7dmFyIGEscz10aGlzLmRlY29kZS5EQ1RfREVDT0RFO2lmKCF0aGlzLmlzU3RyaW5nKHQpJiYhdGhpcy5pc0FycmF5QnVmZmVyKHQpJiYhdGhpcy5pc0FycmF5QnVmZmVyVmlldyh0KSlyZXR1cm4gbnVsbDtpZih0aGlzLmlzU3RyaW5nKHQpJiYoYT1mdW5jdGlvbih0KXt2YXIgZTtpZihcIkpQRUdcIiE9PWgodCkpdGhyb3cgbmV3IEVycm9yKFwiZ2V0SnBlZ1NpemUgcmVxdWlyZXMgYSBiaW5hcnkgc3RyaW5nIGpwZWcgZmlsZVwiKTtmb3IodmFyIG49MjU2KnQuY2hhckNvZGVBdCg0KSt0LmNoYXJDb2RlQXQoNSkscj00LGk9dC5sZW5ndGg7cjxpOyl7aWYocis9biwyNTUhPT10LmNoYXJDb2RlQXQocikpdGhyb3cgbmV3IEVycm9yKFwiZ2V0SnBlZ1NpemUgY291bGQgbm90IGZpbmQgdGhlIHNpemUgb2YgdGhlIGltYWdlXCIpO2lmKDE5Mj09PXQuY2hhckNvZGVBdChyKzEpfHwxOTM9PT10LmNoYXJDb2RlQXQocisxKXx8MTk0PT09dC5jaGFyQ29kZUF0KHIrMSl8fDE5NT09PXQuY2hhckNvZGVBdChyKzEpfHwxOTY9PT10LmNoYXJDb2RlQXQocisxKXx8MTk3PT09dC5jaGFyQ29kZUF0KHIrMSl8fDE5OD09PXQuY2hhckNvZGVBdChyKzEpfHwxOTk9PT10LmNoYXJDb2RlQXQocisxKSlyZXR1cm4gZT0yNTYqdC5jaGFyQ29kZUF0KHIrNSkrdC5jaGFyQ29kZUF0KHIrNiksWzI1Nip0LmNoYXJDb2RlQXQocis3KSt0LmNoYXJDb2RlQXQocis4KSxlLHQuY2hhckNvZGVBdChyKzkpXTtyKz0yLG49MjU2KnQuY2hhckNvZGVBdChyKSt0LmNoYXJDb2RlQXQocisxKX19KHQpKSx0aGlzLmlzQXJyYXlCdWZmZXIodCkmJih0PW5ldyBVaW50OEFycmF5KHQpKSx0aGlzLmlzQXJyYXlCdWZmZXJWaWV3KHQpJiYoYT1mdW5jdGlvbih0KXtpZig2NTQ5NiE9KHRbMF08PDh8dFsxXSkpdGhyb3cgbmV3IEVycm9yKFwiU3VwcGxpZWQgZGF0YSBpcyBub3QgYSBKUEVHXCIpO2Zvcih2YXIgZSxuPXQubGVuZ3RoLHI9KHRbNF08PDgpK3RbNV0saT00O2k8bjspe2lmKHI9KChlPXUodCxpKz1yKSlbMl08PDgpK2VbM10sKDE5Mj09PWVbMV18fDE5ND09PWVbMV0pJiYyNTU9PT1lWzBdJiY3PHIpcmV0dXJue3dpZHRoOigoZT11KHQsaSs1KSlbMl08PDgpK2VbM10saGVpZ2h0OihlWzBdPDw4KStlWzFdLG51bWNvbXBvbmVudHM6ZVs0XX07aSs9Mn10aHJvdyBuZXcgRXJyb3IoXCJnZXRKcGVnU2l6ZUZyb21CeXRlcyBjb3VsZCBub3QgZmluZCB0aGUgc2l6ZSBvZiB0aGUgaW1hZ2VcIil9KHQpLHQ9aXx8dGhpcy5hcnJheUJ1ZmZlclRvQmluYXJ5U3RyaW5nKHQpKSx2b2lkIDA9PT1vKXN3aXRjaChhLm51bWNvbXBvbmVudHMpe2Nhc2UgMTpvPXRoaXMuY29sb3Jfc3BhY2VzLkRFVklDRV9HUkFZO2JyZWFrO2Nhc2UgNDpvPXRoaXMuY29sb3Jfc3BhY2VzLkRFVklDRV9DTVlLO2JyZWFrO2RlZmF1bHQ6Y2FzZSAzOm89dGhpcy5jb2xvcl9zcGFjZXMuREVWSUNFX1JHQn1yZXR1cm4gdGhpcy5jcmVhdGVJbWFnZUluZm8odCxhLndpZHRoLGEuaGVpZ2h0LG8sOCxzLGUsbil9LHgucHJvY2Vzc0pQRz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnByb2Nlc3NKUEVHLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0seC5nZXRJbWFnZVByb3BlcnRpZXM9ZnVuY3Rpb24odCl7dmFyIGUsbixyPVwiXCI7aWYoXyh0KSYmKHQ9Rih0KSksdGhpcy5pc1N0cmluZyh0KSYmKFwiXCIhPT0ocj10aGlzLmNvbnZlcnRTdHJpbmdUb0ltYWdlRGF0YSh0KSk/dD1yOnZvaWQgMCE9PShyPXgubG9hZEZpbGUodCkpJiYodD1yKSksbj10aGlzLmdldEltYWdlRmlsZVR5cGVCeUltYWdlRGF0YSh0KSwhUyhuKSl0aHJvdyBuZXcgRXJyb3IoXCJhZGRJbWFnZSBkb2VzIG5vdCBzdXBwb3J0IGZpbGVzIG9mIHR5cGUgJ1wiK24rXCInLCBwbGVhc2UgZW5zdXJlIHRoYXQgYSBwbHVnaW4gZm9yICdcIituK1wiJyBzdXBwb3J0IGlzIGFkZGVkLlwiKTtpZih0aGlzLnN1cHBvcnRzQXJyYXlCdWZmZXIoKSYmKHQgaW5zdGFuY2VvZiBVaW50OEFycmF5fHwodD10aGlzLmJpbmFyeVN0cmluZ1RvVWludDhBcnJheSh0KSkpLCEoZT10aGlzW1wicHJvY2Vzc1wiK24udG9VcHBlckNhc2UoKV0odCkpKXRocm93IG5ldyBFcnJvcihcIkFuIHVua25vd24gZXJyb3Igb2NjdXJyZWQgd2hpbHN0IHByb2Nlc3NpbmcgdGhlIGltYWdlXCIpO3JldHVybntmaWxlVHlwZTpuLHdpZHRoOmUudyxoZWlnaHQ6ZS5oLGNvbG9yU3BhY2U6ZS5jcyxjb21wcmVzc2lvbk1vZGU6ZS5mLGJpdHNQZXJDb21wb25lbnQ6ZS5icGN9fX0obHQuQVBJKSxcclxuLyoqXHJcbiAgICogQGxpY2Vuc2VcclxuICAgKiBDb3B5cmlnaHQgKGMpIDIwMTQgU3RldmVuIFNwdW5naW4gKFR3ZWx2ZVRvbmUgTExDKSAgc3RldmVuQHR3ZWx2ZXRvbmUudHZcclxuICAgKlxyXG4gICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICAgKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcclxuICAgKi9cclxudD1sdC5BUEksbHQuQVBJLmV2ZW50cy5wdXNoKFtcImFkZFBhZ2VcIixmdW5jdGlvbih0KXt0aGlzLmludGVybmFsLmdldFBhZ2VJbmZvKHQucGFnZU51bWJlcikucGFnZUNvbnRleHQuYW5ub3RhdGlvbnM9W119XSksdC5ldmVudHMucHVzaChbXCJwdXRQYWdlXCIsZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMuaW50ZXJuYWwuZ2V0UGFnZUluZm9CeU9iaklkKHQub2JqSWQpLG49dC5wYWdlQ29udGV4dC5hbm5vdGF0aW9ucyxyPWZ1bmN0aW9uKHQpe2lmKHZvaWQgMCE9PXQmJlwiXCIhPXQpcmV0dXJuITB9LGk9ITEsbz0wO288bi5sZW5ndGgmJiFpO28rKylzd2l0Y2goKGw9bltvXSkudHlwZSl7Y2FzZVwibGlua1wiOmlmKHIobC5vcHRpb25zLnVybCl8fHIobC5vcHRpb25zLnBhZ2VOdW1iZXIpKXtpPSEwO2JyZWFrfWNhc2VcInJlZmVyZW5jZVwiOmNhc2VcInRleHRcIjpjYXNlXCJmcmVldGV4dFwiOmk9ITB9aWYoMCE9aSl7dGhpcy5pbnRlcm5hbC53cml0ZShcIi9Bbm5vdHMgW1wiKSx0aGlzLmludGVybmFsLnBhZ2VTaXplLmhlaWdodDt2YXIgYT10aGlzLmludGVybmFsLmdldENvb3JkaW5hdGVTdHJpbmcscz10aGlzLmludGVybmFsLmdldFZlcnRpY2FsQ29vcmRpbmF0ZVN0cmluZztmb3Iobz0wO288bi5sZW5ndGg7bysrKXt2YXIgbDtzd2l0Y2goKGw9bltvXSkudHlwZSl7Y2FzZVwicmVmZXJlbmNlXCI6dGhpcy5pbnRlcm5hbC53cml0ZShcIiBcIitsLm9iamVjdC5vYmpJZCtcIiAwIFIgXCIpO2JyZWFrO2Nhc2VcInRleHRcIjp2YXIgaD10aGlzLmludGVybmFsLm5ld0FkZGl0aW9uYWxPYmplY3QoKSx1PXRoaXMuaW50ZXJuYWwubmV3QWRkaXRpb25hbE9iamVjdCgpLGM9bC50aXRsZXx8XCJOb3RlXCI7bT1cIjw8L1R5cGUgL0Fubm90IC9TdWJ0eXBlIC9UZXh0IFwiKyhwPVwiL1JlY3QgW1wiK2EobC5ib3VuZHMueCkrXCIgXCIrcyhsLmJvdW5kcy55K2wuYm91bmRzLmgpK1wiIFwiK2EobC5ib3VuZHMueCtsLmJvdW5kcy53KStcIiBcIitzKGwuYm91bmRzLnkpK1wiXSBcIikrXCIvQ29udGVudHMgKFwiK2wuY29udGVudHMrXCIpXCIsbSs9XCIgL1BvcHVwIFwiK3Uub2JqSWQrXCIgMCBSXCIsbSs9XCIgL1AgXCIrZS5vYmpJZCtcIiAwIFJcIixtKz1cIiAvVCAoXCIrYytcIikgPj5cIixoLmNvbnRlbnQ9bTt2YXIgZj1oLm9iaklkK1wiIDAgUlwiO209XCI8PC9UeXBlIC9Bbm5vdCAvU3VidHlwZSAvUG9wdXAgXCIrKHA9XCIvUmVjdCBbXCIrYShsLmJvdW5kcy54KzMwKStcIiBcIitzKGwuYm91bmRzLnkrbC5ib3VuZHMuaCkrXCIgXCIrYShsLmJvdW5kcy54K2wuYm91bmRzLncrMzApK1wiIFwiK3MobC5ib3VuZHMueSkrXCJdIFwiKStcIiAvUGFyZW50IFwiK2YsbC5vcGVuJiYobSs9XCIgL09wZW4gdHJ1ZVwiKSxtKz1cIiA+PlwiLHUuY29udGVudD1tLHRoaXMuaW50ZXJuYWwud3JpdGUoaC5vYmpJZCxcIjAgUlwiLHUub2JqSWQsXCIwIFJcIik7YnJlYWs7Y2FzZVwiZnJlZXRleHRcIjp2YXIgcD1cIi9SZWN0IFtcIithKGwuYm91bmRzLngpK1wiIFwiK3MobC5ib3VuZHMueSkrXCIgXCIrYShsLmJvdW5kcy54K2wuYm91bmRzLncpK1wiIFwiK3MobC5ib3VuZHMueStsLmJvdW5kcy5oKStcIl0gXCIsZD1sLmNvbG9yfHxcIiMwMDAwMDBcIjttPVwiPDwvVHlwZSAvQW5ub3QgL1N1YnR5cGUgL0ZyZWVUZXh0IFwiK3ArXCIvQ29udGVudHMgKFwiK2wuY29udGVudHMrXCIpXCIsbSs9XCIgL0RTKGZvbnQ6IEhlbHZldGljYSxzYW5zLXNlcmlmIDEyLjBwdDsgdGV4dC1hbGlnbjpsZWZ0OyBjb2xvcjojXCIrZCtcIilcIixtKz1cIiAvQm9yZGVyIFswIDAgMF1cIixtKz1cIiA+PlwiLHRoaXMuaW50ZXJuYWwud3JpdGUobSk7YnJlYWs7Y2FzZVwibGlua1wiOmlmKGwub3B0aW9ucy5uYW1lKXt2YXIgZz10aGlzLmFubm90YXRpb25zLl9uYW1lTWFwW2wub3B0aW9ucy5uYW1lXTtsLm9wdGlvbnMucGFnZU51bWJlcj1nLnBhZ2UsbC5vcHRpb25zLnRvcD1nLnl9ZWxzZSBsLm9wdGlvbnMudG9wfHwobC5vcHRpb25zLnRvcD0wKTtwPVwiL1JlY3QgW1wiK2EobC54KStcIiBcIitzKGwueSkrXCIgXCIrYShsLngrbC53KStcIiBcIitzKGwueStsLmgpK1wiXSBcIjt2YXIgbT1cIlwiO2lmKGwub3B0aW9ucy51cmwpbT1cIjw8L1R5cGUgL0Fubm90IC9TdWJ0eXBlIC9MaW5rIFwiK3ArXCIvQm9yZGVyIFswIDAgMF0gL0EgPDwvUyAvVVJJIC9VUkkgKFwiK2wub3B0aW9ucy51cmwrXCIpID4+XCI7ZWxzZSBpZihsLm9wdGlvbnMucGFnZU51bWJlcilzd2l0Y2gobT1cIjw8L1R5cGUgL0Fubm90IC9TdWJ0eXBlIC9MaW5rIFwiK3ArXCIvQm9yZGVyIFswIDAgMF0gL0Rlc3QgW1wiK3RoaXMuaW50ZXJuYWwuZ2V0UGFnZUluZm8obC5vcHRpb25zLnBhZ2VOdW1iZXIpLm9iaklkK1wiIDAgUlwiLGwub3B0aW9ucy5tYWdGYWN0b3I9bC5vcHRpb25zLm1hZ0ZhY3Rvcnx8XCJYWVpcIixsLm9wdGlvbnMubWFnRmFjdG9yKXtjYXNlXCJGaXRcIjptKz1cIiAvRml0XVwiO2JyZWFrO2Nhc2VcIkZpdEhcIjptKz1cIiAvRml0SCBcIitsLm9wdGlvbnMudG9wK1wiXVwiO2JyZWFrO2Nhc2VcIkZpdFZcIjpsLm9wdGlvbnMubGVmdD1sLm9wdGlvbnMubGVmdHx8MCxtKz1cIiAvRml0ViBcIitsLm9wdGlvbnMubGVmdCtcIl1cIjticmVhaztjYXNlXCJYWVpcIjpkZWZhdWx0OnZhciB5PXMobC5vcHRpb25zLnRvcCk7bC5vcHRpb25zLmxlZnQ9bC5vcHRpb25zLmxlZnR8fDAsdm9pZCAwPT09bC5vcHRpb25zLnpvb20mJihsLm9wdGlvbnMuem9vbT0wKSxtKz1cIiAvWFlaIFwiK2wub3B0aW9ucy5sZWZ0K1wiIFwiK3krXCIgXCIrbC5vcHRpb25zLnpvb20rXCJdXCJ9XCJcIiE9bSYmKG0rPVwiID4+XCIsdGhpcy5pbnRlcm5hbC53cml0ZShtKSl9fXRoaXMuaW50ZXJuYWwud3JpdGUoXCJdXCIpfX1dKSx0LmNyZWF0ZUFubm90YXRpb249ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5pbnRlcm5hbC5nZXRDdXJyZW50UGFnZUluZm8oKTtzd2l0Y2godC50eXBlKXtjYXNlXCJsaW5rXCI6dGhpcy5saW5rKHQuYm91bmRzLngsdC5ib3VuZHMueSx0LmJvdW5kcy53LHQuYm91bmRzLmgsdCk7YnJlYWs7Y2FzZVwidGV4dFwiOmNhc2VcImZyZWV0ZXh0XCI6ZS5wYWdlQ29udGV4dC5hbm5vdGF0aW9ucy5wdXNoKHQpfX0sdC5saW5rPWZ1bmN0aW9uKHQsZSxuLHIsaSl7dGhpcy5pbnRlcm5hbC5nZXRDdXJyZW50UGFnZUluZm8oKS5wYWdlQ29udGV4dC5hbm5vdGF0aW9ucy5wdXNoKHt4OnQseTplLHc6bixoOnIsb3B0aW9uczppLHR5cGU6XCJsaW5rXCJ9KX0sdC50ZXh0V2l0aExpbms9ZnVuY3Rpb24odCxlLG4scil7dmFyIGk9dGhpcy5nZXRUZXh0V2lkdGgodCksbz10aGlzLmludGVybmFsLmdldExpbmVIZWlnaHQoKS90aGlzLmludGVybmFsLnNjYWxlRmFjdG9yO3JldHVybiB0aGlzLnRleHQodCxlLG4pLG4rPS4yKm8sdGhpcy5saW5rKGUsbi1vLGksbyxyKSxpfSx0LmdldFRleHRXaWR0aD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmludGVybmFsLmdldEZvbnRTaXplKCk7cmV0dXJuIHRoaXMuZ2V0U3RyaW5nVW5pdFdpZHRoKHQpKmUvdGhpcy5pbnRlcm5hbC5zY2FsZUZhY3Rvcn0sXHJcbi8qKlxyXG4gICAqIEBsaWNlbnNlXHJcbiAgICogQ29weXJpZ2h0IChjKSAyMDE3IEFyYXMgQWJiYXNpIFxyXG4gICAqXHJcbiAgICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gICAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxyXG4gICAqL1xyXG5mdW5jdGlvbih0KXt2YXIgaD17MTU2OTpbNjUxNTJdLDE1NzA6WzY1MTUzLDY1MTU0XSwxNTcxOls2NTE1NSw2NTE1Nl0sMTU3MjpbNjUxNTcsNjUxNThdLDE1NzM6WzY1MTU5LDY1MTYwXSwxNTc0Ols2NTE2MSw2NTE2Miw2NTE2Myw2NTE2NF0sMTU3NTpbNjUxNjUsNjUxNjZdLDE1NzY6WzY1MTY3LDY1MTY4LDY1MTY5LDY1MTcwXSwxNTc3Ols2NTE3MSw2NTE3Ml0sMTU3ODpbNjUxNzMsNjUxNzQsNjUxNzUsNjUxNzZdLDE1Nzk6WzY1MTc3LDY1MTc4LDY1MTc5LDY1MTgwXSwxNTgwOls2NTE4MSw2NTE4Miw2NTE4Myw2NTE4NF0sMTU4MTpbNjUxODUsNjUxODYsNjUxODcsNjUxODhdLDE1ODI6WzY1MTg5LDY1MTkwLDY1MTkxLDY1MTkyXSwxNTgzOls2NTE5Myw2NTE5NF0sMTU4NDpbNjUxOTUsNjUxOTZdLDE1ODU6WzY1MTk3LDY1MTk4XSwxNTg2Ols2NTE5OSw2NTIwMF0sMTU4NzpbNjUyMDEsNjUyMDIsNjUyMDMsNjUyMDRdLDE1ODg6WzY1MjA1LDY1MjA2LDY1MjA3LDY1MjA4XSwxNTg5Ols2NTIwOSw2NTIxMCw2NTIxMSw2NTIxMl0sMTU5MDpbNjUyMTMsNjUyMTQsNjUyMTUsNjUyMTZdLDE1OTE6WzY1MjE3LDY1MjE4LDY1MjE5LDY1MjIwXSwxNTkyOls2NTIyMSw2NTIyMiw2NTIyMyw2NTIyNF0sMTU5MzpbNjUyMjUsNjUyMjYsNjUyMjcsNjUyMjhdLDE1OTQ6WzY1MjI5LDY1MjMwLDY1MjMxLDY1MjMyXSwxNjAxOls2NTIzMyw2NTIzNCw2NTIzNSw2NTIzNl0sMTYwMjpbNjUyMzcsNjUyMzgsNjUyMzksNjUyNDBdLDE2MDM6WzY1MjQxLDY1MjQyLDY1MjQzLDY1MjQ0XSwxNjA0Ols2NTI0NSw2NTI0Niw2NTI0Nyw2NTI0OF0sMTYwNTpbNjUyNDksNjUyNTAsNjUyNTEsNjUyNTJdLDE2MDY6WzY1MjUzLDY1MjU0LDY1MjU1LDY1MjU2XSwxNjA3Ols2NTI1Nyw2NTI1OCw2NTI1OSw2NTI2MF0sMTYwODpbNjUyNjEsNjUyNjJdLDE2MDk6WzY1MjYzLDY1MjY0LDY0NDg4LDY0NDg5XSwxNjEwOls2NTI2NSw2NTI2Niw2NTI2Nyw2NTI2OF0sMTY0OTpbNjQzMzYsNjQzMzddLDE2NTU6WzY0NDc3XSwxNjU3Ols2NDM1OCw2NDM1OSw2NDM2MCw2NDM2MV0sMTY1ODpbNjQzNTAsNjQzNTEsNjQzNTIsNjQzNTNdLDE2NTk6WzY0MzM4LDY0MzM5LDY0MzQwLDY0MzQxXSwxNjYyOls2NDM0Miw2NDM0Myw2NDM0NCw2NDM0NV0sMTY2MzpbNjQzNTQsNjQzNTUsNjQzNTYsNjQzNTddLDE2NjQ6WzY0MzQ2LDY0MzQ3LDY0MzQ4LDY0MzQ5XSwxNjY3Ols2NDM3NCw2NDM3NSw2NDM3Niw2NDM3N10sMTY2ODpbNjQzNzAsNjQzNzEsNjQzNzIsNjQzNzNdLDE2NzA6WzY0Mzc4LDY0Mzc5LDY0MzgwLDY0MzgxXSwxNjcxOls2NDM4Miw2NDM4Myw2NDM4NCw2NDM4NV0sMTY3MjpbNjQzOTIsNjQzOTNdLDE2NzY6WzY0Mzg4LDY0Mzg5XSwxNjc3Ols2NDM4Niw2NDM4N10sMTY3ODpbNjQzOTAsNjQzOTFdLDE2ODE6WzY0Mzk2LDY0Mzk3XSwxNjg4Ols2NDM5NCw2NDM5NV0sMTcwMDpbNjQzNjIsNjQzNjMsNjQzNjQsNjQzNjVdLDE3MDI6WzY0MzY2LDY0MzY3LDY0MzY4LDY0MzY5XSwxNzA1Ols2NDM5OCw2NDM5OSw2NDQwMCw2NDQwMV0sMTcwOTpbNjQ0NjcsNjQ0NjgsNjQ0NjksNjQ0NzBdLDE3MTE6WzY0NDAyLDY0NDAzLDY0NDA0LDY0NDA1XSwxNzEzOls2NDQxMCw2NDQxMSw2NDQxMiw2NDQxM10sMTcxNTpbNjQ0MDYsNjQ0MDcsNjQ0MDgsNjQ0MDldLDE3MjI6WzY0NDE0LDY0NDE1XSwxNzIzOls2NDQxNiw2NDQxNyw2NDQxOCw2NDQxOV0sMTcyNjpbNjQ0MjYsNjQ0MjcsNjQ0MjgsNjQ0MjldLDE3Mjg6WzY0NDIwLDY0NDIxXSwxNzI5Ols2NDQyMiw2NDQyMyw2NDQyNCw2NDQyNV0sMTczMzpbNjQ0ODAsNjQ0ODFdLDE3MzQ6WzY0NDczLDY0NDc0XSwxNzM1Ols2NDQ3MSw2NDQ3Ml0sMTczNjpbNjQ0NzUsNjQ0NzZdLDE3Mzc6WzY0NDgyLDY0NDgzXSwxNzM5Ols2NDQ3OCw2NDQ3OV0sMTc0MDpbNjQ1MDgsNjQ1MDksNjQ1MTAsNjQ1MTFdLDE3NDQ6WzY0NDg0LDY0NDg1LDY0NDg2LDY0NDg3XSwxNzQ2Ols2NDQzMCw2NDQzMV0sMTc0NzpbNjQ0MzIsNjQ0MzNdfSxhPXs2NTI0Nzp7NjUxNTQ6NjUyNjksNjUxNTY6NjUyNzEsNjUxNjA6NjUyNzMsNjUxNjY6NjUyNzV9LDY1MjQ4Ons2NTE1NDo2NTI3MCw2NTE1Njo2NTI3Miw2NTE2MDo2NTI3NCw2NTE2Njo2NTI3Nn0sNjUxNjU6ezY1MjQ3Ons2NTI0ODp7NjUyNTg6NjUwMTB9fX0sMTYxNzp7MTYxMjo2NDYwNiwxNjEzOjY0NjA3LDE2MTQ6NjQ2MDgsMTYxNTo2NDYwOSwxNjE2OjY0NjEwfX0sZT17MTYxMjo2NDYwNiwxNjEzOjY0NjA3LDE2MTQ6NjQ2MDgsMTYxNTo2NDYwOSwxNjE2OjY0NjEwfSxuPVsxNTcwLDE1NzEsMTU3MywxNTc1XTt0Ll9fYXJhYmljUGFyc2VyX189e307dmFyIHI9dC5fX2FyYWJpY1BhcnNlcl9fLmlzSW5BcmFiaWNTdWJzdGl0dXRpb25BPWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDAhPT1oW3QuY2hhckNvZGVBdCgwKV19LHU9dC5fX2FyYWJpY1BhcnNlcl9fLmlzQXJhYmljTGV0dGVyPWZ1bmN0aW9uKHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0JiYvXltcXHUwNjAwLVxcdTA2RkZcXHUwNzUwLVxcdTA3N0ZcXHUwOEEwLVxcdTA4RkZcXHVGQjUwLVxcdUZERkZcXHVGRTcwLVxcdUZFRkZdKyQvLnRlc3QodCl9LGk9dC5fX2FyYWJpY1BhcnNlcl9fLmlzQXJhYmljRW5kTGV0dGVyPWZ1bmN0aW9uKHQpe3JldHVybiB1KHQpJiZyKHQpJiZoW3QuY2hhckNvZGVBdCgwKV0ubGVuZ3RoPD0yfSxvPXQuX19hcmFiaWNQYXJzZXJfXy5pc0FyYWJpY0FsZkxldHRlcj1mdW5jdGlvbih0KXtyZXR1cm4gdSh0KSYmMDw9bi5pbmRleE9mKHQuY2hhckNvZGVBdCgwKSl9LHM9KHQuX19hcmFiaWNQYXJzZXJfXy5hcmFiaWNMZXR0ZXJIYXNJc29sYXRlZEZvcm09ZnVuY3Rpb24odCl7cmV0dXJuIHUodCkmJnIodCkmJjE8PWhbdC5jaGFyQ29kZUF0KDApXS5sZW5ndGh9LHQuX19hcmFiaWNQYXJzZXJfXy5hcmFiaWNMZXR0ZXJIYXNGaW5hbEZvcm09ZnVuY3Rpb24odCl7cmV0dXJuIHUodCkmJnIodCkmJjI8PWhbdC5jaGFyQ29kZUF0KDApXS5sZW5ndGh9KSxsPSh0Ll9fYXJhYmljUGFyc2VyX18uYXJhYmljTGV0dGVySGFzSW5pdGlhbEZvcm09ZnVuY3Rpb24odCl7cmV0dXJuIHUodCkmJnIodCkmJjM8PWhbdC5jaGFyQ29kZUF0KDApXS5sZW5ndGh9LHQuX19hcmFiaWNQYXJzZXJfXy5hcmFiaWNMZXR0ZXJIYXNNZWRpYWxGb3JtPWZ1bmN0aW9uKHQpe3JldHVybiB1KHQpJiZyKHQpJiY0PT1oW3QuY2hhckNvZGVBdCgwKV0ubGVuZ3RofSksYz10Ll9fYXJhYmljUGFyc2VyX18ucmVzb2x2ZUxpZ2F0dXJlcz1mdW5jdGlvbih0KXt2YXIgZT0wLG49YSxyPTAsaT1cIlwiLG89MDtmb3IoZT0wO2U8dC5sZW5ndGg7ZSs9MSl2b2lkIDAhPT1uW3QuY2hhckNvZGVBdChlKV0/KG8rKyxcIm51bWJlclwiPT10eXBlb2Yobj1uW3QuY2hhckNvZGVBdChlKV0pJiYocj0tMSE9PShyPWYodC5jaGFyQXQoZSksdC5jaGFyQXQoZS1vKSx0LmNoYXJBdChlKzEpKSk/cjowLGkrPVN0cmluZy5mcm9tQ2hhckNvZGUobiksbj1hLG89MCksZT09PXQubGVuZ3RoLTEmJihuPWEsaSs9dC5jaGFyQXQoZS0oby0xKSksZS09by0xLG89MCkpOihuPWEsaSs9dC5jaGFyQXQoZS1vKSxlLT1vLG89MCk7cmV0dXJuIGl9LGY9KHQuX19hcmFiaWNQYXJzZXJfXy5pc0FyYWJpY0RpYWNyaXRpYz1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwIT09dCYmdm9pZCAwIT09ZVt0LmNoYXJDb2RlQXQoMCldfSx0Ll9fYXJhYmljUGFyc2VyX18uZ2V0Q29ycmVjdEZvcm09ZnVuY3Rpb24odCxlLG4pe3JldHVybiB1KHQpPyExPT09cih0KT8tMTohcyh0KXx8IXUoZSkmJiF1KG4pfHwhdShuKSYmaShlKXx8aSh0KSYmIXUoZSl8fGkodCkmJm8oZSl8fGkodCkmJmkoZSk/MDpsKHQpJiZ1KGUpJiYhaShlKSYmdShuKSYmcyhuKT8zOmkodCl8fCF1KG4pPzE6MjotMX0pLHA9dC5fX2FyYWJpY1BhcnNlcl9fLnByb2Nlc3NBcmFiaWM9dC5wcm9jZXNzQXJhYmljPWZ1bmN0aW9uKHQpe3ZhciBlPTAsbj0wLHI9MCxpPVwiXCIsbz1cIlwiLGE9XCJcIixzPSh0PXR8fFwiXCIpLnNwbGl0KFwiXFxcXHMrXCIpLGw9W107Zm9yKGU9MDtlPHMubGVuZ3RoO2UrPTEpe2ZvcihsLnB1c2goXCJcIiksbj0wO248c1tlXS5sZW5ndGg7bis9MSlpPXNbZV1bbl0sbz1zW2VdW24tMV0sYT1zW2VdW24rMV0sdShpKT8ocj1mKGksbyxhKSxsW2VdKz0tMSE9PXI/U3RyaW5nLmZyb21DaGFyQ29kZShoW2kuY2hhckNvZGVBdCgwKV1bcl0pOmkpOmxbZV0rPWk7bFtlXT1jKGxbZV0pfXJldHVybiBsLmpvaW4oXCIgXCIpfTt0LmV2ZW50cy5wdXNoKFtcInByZVByb2Nlc3NUZXh0XCIsZnVuY3Rpb24odCl7dmFyIGU9dC50ZXh0LG49KHQueCx0LnksdC5vcHRpb25zfHx7fSkscj0odC5tdXRleCxuLmxhbmcsW10pO2lmKFwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSl7dmFyIGk9MDtmb3Iocj1bXSxpPTA7aTxlLmxlbmd0aDtpKz0xKVwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlW2ldKT9yLnB1c2goW3AoZVtpXVswXSksZVtpXVsxXSxlW2ldWzJdXSk6ci5wdXNoKFtwKGVbaV0pXSk7dC50ZXh0PXJ9ZWxzZSB0LnRleHQ9cChlKX1dKX0obHQuQVBJKSxsdC5BUEkuYXV0b1ByaW50PWZ1bmN0aW9uKHQpe3ZhciBlO3N3aXRjaCgodD10fHx7fSkudmFyaWFudD10LnZhcmlhbnR8fFwibm9uLWNvbmZvcm1cIix0LnZhcmlhbnQpe2Nhc2VcImphdmFzY3JpcHRcIjp0aGlzLmFkZEpTKFwicHJpbnQoe30pO1wiKTticmVhaztjYXNlXCJub24tY29uZm9ybVwiOmRlZmF1bHQ6dGhpcy5pbnRlcm5hbC5ldmVudHMuc3Vic2NyaWJlKFwicG9zdFB1dFJlc291cmNlc1wiLGZ1bmN0aW9uKCl7ZT10aGlzLmludGVybmFsLm5ld09iamVjdCgpLHRoaXMuaW50ZXJuYWwub3V0KFwiPDxcIiksdGhpcy5pbnRlcm5hbC5vdXQoXCIvUyAvTmFtZWRcIiksdGhpcy5pbnRlcm5hbC5vdXQoXCIvVHlwZSAvQWN0aW9uXCIpLHRoaXMuaW50ZXJuYWwub3V0KFwiL04gL1ByaW50XCIpLHRoaXMuaW50ZXJuYWwub3V0KFwiPj5cIiksdGhpcy5pbnRlcm5hbC5vdXQoXCJlbmRvYmpcIil9KSx0aGlzLmludGVybmFsLmV2ZW50cy5zdWJzY3JpYmUoXCJwdXRDYXRhbG9nXCIsZnVuY3Rpb24oKXt0aGlzLmludGVybmFsLm91dChcIi9PcGVuQWN0aW9uIFwiK2UrXCIgMCBSXCIpfSl9cmV0dXJuIHRoaXN9LFxyXG4vKipcclxuICAgKiBAbGljZW5zZVxyXG4gICAqIENvcHlyaWdodCAoYykgMjAxNCBTdGV2ZW4gU3B1bmdpbiAoVHdlbHZlVG9uZSBMTEMpICBzdGV2ZW5AdHdlbHZldG9uZS50dlxyXG4gICAqXHJcbiAgICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gICAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxyXG4gICAqL1xyXG5lPWx0LkFQSSwobj1mdW5jdGlvbigpe3ZhciBlPXZvaWQgMDtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInBkZlwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZX0sc2V0OmZ1bmN0aW9uKHQpe2U9dH19KTt2YXIgbj0xNTA7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJ3aWR0aFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sc2V0OmZ1bmN0aW9uKHQpe249aXNOYU4odCl8fCExPT09TnVtYmVyLmlzSW50ZWdlcih0KXx8dDwwPzE1MDp0LHRoaXMuZ2V0Q29udGV4dChcIjJkXCIpLnBhZ2VXcmFwWEVuYWJsZWQmJih0aGlzLmdldENvbnRleHQoXCIyZFwiKS5wYWdlV3JhcFg9bisxKX19KTt2YXIgcj0zMDA7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJoZWlnaHRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHJ9LHNldDpmdW5jdGlvbih0KXtyPWlzTmFOKHQpfHwhMT09PU51bWJlci5pc0ludGVnZXIodCl8fHQ8MD8zMDA6dCx0aGlzLmdldENvbnRleHQoXCIyZFwiKS5wYWdlV3JhcFlFbmFibGVkJiYodGhpcy5nZXRDb250ZXh0KFwiMmRcIikucGFnZVdyYXBZPXIrMSl9fSk7dmFyIGk9W107T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJjaGlsZE5vZGVzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBpfSxzZXQ6ZnVuY3Rpb24odCl7aT10fX0pO3ZhciBvPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwic3R5bGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG99LHNldDpmdW5jdGlvbih0KXtvPXR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJwYXJlbnROb2RlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiExfX0pfSkucHJvdG90eXBlLmdldENvbnRleHQ9ZnVuY3Rpb24odCxlKXt2YXIgbjtpZihcIjJkXCIhPT0odD10fHxcIjJkXCIpKXJldHVybiBudWxsO2ZvcihuIGluIGUpdGhpcy5wZGYuY29udGV4dDJkLmhhc093blByb3BlcnR5KG4pJiYodGhpcy5wZGYuY29udGV4dDJkW25dPWVbbl0pO3JldHVybih0aGlzLnBkZi5jb250ZXh0MmQuX2NhbnZhcz10aGlzKS5wZGYuY29udGV4dDJkfSxuLnByb3RvdHlwZS50b0RhdGFVUkw9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJ0b0RhdGFVUkwgaXMgbm90IGltcGxlbWVudGVkLlwiKX0sZS5ldmVudHMucHVzaChbXCJpbml0aWFsaXplZFwiLGZ1bmN0aW9uKCl7dGhpcy5jYW52YXM9bmV3IG4sdGhpcy5jYW52YXMucGRmPXRoaXN9XSksXHJcbi8qKiBcclxuICAgKiBAbGljZW5zZVxyXG4gICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICogQ29weXJpZ2h0IChjKSAyMDEzIFlvdXNzZWYgQmVkZGFkLCB5b3Vzc2VmLmJlZGRhZEBnbWFpbC5jb21cclxuICAgKiAgICAgICAgICAgICAgIDIwMTMgRWR1YXJkbyBNZW5lemVzIGRlIE1vcmFpcywgZWR1YXJkby5tb3JhaXNAdXNwLmJyXHJcbiAgICogICAgICAgICAgICAgICAyMDEzIExlZSBEcmlzY29sbCwgaHR0cHM6Ly9naXRodWIuY29tL2xzZHJpc2NvbGxcclxuICAgKiAgICAgICAgICAgICAgIDIwMTQgSnVhbiBQYWJsbyBHYXZpcmlhLCBodHRwczovL2dpdGh1Yi5jb20vanVhbnBnYXZpcmlhXHJcbiAgICogICAgICAgICAgICAgICAyMDE0IEphbWVzIEhhbGwsIGphbWVzQHBhcmFsbC5heFxyXG4gICAqICAgICAgICAgICAgICAgMjAxNCBEaWVnbyBDYXNvcnJhbiwgaHR0cHM6Ly9naXRodWIuY29tL2RpZWdvY3JcclxuICAgKlxyXG4gICAqIFxyXG4gICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICovXHJcbl89bHQuQVBJLEY9e3g6dm9pZCAwLHk6dm9pZCAwLHc6dm9pZCAwLGg6dm9pZCAwLGxuOnZvaWQgMH0sUD0xLHA9ZnVuY3Rpb24odCxlLG4scixpKXtGPXt4OnQseTplLHc6bixoOnIsbG46aX19LGQ9ZnVuY3Rpb24oKXtyZXR1cm4gRn0saz17bGVmdDowLHRvcDowLGJvdHRvbTowfSxfLnNldEhlYWRlckZ1bmN0aW9uPWZ1bmN0aW9uKHQpe2w9dH0sXy5nZXRUZXh0RGltZW5zaW9ucz1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMudGFibGVfZm9udF9zaXplfHx0aGlzLmludGVybmFsLmdldEZvbnRTaXplKCkscj0odGhpcy5pbnRlcm5hbC5nZXRGb250KCkuZm9udFN0eWxlLChlPWV8fHt9KS5zY2FsZUZhY3Rvcnx8dGhpcy5pbnRlcm5hbC5zY2FsZUZhY3RvciksaT0wLG89MCxhPTA7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpMCE9KGk9dGhpcy5nZXRTdHJpbmdVbml0V2lkdGgodCkqbikmJihvPTEpO2Vsc2V7aWYoXCJbb2JqZWN0IEFycmF5XVwiIT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKXRocm93IG5ldyBFcnJvcihcImdldFRleHREaW1lbnNpb25zIGV4cGVjdHMgdGV4dC1wYXJhbWV0ZXIgdG8gYmUgb2YgdHlwZSBTdHJpbmcgb3IgYW4gQXJyYXkgb2YgU3RyaW5ncy5cIik7Zm9yKHZhciBzPTA7czx0Lmxlbmd0aDtzKyspaTwoYT10aGlzLmdldFN0cmluZ1VuaXRXaWR0aCh0W3NdKSpuKSYmKGk9YSk7MCE9PWkmJihvPXQubGVuZ3RoKX1yZXR1cm57dzppLz1yLGg6TWF0aC5tYXgoKG8qbip0aGlzLmdldExpbmVIZWlnaHRGYWN0b3IoKS1uKih0aGlzLmdldExpbmVIZWlnaHRGYWN0b3IoKS0xKSkvciwwKX19LF8uY2VsbEFkZFBhZ2U9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm1hcmdpbnN8fGs7dGhpcy5hZGRQYWdlKCkscCh0LmxlZnQsdC50b3Asdm9pZCAwLHZvaWQgMCksUCs9MX0sXy5jZWxsSW5pdGlhbGl6ZT1mdW5jdGlvbigpe0Y9e3g6dm9pZCAwLHk6dm9pZCAwLHc6dm9pZCAwLGg6dm9pZCAwLGxuOnZvaWQgMH0sUD0xfSxfLmNlbGw9ZnVuY3Rpb24odCxlLG4scixpLG8sYSl7dmFyIHM9ZCgpLGw9ITE7aWYodm9pZCAwIT09cy5sbilpZihzLmxuPT09byl0PXMueCtzLncsZT1zLnk7ZWxzZXt2YXIgaD10aGlzLm1hcmdpbnN8fGs7cy55K3MuaCtyKzEzPj10aGlzLmludGVybmFsLnBhZ2VTaXplLmdldEhlaWdodCgpLWguYm90dG9tJiYodGhpcy5jZWxsQWRkUGFnZSgpLGw9ITAsdGhpcy5wcmludEhlYWRlcnMmJnRoaXMudGFibGVIZWFkZXJSb3cmJnRoaXMucHJpbnRIZWFkZXJSb3cobywhMCkpLGU9ZCgpLnkrZCgpLmgsbCYmKGU9MjMpfWlmKHZvaWQgMCE9PWlbMF0paWYodGhpcy5wcmludGluZ0hlYWRlclJvdz90aGlzLnJlY3QodCxlLG4scixcIkZEXCIpOnRoaXMucmVjdCh0LGUsbixyKSxcInJpZ2h0XCI9PT1hKXtpIGluc3RhbmNlb2YgQXJyYXl8fChpPVtpXSk7Zm9yKHZhciB1PTA7dTxpLmxlbmd0aDt1Kyspe3ZhciBjPWlbdV0sZj10aGlzLmdldFN0cmluZ1VuaXRXaWR0aChjKSp0aGlzLmludGVybmFsLmdldEZvbnRTaXplKCkvdGhpcy5pbnRlcm5hbC5zY2FsZUZhY3Rvcjt0aGlzLnRleHQoYyx0K24tZi0zLGUrdGhpcy5pbnRlcm5hbC5nZXRMaW5lSGVpZ2h0KCkqKHUrMSkpfX1lbHNlIHRoaXMudGV4dChpLHQrMyxlK3RoaXMuaW50ZXJuYWwuZ2V0TGluZUhlaWdodCgpKTtyZXR1cm4gcCh0LGUsbixyLG8pLHRoaXN9LF8uYXJyYXlNYXg9ZnVuY3Rpb24odCxlKXt2YXIgbixyLGksbz10WzBdO2ZvcihuPTAscj10Lmxlbmd0aDtuPHI7bis9MSlpPXRbbl0sZT8tMT09PWUobyxpKSYmKG89aSk6bzxpJiYobz1pKTtyZXR1cm4gb30sXy50YWJsZT1mdW5jdGlvbih0LGUsbixyLGkpe2lmKCFuKXRocm93XCJObyBkYXRhIGZvciBQREYgdGFibGVcIjt2YXIgbyxhLHMsbCxoLHUsYyxmLHAsZCxnPVtdLG09W10seT17fSx2PXt9LHc9W10sYj1bXSx4PSExLE49ITAsTD0xMixBPWs7aWYoQS53aWR0aD10aGlzLmludGVybmFsLnBhZ2VTaXplLmdldFdpZHRoKCksaSYmKCEwPT09aS5hdXRvU2l6ZSYmKHg9ITApLCExPT09aS5wcmludEhlYWRlcnMmJihOPSExKSxpLmZvbnRTaXplJiYoTD1pLmZvbnRTaXplKSxpLmNzcyYmdm9pZCAwIT09aS5jc3NbXCJmb250LXNpemVcIl0mJihMPTE2KmkuY3NzW1wiZm9udC1zaXplXCJdKSxpLm1hcmdpbnMmJihBPWkubWFyZ2lucykpLHRoaXMubG5Nb2Q9MCxGPXt4OnZvaWQgMCx5OnZvaWQgMCx3OnZvaWQgMCxoOnZvaWQgMCxsbjp2b2lkIDB9LFA9MSx0aGlzLnByaW50SGVhZGVycz1OLHRoaXMubWFyZ2lucz1BLHRoaXMuc2V0Rm9udFNpemUoTCksdGhpcy50YWJsZV9mb250X3NpemU9TCxudWxsPT1yKWc9T2JqZWN0LmtleXMoblswXSk7ZWxzZSBpZihyWzBdJiZcInN0cmluZ1wiIT10eXBlb2YgclswXSlmb3IoYT0wLHM9ci5sZW5ndGg7YTxzO2ErPTEpbz1yW2FdLGcucHVzaChvLm5hbWUpLG0ucHVzaChvLnByb21wdCksdltvLm5hbWVdPW8ud2lkdGgqKDE5LjA0OTk3Ni8yNS40KTtlbHNlIGc9cjtpZih4KWZvcihkPWZ1bmN0aW9uKHQpe3JldHVybiB0W29dfSxhPTAscz1nLmxlbmd0aDthPHM7YSs9MSl7Zm9yKHlbbz1nW2FdXT1uLm1hcChkKSx3LnB1c2godGhpcy5nZXRUZXh0RGltZW5zaW9ucyhtW2FdfHxvLHtzY2FsZUZhY3RvcjoxfSkudyksYz0wLGw9KHU9eVtvXSkubGVuZ3RoO2M8bDtjKz0xKWg9dVtjXSx3LnB1c2godGhpcy5nZXRUZXh0RGltZW5zaW9ucyhoLHtzY2FsZUZhY3RvcjoxfSkudyk7dltvXT1fLmFycmF5TWF4KHcpLHc9W119aWYoTil7dmFyIFM9dGhpcy5jYWxjdWxhdGVMaW5lSGVpZ2h0KGcsdixtLmxlbmd0aD9tOmcpO2ZvcihhPTAscz1nLmxlbmd0aDthPHM7YSs9MSlvPWdbYV0sYi5wdXNoKFt0LGUsdltvXSxTLFN0cmluZyhtLmxlbmd0aD9tW2FdOm8pXSk7dGhpcy5zZXRUYWJsZUhlYWRlclJvdyhiKSx0aGlzLnByaW50SGVhZGVyUm93KDEsITEpfWZvcihhPTAscz1uLmxlbmd0aDthPHM7YSs9MSlmb3IoZj1uW2FdLFM9dGhpcy5jYWxjdWxhdGVMaW5lSGVpZ2h0KGcsdixmKSxjPTAscD1nLmxlbmd0aDtjPHA7Yys9MSlvPWdbY10sdGhpcy5jZWxsKHQsZSx2W29dLFMsZltvXSxhKzIsby5hbGlnbik7cmV0dXJuIHRoaXMubGFzdENlbGxQb3M9Rix0aGlzLnRhYmxlX3g9dCx0aGlzLnRhYmxlX3k9ZSx0aGlzfSxfLmNhbGN1bGF0ZUxpbmVIZWlnaHQ9ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgcixpPTAsbz0wO288dC5sZW5ndGg7bysrKXtuW3I9dFtvXV09dGhpcy5zcGxpdFRleHRUb1NpemUoU3RyaW5nKG5bcl0pLGVbcl0tMyk7dmFyIGE9dGhpcy5pbnRlcm5hbC5nZXRMaW5lSGVpZ2h0KCkqbltyXS5sZW5ndGgrMztpPGEmJihpPWEpfXJldHVybiBpfSxfLnNldFRhYmxlSGVhZGVyUm93PWZ1bmN0aW9uKHQpe3RoaXMudGFibGVIZWFkZXJSb3c9dH0sXy5wcmludEhlYWRlclJvdz1mdW5jdGlvbih0LGUpe2lmKCF0aGlzLnRhYmxlSGVhZGVyUm93KXRocm93XCJQcm9wZXJ0eSB0YWJsZUhlYWRlclJvdyBkb2VzIG5vdCBleGlzdC5cIjt2YXIgbixyLGksbztpZih0aGlzLnByaW50aW5nSGVhZGVyUm93PSEwLHZvaWQgMCE9PWwpe3ZhciBhPWwodGhpcyxQKTtwKGFbMF0sYVsxXSxhWzJdLGFbM10sLTEpfXRoaXMuc2V0Rm9udFN0eWxlKFwiYm9sZFwiKTt2YXIgcz1bXTtmb3IoaT0wLG89dGhpcy50YWJsZUhlYWRlclJvdy5sZW5ndGg7aTxvO2krPTEpdGhpcy5zZXRGaWxsQ29sb3IoMjAwLDIwMCwyMDApLG49dGhpcy50YWJsZUhlYWRlclJvd1tpXSxlJiYodGhpcy5tYXJnaW5zLnRvcD0xMyxuWzFdPXRoaXMubWFyZ2lucyYmdGhpcy5tYXJnaW5zLnRvcHx8MCxzLnB1c2gobikpLHI9W10uY29uY2F0KG4pLHRoaXMuY2VsbC5hcHBseSh0aGlzLHIuY29uY2F0KHQpKTswPHMubGVuZ3RoJiZ0aGlzLnNldFRhYmxlSGVhZGVyUm93KHMpLHRoaXMuc2V0Rm9udFN0eWxlKFwibm9ybWFsXCIpLHRoaXMucHJpbnRpbmdIZWFkZXJSb3c9ITF9LFxyXG4vKipcclxuICAgKiBqc1BERiBDb250ZXh0MkQgUGx1Z0luIENvcHlyaWdodCAoYykgMjAxNCBTdGV2ZW4gU3B1bmdpbiAoVHdlbHZlVG9uZSBMTEMpIHN0ZXZlbkB0d2VsdmV0b25lLnR2XHJcbiAgICpcclxuICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxyXG4gICAqL1xyXG5mdW5jdGlvbih0LGUpe3ZhciBsLGksbyxoLHUsYz1mdW5jdGlvbih0KXtyZXR1cm4gdD10fHx7fSx0aGlzLmlzU3Ryb2tlVHJhbnNwYXJlbnQ9dC5pc1N0cm9rZVRyYW5zcGFyZW50fHwhMSx0aGlzLnN0cm9rZU9wYWNpdHk9dC5zdHJva2VPcGFjaXR5fHwxLHRoaXMuc3Ryb2tlU3R5bGU9dC5zdHJva2VTdHlsZXx8XCIjMDAwMDAwXCIsdGhpcy5maWxsU3R5bGU9dC5maWxsU3R5bGV8fFwiIzAwMDAwMFwiLHRoaXMuaXNGaWxsVHJhbnNwYXJlbnQ9dC5pc0ZpbGxUcmFuc3BhcmVudHx8ITEsdGhpcy5maWxsT3BhY2l0eT10LmZpbGxPcGFjaXR5fHwxLHRoaXMuZm9udD10LmZvbnR8fFwiMTBweCBzYW5zLXNlcmlmXCIsdGhpcy50ZXh0QmFzZWxpbmU9dC50ZXh0QmFzZWxpbmV8fFwiYWxwaGFiZXRpY1wiLHRoaXMudGV4dEFsaWduPXQudGV4dEFsaWdufHxcImxlZnRcIix0aGlzLmxpbmVXaWR0aD10LmxpbmVXaWR0aHx8MSx0aGlzLmxpbmVKb2luPXQubGluZUpvaW58fFwibWl0ZXJcIix0aGlzLmxpbmVDYXA9dC5saW5lQ2FwfHxcImJ1dHRcIix0aGlzLnBhdGg9dC5wYXRofHxbXSx0aGlzLnRyYW5zZm9ybT12b2lkIDAhPT10LnRyYW5zZm9ybT90LnRyYW5zZm9ybS5jbG9uZSgpOm5ldyBNLHRoaXMuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uPXQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9ufHxcIm5vcm1hbFwiLHRoaXMuZ2xvYmFsQWxwaGE9dC5nbG9iYWxBbHBoYXx8MSx0aGlzLmNsaXBfcGF0aD10LmNsaXBfcGF0aHx8W10sdGhpcy5jdXJyZW50UG9pbnQ9dC5jdXJyZW50UG9pbnR8fG5ldyBqLHRoaXMubWl0ZXJMaW1pdD10Lm1pdGVyTGltaXR8fDEwLHRoaXMubGFzdFBvaW50PXQubGFzdFBvaW50fHxuZXcgaix0aGlzLmlnbm9yZUNsZWFyUmVjdD1cImJvb2xlYW5cIiE9dHlwZW9mIHQuaWdub3JlQ2xlYXJSZWN0fHx0Lmlnbm9yZUNsZWFyUmVjdCx0aGlzfTt0LmV2ZW50cy5wdXNoKFtcImluaXRpYWxpemVkXCIsZnVuY3Rpb24oKXt0aGlzLmNvbnRleHQyZD1uZXcgbih0aGlzKSxsPXRoaXMuaW50ZXJuYWwuZjIsdGhpcy5pbnRlcm5hbC5mMyxpPXRoaXMuaW50ZXJuYWwuZ2V0Q29vcmRpbmF0ZVN0cmluZyxvPXRoaXMuaW50ZXJuYWwuZ2V0VmVydGljYWxDb29yZGluYXRlU3RyaW5nLGg9dGhpcy5pbnRlcm5hbC5nZXRIb3Jpem9udGFsQ29vcmRpbmF0ZSx1PXRoaXMuaW50ZXJuYWwuZ2V0VmVydGljYWxDb29yZGluYXRlfV0pO3ZhciBuPWZ1bmN0aW9uKHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiY2FudmFzXCIse2dldDpmdW5jdGlvbigpe3JldHVybntwYXJlbnROb2RlOiExLHN0eWxlOiExfX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInBkZlwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdH19KTt2YXIgZT0hMTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInBhZ2VXcmFwWEVuYWJsZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGV9LHNldDpmdW5jdGlvbih0KXtlPUJvb2xlYW4odCl9fSk7dmFyIG49ITE7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJwYWdlV3JhcFlFbmFibGVkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBufSxzZXQ6ZnVuY3Rpb24odCl7bj1Cb29sZWFuKHQpfX0pO3ZhciByPTA7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJwb3NYXCIse2dldDpmdW5jdGlvbigpe3JldHVybiByfSxzZXQ6ZnVuY3Rpb24odCl7aXNOYU4odCl8fChyPXQpfX0pO3ZhciBpPTA7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJwb3NZXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBpfSxzZXQ6ZnVuY3Rpb24odCl7aXNOYU4odCl8fChpPXQpfX0pO3ZhciBvPSExO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiYXV0b1BhZ2luZ1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gb30sc2V0OmZ1bmN0aW9uKHQpe289Qm9vbGVhbih0KX19KTt2YXIgYT0wO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwibGFzdEJyZWFrXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBhfSxzZXQ6ZnVuY3Rpb24odCl7YT10fX0pO3ZhciBzPVtdO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicGFnZUJyZWFrc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gc30sc2V0OmZ1bmN0aW9uKHQpe3M9dH19KTt2YXIgbD1uZXcgYztPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImN0eFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbH0sc2V0OmZ1bmN0aW9uKHQpe3QgaW5zdGFuY2VvZiBjJiYobD10KX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInBhdGhcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGwucGF0aH0sc2V0OmZ1bmN0aW9uKHQpe2wucGF0aD10fX0pO3ZhciBoPVtdO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiY3R4U3RhY2tcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGh9LHNldDpmdW5jdGlvbih0KXtoPXR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJmaWxsU3R5bGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3R4LmZpbGxTdHlsZX0sc2V0OmZ1bmN0aW9uKHQpe3ZhciBlO2U9Zih0KSx0aGlzLmN0eC5maWxsU3R5bGU9ZS5zdHlsZSx0aGlzLmN0eC5pc0ZpbGxUcmFuc3BhcmVudD0wPT09ZS5hLHRoaXMuY3R4LmZpbGxPcGFjaXR5PWUuYSx0aGlzLnBkZi5zZXRGaWxsQ29sb3IoZS5yLGUuZyxlLmIse2E6ZS5hfSksdGhpcy5wZGYuc2V0VGV4dENvbG9yKGUucixlLmcsZS5iLHthOmUuYX0pfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwic3Ryb2tlU3R5bGVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3R4LnN0cm9rZVN0eWxlfSxzZXQ6ZnVuY3Rpb24odCl7dmFyIGU9Zih0KTt0aGlzLmN0eC5zdHJva2VTdHlsZT1lLnN0eWxlLHRoaXMuY3R4LmlzU3Ryb2tlVHJhbnNwYXJlbnQ9MD09PWUuYSx0aGlzLmN0eC5zdHJva2VPcGFjaXR5PWUuYSwwPT09ZS5hP3RoaXMucGRmLnNldERyYXdDb2xvcigyNTUsMjU1LDI1NSk6KGUuYSx0aGlzLnBkZi5zZXREcmF3Q29sb3IoZS5yLGUuZyxlLmIpKX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImxpbmVDYXBcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3R4LmxpbmVDYXB9LHNldDpmdW5jdGlvbih0KXstMSE9PVtcImJ1dHRcIixcInJvdW5kXCIsXCJzcXVhcmVcIl0uaW5kZXhPZih0KSYmKHRoaXMuY3R4LmxpbmVDYXA9dCx0aGlzLnBkZi5zZXRMaW5lQ2FwKHQpKX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImxpbmVXaWR0aFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdHgubGluZVdpZHRofSxzZXQ6ZnVuY3Rpb24odCl7aXNOYU4odCl8fCh0aGlzLmN0eC5saW5lV2lkdGg9dCx0aGlzLnBkZi5zZXRMaW5lV2lkdGgodCkpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwibGluZUpvaW5cIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3R4LmxpbmVKb2lufSxzZXQ6ZnVuY3Rpb24odCl7LTEhPT1bXCJiZXZlbFwiLFwicm91bmRcIixcIm1pdGVyXCJdLmluZGV4T2YodCkmJih0aGlzLmN0eC5saW5lSm9pbj10LHRoaXMucGRmLnNldExpbmVKb2luKHQpKX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIm1pdGVyTGltaXRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3R4Lm1pdGVyTGltaXR9LHNldDpmdW5jdGlvbih0KXtpc05hTih0KXx8KHRoaXMuY3R4Lm1pdGVyTGltaXQ9dCx0aGlzLnBkZi5zZXRNaXRlckxpbWl0KHQpKX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInRleHRCYXNlbGluZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdHgudGV4dEJhc2VsaW5lfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5jdHgudGV4dEJhc2VsaW5lPXR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJ0ZXh0QWxpZ25cIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3R4LnRleHRBbGlnbn0sc2V0OmZ1bmN0aW9uKHQpey0xIT09W1wicmlnaHRcIixcImVuZFwiLFwiY2VudGVyXCIsXCJsZWZ0XCIsXCJzdGFydFwiXS5pbmRleE9mKHQpJiYodGhpcy5jdHgudGV4dEFsaWduPXQpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiZm9udFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdHguZm9udH0sc2V0OmZ1bmN0aW9uKHQpe3ZhciBlO2lmKHRoaXMuY3R4LmZvbnQ9dCxudWxsIT09KGU9L15cXHMqKD89KD86KD86Wy1hLXpdK1xccyopezAsMn0oaXRhbGljfG9ibGlxdWUpKT8pKD89KD86KD86Wy1hLXpdK1xccyopezAsMn0oc21hbGwtY2FwcykpPykoPz0oPzooPzpbLWEtel0rXFxzKil7MCwyfShib2xkKD86ZXIpP3xsaWdodGVyfFsxLTldMDApKT8pKD86KD86bm9ybWFsfFxcMXxcXDJ8XFwzKVxccyopezAsM30oKD86eHg/LSk/KD86c21hbGx8bGFyZ2UpfG1lZGl1bXxzbWFsbGVyfGxhcmdlcnxbLlxcZF0rKD86XFwlfGlufFtjZW1dbXxleHxwW2N0eF0pKSg/OlxccypcXC9cXHMqKG5vcm1hbHxbLlxcZF0rKD86XFwlfGlufFtjZW1dbXxleHxwW2N0eF0pKSk/XFxzKihbLV8sXFxcIlxcJ1xcc2Etel0rPylcXHMqJC9pLmV4ZWModCkpKXt2YXIgbj1lWzFdLHI9KGVbMl0sZVszXSksaT1lWzRdLG89ZVs1XSxhPWVbNl07aT1cInB4XCI9PT1vP01hdGguZmxvb3IocGFyc2VGbG9hdChpKSk6XCJlbVwiPT09bz9NYXRoLmZsb29yKHBhcnNlRmxvYXQoaSkqdGhpcy5wZGYuZ2V0Rm9udFNpemUoKSk6TWF0aC5mbG9vcihwYXJzZUZsb2F0KGkpKSx0aGlzLnBkZi5zZXRGb250U2l6ZShpKTt2YXIgcz1cIlwiOyhcImJvbGRcIj09PXJ8fDcwMDw9cGFyc2VJbnQociwxMCl8fFwiYm9sZFwiPT09bikmJihzPVwiYm9sZFwiKSxcIml0YWxpY1wiPT09biYmKHMrPVwiaXRhbGljXCIpLDA9PT1zLmxlbmd0aCYmKHM9XCJub3JtYWxcIik7Zm9yKHZhciBsPVwiXCIsaD1hLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXCJ8Jy9nLFwiXCIpLnNwbGl0KC9cXHMqLFxccyovKSx1PXthcmlhbDpcIkhlbHZldGljYVwiLHZlcmRhbmE6XCJIZWx2ZXRpY2FcIixoZWx2ZXRpY2E6XCJIZWx2ZXRpY2FcIixcInNhbnMtc2VyaWZcIjpcIkhlbHZldGljYVwiLGZpeGVkOlwiQ291cmllclwiLG1vbm9zcGFjZTpcIkNvdXJpZXJcIix0ZXJtaW5hbDpcIkNvdXJpZXJcIixjb3VyaWVyOlwiQ291cmllclwiLHRpbWVzOlwiVGltZXNcIixjdXJzaXZlOlwiVGltZXNcIixmYW50YXN5OlwiVGltZXNcIixzZXJpZjpcIlRpbWVzXCJ9LGM9MDtjPGgubGVuZ3RoO2MrKyl7aWYodm9pZCAwIT09dGhpcy5wZGYuaW50ZXJuYWwuZ2V0Rm9udChoW2NdLHMse25vRmFsbGJhY2s6ITAsZGlzYWJsZVdhcm5pbmc6ITB9KSl7bD1oW2NdO2JyZWFrfWlmKFwiYm9sZGl0YWxpY1wiPT09cyYmdm9pZCAwIT09dGhpcy5wZGYuaW50ZXJuYWwuZ2V0Rm9udChoW2NdLFwiYm9sZFwiLHtub0ZhbGxiYWNrOiEwLGRpc2FibGVXYXJuaW5nOiEwfSkpbD1oW2NdLHM9XCJib2xkXCI7ZWxzZSBpZih2b2lkIDAhPT10aGlzLnBkZi5pbnRlcm5hbC5nZXRGb250KGhbY10sXCJub3JtYWxcIix7bm9GYWxsYmFjazohMCxkaXNhYmxlV2FybmluZzohMH0pKXtsPWhbY10scz1cIm5vcm1hbFwiO2JyZWFrfX1pZihcIlwiPT09bClmb3IoYz0wO2M8aC5sZW5ndGg7YysrKWlmKHVbaFtjXV0pe2w9dVtoW2NdXTticmVha31sPVwiXCI9PT1sP1wiVGltZXNcIjpsLHRoaXMucGRmLnNldEZvbnQobCxzKX19fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJnbG9iYWxDb21wb3NpdGVPcGVyYXRpb25cIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbn0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbj10fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiZ2xvYmFsQWxwaGFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3R4Lmdsb2JhbEFscGhhfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5jdHguZ2xvYmFsQWxwaGE9dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImlnbm9yZUNsZWFyUmVjdFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdHguaWdub3JlQ2xlYXJSZWN0fSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5jdHguaWdub3JlQ2xlYXJSZWN0PUJvb2xlYW4odCl9fSl9O24ucHJvdG90eXBlLmZpbGw9ZnVuY3Rpb24oKXtyLmNhbGwodGhpcyxcImZpbGxcIiwhMSl9LG4ucHJvdG90eXBlLnN0cm9rZT1mdW5jdGlvbigpe3IuY2FsbCh0aGlzLFwic3Ryb2tlXCIsITEpfSxuLnByb3RvdHlwZS5iZWdpblBhdGg9ZnVuY3Rpb24oKXt0aGlzLnBhdGg9W3t0eXBlOlwiYmVnaW5cIn1dfSxuLnByb3RvdHlwZS5tb3ZlVG89ZnVuY3Rpb24odCxlKXtpZihpc05hTih0KXx8aXNOYU4oZSkpdGhyb3cgY29uc29sZS5lcnJvcihcImpzUERGLmNvbnRleHQyZC5tb3ZlVG86IEludmFsaWQgYXJndW1lbnRzXCIsYXJndW1lbnRzKSxuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYuY29udGV4dDJkLm1vdmVUb1wiKTt2YXIgbj10aGlzLmN0eC50cmFuc2Zvcm0uYXBwbHlUb1BvaW50KG5ldyBqKHQsZSkpO3RoaXMucGF0aC5wdXNoKHt0eXBlOlwibXRcIix4Om4ueCx5Om4ueX0pLHRoaXMuY3R4Lmxhc3RQb2ludD1uZXcgaih0LGUpfSxuLnByb3RvdHlwZS5jbG9zZVBhdGg9ZnVuY3Rpb24oKXt2YXIgdD1uZXcgaigwLDApLGU9MDtmb3IoZT10aGlzLnBhdGgubGVuZ3RoLTE7LTEhPT1lO2UtLSlpZihcImJlZ2luXCI9PT10aGlzLnBhdGhbZV0udHlwZSYmXCJvYmplY3RcIj09PXNlKHRoaXMucGF0aFtlKzFdKSYmXCJudW1iZXJcIj09dHlwZW9mIHRoaXMucGF0aFtlKzFdLngpe3Q9bmV3IGoodGhpcy5wYXRoW2UrMV0ueCx0aGlzLnBhdGhbZSsxXS55KSx0aGlzLnBhdGgucHVzaCh7dHlwZTpcImx0XCIseDp0LngseTp0Lnl9KTticmVha31cIm9iamVjdFwiPT09c2UodGhpcy5wYXRoW2UrMl0pJiZcIm51bWJlclwiPT10eXBlb2YgdGhpcy5wYXRoW2UrMl0ueCYmdGhpcy5wYXRoLnB1c2goSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnBhdGhbZSsyXSkpKSx0aGlzLnBhdGgucHVzaCh7dHlwZTpcImNsb3NlXCJ9KSx0aGlzLmN0eC5sYXN0UG9pbnQ9bmV3IGoodC54LHQueSl9LG4ucHJvdG90eXBlLmxpbmVUbz1mdW5jdGlvbih0LGUpe2lmKGlzTmFOKHQpfHxpc05hTihlKSl0aHJvdyBjb25zb2xlLmVycm9yKFwianNQREYuY29udGV4dDJkLmxpbmVUbzogSW52YWxpZCBhcmd1bWVudHNcIixhcmd1bWVudHMpLG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5jb250ZXh0MmQubGluZVRvXCIpO3ZhciBuPXRoaXMuY3R4LnRyYW5zZm9ybS5hcHBseVRvUG9pbnQobmV3IGoodCxlKSk7dGhpcy5wYXRoLnB1c2goe3R5cGU6XCJsdFwiLHg6bi54LHk6bi55fSksdGhpcy5jdHgubGFzdFBvaW50PW5ldyBqKG4ueCxuLnkpfSxuLnByb3RvdHlwZS5jbGlwPWZ1bmN0aW9uKCl7dGhpcy5jdHguY2xpcF9wYXRoPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5wYXRoKSksci5jYWxsKHRoaXMsbnVsbCwhMCl9LG4ucHJvdG90eXBlLnF1YWRyYXRpY0N1cnZlVG89ZnVuY3Rpb24odCxlLG4scil7aWYoaXNOYU4obil8fGlzTmFOKHIpfHxpc05hTih0KXx8aXNOYU4oZSkpdGhyb3cgY29uc29sZS5lcnJvcihcImpzUERGLmNvbnRleHQyZC5xdWFkcmF0aWNDdXJ2ZVRvOiBJbnZhbGlkIGFyZ3VtZW50c1wiLGFyZ3VtZW50cyksbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudHMgcGFzc2VkIHRvIGpzUERGLmNvbnRleHQyZC5xdWFkcmF0aWNDdXJ2ZVRvXCIpO3ZhciBpPXRoaXMuY3R4LnRyYW5zZm9ybS5hcHBseVRvUG9pbnQobmV3IGoobixyKSksbz10aGlzLmN0eC50cmFuc2Zvcm0uYXBwbHlUb1BvaW50KG5ldyBqKHQsZSkpO3RoaXMucGF0aC5wdXNoKHt0eXBlOlwicWN0XCIseDE6by54LHkxOm8ueSx4OmkueCx5OmkueX0pLHRoaXMuY3R4Lmxhc3RQb2ludD1uZXcgaihpLngsaS55KX0sbi5wcm90b3R5cGUuYmV6aWVyQ3VydmVUbz1mdW5jdGlvbih0LGUsbixyLGksbyl7aWYoaXNOYU4oaSl8fGlzTmFOKG8pfHxpc05hTih0KXx8aXNOYU4oZSl8fGlzTmFOKG4pfHxpc05hTihyKSl0aHJvdyBjb25zb2xlLmVycm9yKFwianNQREYuY29udGV4dDJkLmJlemllckN1cnZlVG86IEludmFsaWQgYXJndW1lbnRzXCIsYXJndW1lbnRzKSxuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYuY29udGV4dDJkLmJlemllckN1cnZlVG9cIik7dmFyIGE9dGhpcy5jdHgudHJhbnNmb3JtLmFwcGx5VG9Qb2ludChuZXcgaihpLG8pKSxzPXRoaXMuY3R4LnRyYW5zZm9ybS5hcHBseVRvUG9pbnQobmV3IGoodCxlKSksbD10aGlzLmN0eC50cmFuc2Zvcm0uYXBwbHlUb1BvaW50KG5ldyBqKG4scikpO3RoaXMucGF0aC5wdXNoKHt0eXBlOlwiYmN0XCIseDE6cy54LHkxOnMueSx4MjpsLngseTI6bC55LHg6YS54LHk6YS55fSksdGhpcy5jdHgubGFzdFBvaW50PW5ldyBqKGEueCxhLnkpfSxuLnByb3RvdHlwZS5hcmM9ZnVuY3Rpb24odCxlLG4scixpLG8pe2lmKGlzTmFOKHQpfHxpc05hTihlKXx8aXNOYU4obil8fGlzTmFOKHIpfHxpc05hTihpKSl0aHJvdyBjb25zb2xlLmVycm9yKFwianNQREYuY29udGV4dDJkLmFyYzogSW52YWxpZCBhcmd1bWVudHNcIixhcmd1bWVudHMpLG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5jb250ZXh0MmQuYXJjXCIpO2lmKG89Qm9vbGVhbihvKSwhdGhpcy5jdHgudHJhbnNmb3JtLmlzSWRlbnRpdHkpe3ZhciBhPXRoaXMuY3R4LnRyYW5zZm9ybS5hcHBseVRvUG9pbnQobmV3IGoodCxlKSk7dD1hLngsZT1hLnk7dmFyIHM9dGhpcy5jdHgudHJhbnNmb3JtLmFwcGx5VG9Qb2ludChuZXcgaigwLG4pKSxsPXRoaXMuY3R4LnRyYW5zZm9ybS5hcHBseVRvUG9pbnQobmV3IGooMCwwKSk7bj1NYXRoLnNxcnQoTWF0aC5wb3cocy54LWwueCwyKStNYXRoLnBvdyhzLnktbC55LDIpKX1NYXRoLmFicyhpLXIpPj0yKk1hdGguUEkmJihyPTAsaT0yKk1hdGguUEkpLHRoaXMucGF0aC5wdXNoKHt0eXBlOlwiYXJjXCIseDp0LHk6ZSxyYWRpdXM6bixzdGFydEFuZ2xlOnIsZW5kQW5nbGU6aSxjb3VudGVyY2xvY2t3aXNlOm99KX0sbi5wcm90b3R5cGUuYXJjVG89ZnVuY3Rpb24odCxlLG4scixpKXt0aHJvdyBuZXcgRXJyb3IoXCJhcmNUbyBub3QgaW1wbGVtZW50ZWQuXCIpfSxuLnByb3RvdHlwZS5yZWN0PWZ1bmN0aW9uKHQsZSxuLHIpe2lmKGlzTmFOKHQpfHxpc05hTihlKXx8aXNOYU4obil8fGlzTmFOKHIpKXRocm93IGNvbnNvbGUuZXJyb3IoXCJqc1BERi5jb250ZXh0MmQucmVjdDogSW52YWxpZCBhcmd1bWVudHNcIixhcmd1bWVudHMpLG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5jb250ZXh0MmQucmVjdFwiKTt0aGlzLm1vdmVUbyh0LGUpLHRoaXMubGluZVRvKHQrbixlKSx0aGlzLmxpbmVUbyh0K24sZStyKSx0aGlzLmxpbmVUbyh0LGUrciksdGhpcy5saW5lVG8odCxlKSx0aGlzLmxpbmVUbyh0K24sZSksdGhpcy5saW5lVG8odCxlKX0sbi5wcm90b3R5cGUuZmlsbFJlY3Q9ZnVuY3Rpb24odCxlLG4scil7aWYoaXNOYU4odCl8fGlzTmFOKGUpfHxpc05hTihuKXx8aXNOYU4ocikpdGhyb3cgY29uc29sZS5lcnJvcihcImpzUERGLmNvbnRleHQyZC5maWxsUmVjdDogSW52YWxpZCBhcmd1bWVudHNcIixhcmd1bWVudHMpLG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5jb250ZXh0MmQuZmlsbFJlY3RcIik7aWYoIU4uY2FsbCh0aGlzKSl7dmFyIGk9e307XCJidXR0XCIhPT10aGlzLmxpbmVDYXAmJihpLmxpbmVDYXA9dGhpcy5saW5lQ2FwLHRoaXMubGluZUNhcD1cImJ1dHRcIiksXCJtaXRlclwiIT09dGhpcy5saW5lSm9pbiYmKGkubGluZUpvaW49dGhpcy5saW5lSm9pbix0aGlzLmxpbmVKb2luPVwibWl0ZXJcIiksdGhpcy5iZWdpblBhdGgoKSx0aGlzLnJlY3QodCxlLG4sciksdGhpcy5maWxsKCksaS5oYXNPd25Qcm9wZXJ0eShcImxpbmVDYXBcIikmJih0aGlzLmxpbmVDYXA9aS5saW5lQ2FwKSxpLmhhc093blByb3BlcnR5KFwibGluZUpvaW5cIikmJih0aGlzLmxpbmVKb2luPWkubGluZUpvaW4pfX0sbi5wcm90b3R5cGUuc3Ryb2tlUmVjdD1mdW5jdGlvbih0LGUsbixyKXtpZihpc05hTih0KXx8aXNOYU4oZSl8fGlzTmFOKG4pfHxpc05hTihyKSl0aHJvdyBjb25zb2xlLmVycm9yKFwianNQREYuY29udGV4dDJkLnN0cm9rZVJlY3Q6IEludmFsaWQgYXJndW1lbnRzXCIsYXJndW1lbnRzKSxuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYuY29udGV4dDJkLnN0cm9rZVJlY3RcIik7TC5jYWxsKHRoaXMpfHwodGhpcy5iZWdpblBhdGgoKSx0aGlzLnJlY3QodCxlLG4sciksdGhpcy5zdHJva2UoKSl9LG4ucHJvdG90eXBlLmNsZWFyUmVjdD1mdW5jdGlvbih0LGUsbixyKXtpZihpc05hTih0KXx8aXNOYU4oZSl8fGlzTmFOKG4pfHxpc05hTihyKSl0aHJvdyBjb25zb2xlLmVycm9yKFwianNQREYuY29udGV4dDJkLmNsZWFyUmVjdDogSW52YWxpZCBhcmd1bWVudHNcIixhcmd1bWVudHMpLG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5jb250ZXh0MmQuY2xlYXJSZWN0XCIpO3RoaXMuaWdub3JlQ2xlYXJSZWN0fHwodGhpcy5maWxsU3R5bGU9XCIjZmZmZmZmXCIsdGhpcy5maWxsUmVjdCh0LGUsbixyKSl9LG4ucHJvdG90eXBlLnNhdmU9ZnVuY3Rpb24odCl7dD1cImJvb2xlYW5cIiE9dHlwZW9mIHR8fHQ7Zm9yKHZhciBlPXRoaXMucGRmLmludGVybmFsLmdldEN1cnJlbnRQYWdlSW5mbygpLnBhZ2VOdW1iZXIsbj0wO248dGhpcy5wZGYuaW50ZXJuYWwuZ2V0TnVtYmVyT2ZQYWdlcygpO24rKyl0aGlzLnBkZi5zZXRQYWdlKG4rMSksdGhpcy5wZGYuaW50ZXJuYWwub3V0KFwicVwiKTtpZih0aGlzLnBkZi5zZXRQYWdlKGUpLHQpe3RoaXMuY3R4LmZvbnRTaXplPXRoaXMucGRmLmludGVybmFsLmdldEZvbnRTaXplKCk7dmFyIHI9bmV3IGModGhpcy5jdHgpO3RoaXMuY3R4U3RhY2sucHVzaCh0aGlzLmN0eCksdGhpcy5jdHg9cn19LG4ucHJvdG90eXBlLnJlc3RvcmU9ZnVuY3Rpb24odCl7dD1cImJvb2xlYW5cIiE9dHlwZW9mIHR8fHQ7Zm9yKHZhciBlPXRoaXMucGRmLmludGVybmFsLmdldEN1cnJlbnRQYWdlSW5mbygpLnBhZ2VOdW1iZXIsbj0wO248dGhpcy5wZGYuaW50ZXJuYWwuZ2V0TnVtYmVyT2ZQYWdlcygpO24rKyl0aGlzLnBkZi5zZXRQYWdlKG4rMSksdGhpcy5wZGYuaW50ZXJuYWwub3V0KFwiUVwiKTt0aGlzLnBkZi5zZXRQYWdlKGUpLHQmJjAhPT10aGlzLmN0eFN0YWNrLmxlbmd0aCYmKHRoaXMuY3R4PXRoaXMuY3R4U3RhY2sucG9wKCksdGhpcy5maWxsU3R5bGU9dGhpcy5jdHguZmlsbFN0eWxlLHRoaXMuc3Ryb2tlU3R5bGU9dGhpcy5jdHguc3Ryb2tlU3R5bGUsdGhpcy5mb250PXRoaXMuY3R4LmZvbnQsdGhpcy5saW5lQ2FwPXRoaXMuY3R4LmxpbmVDYXAsdGhpcy5saW5lV2lkdGg9dGhpcy5jdHgubGluZVdpZHRoLHRoaXMubGluZUpvaW49dGhpcy5jdHgubGluZUpvaW4pfSxuLnByb3RvdHlwZS50b0RhdGFVUkw9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJ0b0RhdGFVcmwgbm90IGltcGxlbWVudGVkLlwiKX07dmFyIGY9ZnVuY3Rpb24odCl7dmFyIGUsbixyLGk7aWYoITA9PT10LmlzQ2FudmFzR3JhZGllbnQmJih0PXQuZ2V0Q29sb3IoKSksIXQpcmV0dXJue3I6MCxnOjAsYjowLGE6MCxzdHlsZTp0fTtpZigvdHJhbnNwYXJlbnR8cmdiYVxccypcXChcXHMqKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKixcXHMqMCtcXHMqXFwpLy50ZXN0KHQpKWk9cj1uPWU9MDtlbHNle3ZhciBvPS9yZ2JcXHMqXFwoXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccypcXCkvLmV4ZWModCk7aWYobnVsbCE9PW8pZT1wYXJzZUludChvWzFdKSxuPXBhcnNlSW50KG9bMl0pLHI9cGFyc2VJbnQob1szXSksaT0xO2Vsc2UgaWYobnVsbCE9PShvPS9yZ2JhXFxzKlxcKFxccyooXFxkKylcXHMqLFxccyooXFxkKylcXHMqLFxccyooXFxkKylcXHMqLFxccyooW1xcZFxcLl0rKVxccypcXCkvLmV4ZWModCkpKWU9cGFyc2VJbnQob1sxXSksbj1wYXJzZUludChvWzJdKSxyPXBhcnNlSW50KG9bM10pLGk9cGFyc2VGbG9hdChvWzRdKTtlbHNle2lmKGk9MSxcInN0cmluZ1wiPT10eXBlb2YgdCYmXCIjXCIhPT10LmNoYXJBdCgwKSl7dmFyIGE9bmV3IFJHQkNvbG9yKHQpO3Q9YS5vaz9hLnRvSGV4KCk6XCIjMDAwMDAwXCJ9ND09PXQubGVuZ3RoPyhlPXQuc3Vic3RyaW5nKDEsMiksZSs9ZSxuPXQuc3Vic3RyaW5nKDIsMyksbis9bixyPXQuc3Vic3RyaW5nKDMsNCkscis9cik6KGU9dC5zdWJzdHJpbmcoMSwzKSxuPXQuc3Vic3RyaW5nKDMsNSkscj10LnN1YnN0cmluZyg1LDcpKSxlPXBhcnNlSW50KGUsMTYpLG49cGFyc2VJbnQobiwxNikscj1wYXJzZUludChyLDE2KX19cmV0dXJue3I6ZSxnOm4sYjpyLGE6aSxzdHlsZTp0fX0sTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmN0eC5pc0ZpbGxUcmFuc3BhcmVudHx8MD09dGhpcy5nbG9iYWxBbHBoYX0sTD1mdW5jdGlvbigpe3JldHVybiBCb29sZWFuKHRoaXMuY3R4LmlzU3Ryb2tlVHJhbnNwYXJlbnR8fDA9PXRoaXMuZ2xvYmFsQWxwaGEpfTtuLnByb3RvdHlwZS5maWxsVGV4dD1mdW5jdGlvbih0LGUsbixyKXtpZihpc05hTihlKXx8aXNOYU4obil8fFwic3RyaW5nXCIhPXR5cGVvZiB0KXRocm93IGNvbnNvbGUuZXJyb3IoXCJqc1BERi5jb250ZXh0MmQuZmlsbFRleHQ6IEludmFsaWQgYXJndW1lbnRzXCIsYXJndW1lbnRzKSxuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYuY29udGV4dDJkLmZpbGxUZXh0XCIpO2lmKHI9aXNOYU4ocik/dm9pZCAwOnIsIU4uY2FsbCh0aGlzKSl7bj1hLmNhbGwodGhpcyxuKTt2YXIgaT1CKHRoaXMuY3R4LnRyYW5zZm9ybS5yb3RhdGlvbiksbz10aGlzLmN0eC50cmFuc2Zvcm0uc2NhbGVYO3MuY2FsbCh0aGlzLHt0ZXh0OnQseDplLHk6bixzY2FsZTpvLGFuZ2xlOmksYWxpZ246dGhpcy50ZXh0QWxpZ24sbWF4V2lkdGg6cn0pfX0sbi5wcm90b3R5cGUuc3Ryb2tlVGV4dD1mdW5jdGlvbih0LGUsbixyKXtpZihpc05hTihlKXx8aXNOYU4obil8fFwic3RyaW5nXCIhPXR5cGVvZiB0KXRocm93IGNvbnNvbGUuZXJyb3IoXCJqc1BERi5jb250ZXh0MmQuc3Ryb2tlVGV4dDogSW52YWxpZCBhcmd1bWVudHNcIixhcmd1bWVudHMpLG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5jb250ZXh0MmQuc3Ryb2tlVGV4dFwiKTtpZighTC5jYWxsKHRoaXMpKXtyPWlzTmFOKHIpP3ZvaWQgMDpyLG49YS5jYWxsKHRoaXMsbik7dmFyIGk9Qih0aGlzLmN0eC50cmFuc2Zvcm0ucm90YXRpb24pLG89dGhpcy5jdHgudHJhbnNmb3JtLnNjYWxlWDtzLmNhbGwodGhpcyx7dGV4dDp0LHg6ZSx5Om4sc2NhbGU6byxyZW5kZXJpbmdNb2RlOlwic3Ryb2tlXCIsYW5nbGU6aSxhbGlnbjp0aGlzLnRleHRBbGlnbixtYXhXaWR0aDpyfSl9fSxuLnByb3RvdHlwZS5tZWFzdXJlVGV4dD1mdW5jdGlvbih0KXtpZihcInN0cmluZ1wiIT10eXBlb2YgdCl0aHJvdyBjb25zb2xlLmVycm9yKFwianNQREYuY29udGV4dDJkLm1lYXN1cmVUZXh0OiBJbnZhbGlkIGFyZ3VtZW50c1wiLGFyZ3VtZW50cyksbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudHMgcGFzc2VkIHRvIGpzUERGLmNvbnRleHQyZC5tZWFzdXJlVGV4dFwiKTt2YXIgZT10aGlzLnBkZixuPXRoaXMucGRmLmludGVybmFsLnNjYWxlRmFjdG9yLHI9ZS5pbnRlcm5hbC5nZXRGb250U2l6ZSgpLGk9ZS5nZXRTdHJpbmdVbml0V2lkdGgodCkqci9lLmludGVybmFsLnNjYWxlRmFjdG9yO3JldHVybiBuZXcgZnVuY3Rpb24odCl7dmFyIGU9KHQ9dHx8e30pLndpZHRofHwwO3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIndpZHRoXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBlfX0pLHRoaXN9KHt3aWR0aDppKj1NYXRoLnJvdW5kKDk2Km4vNzIqMWU0KS8xZTR9KX0sbi5wcm90b3R5cGUuc2NhbGU9ZnVuY3Rpb24odCxlKXtpZihpc05hTih0KXx8aXNOYU4oZSkpdGhyb3cgY29uc29sZS5lcnJvcihcImpzUERGLmNvbnRleHQyZC5zY2FsZTogSW52YWxpZCBhcmd1bWVudHNcIixhcmd1bWVudHMpLG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5jb250ZXh0MmQuc2NhbGVcIik7dmFyIG49bmV3IE0odCwwLDAsZSwwLDApO3RoaXMuY3R4LnRyYW5zZm9ybT10aGlzLmN0eC50cmFuc2Zvcm0ubXVsdGlwbHkobil9LG4ucHJvdG90eXBlLnJvdGF0ZT1mdW5jdGlvbih0KXtpZihpc05hTih0KSl0aHJvdyBjb25zb2xlLmVycm9yKFwianNQREYuY29udGV4dDJkLnJvdGF0ZTogSW52YWxpZCBhcmd1bWVudHNcIixhcmd1bWVudHMpLG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5jb250ZXh0MmQucm90YXRlXCIpO3ZhciBlPW5ldyBNKE1hdGguY29zKHQpLE1hdGguc2luKHQpLC1NYXRoLnNpbih0KSxNYXRoLmNvcyh0KSwwLDApO3RoaXMuY3R4LnRyYW5zZm9ybT10aGlzLmN0eC50cmFuc2Zvcm0ubXVsdGlwbHkoZSl9LG4ucHJvdG90eXBlLnRyYW5zbGF0ZT1mdW5jdGlvbih0LGUpe2lmKGlzTmFOKHQpfHxpc05hTihlKSl0aHJvdyBjb25zb2xlLmVycm9yKFwianNQREYuY29udGV4dDJkLnRyYW5zbGF0ZTogSW52YWxpZCBhcmd1bWVudHNcIixhcmd1bWVudHMpLG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5jb250ZXh0MmQudHJhbnNsYXRlXCIpO3ZhciBuPW5ldyBNKDEsMCwwLDEsdCxlKTt0aGlzLmN0eC50cmFuc2Zvcm09dGhpcy5jdHgudHJhbnNmb3JtLm11bHRpcGx5KG4pfSxuLnByb3RvdHlwZS50cmFuc2Zvcm09ZnVuY3Rpb24odCxlLG4scixpLG8pe2lmKGlzTmFOKHQpfHxpc05hTihlKXx8aXNOYU4obil8fGlzTmFOKHIpfHxpc05hTihpKXx8aXNOYU4obykpdGhyb3cgY29uc29sZS5lcnJvcihcImpzUERGLmNvbnRleHQyZC50cmFuc2Zvcm06IEludmFsaWQgYXJndW1lbnRzXCIsYXJndW1lbnRzKSxuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYuY29udGV4dDJkLnRyYW5zZm9ybVwiKTt2YXIgYT1uZXcgTSh0LGUsbixyLGksbyk7dGhpcy5jdHgudHJhbnNmb3JtPXRoaXMuY3R4LnRyYW5zZm9ybS5tdWx0aXBseShhKX0sbi5wcm90b3R5cGUuc2V0VHJhbnNmb3JtPWZ1bmN0aW9uKHQsZSxuLHIsaSxvKXt0PWlzTmFOKHQpPzE6dCxlPWlzTmFOKGUpPzA6ZSxuPWlzTmFOKG4pPzA6bixyPWlzTmFOKHIpPzE6cixpPWlzTmFOKGkpPzA6aSxvPWlzTmFOKG8pPzA6byx0aGlzLmN0eC50cmFuc2Zvcm09bmV3IE0odCxlLG4scixpLG8pfSxuLnByb3RvdHlwZS5kcmF3SW1hZ2U9ZnVuY3Rpb24odCxlLG4scixpLG8sYSxzLGwpe3ZhciBoPXRoaXMucGRmLmdldEltYWdlUHJvcGVydGllcyh0KSx1PTEsYz0xLGY9MSxwPTE7dm9pZCAwIT09ciYmdm9pZCAwIT09cyYmKGY9cy9yLHA9bC9pLHU9aC53aWR0aC9yKnMvcixjPWguaGVpZ2h0L2kqbC9pKSx2b2lkIDA9PT1vJiYobz1lLGE9bixuPWU9MCksdm9pZCAwIT09ciYmdm9pZCAwPT09cyYmKHM9cixsPWkpLHZvaWQgMD09PXImJnZvaWQgMD09PXMmJihzPWgud2lkdGgsbD1oLmhlaWdodCk7dmFyIGQ9dGhpcy5jdHgudHJhbnNmb3JtLmRlY29tcG9zZSgpLGc9QihkLnJvdGF0ZS5zaHgpO2Quc2NhbGUuc3gsZC5zY2FsZS5zeTtmb3IodmFyIG0seT1uZXcgTSx2PSgoeT0oeT0oeT15Lm11bHRpcGx5KGQudHJhbnNsYXRlKSkubXVsdGlwbHkoZC5za2V3KSkubXVsdGlwbHkoZC5zY2FsZSkpLmFwcGx5VG9Qb2ludChuZXcgaihzLGwpKSx5LmFwcGx5VG9SZWN0YW5nbGUobmV3IEUoby1lKmYsYS1uKnAscip1LGkqYykpKSx3PUYuY2FsbCh0aGlzLHYpLGI9W10seD0wO3g8dy5sZW5ndGg7eCs9MSktMT09PWIuaW5kZXhPZih3W3hdKSYmYi5wdXNoKHdbeF0pO2lmKGIuc29ydCgpLHRoaXMuYXV0b1BhZ2luZylmb3IodmFyIE49YlswXSxMPWJbYi5sZW5ndGgtMV0sQT1OO0E8TCsxO0ErKyl7aWYodGhpcy5wZGYuc2V0UGFnZShBKSwwIT09dGhpcy5jdHguY2xpcF9wYXRoLmxlbmd0aCl7dmFyIFM9dGhpcy5wYXRoO209SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmN0eC5jbGlwX3BhdGgpKSx0aGlzLnBhdGg9UChtLHRoaXMucG9zWCwtMSp0aGlzLnBkZi5pbnRlcm5hbC5wYWdlU2l6ZS5oZWlnaHQqKEEtMSkrdGhpcy5wb3NZKSxrLmNhbGwodGhpcyxcImZpbGxcIiwhMCksdGhpcy5wYXRoPVN9dmFyIF89SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh2KSk7Xz1QKFtfXSx0aGlzLnBvc1gsLTEqdGhpcy5wZGYuaW50ZXJuYWwucGFnZVNpemUuaGVpZ2h0KihBLTEpK3RoaXMucG9zWSlbMF0sdGhpcy5wZGYuYWRkSW1hZ2UodCxcImpwZ1wiLF8ueCxfLnksXy53LF8uaCxudWxsLG51bGwsZyl9ZWxzZSB0aGlzLnBkZi5hZGRJbWFnZSh0LFwianBnXCIsdi54LHYueSx2Lncsdi5oLG51bGwsbnVsbCxnKX07dmFyIEY9ZnVuY3Rpb24odCxlLG4pe3ZhciByPVtdO3N3aXRjaChlPWV8fHRoaXMucGRmLmludGVybmFsLnBhZ2VTaXplLndpZHRoLG49bnx8dGhpcy5wZGYuaW50ZXJuYWwucGFnZVNpemUuaGVpZ2h0LHQudHlwZSl7ZGVmYXVsdDpjYXNlXCJtdFwiOmNhc2VcImx0XCI6ci5wdXNoKE1hdGguZmxvb3IoKHQueSt0aGlzLnBvc1kpL24pKzEpO2JyZWFrO2Nhc2VcImFyY1wiOnIucHVzaChNYXRoLmZsb29yKCh0LnkrdGhpcy5wb3NZLXQucmFkaXVzKS9uKSsxKSxyLnB1c2goTWF0aC5mbG9vcigodC55K3RoaXMucG9zWSt0LnJhZGl1cykvbikrMSk7YnJlYWs7Y2FzZVwicWN0XCI6dmFyIGk9dyh0aGlzLmN0eC5sYXN0UG9pbnQueCx0aGlzLmN0eC5sYXN0UG9pbnQueSx0LngxLHQueTEsdC54LHQueSk7ci5wdXNoKE1hdGguZmxvb3IoaS55L24pKzEpLHIucHVzaChNYXRoLmZsb29yKChpLnkraS5oKS9uKSsxKTticmVhaztjYXNlXCJiY3RcIjp2YXIgbz1iKHRoaXMuY3R4Lmxhc3RQb2ludC54LHRoaXMuY3R4Lmxhc3RQb2ludC55LHQueDEsdC55MSx0LngyLHQueTIsdC54LHQueSk7ci5wdXNoKE1hdGguZmxvb3Ioby55L24pKzEpLHIucHVzaChNYXRoLmZsb29yKChvLnkrby5oKS9uKSsxKTticmVhaztjYXNlXCJyZWN0XCI6ci5wdXNoKE1hdGguZmxvb3IoKHQueSt0aGlzLnBvc1kpL24pKzEpLHIucHVzaChNYXRoLmZsb29yKCh0LnkrdC5oK3RoaXMucG9zWSkvbikrMSl9Zm9yKHZhciBhPTA7YTxyLmxlbmd0aDthKz0xKWZvcig7dGhpcy5wZGYuaW50ZXJuYWwuZ2V0TnVtYmVyT2ZQYWdlcygpPHJbYV07KXYuY2FsbCh0aGlzKTtyZXR1cm4gcn0sdj1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZmlsbFN0eWxlLGU9dGhpcy5zdHJva2VTdHlsZSxuPXRoaXMuZm9udCxyPXRoaXMubGluZUNhcCxpPXRoaXMubGluZVdpZHRoLG89dGhpcy5saW5lSm9pbjt0aGlzLnBkZi5hZGRQYWdlKCksdGhpcy5maWxsU3R5bGU9dCx0aGlzLnN0cm9rZVN0eWxlPWUsdGhpcy5mb250PW4sdGhpcy5saW5lQ2FwPXIsdGhpcy5saW5lV2lkdGg9aSx0aGlzLmxpbmVKb2luPW99LFA9ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKXN3aXRjaCh0W3JdLnR5cGUpe2Nhc2VcImJjdFwiOnRbcl0ueDIrPWUsdFtyXS55Mis9bjtjYXNlXCJxY3RcIjp0W3JdLngxKz1lLHRbcl0ueTErPW47Y2FzZVwibXRcIjpjYXNlXCJsdFwiOmNhc2VcImFyY1wiOmRlZmF1bHQ6dFtyXS54Kz1lLHRbcl0ueSs9bn1yZXR1cm4gdH0scj1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbixyLGk9dGhpcy5maWxsU3R5bGUsbz10aGlzLnN0cm9rZVN0eWxlLGE9KHRoaXMuZm9udCx0aGlzLmxpbmVDYXApLHM9dGhpcy5saW5lV2lkdGgsbD10aGlzLmxpbmVKb2luLGg9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnBhdGgpKSx1PUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5wYXRoKSksYz1bXSxmPTA7Zjx1Lmxlbmd0aDtmKyspaWYodm9pZCAwIT09dVtmXS54KWZvcih2YXIgcD1GLmNhbGwodGhpcyx1W2ZdKSxkPTA7ZDxwLmxlbmd0aDtkKz0xKS0xPT09Yy5pbmRleE9mKHBbZF0pJiZjLnB1c2gocFtkXSk7Zm9yKGY9MDtmPGMubGVuZ3RoO2YrKylmb3IoO3RoaXMucGRmLmludGVybmFsLmdldE51bWJlck9mUGFnZXMoKTxjW2ZdOyl2LmNhbGwodGhpcyk7aWYoYy5zb3J0KCksdGhpcy5hdXRvUGFnaW5nKXt2YXIgZz1jWzBdLG09Y1tjLmxlbmd0aC0xXTtmb3IoZj1nO2Y8bSsxO2YrKyl7aWYodGhpcy5wZGYuc2V0UGFnZShmKSx0aGlzLmZpbGxTdHlsZT1pLHRoaXMuc3Ryb2tlU3R5bGU9byx0aGlzLmxpbmVDYXA9YSx0aGlzLmxpbmVXaWR0aD1zLHRoaXMubGluZUpvaW49bCwwIT09dGhpcy5jdHguY2xpcF9wYXRoLmxlbmd0aCl7dmFyIHk9dGhpcy5wYXRoO249SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmN0eC5jbGlwX3BhdGgpKSx0aGlzLnBhdGg9UChuLHRoaXMucG9zWCwtMSp0aGlzLnBkZi5pbnRlcm5hbC5wYWdlU2l6ZS5oZWlnaHQqKGYtMSkrdGhpcy5wb3NZKSxrLmNhbGwodGhpcyx0LCEwKSx0aGlzLnBhdGg9eX1yPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoaCkpLHRoaXMucGF0aD1QKHIsdGhpcy5wb3NYLC0xKnRoaXMucGRmLmludGVybmFsLnBhZ2VTaXplLmhlaWdodCooZi0xKSt0aGlzLnBvc1kpLCExIT09ZSYmMCE9PWZ8fGsuY2FsbCh0aGlzLHQsZSl9fWVsc2Ugay5jYWxsKHRoaXMsdCxlKTt0aGlzLnBhdGg9aH0saz1mdW5jdGlvbih0LGUpe2lmKChcInN0cm9rZVwiIT09dHx8ZXx8IUwuY2FsbCh0aGlzKSkmJihcInN0cm9rZVwiPT09dHx8ZXx8IU4uY2FsbCh0aGlzKSkpe3ZhciBuPVtdO3RoaXMuY3R4Lmdsb2JhbEFscGhhO3RoaXMuY3R4LmZpbGxPcGFjaXR5PDEmJnRoaXMuY3R4LmZpbGxPcGFjaXR5O2Zvcih2YXIgcixpPXRoaXMucGF0aCxvPTA7bzxpLmxlbmd0aDtvKyspe3ZhciBhPWlbb107c3dpdGNoKGEudHlwZSl7Y2FzZVwiYmVnaW5cIjpuLnB1c2goe2JlZ2luOiEwfSk7YnJlYWs7Y2FzZVwiY2xvc2VcIjpuLnB1c2goe2Nsb3NlOiEwfSk7YnJlYWs7Y2FzZVwibXRcIjpuLnB1c2goe3N0YXJ0OmEsZGVsdGFzOltdLGFiczpbXX0pO2JyZWFrO2Nhc2VcImx0XCI6dmFyIHM9bi5sZW5ndGg7aWYoIWlzTmFOKGlbby0xXS54KSl7dmFyIGw9W2EueC1pW28tMV0ueCxhLnktaVtvLTFdLnldO2lmKDA8cylmb3IoOzA8PXM7cy0tKWlmKCEwIT09bltzLTFdLmNsb3NlJiYhMCE9PW5bcy0xXS5iZWdpbil7bltzLTFdLmRlbHRhcy5wdXNoKGwpLG5bcy0xXS5hYnMucHVzaChhKTticmVha319YnJlYWs7Y2FzZVwiYmN0XCI6bD1bYS54MS1pW28tMV0ueCxhLnkxLWlbby0xXS55LGEueDItaVtvLTFdLngsYS55Mi1pW28tMV0ueSxhLngtaVtvLTFdLngsYS55LWlbby0xXS55XTtuW24ubGVuZ3RoLTFdLmRlbHRhcy5wdXNoKGwpO2JyZWFrO2Nhc2VcInFjdFwiOnZhciBoPWlbby0xXS54KzIvMyooYS54MS1pW28tMV0ueCksdT1pW28tMV0ueSsyLzMqKGEueTEtaVtvLTFdLnkpLGM9YS54KzIvMyooYS54MS1hLngpLGY9YS55KzIvMyooYS55MS1hLnkpLHA9YS54LGQ9YS55O2w9W2gtaVtvLTFdLngsdS1pW28tMV0ueSxjLWlbby0xXS54LGYtaVtvLTFdLnkscC1pW28tMV0ueCxkLWlbby0xXS55XTtuW24ubGVuZ3RoLTFdLmRlbHRhcy5wdXNoKGwpO2JyZWFrO2Nhc2VcImFyY1wiOm4ucHVzaCh7ZGVsdGFzOltdLGFiczpbXSxhcmM6ITB9KSxBcnJheS5pc0FycmF5KG5bbi5sZW5ndGgtMV0uYWJzKSYmbltuLmxlbmd0aC0xXS5hYnMucHVzaChhKX19cj1lP251bGw6XCJzdHJva2VcIj09PXQ/XCJzdHJva2VcIjpcImZpbGxcIjtmb3Iobz0wO288bi5sZW5ndGg7bysrKXtpZihuW29dLmFyYylmb3IodmFyIGc9bltvXS5hYnMsbT0wO208Zy5sZW5ndGg7bSsrKXt2YXIgeT1nW21dO2lmKHZvaWQgMCE9PXkuc3RhcnRBbmdsZSl7dmFyIHY9Qih5LnN0YXJ0QW5nbGUpLHc9Qih5LmVuZEFuZ2xlKSxiPXkueCx4PXkueTtBLmNhbGwodGhpcyxiLHgseS5yYWRpdXMsdix3LHkuY291bnRlcmNsb2Nrd2lzZSxyLGUpfWVsc2UgSS5jYWxsKHRoaXMseS54LHkueSl9aWYoIW5bb10uYXJjJiYhMCE9PW5bb10uY2xvc2UmJiEwIT09bltvXS5iZWdpbil7Yj1uW29dLnN0YXJ0LngseD1uW29dLnN0YXJ0Lnk7Qy5jYWxsKHRoaXMsbltvXS5kZWx0YXMsYix4LG51bGwsbnVsbCl9fXImJlMuY2FsbCh0aGlzLHIpLGUmJl8uY2FsbCh0aGlzKX19LGE9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5wZGYuaW50ZXJuYWwuZ2V0Rm9udFNpemUoKS90aGlzLnBkZi5pbnRlcm5hbC5zY2FsZUZhY3RvcixuPWUqKHRoaXMucGRmLmludGVybmFsLmdldExpbmVIZWlnaHRGYWN0b3IoKS0xKTtzd2l0Y2godGhpcy5jdHgudGV4dEJhc2VsaW5lKXtjYXNlXCJib3R0b21cIjpyZXR1cm4gdC1uO2Nhc2VcInRvcFwiOnJldHVybiB0K2UtbjtjYXNlXCJoYW5naW5nXCI6cmV0dXJuIHQrZS0yKm47Y2FzZVwibWlkZGxlXCI6cmV0dXJuIHQrZS8yLW47Y2FzZVwiaWRlb2dyYXBoaWNcIjpyZXR1cm4gdDtjYXNlXCJhbHBoYWJldGljXCI6ZGVmYXVsdDpyZXR1cm4gdH19O24ucHJvdG90eXBlLmNyZWF0ZUxpbmVhckdyYWRpZW50PWZ1bmN0aW9uKCl7dmFyIHQ9ZnVuY3Rpb24oKXt9O3JldHVybiB0LmNvbG9yU3RvcHM9W10sdC5hZGRDb2xvclN0b3A9ZnVuY3Rpb24odCxlKXt0aGlzLmNvbG9yU3RvcHMucHVzaChbdCxlXSl9LHQuZ2V0Q29sb3I9ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMuY29sb3JTdG9wcy5sZW5ndGg/XCIjMDAwMDAwXCI6dGhpcy5jb2xvclN0b3BzWzBdWzFdfSx0LmlzQ2FudmFzR3JhZGllbnQ9ITAsdH0sbi5wcm90b3R5cGUuY3JlYXRlUGF0dGVybj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNyZWF0ZUxpbmVhckdyYWRpZW50KCl9LG4ucHJvdG90eXBlLmNyZWF0ZVJhZGlhbEdyYWRpZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3JlYXRlTGluZWFyR3JhZGllbnQoKX07dmFyIEE9ZnVuY3Rpb24odCxlLG4scixpLG8sYSxzKXt0aGlzLnBkZi5pbnRlcm5hbC5zY2FsZUZhY3Rvcjtmb3IodmFyIGw9eShyKSxoPXkoaSksdT1nLmNhbGwodGhpcyxuLGwsaCxvKSxjPTA7Yzx1Lmxlbmd0aDtjKyspe3ZhciBmPXVbY107MD09PWMmJnAuY2FsbCh0aGlzLGYueDErdCxmLnkxK2UpLGQuY2FsbCh0aGlzLHQsZSxmLngyLGYueTIsZi54MyxmLnkzLGYueDQsZi55NCl9cz9fLmNhbGwodGhpcyk6Uy5jYWxsKHRoaXMsYSl9LFM9ZnVuY3Rpb24odCl7c3dpdGNoKHQpe2Nhc2VcInN0cm9rZVwiOnRoaXMucGRmLmludGVybmFsLm91dChcIlNcIik7YnJlYWs7Y2FzZVwiZmlsbFwiOnRoaXMucGRmLmludGVybmFsLm91dChcImZcIil9fSxfPWZ1bmN0aW9uKCl7dGhpcy5wZGYuY2xpcCgpfSxwPWZ1bmN0aW9uKHQsZSl7dGhpcy5wZGYuaW50ZXJuYWwub3V0KGkodCkrXCIgXCIrbyhlKStcIiBtXCIpfSxzPWZ1bmN0aW9uKHQpe3ZhciBlO3N3aXRjaCh0LmFsaWduKXtjYXNlXCJyaWdodFwiOmNhc2VcImVuZFwiOmU9XCJyaWdodFwiO2JyZWFrO2Nhc2VcImNlbnRlclwiOmU9XCJjZW50ZXJcIjticmVhaztjYXNlXCJsZWZ0XCI6Y2FzZVwic3RhcnRcIjpkZWZhdWx0OmU9XCJsZWZ0XCJ9dmFyIG49dGhpcy5jdHgudHJhbnNmb3JtLmFwcGx5VG9Qb2ludChuZXcgaih0LngsdC55KSkscj10aGlzLmN0eC50cmFuc2Zvcm0uZGVjb21wb3NlKCksaT1uZXcgTTtpPShpPShpPWkubXVsdGlwbHkoci50cmFuc2xhdGUpKS5tdWx0aXBseShyLnNrZXcpKS5tdWx0aXBseShyLnNjYWxlKTtmb3IodmFyIG8sYT10aGlzLnBkZi5nZXRUZXh0RGltZW5zaW9ucyh0LnRleHQpLHM9dGhpcy5jdHgudHJhbnNmb3JtLmFwcGx5VG9SZWN0YW5nbGUobmV3IEUodC54LHQueSxhLncsYS5oKSksbD1pLmFwcGx5VG9SZWN0YW5nbGUobmV3IEUodC54LHQueS1hLmgsYS53LGEuaCkpLGg9Ri5jYWxsKHRoaXMsbCksdT1bXSxjPTA7YzxoLmxlbmd0aDtjKz0xKS0xPT09dS5pbmRleE9mKGhbY10pJiZ1LnB1c2goaFtjXSk7aWYodS5zb3J0KCksITA9PT10aGlzLmF1dG9QYWdpbmcpZm9yKHZhciBmPXVbMF0scD11W3UubGVuZ3RoLTFdLGQ9ZjtkPHArMTtkKyspe2lmKHRoaXMucGRmLnNldFBhZ2UoZCksMCE9PXRoaXMuY3R4LmNsaXBfcGF0aC5sZW5ndGgpe3ZhciBnPXRoaXMucGF0aDtvPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5jdHguY2xpcF9wYXRoKSksdGhpcy5wYXRoPVAobyx0aGlzLnBvc1gsLTEqdGhpcy5wZGYuaW50ZXJuYWwucGFnZVNpemUuaGVpZ2h0KihkLTEpK3RoaXMucG9zWSksay5jYWxsKHRoaXMsXCJmaWxsXCIsITApLHRoaXMucGF0aD1nfXZhciBtPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocykpO2lmKG09UChbbV0sdGhpcy5wb3NYLC0xKnRoaXMucGRmLmludGVybmFsLnBhZ2VTaXplLmhlaWdodCooZC0xKSt0aGlzLnBvc1kpWzBdLC4wMTw9dC5zY2FsZSl7dmFyIHk9dGhpcy5wZGYuaW50ZXJuYWwuZ2V0Rm9udFNpemUoKTt0aGlzLnBkZi5zZXRGb250U2l6ZSh5KnQuc2NhbGUpfXRoaXMucGRmLnRleHQodC50ZXh0LG0ueCxtLnkse2FuZ2xlOnQuYW5nbGUsYWxpZ246ZSxyZW5kZXJpbmdNb2RlOnQucmVuZGVyaW5nTW9kZSxtYXhXaWR0aDp0Lm1heFdpZHRofSksLjAxPD10LnNjYWxlJiZ0aGlzLnBkZi5zZXRGb250U2l6ZSh5KX1lbHNle2lmKC4wMTw9dC5zY2FsZSl7eT10aGlzLnBkZi5pbnRlcm5hbC5nZXRGb250U2l6ZSgpO3RoaXMucGRmLnNldEZvbnRTaXplKHkqdC5zY2FsZSl9dGhpcy5wZGYudGV4dCh0LnRleHQsbi54K3RoaXMucG9zWCxuLnkrdGhpcy5wb3NZLHthbmdsZTp0LmFuZ2xlLGFsaWduOmUscmVuZGVyaW5nTW9kZTp0LnJlbmRlcmluZ01vZGUsbWF4V2lkdGg6dC5tYXhXaWR0aH0pLC4wMTw9dC5zY2FsZSYmdGhpcy5wZGYuc2V0Rm9udFNpemUoeSl9fSxJPWZ1bmN0aW9uKHQsZSxuLHIpe249bnx8MCxyPXJ8fDAsdGhpcy5wZGYuaW50ZXJuYWwub3V0KGkodCtuKStcIiBcIitvKGUrcikrXCIgbFwiKX0sQz1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHRoaXMucGRmLmxpbmVzKHQsZSxuLG51bGwsbnVsbCl9LGQ9ZnVuY3Rpb24odCxlLG4scixpLG8sYSxzKXt0aGlzLnBkZi5pbnRlcm5hbC5vdXQoW2woaChuK3QpKSxsKHUocitlKSksbChoKGkrdCkpLGwodShvK2UpKSxsKGgoYSt0KSksbCh1KHMrZSkpLFwiY1wiXS5qb2luKFwiIFwiKSl9LGc9ZnVuY3Rpb24odCxlLG4scil7dmFyIGk9MipNYXRoLlBJLG89ZTsobzxpfHxpPG8pJiYobyU9aSk7dmFyIGE9bjsoYTxpfHxpPGEpJiYoYSU9aSk7Zm9yKHZhciBzPVtdLGw9TWF0aC5QSS8yLGg9cj8tMToxLHU9ZSxjPU1hdGgubWluKGksTWF0aC5hYnMoYS1vKSk7MWUtNTxjOyl7dmFyIGY9dStoKk1hdGgubWluKGMsbCk7cy5wdXNoKG0uY2FsbCh0aGlzLHQsdSxmKSksYy09TWF0aC5hYnMoZi11KSx1PWZ9cmV0dXJuIHN9LG09ZnVuY3Rpb24odCxlLG4pe3ZhciByPShuLWUpLzIsaT10Kk1hdGguY29zKHIpLG89dCpNYXRoLnNpbihyKSxhPWkscz0tbyxsPWEqYStzKnMsaD1sK2EqaStzKm8sdT00LzMqKE1hdGguc3FydCgyKmwqaCktaCkvKGEqby1zKmkpLGM9YS11KnMsZj1zK3UqYSxwPWMsZD0tZixnPXIrZSxtPU1hdGguY29zKGcpLHk9TWF0aC5zaW4oZyk7cmV0dXJue3gxOnQqTWF0aC5jb3MoZSkseTE6dCpNYXRoLnNpbihlKSx4MjpjKm0tZip5LHkyOmMqeStmKm0seDM6cCptLWQqeSx5MzpwKnkrZCptLHg0OnQqTWF0aC5jb3MobikseTQ6dCpNYXRoLnNpbihuKX19LEI9ZnVuY3Rpb24odCl7cmV0dXJuIDE4MCp0L01hdGguUEl9LHk9ZnVuY3Rpb24odCl7cmV0dXJuIHQqTWF0aC5QSS8xODB9LHc9ZnVuY3Rpb24odCxlLG4scixpLG8pe3ZhciBhPXQrLjUqKG4tdCkscz1lKy41KihyLWUpLGw9aSsuNSoobi1pKSxoPW8rLjUqKHItbyksdT1NYXRoLm1pbih0LGksYSxsKSxjPU1hdGgubWF4KHQsaSxhLGwpLGY9TWF0aC5taW4oZSxvLHMsaCkscD1NYXRoLm1heChlLG8scyxoKTtyZXR1cm4gbmV3IEUodSxmLGMtdSxwLWYpfSxiPWZ1bmN0aW9uKHQsZSxuLHIsaSxvLGEscyl7Zm9yKHZhciBsLGgsdSxjLGYscCxkLGcsbSx5LHYsdyxiLHg9bi10LE49ci1lLEw9aS1uLEE9by1yLFM9YS1pLF89cy1vLEY9MDtGPDQxO0YrKylnPShwPShoPXQrKGw9Ri80MCkqeCkrbCooKGM9bitsKkwpLWgpKStsKihjK2wqKGkrbCpTLWMpLXApLG09KGQ9KHU9ZStsKk4pK2wqKChmPXIrbCpBKS11KSkrbCooZitsKihvK2wqXy1mKS1kKSxiPTA9PUY/KHc9eT1nLHY9bSk6KHk9TWF0aC5taW4oeSxnKSx2PU1hdGgubWluKHYsbSksdz1NYXRoLm1heCh3LGcpLE1hdGgubWF4KGIsbSkpO3JldHVybiBuZXcgRShNYXRoLnJvdW5kKHkpLE1hdGgucm91bmQodiksTWF0aC5yb3VuZCh3LXkpLE1hdGgucm91bmQoYi12KSl9LGo9ZnVuY3Rpb24odCxlKXt2YXIgbj10fHwwO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwieFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBufSxzZXQ6ZnVuY3Rpb24odCl7aXNOYU4odCl8fChuPXBhcnNlRmxvYXQodCkpfX0pO3ZhciByPWV8fDA7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJ5XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHJ9LHNldDpmdW5jdGlvbih0KXtpc05hTih0KXx8KHI9cGFyc2VGbG9hdCh0KSl9fSk7dmFyIGk9XCJwdFwiO3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInR5cGVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX0sc2V0OmZ1bmN0aW9uKHQpe2k9dC50b1N0cmluZygpfX0pLHRoaXN9LEU9ZnVuY3Rpb24odCxlLG4scil7ai5jYWxsKHRoaXMsdCxlKSx0aGlzLnR5cGU9XCJyZWN0XCI7dmFyIGk9bnx8MDtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIndcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX0sc2V0OmZ1bmN0aW9uKHQpe2lzTmFOKHQpfHwoaT1wYXJzZUZsb2F0KHQpKX19KTt2YXIgbz1yfHwwO3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImhcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gb30sc2V0OmZ1bmN0aW9uKHQpe2lzTmFOKHQpfHwobz1wYXJzZUZsb2F0KHQpKX19KSx0aGlzfSxNPWZ1bmN0aW9uKHQsZSxuLHIsaSxvKXt2YXIgYT1bXTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJzeFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYVswXX0sc2V0OmZ1bmN0aW9uKHQpe2FbMF09TWF0aC5yb3VuZCgxZTUqdCkvMWU1fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwic2h5XCIse2dldDpmdW5jdGlvbigpe3JldHVybiBhWzFdfSxzZXQ6ZnVuY3Rpb24odCl7YVsxXT1NYXRoLnJvdW5kKDFlNSp0KS8xZTV9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJzaHhcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGFbMl19LHNldDpmdW5jdGlvbih0KXthWzJdPU1hdGgucm91bmQoMWU1KnQpLzFlNX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInN5XCIse2dldDpmdW5jdGlvbigpe3JldHVybiBhWzNdfSxzZXQ6ZnVuY3Rpb24odCl7YVszXT1NYXRoLnJvdW5kKDFlNSp0KS8xZTV9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJ0eFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYVs0XX0sc2V0OmZ1bmN0aW9uKHQpe2FbNF09TWF0aC5yb3VuZCgxZTUqdCkvMWU1fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwidHlcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGFbNV19LHNldDpmdW5jdGlvbih0KXthWzVdPU1hdGgucm91bmQoMWU1KnQpLzFlNX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInJvdGF0aW9uXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBNYXRoLmF0YW4yKHRoaXMuc2h4LHRoaXMuc3gpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwic2NhbGVYXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRlY29tcG9zZSgpLnNjYWxlLnN4fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwic2NhbGVZXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRlY29tcG9zZSgpLnNjYWxlLnN5fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaXNJZGVudGl0eVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gMT09PXRoaXMuc3gmJigwPT09dGhpcy5zaHkmJigwPT09dGhpcy5zaHgmJigxPT09dGhpcy5zeSYmKDA9PT10aGlzLnR4JiYwPT09dGhpcy50eSkpKSl9fSksdGhpcy5zeD1pc05hTih0KT8xOnQsdGhpcy5zaHk9aXNOYU4oZSk/MDplLHRoaXMuc2h4PWlzTmFOKG4pPzA6bix0aGlzLnN5PWlzTmFOKHIpPzE6cix0aGlzLnR4PWlzTmFOKGkpPzA6aSx0aGlzLnR5PWlzTmFOKG8pPzA6byx0aGlzfTtNLnByb3RvdHlwZS5tdWx0aXBseT1mdW5jdGlvbih0KXt2YXIgZT10LnN4KnRoaXMuc3grdC5zaHkqdGhpcy5zaHgsbj10LnN4KnRoaXMuc2h5K3Quc2h5KnRoaXMuc3kscj10LnNoeCp0aGlzLnN4K3Quc3kqdGhpcy5zaHgsaT10LnNoeCp0aGlzLnNoeSt0LnN5KnRoaXMuc3ksbz10LnR4KnRoaXMuc3grdC50eSp0aGlzLnNoeCt0aGlzLnR4LGE9dC50eCp0aGlzLnNoeSt0LnR5KnRoaXMuc3krdGhpcy50eTtyZXR1cm4gbmV3IE0oZSxuLHIsaSxvLGEpfSxNLnByb3RvdHlwZS5kZWNvbXBvc2U9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnN4LGU9dGhpcy5zaHksbj10aGlzLnNoeCxyPXRoaXMuc3ksaT10aGlzLnR4LG89dGhpcy50eSxhPU1hdGguc3FydCh0KnQrZSplKSxzPSh0Lz1hKSpuKyhlLz1hKSpyO24tPXQqcyxyLT1lKnM7dmFyIGw9TWF0aC5zcXJ0KG4qbityKnIpO3JldHVybiBzLz1sLHQqKHIvPWwpPGUqKG4vPWwpJiYodD0tdCxlPS1lLHM9LXMsYT0tYSkse3NjYWxlOm5ldyBNKGEsMCwwLGwsMCwwKSx0cmFuc2xhdGU6bmV3IE0oMSwwLDAsMSxpLG8pLHJvdGF0ZTpuZXcgTSh0LGUsLWUsdCwwLDApLHNrZXc6bmV3IE0oMSwwLHMsMSwwLDApfX0sTS5wcm90b3R5cGUuYXBwbHlUb1BvaW50PWZ1bmN0aW9uKHQpe3ZhciBlPXQueCp0aGlzLnN4K3QueSp0aGlzLnNoeCt0aGlzLnR4LG49dC54KnRoaXMuc2h5K3QueSp0aGlzLnN5K3RoaXMudHk7cmV0dXJuIG5ldyBqKGUsbil9LE0ucHJvdG90eXBlLmFwcGx5VG9SZWN0YW5nbGU9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5hcHBseVRvUG9pbnQodCksbj10aGlzLmFwcGx5VG9Qb2ludChuZXcgaih0LngrdC53LHQueSt0LmgpKTtyZXR1cm4gbmV3IEUoZS54LGUueSxuLngtZS54LG4ueS1lLnkpfSxNLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuc3gsZT10aGlzLnNoeSxuPXRoaXMuc2h4LHI9dGhpcy5zeSxpPXRoaXMudHgsbz10aGlzLnR5O3JldHVybiBuZXcgTSh0LGUsbixyLGksbyl9fShsdC5BUEksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGZ8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvd3x8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbCYmZ2xvYmFsfHxGdW5jdGlvbigncmV0dXJuIHR5cGVvZiB0aGlzID09PSBcIm9iamVjdFwiICYmIHRoaXMuY29udGVudCcpKCl8fEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSksXHJcbi8qKlxyXG4gICAqIGpzUERGIGZpbHRlcnMgUGx1Z0luXHJcbiAgICogQ29weXJpZ2h0IChjKSAyMDE0IEFyYXMgQWJiYXNpIFxyXG4gICAqXHJcbiAgICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4gICAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxyXG4gICAqL1xyXG5hPWx0LkFQSSxvPWZ1bmN0aW9uKHQpe3ZhciByLGUsbixpLG8sYSxzLGwsaCx1O2ZvcigvW15cXHgwMC1cXHhGRl0vLnRlc3QodCksZT1bXSxuPTAsaT0odCs9cj1cIlxcMFxcMFxcMFxcMFwiLnNsaWNlKHQubGVuZ3RoJTR8fDQpKS5sZW5ndGg7bjxpO24rPTQpMCE9PShvPSh0LmNoYXJDb2RlQXQobik8PDI0KSsodC5jaGFyQ29kZUF0KG4rMSk8PDE2KSsodC5jaGFyQ29kZUF0KG4rMik8PDgpK3QuY2hhckNvZGVBdChuKzMpKT8oYT0obz0oKG89KChvPSgobz0oby0odT1vJTg1KSkvODUpLShoPW8lODUpKS84NSktKGw9byU4NSkpLzg1KS0ocz1vJTg1KSkvODUpJTg1LGUucHVzaChhKzMzLHMrMzMsbCszMyxoKzMzLHUrMzMpKTplLnB1c2goMTIyKTtyZXR1cm4gZnVuY3Rpb24odCxlKXtmb3IodmFyIG49ci5sZW5ndGg7MDxuO24tLSl0LnBvcCgpfShlKSxTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxlKStcIn4+XCJ9LHM9ZnVuY3Rpb24odCl7dmFyIHIsZSxuLGksbyxhPVN0cmluZyxzPVwibGVuZ3RoXCIsbD1cImNoYXJDb2RlQXRcIixoPVwic2xpY2VcIix1PVwicmVwbGFjZVwiO2Zvcih0W2hdKC0yKSx0PXRbaF0oMCwtMilbdV0oL1xccy9nLFwiXCIpW3VdKFwielwiLFwiISEhISFcIiksbj1bXSxpPTAsbz0odCs9cj1cInV1dXV1XCJbaF0odFtzXSU1fHw1KSlbc107aTxvO2krPTUpZT01MjIwMDYyNSoodFtsXShpKS0zMykrNjE0MTI1Kih0W2xdKGkrMSktMzMpKzcyMjUqKHRbbF0oaSsyKS0zMykrODUqKHRbbF0oaSszKS0zMykrKHRbbF0oaSs0KS0zMyksbi5wdXNoKDI1NSZlPj4yNCwyNTUmZT4+MTYsMjU1JmU+PjgsMjU1JmUpO3JldHVybiBmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1yW3NdOzA8bjtuLS0pdC5wb3AoKX0obiksYS5mcm9tQ2hhckNvZGUuYXBwbHkoYSxuKX0saD1mdW5jdGlvbih0KXtmb3IodmFyIGU9XCJcIixuPTA7bjx0Lmxlbmd0aDtuKz0xKWUrPShcIjBcIit0LmNoYXJDb2RlQXQobikudG9TdHJpbmcoMTYpKS5zbGljZSgtMik7cmV0dXJuIGUrPVwiPlwifSx1PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBSZWdFeHAoL14oWzAtOUEtRmEtZl17Mn0pKyQvKTtpZigtMSE9PSh0PXQucmVwbGFjZSgvXFxzL2csXCJcIikpLmluZGV4T2YoXCI+XCIpJiYodD10LnN1YnN0cigwLHQuaW5kZXhPZihcIj5cIikpKSx0Lmxlbmd0aCUyJiYodCs9XCIwXCIpLCExPT09ZS50ZXN0KHQpKXJldHVyblwiXCI7Zm9yKHZhciBuPVwiXCIscj0wO3I8dC5sZW5ndGg7cis9MiluKz1TdHJpbmcuZnJvbUNoYXJDb2RlKFwiMHhcIisodFtyXSt0W3IrMV0pKTtyZXR1cm4gbn0sYz1mdW5jdGlvbih0LGUpe2U9T2JqZWN0LmFzc2lnbih7cHJlZGljdG9yOjEsY29sb3JzOjEsYml0c1BlckNvbXBvbmVudDo4LGNvbHVtbnM6MX0sZSk7Zm9yKHZhciBuLHIsaT1bXSxvPXQubGVuZ3RoO28tLTspaVtvXT10LmNoYXJDb2RlQXQobyk7cmV0dXJuIG49YS5hZGxlcjMyY3MuZnJvbSh0KSwocj1uZXcgRGVmbGF0ZXIoNikpLmFwcGVuZChuZXcgVWludDhBcnJheShpKSksdD1yLmZsdXNoKCksKGk9bmV3IFVpbnQ4QXJyYXkodC5sZW5ndGgrNikpLnNldChuZXcgVWludDhBcnJheShbMTIwLDE1Nl0pKSxpLnNldCh0LDIpLGkuc2V0KG5ldyBVaW50OEFycmF5KFsyNTUmbixuPj44JjI1NSxuPj4xNiYyNTUsbj4+MjQmMjU1XSksdC5sZW5ndGgrMiksdD1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsaSl9LGEucHJvY2Vzc0RhdGFCeUZpbHRlcnM9ZnVuY3Rpb24odCxlKXt2YXIgbj0wLHI9dHx8XCJcIixpPVtdO2ZvcihcInN0cmluZ1wiPT10eXBlb2YoZT1lfHxbXSkmJihlPVtlXSksbj0wO248ZS5sZW5ndGg7bis9MSlzd2l0Y2goZVtuXSl7Y2FzZVwiQVNDSUk4NURlY29kZVwiOmNhc2VcIi9BU0NJSTg1RGVjb2RlXCI6cj1zKHIpLGkucHVzaChcIi9BU0NJSTg1RW5jb2RlXCIpO2JyZWFrO2Nhc2VcIkFTQ0lJODVFbmNvZGVcIjpjYXNlXCIvQVNDSUk4NUVuY29kZVwiOnI9byhyKSxpLnB1c2goXCIvQVNDSUk4NURlY29kZVwiKTticmVhaztjYXNlXCJBU0NJSUhleERlY29kZVwiOmNhc2VcIi9BU0NJSUhleERlY29kZVwiOnI9dShyKSxpLnB1c2goXCIvQVNDSUlIZXhFbmNvZGVcIik7YnJlYWs7Y2FzZVwiQVNDSUlIZXhFbmNvZGVcIjpjYXNlXCIvQVNDSUlIZXhFbmNvZGVcIjpyPWgociksaS5wdXNoKFwiL0FTQ0lJSGV4RGVjb2RlXCIpO2JyZWFrO2Nhc2VcIkZsYXRlRW5jb2RlXCI6Y2FzZVwiL0ZsYXRlRW5jb2RlXCI6cj1jKHIpLGkucHVzaChcIi9GbGF0ZURlY29kZVwiKTticmVhaztkZWZhdWx0OnRocm93J1RoZSBmaWx0ZXI6IFwiJytlW25dKydcIiBpcyBub3QgaW1wbGVtZW50ZWQnfXJldHVybntkYXRhOnIscmV2ZXJzZUNoYWluOmkucmV2ZXJzZSgpLmpvaW4oXCIgXCIpfX0sKFxyXG4vKipcclxuICAgKiBqc1BERiBmaWxlbG9hZGluZyBQbHVnSW5cclxuICAgKiBDb3B5cmlnaHQgKGMpIDIwMTggQXJhcyBBYmJhc2kgKGFyYXMuYWJiYXNpQGdtYWlsLmNvbSlcclxuICAgKlxyXG4gICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICAgKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcclxuICAgKi9cclxucj1sdC5BUEkpLmxvYWRGaWxlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcjtlPWV8fCEwLG49bnx8ZnVuY3Rpb24oKXt9O3RyeXtyPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uZXcgWE1MSHR0cFJlcXVlc3QsaT1bXSxvPTAsYT1mdW5jdGlvbih0KXt2YXIgZT10Lmxlbmd0aCxuPVN0cmluZy5mcm9tQ2hhckNvZGU7Zm9yKG89MDtvPGU7bys9MSlpLnB1c2gobigyNTUmdC5jaGFyQ29kZUF0KG8pKSk7cmV0dXJuIGkuam9pbihcIlwiKX07aWYoci5vcGVuKFwiR0VUXCIsdCwhZSksci5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZFwiKSwhMT09PWUmJihyLm9ubG9hZD1mdW5jdGlvbigpe3JldHVybiBhKHRoaXMucmVzcG9uc2VUZXh0KX0pLHIuc2VuZChudWxsKSwyMDA9PT1yLnN0YXR1cylyZXR1cm4gZT9hKHIucmVzcG9uc2VUZXh0KTp2b2lkIDA7Y29uc29sZS53YXJuKCdVbmFibGUgdG8gbG9hZCBmaWxlIFwiJyt0KydcIicpfSh0LGUpfWNhdGNoKHQpe3I9dm9pZCAwfXJldHVybiByfSxyLmxvYWRJbWFnZUZpbGU9ci5sb2FkRmlsZSxcclxuLyoqXHJcbiAgICogQ29weXJpZ2h0IChjKSAyMDE4IEVyaWsgS29vcG1hbnNcclxuICAgKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAgICpcclxuICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAgICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXHJcbiAgICovXHJcbmk9bHQuQVBJLGY9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93fHxcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsJiZnbG9iYWwsZz1mdW5jdGlvbih0KXt2YXIgZT1zZSh0KTtyZXR1cm5cInVuZGVmaW5lZFwiPT09ZT9cInVuZGVmaW5lZFwiOlwic3RyaW5nXCI9PT1lfHx0IGluc3RhbmNlb2YgU3RyaW5nP1wic3RyaW5nXCI6XCJudW1iZXJcIj09PWV8fHQgaW5zdGFuY2VvZiBOdW1iZXI/XCJudW1iZXJcIjpcImZ1bmN0aW9uXCI9PT1lfHx0IGluc3RhbmNlb2YgRnVuY3Rpb24/XCJmdW5jdGlvblwiOnQmJnQuY29uc3RydWN0b3I9PT1BcnJheT9cImFycmF5XCI6dCYmMT09PXQubm9kZVR5cGU/XCJlbGVtZW50XCI6XCJvYmplY3RcIj09PWU/XCJvYmplY3RcIjpcInVua25vd25cIn0sbT1mdW5jdGlvbih0LGUpe3ZhciBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodCk7aWYoZS5jbGFzc05hbWUmJihuLmNsYXNzTmFtZT1lLmNsYXNzTmFtZSksZS5pbm5lckhUTUwpe24uaW5uZXJIVE1MPWUuaW5uZXJIVE1MO2Zvcih2YXIgcj1uLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpLGk9ci5sZW5ndGg7MDxpLS07bnVsbClyW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocltpXSl9Zm9yKHZhciBvIGluIGUuc3R5bGUpbi5zdHlsZVtvXT1lLnN0eWxlW29dO3JldHVybiBufSwoKCh5PWZ1bmN0aW9uIHQoZSl7dmFyIG49T2JqZWN0LmFzc2lnbih0LmNvbnZlcnQoUHJvbWlzZS5yZXNvbHZlKCkpLEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodC50ZW1wbGF0ZSkpKSxyPXQuY29udmVydChQcm9taXNlLnJlc29sdmUoKSxuKTtyZXR1cm4gcj0ocj1yLnNldFByb2dyZXNzKDEsdCwxLFt0XSkpLnNldChlKX0pLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFByb21pc2UucHJvdG90eXBlKSkuY29uc3RydWN0b3I9eSkuY29udmVydD1mdW5jdGlvbih0LGUpe3JldHVybiB0Ll9fcHJvdG9fXz1lfHx5LnByb3RvdHlwZSx0fSx5LnRlbXBsYXRlPXtwcm9wOntzcmM6bnVsbCxjb250YWluZXI6bnVsbCxvdmVybGF5Om51bGwsY2FudmFzOm51bGwsaW1nOm51bGwscGRmOm51bGwscGFnZVNpemU6bnVsbCxjYWxsYmFjazpmdW5jdGlvbigpe319LHByb2dyZXNzOnt2YWw6MCxzdGF0ZTpudWxsLG46MCxzdGFjazpbXX0sb3B0OntmaWxlbmFtZTpcImZpbGUucGRmXCIsbWFyZ2luOlswLDAsMCwwXSxlbmFibGVMaW5rczohMCx4OjAseTowLGh0bWwyY2FudmFzOnt9LGpzUERGOnt9fX0seS5wcm90b3R5cGUuZnJvbT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24oKXtzd2l0Y2goZT1lfHxmdW5jdGlvbih0KXtzd2l0Y2goZyh0KSl7Y2FzZVwic3RyaW5nXCI6cmV0dXJuXCJzdHJpbmdcIjtjYXNlXCJlbGVtZW50XCI6cmV0dXJuXCJjYW52YXNcIj09PXQubm9kZU5hbWUudG9Mb3dlckNhc2U/XCJjYW52YXNcIjpcImVsZW1lbnRcIjtkZWZhdWx0OnJldHVyblwidW5rbm93blwifX0odCkpe2Nhc2VcInN0cmluZ1wiOnJldHVybiB0aGlzLnNldCh7c3JjOm0oXCJkaXZcIix7aW5uZXJIVE1MOnR9KX0pO2Nhc2VcImVsZW1lbnRcIjpyZXR1cm4gdGhpcy5zZXQoe3NyYzp0fSk7Y2FzZVwiY2FudmFzXCI6cmV0dXJuIHRoaXMuc2V0KHtjYW52YXM6dH0pO2Nhc2VcImltZ1wiOnJldHVybiB0aGlzLnNldCh7aW1nOnR9KTtkZWZhdWx0OnJldHVybiB0aGlzLmVycm9yKFwiVW5rbm93biBzb3VyY2UgdHlwZS5cIil9fSl9LHkucHJvdG90eXBlLnRvPWZ1bmN0aW9uKHQpe3N3aXRjaCh0KXtjYXNlXCJjb250YWluZXJcIjpyZXR1cm4gdGhpcy50b0NvbnRhaW5lcigpO2Nhc2VcImNhbnZhc1wiOnJldHVybiB0aGlzLnRvQ2FudmFzKCk7Y2FzZVwiaW1nXCI6cmV0dXJuIHRoaXMudG9JbWcoKTtjYXNlXCJwZGZcIjpyZXR1cm4gdGhpcy50b1BkZigpO2RlZmF1bHQ6cmV0dXJuIHRoaXMuZXJyb3IoXCJJbnZhbGlkIHRhcmdldC5cIil9fSx5LnByb3RvdHlwZS50b0NvbnRhaW5lcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRoZW5MaXN0KFtmdW5jdGlvbigpe3JldHVybiB0aGlzLnByb3Auc3JjfHx0aGlzLmVycm9yKFwiQ2Fubm90IGR1cGxpY2F0ZSAtIG5vIHNvdXJjZSBIVE1MLlwiKX0sZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcm9wLnBhZ2VTaXplfHx0aGlzLnNldFBhZ2VTaXplKCl9XSkudGhlbihmdW5jdGlvbigpe3ZhciB0PXtwb3NpdGlvbjpcInJlbGF0aXZlXCIsZGlzcGxheTpcImlubGluZS1ibG9ja1wiLHdpZHRoOk1hdGgubWF4KHRoaXMucHJvcC5zcmMuY2xpZW50V2lkdGgsdGhpcy5wcm9wLnNyYy5zY3JvbGxXaWR0aCx0aGlzLnByb3Auc3JjLm9mZnNldFdpZHRoKStcInB4XCIsbGVmdDowLHJpZ2h0OjAsdG9wOjAsbWFyZ2luOlwiYXV0b1wiLGJhY2tncm91bmRDb2xvcjpcIndoaXRlXCJ9LGU9ZnVuY3Rpb24gdChlLG4pe2Zvcih2YXIgcj0zPT09ZS5ub2RlVHlwZT9kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShlLm5vZGVWYWx1ZSk6ZS5jbG9uZU5vZGUoITEpLGk9ZS5maXJzdENoaWxkO2k7aT1pLm5leHRTaWJsaW5nKSEwIT09biYmMT09PWkubm9kZVR5cGUmJlwiU0NSSVBUXCI9PT1pLm5vZGVOYW1lfHxyLmFwcGVuZENoaWxkKHQoaSxuKSk7cmV0dXJuIDE9PT1lLm5vZGVUeXBlJiYoXCJDQU5WQVNcIj09PWUubm9kZU5hbWU/KHIud2lkdGg9ZS53aWR0aCxyLmhlaWdodD1lLmhlaWdodCxyLmdldENvbnRleHQoXCIyZFwiKS5kcmF3SW1hZ2UoZSwwLDApKTpcIlRFWFRBUkVBXCIhPT1lLm5vZGVOYW1lJiZcIlNFTEVDVFwiIT09ZS5ub2RlTmFtZXx8KHIudmFsdWU9ZS52YWx1ZSksci5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLGZ1bmN0aW9uKCl7ci5zY3JvbGxUb3A9ZS5zY3JvbGxUb3Asci5zY3JvbGxMZWZ0PWUuc2Nyb2xsTGVmdH0sITApKSxyfSh0aGlzLnByb3Auc3JjLHRoaXMub3B0Lmh0bWwyY2FudmFzLmphdmFzY3JpcHRFbmFibGVkKTtcIkJPRFlcIj09PWUudGFnTmFtZSYmKHQuaGVpZ2h0PU1hdGgubWF4KGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0LGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0LGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0KStcInB4XCIpLHRoaXMucHJvcC5vdmVybGF5PW0oXCJkaXZcIix7Y2xhc3NOYW1lOlwiaHRtbDJwZGZfX292ZXJsYXlcIixzdHlsZTp7cG9zaXRpb246XCJmaXhlZFwiLG92ZXJmbG93OlwiaGlkZGVuXCIsekluZGV4OjFlMyxsZWZ0OlwiLTEwMDAwMHB4XCIscmlnaHQ6MCxib3R0b206MCx0b3A6MH19KSx0aGlzLnByb3AuY29udGFpbmVyPW0oXCJkaXZcIix7Y2xhc3NOYW1lOlwiaHRtbDJwZGZfX2NvbnRhaW5lclwiLHN0eWxlOnR9KSx0aGlzLnByb3AuY29udGFpbmVyLmFwcGVuZENoaWxkKGUpLHRoaXMucHJvcC5jb250YWluZXIuZmlyc3RDaGlsZC5hcHBlbmRDaGlsZChtKFwiZGl2XCIse3N0eWxlOntjbGVhcjpcImJvdGhcIixib3JkZXI6XCIwIG5vbmUgdHJhbnNwYXJlbnRcIixtYXJnaW46MCxwYWRkaW5nOjAsaGVpZ2h0OjB9fSkpLHRoaXMucHJvcC5jb250YWluZXIuc3R5bGUuZmxvYXQ9XCJub25lXCIsdGhpcy5wcm9wLm92ZXJsYXkuYXBwZW5kQ2hpbGQodGhpcy5wcm9wLmNvbnRhaW5lciksZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLnByb3Aub3ZlcmxheSksdGhpcy5wcm9wLmNvbnRhaW5lci5maXJzdENoaWxkLnN0eWxlLnBvc2l0aW9uPVwicmVsYXRpdmVcIix0aGlzLnByb3AuY29udGFpbmVyLmhlaWdodD1NYXRoLm1heCh0aGlzLnByb3AuY29udGFpbmVyLmZpcnN0Q2hpbGQuY2xpZW50SGVpZ2h0LHRoaXMucHJvcC5jb250YWluZXIuZmlyc3RDaGlsZC5zY3JvbGxIZWlnaHQsdGhpcy5wcm9wLmNvbnRhaW5lci5maXJzdENoaWxkLm9mZnNldEhlaWdodCkrXCJweFwifSl9LHkucHJvdG90eXBlLnRvQ2FudmFzPWZ1bmN0aW9uKCl7dmFyIHQ9W2Z1bmN0aW9uKCl7cmV0dXJuIGRvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy5wcm9wLmNvbnRhaW5lcil8fHRoaXMudG9Db250YWluZXIoKX1dO3JldHVybiB0aGlzLnRoZW5MaXN0KHQpLnRoZW4oZnVuY3Rpb24oKXt2YXIgdD1PYmplY3QuYXNzaWduKHt9LHRoaXMub3B0Lmh0bWwyY2FudmFzKTtpZihkZWxldGUgdC5vbnJlbmRlcmVkLHRoaXMuaXNIdG1sMkNhbnZhc0xvYWRlZCgpKXJldHVybiBodG1sMmNhbnZhcyh0aGlzLnByb3AuY29udGFpbmVyLHQpfSkudGhlbihmdW5jdGlvbih0KXsodGhpcy5vcHQuaHRtbDJjYW52YXMub25yZW5kZXJlZHx8ZnVuY3Rpb24oKXt9KSh0KSx0aGlzLnByb3AuY2FudmFzPXQsZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLnByb3Aub3ZlcmxheSl9KX0seS5wcm90b3R5cGUudG9Db250ZXh0MmQ9ZnVuY3Rpb24oKXt2YXIgdD1bZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQuYm9keS5jb250YWlucyh0aGlzLnByb3AuY29udGFpbmVyKXx8dGhpcy50b0NvbnRhaW5lcigpfV07cmV0dXJuIHRoaXMudGhlbkxpc3QodCkudGhlbihmdW5jdGlvbigpe3ZhciB0PXRoaXMub3B0LmpzUERGLGU9T2JqZWN0LmFzc2lnbih7YXN5bmM6ITAsYWxsb3dUYWludDohMCxiYWNrZ3JvdW5kQ29sb3I6XCIjZmZmZmZmXCIsaW1hZ2VUaW1lb3V0OjE1ZTMsbG9nZ2luZzohMCxwcm94eTpudWxsLHJlbW92ZUNvbnRhaW5lcjohMCxmb3JlaWduT2JqZWN0UmVuZGVyaW5nOiExLHVzZUNPUlM6ITF9LHRoaXMub3B0Lmh0bWwyY2FudmFzKTtpZihkZWxldGUgZS5vbnJlbmRlcmVkLHQuY29udGV4dDJkLmF1dG9QYWdpbmc9ITAsdC5jb250ZXh0MmQucG9zWD10aGlzLm9wdC54LHQuY29udGV4dDJkLnBvc1k9dGhpcy5vcHQueSxlLndpbmRvd0hlaWdodD1lLndpbmRvd0hlaWdodHx8MCxlLndpbmRvd0hlaWdodD0wPT1lLndpbmRvd0hlaWdodD9NYXRoLm1heCh0aGlzLnByb3AuY29udGFpbmVyLmNsaWVudEhlaWdodCx0aGlzLnByb3AuY29udGFpbmVyLnNjcm9sbEhlaWdodCx0aGlzLnByb3AuY29udGFpbmVyLm9mZnNldEhlaWdodCk6ZS53aW5kb3dIZWlnaHQsdGhpcy5pc0h0bWwyQ2FudmFzTG9hZGVkKCkpcmV0dXJuIGh0bWwyY2FudmFzKHRoaXMucHJvcC5jb250YWluZXIsZSl9KS50aGVuKGZ1bmN0aW9uKHQpeyh0aGlzLm9wdC5odG1sMmNhbnZhcy5vbnJlbmRlcmVkfHxmdW5jdGlvbigpe30pKHQpLHRoaXMucHJvcC5jYW52YXM9dCxkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMucHJvcC5vdmVybGF5KX0pfSx5LnByb3RvdHlwZS50b0ltZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRoZW5MaXN0KFtmdW5jdGlvbigpe3JldHVybiB0aGlzLnByb3AuY2FudmFzfHx0aGlzLnRvQ2FudmFzKCl9XSkudGhlbihmdW5jdGlvbigpe3ZhciB0PXRoaXMucHJvcC5jYW52YXMudG9EYXRhVVJMKFwiaW1hZ2UvXCIrdGhpcy5vcHQuaW1hZ2UudHlwZSx0aGlzLm9wdC5pbWFnZS5xdWFsaXR5KTt0aGlzLnByb3AuaW1nPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiksdGhpcy5wcm9wLmltZy5zcmM9dH0pfSx5LnByb3RvdHlwZS50b1BkZj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRoZW5MaXN0KFtmdW5jdGlvbigpe3JldHVybiB0aGlzLnRvQ29udGV4dDJkKCl9XSkudGhlbihmdW5jdGlvbigpe3RoaXMucHJvcC5wZGY9dGhpcy5wcm9wLnBkZnx8dGhpcy5vcHQuanNQREZ9KX0seS5wcm90b3R5cGUub3V0cHV0PWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm5cImltZ1wiPT09KG49bnx8XCJwZGZcIikudG9Mb3dlckNhc2UoKXx8XCJpbWFnZVwiPT09bi50b0xvd2VyQ2FzZSgpP3RoaXMub3V0cHV0SW1nKHQsZSk6dGhpcy5vdXRwdXRQZGYodCxlKX0seS5wcm90b3R5cGUub3V0cHV0UGRmPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudGhlbkxpc3QoW2Z1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJvcC5wZGZ8fHRoaXMudG9QZGYoKX1dKS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJvcC5wZGYub3V0cHV0KHQsZSl9KX0seS5wcm90b3R5cGUub3V0cHV0SW1nPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudGhlbkxpc3QoW2Z1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJvcC5pbWd8fHRoaXMudG9JbWcoKX1dKS50aGVuKGZ1bmN0aW9uKCl7c3dpdGNoKHQpe2Nhc2Ugdm9pZCAwOmNhc2VcImltZ1wiOnJldHVybiB0aGlzLnByb3AuaW1nO2Nhc2VcImRhdGF1cmlzdHJpbmdcIjpjYXNlXCJkYXRhdXJsc3RyaW5nXCI6cmV0dXJuIHRoaXMucHJvcC5pbWcuc3JjO2Nhc2VcImRhdGF1cmlcIjpjYXNlXCJkYXRhdXJsXCI6cmV0dXJuIGRvY3VtZW50LmxvY2F0aW9uLmhyZWY9dGhpcy5wcm9wLmltZy5zcmM7ZGVmYXVsdDp0aHJvdydJbWFnZSBvdXRwdXQgdHlwZSBcIicrdCsnXCIgaXMgbm90IHN1cHBvcnRlZC4nfX0pfSx5LnByb3RvdHlwZS5pc0h0bWwyQ2FudmFzTG9hZGVkPWZ1bmN0aW9uKCl7dmFyIHQ9dm9pZCAwIT09Zi5odG1sMmNhbnZhcztyZXR1cm4gdHx8Y29uc29sZS5lcnJvcihcImh0bWwyY2FudmFzIG5vdCBsb2FkZWQuXCIpLHR9LHkucHJvdG90eXBlLnNhdmU9ZnVuY3Rpb24odCl7aWYodGhpcy5pc0h0bWwyQ2FudmFzTG9hZGVkKCkpcmV0dXJuIHRoaXMudGhlbkxpc3QoW2Z1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJvcC5wZGZ8fHRoaXMudG9QZGYoKX1dKS5zZXQodD97ZmlsZW5hbWU6dH06bnVsbCkudGhlbihmdW5jdGlvbigpe3RoaXMucHJvcC5wZGYuc2F2ZSh0aGlzLm9wdC5maWxlbmFtZSl9KX0seS5wcm90b3R5cGUuZG9DYWxsYmFjaz1mdW5jdGlvbih0KXtpZih0aGlzLmlzSHRtbDJDYW52YXNMb2FkZWQoKSlyZXR1cm4gdGhpcy50aGVuTGlzdChbZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcm9wLnBkZnx8dGhpcy50b1BkZigpfV0pLnRoZW4oZnVuY3Rpb24oKXt0aGlzLnByb3AuY2FsbGJhY2sodGhpcy5wcm9wLnBkZil9KX0seS5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCIhPT1nKGUpKXJldHVybiB0aGlzO3ZhciB0PU9iamVjdC5rZXlzKGV8fHt9KS5tYXAoZnVuY3Rpb24odCl7aWYodCBpbiB5LnRlbXBsYXRlLnByb3ApcmV0dXJuIGZ1bmN0aW9uKCl7dGhpcy5wcm9wW3RdPWVbdF19O3N3aXRjaCh0KXtjYXNlXCJtYXJnaW5cIjpyZXR1cm4gdGhpcy5zZXRNYXJnaW4uYmluZCh0aGlzLGUubWFyZ2luKTtjYXNlXCJqc1BERlwiOnJldHVybiBmdW5jdGlvbigpe3JldHVybiB0aGlzLm9wdC5qc1BERj1lLmpzUERGLHRoaXMuc2V0UGFnZVNpemUoKX07Y2FzZVwicGFnZVNpemVcIjpyZXR1cm4gdGhpcy5zZXRQYWdlU2l6ZS5iaW5kKHRoaXMsZS5wYWdlU2l6ZSk7ZGVmYXVsdDpyZXR1cm4gZnVuY3Rpb24oKXt0aGlzLm9wdFt0XT1lW3RdfX19LHRoaXMpO3JldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aGVuTGlzdCh0KX0pfSx5LnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uKCl7dmFyIHQ9ZSBpbiB5LnRlbXBsYXRlLnByb3A/dGhpcy5wcm9wW2VdOnRoaXMub3B0W2VdO3JldHVybiBuP24odCk6dH0pfSx5LnByb3RvdHlwZS5zZXRNYXJnaW49ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbigpe3N3aXRjaChnKHQpKXtjYXNlXCJudW1iZXJcIjp0PVt0LHQsdCx0XTtjYXNlXCJhcnJheVwiOmlmKDI9PT10Lmxlbmd0aCYmKHQ9W3RbMF0sdFsxXSx0WzBdLHRbMV1dKSw0PT09dC5sZW5ndGgpYnJlYWs7ZGVmYXVsdDpyZXR1cm4gdGhpcy5lcnJvcihcIkludmFsaWQgbWFyZ2luIGFycmF5LlwiKX10aGlzLm9wdC5tYXJnaW49dH0pLnRoZW4odGhpcy5zZXRQYWdlU2l6ZSl9LHkucHJvdG90eXBlLnNldFBhZ2VTaXplPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUodCxlKXtyZXR1cm4gTWF0aC5mbG9vcih0KmUvNzIqOTYpfXJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24oKXsodD10fHxsdC5nZXRQYWdlU2l6ZSh0aGlzLm9wdC5qc1BERikpLmhhc093blByb3BlcnR5KFwiaW5uZXJcIil8fCh0LmlubmVyPXt3aWR0aDp0LndpZHRoLXRoaXMub3B0Lm1hcmdpblsxXS10aGlzLm9wdC5tYXJnaW5bM10saGVpZ2h0OnQuaGVpZ2h0LXRoaXMub3B0Lm1hcmdpblswXS10aGlzLm9wdC5tYXJnaW5bMl19LHQuaW5uZXIucHg9e3dpZHRoOmUodC5pbm5lci53aWR0aCx0LmspLGhlaWdodDplKHQuaW5uZXIuaGVpZ2h0LHQuayl9LHQuaW5uZXIucmF0aW89dC5pbm5lci5oZWlnaHQvdC5pbm5lci53aWR0aCksdGhpcy5wcm9wLnBhZ2VTaXplPXR9KX0seS5wcm90b3R5cGUuc2V0UHJvZ3Jlc3M9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIG51bGwhPXQmJih0aGlzLnByb2dyZXNzLnZhbD10KSxudWxsIT1lJiYodGhpcy5wcm9ncmVzcy5zdGF0ZT1lKSxudWxsIT1uJiYodGhpcy5wcm9ncmVzcy5uPW4pLG51bGwhPXImJih0aGlzLnByb2dyZXNzLnN0YWNrPXIpLHRoaXMucHJvZ3Jlc3MucmF0aW89dGhpcy5wcm9ncmVzcy52YWwvdGhpcy5wcm9ncmVzcy5zdGF0ZSx0aGlzfSx5LnByb3RvdHlwZS51cGRhdGVQcm9ncmVzcz1mdW5jdGlvbih0LGUsbixyKXtyZXR1cm4gdGhpcy5zZXRQcm9ncmVzcyh0P3RoaXMucHJvZ3Jlc3MudmFsK3Q6bnVsbCxlfHxudWxsLG4/dGhpcy5wcm9ncmVzcy5uK246bnVsbCxyP3RoaXMucHJvZ3Jlc3Muc3RhY2suY29uY2F0KHIpOm51bGwpfSx5LnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcztyZXR1cm4gdGhpcy50aGVuQ29yZSh0LGUsZnVuY3Rpb24oZSx0KXtyZXR1cm4gbi51cGRhdGVQcm9ncmVzcyhudWxsLG51bGwsMSxbZV0pLFByb21pc2UucHJvdG90eXBlLnRoZW4uY2FsbCh0aGlzLGZ1bmN0aW9uKHQpe3JldHVybiBuLnVwZGF0ZVByb2dyZXNzKG51bGwsZSksdH0pLnRoZW4oZSx0KS50aGVuKGZ1bmN0aW9uKHQpe3JldHVybiBuLnVwZGF0ZVByb2dyZXNzKDEpLHR9KX0pfSx5LnByb3RvdHlwZS50aGVuQ29yZT1mdW5jdGlvbih0LGUsbil7bj1ufHxQcm9taXNlLnByb3RvdHlwZS50aGVuO3ZhciByPXRoaXM7dCYmKHQ9dC5iaW5kKHIpKSxlJiYoZT1lLmJpbmQocikpO3ZhciBpPS0xIT09UHJvbWlzZS50b1N0cmluZygpLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpJiZcIlByb21pc2VcIj09PVByb21pc2UubmFtZT9yOnkuY29udmVydChPYmplY3QuYXNzaWduKHt9LHIpLFByb21pc2UucHJvdG90eXBlKSxvPW4uY2FsbChpLHQsZSk7cmV0dXJuIHkuY29udmVydChvLHIuX19wcm90b19fKX0seS5wcm90b3R5cGUudGhlbkV4dGVybmFsPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIFByb21pc2UucHJvdG90eXBlLnRoZW4uY2FsbCh0aGlzLHQsZSl9LHkucHJvdG90eXBlLnRoZW5MaXN0PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7cmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbih0KXtlPWUudGhlbkNvcmUodCl9KSxlfSx5LnByb3RvdHlwZS5jYXRjaD1mdW5jdGlvbih0KXt0JiYodD10LmJpbmQodGhpcykpO3ZhciBlPVByb21pc2UucHJvdG90eXBlLmNhdGNoLmNhbGwodGhpcyx0KTtyZXR1cm4geS5jb252ZXJ0KGUsdGhpcyl9LHkucHJvdG90eXBlLmNhdGNoRXh0ZXJuYWw9ZnVuY3Rpb24odCl7cmV0dXJuIFByb21pc2UucHJvdG90eXBlLmNhdGNoLmNhbGwodGhpcyx0KX0seS5wcm90b3R5cGUuZXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcih0KX0pfSx5LnByb3RvdHlwZS51c2luZz15LnByb3RvdHlwZS5zZXQseS5wcm90b3R5cGUuc2F2ZUFzPXkucHJvdG90eXBlLnNhdmUseS5wcm90b3R5cGUuZXhwb3J0PXkucHJvdG90eXBlLm91dHB1dCx5LnByb3RvdHlwZS5ydW49eS5wcm90b3R5cGUudGhlbixsdC5nZXRQYWdlU2l6ZT1mdW5jdGlvbih0LGUsbil7aWYoXCJvYmplY3RcIj09PXNlKHQpKXt2YXIgcj10O3Q9ci5vcmllbnRhdGlvbixlPXIudW5pdHx8ZSxuPXIuZm9ybWF0fHxufWU9ZXx8XCJtbVwiLG49bnx8XCJhNFwiLHQ9KFwiXCIrKHR8fFwiUFwiKSkudG9Mb3dlckNhc2UoKTt2YXIgaT0oXCJcIituKS50b0xvd2VyQ2FzZSgpLG89e2EwOlsyMzgzLjk0LDMzNzAuMzldLGExOlsxNjgzLjc4LDIzODMuOTRdLGEyOlsxMTkwLjU1LDE2ODMuNzhdLGEzOls4NDEuODksMTE5MC41NV0sYTQ6WzU5NS4yOCw4NDEuODldLGE1Ols0MTkuNTMsNTk1LjI4XSxhNjpbMjk3LjY0LDQxOS41M10sYTc6WzIwOS43NiwyOTcuNjRdLGE4OlsxNDcuNCwyMDkuNzZdLGE5OlsxMDQuODgsMTQ3LjRdLGExMDpbNzMuNywxMDQuODhdLGIwOlsyODM0LjY1LDQwMDguMTldLGIxOlsyMDA0LjA5LDI4MzQuNjVdLGIyOlsxNDE3LjMyLDIwMDQuMDldLGIzOlsxMDAwLjYzLDE0MTcuMzJdLGI0Ols3MDguNjYsMTAwMC42M10sYjU6WzQ5OC45LDcwOC42Nl0sYjY6WzM1NC4zMyw0OTguOV0sYjc6WzI0OS40NSwzNTQuMzNdLGI4OlsxNzUuNzUsMjQ5LjQ1XSxiOTpbMTI0LjcyLDE3NS43NV0sYjEwOls4Ny44NywxMjQuNzJdLGMwOlsyNTk5LjM3LDM2NzYuNTRdLGMxOlsxODM2Ljg1LDI1OTkuMzddLGMyOlsxMjk4LjI3LDE4MzYuODVdLGMzOls5MTguNDMsMTI5OC4yN10sYzQ6WzY0OS4xMyw5MTguNDNdLGM1Ols0NTkuMjEsNjQ5LjEzXSxjNjpbMzIzLjE1LDQ1OS4yMV0sYzc6WzIyOS42MSwzMjMuMTVdLGM4OlsxNjEuNTcsMjI5LjYxXSxjOTpbMTEzLjM5LDE2MS41N10sYzEwOls3OS4zNywxMTMuMzldLGRsOlszMTEuODEsNjIzLjYyXSxsZXR0ZXI6WzYxMiw3OTJdLFwiZ292ZXJubWVudC1sZXR0ZXJcIjpbNTc2LDc1Nl0sbGVnYWw6WzYxMiwxMDA4XSxcImp1bmlvci1sZWdhbFwiOls1NzYsMzYwXSxsZWRnZXI6WzEyMjQsNzkyXSx0YWJsb2lkOls3OTIsMTIyNF0sXCJjcmVkaXQtY2FyZFwiOlsxNTMsMjQzXX07c3dpdGNoKGUpe2Nhc2VcInB0XCI6dmFyIGE9MTticmVhaztjYXNlXCJtbVwiOmE9NzIvMjUuNDticmVhaztjYXNlXCJjbVwiOmE9NzIvMi41NDticmVhaztjYXNlXCJpblwiOmE9NzI7YnJlYWs7Y2FzZVwicHhcIjphPS43NTticmVhaztjYXNlXCJwY1wiOmNhc2VcImVtXCI6YT0xMjticmVhaztjYXNlXCJleFwiOmE9NjticmVhaztkZWZhdWx0OnRocm93XCJJbnZhbGlkIHVuaXQ6IFwiK2V9aWYoby5oYXNPd25Qcm9wZXJ0eShpKSl2YXIgcz1vW2ldWzFdL2EsbD1vW2ldWzBdL2E7ZWxzZSB0cnl7cz1uWzFdLGw9blswXX1jYXRjaCh0KXt0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGZvcm1hdDogXCIrbil9aWYoXCJwXCI9PT10fHxcInBvcnRyYWl0XCI9PT10KXtpZih0PVwicFwiLHM8bCl7dmFyIGg9bDtsPXMscz1ofX1lbHNle2lmKFwibFwiIT09dCYmXCJsYW5kc2NhcGVcIiE9PXQpdGhyb3dcIkludmFsaWQgb3JpZW50YXRpb246IFwiK3Q7dD1cImxcIixsPHMmJihoPWwsbD1zLHM9aCl9cmV0dXJue3dpZHRoOmwsaGVpZ2h0OnMsdW5pdDplLGs6YX19LGkuaHRtbD1mdW5jdGlvbih0LGUpeyhlPWV8fHt9KS5jYWxsYmFjaz1lLmNhbGxiYWNrfHxmdW5jdGlvbigpe30sZS5odG1sMmNhbnZhcz1lLmh0bWwyY2FudmFzfHx7fSxlLmh0bWwyY2FudmFzLmNhbnZhcz1lLmh0bWwyY2FudmFzLmNhbnZhc3x8dGhpcy5jYW52YXMsZS5qc1BERj1lLmpzUERGfHx0aGlzLGUuanNQREY7dmFyIG49bmV3IHkoZSk7cmV0dXJuIGUud29ya2VyP246bi5mcm9tKHQpLmRvQ2FsbGJhY2soKX0sbHQuQVBJLmFkZEpTPWZ1bmN0aW9uKHQpe3JldHVybiBiPXQsdGhpcy5pbnRlcm5hbC5ldmVudHMuc3Vic2NyaWJlKFwicG9zdFB1dFJlc291cmNlc1wiLGZ1bmN0aW9uKHQpe3Y9dGhpcy5pbnRlcm5hbC5uZXdPYmplY3QoKSx0aGlzLmludGVybmFsLm91dChcIjw8XCIpLHRoaXMuaW50ZXJuYWwub3V0KFwiL05hbWVzIFsoRW1iZWRkZWRKUykgXCIrKHYrMSkrXCIgMCBSXVwiKSx0aGlzLmludGVybmFsLm91dChcIj4+XCIpLHRoaXMuaW50ZXJuYWwub3V0KFwiZW5kb2JqXCIpLHc9dGhpcy5pbnRlcm5hbC5uZXdPYmplY3QoKSx0aGlzLmludGVybmFsLm91dChcIjw8XCIpLHRoaXMuaW50ZXJuYWwub3V0KFwiL1MgL0phdmFTY3JpcHRcIiksdGhpcy5pbnRlcm5hbC5vdXQoXCIvSlMgKFwiK2IrXCIpXCIpLHRoaXMuaW50ZXJuYWwub3V0KFwiPj5cIiksdGhpcy5pbnRlcm5hbC5vdXQoXCJlbmRvYmpcIil9KSx0aGlzLmludGVybmFsLmV2ZW50cy5zdWJzY3JpYmUoXCJwdXRDYXRhbG9nXCIsZnVuY3Rpb24oKXt2b2lkIDAhPT12JiZ2b2lkIDAhPT13JiZ0aGlzLmludGVybmFsLm91dChcIi9OYW1lcyA8PC9KYXZhU2NyaXB0IFwiK3YrXCIgMCBSPj5cIil9KSx0aGlzfSwoXHJcbi8qKlxyXG4gICAqIEBsaWNlbnNlXHJcbiAgICogQ29weXJpZ2h0IChjKSAyMDE0IFN0ZXZlbiBTcHVuZ2luIChUd2VsdmVUb25lIExMQykgIHN0ZXZlbkB0d2VsdmV0b25lLnR2XHJcbiAgICpcclxuICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAgICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXHJcbiAgICovXHJcbng9bHQuQVBJKS5ldmVudHMucHVzaChbXCJwb3N0UHV0UmVzb3VyY2VzXCIsZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9L14oXFxkKykgMCBvYmokLztpZigwPHRoaXMub3V0bGluZS5yb290LmNoaWxkcmVuLmxlbmd0aClmb3IodmFyIG49dC5vdXRsaW5lLnJlbmRlcigpLnNwbGl0KC9cXHJcXG4vKSxyPTA7cjxuLmxlbmd0aDtyKyspe3ZhciBpPW5bcl0sbz1lLmV4ZWMoaSk7aWYobnVsbCE9byl7dmFyIGE9b1sxXTt0LmludGVybmFsLm5ld09iamVjdERlZmVycmVkQmVnaW4oYSwhMSl9dC5pbnRlcm5hbC53cml0ZShpKX1pZih0aGlzLm91dGxpbmUuY3JlYXRlTmFtZWREZXN0aW5hdGlvbnMpe3ZhciBzPXRoaXMuaW50ZXJuYWwucGFnZXMubGVuZ3RoLGw9W107Zm9yKHI9MDtyPHM7cisrKXt2YXIgaD10LmludGVybmFsLm5ld09iamVjdCgpO2wucHVzaChoKTt2YXIgdT10LmludGVybmFsLmdldFBhZ2VJbmZvKHIrMSk7dC5pbnRlcm5hbC53cml0ZShcIjw8IC9EW1wiK3Uub2JqSWQrXCIgMCBSIC9YWVogbnVsbCBudWxsIG51bGxdPj4gZW5kb2JqXCIpfXZhciBjPXQuaW50ZXJuYWwubmV3T2JqZWN0KCk7Zm9yKHQuaW50ZXJuYWwud3JpdGUoXCI8PCAvTmFtZXMgWyBcIikscj0wO3I8bC5sZW5ndGg7cisrKXQuaW50ZXJuYWwud3JpdGUoXCIocGFnZV9cIisocisxKStcIilcIitsW3JdK1wiIDAgUlwiKTt0LmludGVybmFsLndyaXRlKFwiIF0gPj5cIixcImVuZG9ialwiKSx0LmludGVybmFsLm5ld09iamVjdCgpLHQuaW50ZXJuYWwud3JpdGUoXCI8PCAvRGVzdHMgXCIrYytcIiAwIFJcIiksdC5pbnRlcm5hbC53cml0ZShcIj4+XCIsXCJlbmRvYmpcIil9fV0pLHguZXZlbnRzLnB1c2goW1wicHV0Q2F0YWxvZ1wiLGZ1bmN0aW9uKCl7MDx0aGlzLm91dGxpbmUucm9vdC5jaGlsZHJlbi5sZW5ndGgmJih0aGlzLmludGVybmFsLndyaXRlKFwiL091dGxpbmVzXCIsdGhpcy5vdXRsaW5lLm1ha2VSZWYodGhpcy5vdXRsaW5lLnJvb3QpKSx0aGlzLm91dGxpbmUuY3JlYXRlTmFtZWREZXN0aW5hdGlvbnMmJnRoaXMuaW50ZXJuYWwud3JpdGUoXCIvTmFtZXMgXCIrbmFtZXNPaWQrXCIgMCBSXCIpKX1dKSx4LmV2ZW50cy5wdXNoKFtcImluaXRpYWxpemVkXCIsZnVuY3Rpb24oKXt2YXIgYT10aGlzO2Eub3V0bGluZT17Y3JlYXRlTmFtZWREZXN0aW5hdGlvbnM6ITEscm9vdDp7Y2hpbGRyZW46W119fSxhLm91dGxpbmUuYWRkPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj17dGl0bGU6ZSxvcHRpb25zOm4sY2hpbGRyZW46W119O3JldHVybiBudWxsPT10JiYodD10aGlzLnJvb3QpLHQuY2hpbGRyZW4ucHVzaChyKSxyfSxhLm91dGxpbmUucmVuZGVyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3R4PXt9LHRoaXMuY3R4LnZhbD1cIlwiLHRoaXMuY3R4LnBkZj1hLHRoaXMuZ2VuSWRzX3IodGhpcy5yb290KSx0aGlzLnJlbmRlclJvb3QodGhpcy5yb290KSx0aGlzLnJlbmRlckl0ZW1zKHRoaXMucm9vdCksdGhpcy5jdHgudmFsfSxhLm91dGxpbmUuZ2VuSWRzX3I9ZnVuY3Rpb24odCl7dC5pZD1hLmludGVybmFsLm5ld09iamVjdERlZmVycmVkKCk7Zm9yKHZhciBlPTA7ZTx0LmNoaWxkcmVuLmxlbmd0aDtlKyspdGhpcy5nZW5JZHNfcih0LmNoaWxkcmVuW2VdKX0sYS5vdXRsaW5lLnJlbmRlclJvb3Q9ZnVuY3Rpb24odCl7dGhpcy5vYmpTdGFydCh0KSx0aGlzLmxpbmUoXCIvVHlwZSAvT3V0bGluZXNcIiksMDx0LmNoaWxkcmVuLmxlbmd0aCYmKHRoaXMubGluZShcIi9GaXJzdCBcIit0aGlzLm1ha2VSZWYodC5jaGlsZHJlblswXSkpLHRoaXMubGluZShcIi9MYXN0IFwiK3RoaXMubWFrZVJlZih0LmNoaWxkcmVuW3QuY2hpbGRyZW4ubGVuZ3RoLTFdKSkpLHRoaXMubGluZShcIi9Db3VudCBcIit0aGlzLmNvdW50X3Ioe2NvdW50OjB9LHQpKSx0aGlzLm9iakVuZCgpfSxhLm91dGxpbmUucmVuZGVySXRlbXM9ZnVuY3Rpb24odCl7dGhpcy5jdHgucGRmLmludGVybmFsLmdldENvb3JkaW5hdGVTdHJpbmc7Zm9yKHZhciBlPXRoaXMuY3R4LnBkZi5pbnRlcm5hbC5nZXRWZXJ0aWNhbENvb3JkaW5hdGVTdHJpbmcsbj0wO248dC5jaGlsZHJlbi5sZW5ndGg7bisrKXt2YXIgcj10LmNoaWxkcmVuW25dO3RoaXMub2JqU3RhcnQociksdGhpcy5saW5lKFwiL1RpdGxlIFwiK3RoaXMubWFrZVN0cmluZyhyLnRpdGxlKSksdGhpcy5saW5lKFwiL1BhcmVudCBcIit0aGlzLm1ha2VSZWYodCkpLDA8biYmdGhpcy5saW5lKFwiL1ByZXYgXCIrdGhpcy5tYWtlUmVmKHQuY2hpbGRyZW5bbi0xXSkpLG48dC5jaGlsZHJlbi5sZW5ndGgtMSYmdGhpcy5saW5lKFwiL05leHQgXCIrdGhpcy5tYWtlUmVmKHQuY2hpbGRyZW5bbisxXSkpLDA8ci5jaGlsZHJlbi5sZW5ndGgmJih0aGlzLmxpbmUoXCIvRmlyc3QgXCIrdGhpcy5tYWtlUmVmKHIuY2hpbGRyZW5bMF0pKSx0aGlzLmxpbmUoXCIvTGFzdCBcIit0aGlzLm1ha2VSZWYoci5jaGlsZHJlbltyLmNoaWxkcmVuLmxlbmd0aC0xXSkpKTt2YXIgaT10aGlzLmNvdW50PXRoaXMuY291bnRfcih7Y291bnQ6MH0scik7aWYoMDxpJiZ0aGlzLmxpbmUoXCIvQ291bnQgXCIraSksci5vcHRpb25zJiZyLm9wdGlvbnMucGFnZU51bWJlcil7dmFyIG89YS5pbnRlcm5hbC5nZXRQYWdlSW5mbyhyLm9wdGlvbnMucGFnZU51bWJlcik7dGhpcy5saW5lKFwiL0Rlc3QgW1wiK28ub2JqSWQrXCIgMCBSIC9YWVogMCBcIitlKDApK1wiIDBdXCIpfXRoaXMub2JqRW5kKCl9Zm9yKG49MDtuPHQuY2hpbGRyZW4ubGVuZ3RoO24rKylyPXQuY2hpbGRyZW5bbl0sdGhpcy5yZW5kZXJJdGVtcyhyKX0sYS5vdXRsaW5lLmxpbmU9ZnVuY3Rpb24odCl7dGhpcy5jdHgudmFsKz10K1wiXFxyXFxuXCJ9LGEub3V0bGluZS5tYWtlUmVmPWZ1bmN0aW9uKHQpe3JldHVybiB0LmlkK1wiIDAgUlwifSxhLm91dGxpbmUubWFrZVN0cmluZz1mdW5jdGlvbih0KXtyZXR1cm5cIihcIithLmludGVybmFsLnBkZkVzY2FwZSh0KStcIilcIn0sYS5vdXRsaW5lLm9ialN0YXJ0PWZ1bmN0aW9uKHQpe3RoaXMuY3R4LnZhbCs9XCJcXHJcXG5cIit0LmlkK1wiIDAgb2JqXFxyXFxuPDxcXHJcXG5cIn0sYS5vdXRsaW5lLm9iakVuZD1mdW5jdGlvbih0KXt0aGlzLmN0eC52YWwrPVwiPj4gXFxyXFxuZW5kb2JqXFxyXFxuXCJ9LGEub3V0bGluZS5jb3VudF9yPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmNoaWxkcmVuLmxlbmd0aDtuKyspdC5jb3VudCsrLHRoaXMuY291bnRfcih0LGUuY2hpbGRyZW5bbl0pO3JldHVybiB0LmNvdW50fX1dKSxcclxuLyoqXHJcbiAgICogQGxpY2Vuc2VcclxuICAgKiBcclxuICAgKiBDb3B5cmlnaHQgKGMpIDIwMTQgSmFtZXMgUm9iYiwgaHR0cHM6Ly9naXRodWIuY29tL2phbWVzYnJvYmJcclxuICAgKlxyXG4gICAqIFxyXG4gICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICovXHJcbkk9bHQuQVBJLEM9ZnVuY3Rpb24oKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBEZWZsYXRlcjtpZighdCl0aHJvdyBuZXcgRXJyb3IoXCJyZXF1aXJlcyBkZWZsYXRlLmpzIGZvciBjb21wcmVzc2lvblwiKTtyZXR1cm4gdH0sQj1mdW5jdGlvbih0LGUsbixyKXt2YXIgaT01LG89RTtzd2l0Y2gocil7Y2FzZSBJLmltYWdlX2NvbXByZXNzaW9uLkZBU1Q6aT0zLG89ajticmVhaztjYXNlIEkuaW1hZ2VfY29tcHJlc3Npb24uTUVESVVNOmk9NixvPU07YnJlYWs7Y2FzZSBJLmltYWdlX2NvbXByZXNzaW9uLlNMT1c6aT05LG89T310PUEodCxlLG4sbyk7dmFyIGE9bmV3IFVpbnQ4QXJyYXkoTihpKSkscz1MKHQpLGw9bmV3IERlZmxhdGVyKGkpLGg9bC5hcHBlbmQodCksdT1sLmZsdXNoKCksYz1hLmxlbmd0aCtoLmxlbmd0aCt1Lmxlbmd0aCxmPW5ldyBVaW50OEFycmF5KGMrNCk7cmV0dXJuIGYuc2V0KGEpLGYuc2V0KGgsYS5sZW5ndGgpLGYuc2V0KHUsYS5sZW5ndGgraC5sZW5ndGgpLGZbYysrXT1zPj4+MjQmMjU1LGZbYysrXT1zPj4+MTYmMjU1LGZbYysrXT1zPj4+OCYyNTUsZltjKytdPTI1NSZzLEkuYXJyYXlCdWZmZXJUb0JpbmFyeVN0cmluZyhmKX0sTj1mdW5jdGlvbih0LGUpe3ZhciBuPU1hdGguTE9HMkUqTWF0aC5sb2coMzI3NjgpLTg8PDR8OCxyPW48PDg7cmV0dXJuIHJ8PU1hdGgubWluKDMsKGUtMSYyNTUpPj4xKTw8NixyfD0wLFtuLDI1NSYocis9MzEtciUzMSldfSxMPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuLHI9MSxpPTAsbz10Lmxlbmd0aCxhPTA7MDxvOyl7Zm9yKG8tPW49ZTxvP2U6bztpKz1yKz10W2ErK10sLS1uOyk7ciU9NjU1MjEsaSU9NjU1MjF9cmV0dXJuKGk8PDE2fHIpPj4+MH0sQT1mdW5jdGlvbih0LGUsbixyKXtmb3IodmFyIGksbyxhLHM9dC5sZW5ndGgvZSxsPW5ldyBVaW50OEFycmF5KHQubGVuZ3RoK3MpLGg9VCgpLHU9MDt1PHM7dSsrKXtpZihhPXUqZSxpPXQuc3ViYXJyYXkoYSxhK2UpLHIpbC5zZXQocihpLG4sbyksYSt1KTtlbHNle2Zvcih2YXIgYz0wLGY9aC5sZW5ndGgscD1bXTtjPGY7YysrKXBbY109aFtjXShpLG4sbyk7dmFyIGQ9UihwLmNvbmNhdCgpKTtsLnNldChwW2RdLGErdSl9bz1pfXJldHVybiBsfSxTPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1BcnJheS5hcHBseShbXSx0KTtyZXR1cm4gci51bnNoaWZ0KDApLHJ9LGo9ZnVuY3Rpb24odCxlLG4pe3ZhciByLGk9W10sbz0wLGE9dC5sZW5ndGg7Zm9yKGlbMF09MTtvPGE7bysrKXI9dFtvLWVdfHwwLGlbbysxXT10W29dLXIrMjU2JjI1NTtyZXR1cm4gaX0sRT1mdW5jdGlvbih0LGUsbil7dmFyIHIsaT1bXSxvPTAsYT10Lmxlbmd0aDtmb3IoaVswXT0yO288YTtvKyspcj1uJiZuW29dfHwwLGlbbysxXT10W29dLXIrMjU2JjI1NTtyZXR1cm4gaX0sTT1mdW5jdGlvbih0LGUsbil7dmFyIHIsaSxvPVtdLGE9MCxzPXQubGVuZ3RoO2ZvcihvWzBdPTM7YTxzO2ErKylyPXRbYS1lXXx8MCxpPW4mJm5bYV18fDAsb1thKzFdPXRbYV0rMjU2LShyK2k+Pj4xKSYyNTU7cmV0dXJuIG99LE89ZnVuY3Rpb24odCxlLG4pe3ZhciByLGksbyxhLHM9W10sbD0wLGg9dC5sZW5ndGg7Zm9yKHNbMF09NDtsPGg7bCsrKXI9dFtsLWVdfHwwLGk9biYmbltsXXx8MCxvPW4mJm5bbC1lXXx8MCxhPXEocixpLG8pLHNbbCsxXT10W2xdLWErMjU2JjI1NTtyZXR1cm4gc30scT1mdW5jdGlvbih0LGUsbil7dmFyIHI9dCtlLW4saT1NYXRoLmFicyhyLXQpLG89TWF0aC5hYnMoci1lKSxhPU1hdGguYWJzKHItbik7cmV0dXJuIGk8PW8mJmk8PWE/dDpvPD1hP2U6bn0sVD1mdW5jdGlvbigpe3JldHVybltTLGosRSxNLE9dfSxSPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZSxuLHIsaT0wLG89dC5sZW5ndGg7aTxvOykoKGU9RCh0W2ldLnNsaWNlKDEpKSk8bnx8IW4pJiYobj1lLHI9aSksaSsrO3JldHVybiByfSxEPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wLG49dC5sZW5ndGgscj0wO2U8bjspcis9TWF0aC5hYnModFtlKytdKTtyZXR1cm4gcn0sSS5wcm9jZXNzUE5HPWZ1bmN0aW9uKHQsZSxuLHIsaSl7dmFyIG8sYSxzLGwsaCx1LGM9dGhpcy5jb2xvcl9zcGFjZXMuREVWSUNFX1JHQixmPXRoaXMuZGVjb2RlLkZMQVRFX0RFQ09ERSxwPTg7aWYodGhpcy5pc0FycmF5QnVmZmVyKHQpJiYodD1uZXcgVWludDhBcnJheSh0KSksdGhpcy5pc0FycmF5QnVmZmVyVmlldyh0KSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgUE5HfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBrdCl0aHJvdyBuZXcgRXJyb3IoXCJQTkcgc3VwcG9ydCByZXF1aXJlcyBwbmcuanMgYW5kIHpsaWIuanNcIik7aWYodD0obz1uZXcgUE5HKHQpKS5pbWdEYXRhLHA9by5iaXRzLGM9by5jb2xvclNwYWNlLGw9by5jb2xvcnMsLTEhPT1bNCw2XS5pbmRleE9mKG8uY29sb3JUeXBlKSl7aWYoOD09PW8uYml0cylmb3IodmFyIGQsZz0oXz0zMj09by5waXhlbEJpdGxlbmd0aD9uZXcgVWludDMyQXJyYXkoby5kZWNvZGVQaXhlbHMoKS5idWZmZXIpOjE2PT1vLnBpeGVsQml0bGVuZ3RoP25ldyBVaW50MTZBcnJheShvLmRlY29kZVBpeGVscygpLmJ1ZmZlcik6bmV3IFVpbnQ4QXJyYXkoby5kZWNvZGVQaXhlbHMoKS5idWZmZXIpKS5sZW5ndGgsbT1uZXcgVWludDhBcnJheShnKm8uY29sb3JzKSx5PW5ldyBVaW50OEFycmF5KGcpLHY9by5waXhlbEJpdGxlbmd0aC1vLmJpdHMsdz0wLGI9MDt3PGc7dysrKXtmb3IoeD1fW3ddLGQ9MDtkPHY7KW1bYisrXT14Pj4+ZCYyNTUsZCs9by5iaXRzO3lbd109eD4+PmQmMjU1fWlmKDE2PT09by5iaXRzKXtnPShfPW5ldyBVaW50MzJBcnJheShvLmRlY29kZVBpeGVscygpLmJ1ZmZlcikpLmxlbmd0aCxtPW5ldyBVaW50OEFycmF5KGcqKDMyL28ucGl4ZWxCaXRsZW5ndGgpKm8uY29sb3JzKSx5PW5ldyBVaW50OEFycmF5KGcqKDMyL28ucGl4ZWxCaXRsZW5ndGgpKTtmb3IodmFyIHgsTj0xPG8uY29sb3JzLEw9Yj13PTA7dzxnOyl4PV9bdysrXSxtW2IrK109eD4+PjAmMjU1LE4mJihtW2IrK109eD4+PjE2JjI1NSx4PV9bdysrXSxtW2IrK109eD4+PjAmMjU1KSx5W0wrK109eD4+PjE2JjI1NTtwPTh9ciE9PUkuaW1hZ2VfY29tcHJlc3Npb24uTk9ORSYmQygpPyh0PUIobSxvLndpZHRoKm8uY29sb3JzLG8uY29sb3JzLHIpLHU9Qih5LG8ud2lkdGgsMSxyKSk6KHQ9bSx1PXksZj1udWxsKX1pZigzPT09by5jb2xvclR5cGUmJihjPXRoaXMuY29sb3Jfc3BhY2VzLklOREVYRUQsaD1vLnBhbGV0dGUsby50cmFuc3BhcmVuY3kuaW5kZXhlZCkpe3ZhciBBPW8udHJhbnNwYXJlbmN5LmluZGV4ZWQsUz0wO2Zvcih3PTAsZz1BLmxlbmd0aDt3PGc7Kyt3KVMrPUFbd107aWYoKFMvPTI1NSk9PWctMSYmLTEhPT1BLmluZGV4T2YoMCkpcz1bQS5pbmRleE9mKDApXTtlbHNlIGlmKFMhPT1nKXt2YXIgXz1vLmRlY29kZVBpeGVscygpO2Zvcih5PW5ldyBVaW50OEFycmF5KF8ubGVuZ3RoKSx3PTAsZz1fLmxlbmd0aDt3PGc7dysrKXlbd109QVtfW3ddXTt1PUIoeSxvLndpZHRoLDEpfX12YXIgRj1mdW5jdGlvbih0KXt2YXIgZTtzd2l0Y2godCl7Y2FzZSBJLmltYWdlX2NvbXByZXNzaW9uLkZBU1Q6ZT0xMTticmVhaztjYXNlIEkuaW1hZ2VfY29tcHJlc3Npb24uTUVESVVNOmU9MTM7YnJlYWs7Y2FzZSBJLmltYWdlX2NvbXByZXNzaW9uLlNMT1c6ZT0xNDticmVhaztkZWZhdWx0OmU9MTJ9cmV0dXJuIGV9KHIpO3JldHVybiBhPWY9PT10aGlzLmRlY29kZS5GTEFURV9ERUNPREU/XCIvUHJlZGljdG9yIFwiK0YrXCIgL0NvbG9ycyBcIitsK1wiIC9CaXRzUGVyQ29tcG9uZW50IFwiK3ArXCIgL0NvbHVtbnMgXCIrby53aWR0aDpcIi9Db2xvcnMgXCIrbCtcIiAvQml0c1BlckNvbXBvbmVudCBcIitwK1wiIC9Db2x1bW5zIFwiK28ud2lkdGgsKHRoaXMuaXNBcnJheUJ1ZmZlcih0KXx8dGhpcy5pc0FycmF5QnVmZmVyVmlldyh0KSkmJih0PXRoaXMuYXJyYXlCdWZmZXJUb0JpbmFyeVN0cmluZyh0KSksKHUmJnRoaXMuaXNBcnJheUJ1ZmZlcih1KXx8dGhpcy5pc0FycmF5QnVmZmVyVmlldyh1KSkmJih1PXRoaXMuYXJyYXlCdWZmZXJUb0JpbmFyeVN0cmluZyh1KSksdGhpcy5jcmVhdGVJbWFnZUluZm8odCxvLndpZHRoLG8uaGVpZ2h0LGMscCxmLGUsbixhLHMsaCx1LEYpfXRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIFBORyBpbWFnZSBkYXRhLCB0cnkgdXNpbmcgSlBFRyBpbnN0ZWFkLlwiKX0sKFxyXG4vKipcclxuICAgKiBAbGljZW5zZVxyXG4gICAqIENvcHlyaWdodCAoYykgMjAxNyBBcmFzIEFiYmFzaSBcclxuICAgKlxyXG4gICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICAgKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcclxuICAgKi9cclxuVT1sdC5BUEkpLnByb2Nlc3NHSUY4OUE9ZnVuY3Rpb24odCxlLG4scixpKXt2YXIgbz1uZXcgQXQodCksYT1vLndpZHRoLHM9by5oZWlnaHQsbD1bXTtvLmRlY29kZUFuZEJsaXRGcmFtZVJHQkEoMCxsKTt2YXIgaD17ZGF0YTpsLHdpZHRoOmEsaGVpZ2h0OnN9LHU9bmV3IF90KDEwMCkuZW5jb2RlKGgsMTAwKTtyZXR1cm4gVS5wcm9jZXNzSlBFRy5jYWxsKHRoaXMsdSxlLG4scil9LFUucHJvY2Vzc0dJRjg3QT1VLnByb2Nlc3NHSUY4OUEsKFxyXG4vKipcclxuICAgKiBDb3B5cmlnaHQgKGMpIDIwMTggQXJhcyBBYmJhc2kgXHJcbiAgICpcclxuICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAgICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXHJcbiAgICovXHJcbno9bHQuQVBJKS5wcm9jZXNzQk1QPWZ1bmN0aW9uKHQsZSxuLHIsaSl7dmFyIG89bmV3IEZ0KHQsITEpLGE9by53aWR0aCxzPW8uaGVpZ2h0LGw9e2RhdGE6by5nZXREYXRhKCksd2lkdGg6YSxoZWlnaHQ6c30saD1uZXcgX3QoMTAwKS5lbmNvZGUobCwxMDApO3JldHVybiB6LnByb2Nlc3NKUEVHLmNhbGwodGhpcyxoLGUsbixyKX0sbHQuQVBJLnNldExhbmd1YWdlPWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10aGlzLmludGVybmFsLmxhbmd1YWdlU2V0dGluZ3MmJih0aGlzLmludGVybmFsLmxhbmd1YWdlU2V0dGluZ3M9e30sdGhpcy5pbnRlcm5hbC5sYW5ndWFnZVNldHRpbmdzLmlzU3Vic2NyaWJlZD0hMSksdm9pZCAwIT09e2FmOlwiQWZyaWthYW5zXCIsc3E6XCJBbGJhbmlhblwiLGFyOlwiQXJhYmljIChTdGFuZGFyZClcIixcImFyLURaXCI6XCJBcmFiaWMgKEFsZ2VyaWEpXCIsXCJhci1CSFwiOlwiQXJhYmljIChCYWhyYWluKVwiLFwiYXItRUdcIjpcIkFyYWJpYyAoRWd5cHQpXCIsXCJhci1JUVwiOlwiQXJhYmljIChJcmFxKVwiLFwiYXItSk9cIjpcIkFyYWJpYyAoSm9yZGFuKVwiLFwiYXItS1dcIjpcIkFyYWJpYyAoS3V3YWl0KVwiLFwiYXItTEJcIjpcIkFyYWJpYyAoTGViYW5vbilcIixcImFyLUxZXCI6XCJBcmFiaWMgKExpYnlhKVwiLFwiYXItTUFcIjpcIkFyYWJpYyAoTW9yb2NjbylcIixcImFyLU9NXCI6XCJBcmFiaWMgKE9tYW4pXCIsXCJhci1RQVwiOlwiQXJhYmljIChRYXRhcilcIixcImFyLVNBXCI6XCJBcmFiaWMgKFNhdWRpIEFyYWJpYSlcIixcImFyLVNZXCI6XCJBcmFiaWMgKFN5cmlhKVwiLFwiYXItVE5cIjpcIkFyYWJpYyAoVHVuaXNpYSlcIixcImFyLUFFXCI6XCJBcmFiaWMgKFUuQS5FLilcIixcImFyLVlFXCI6XCJBcmFiaWMgKFllbWVuKVwiLGFuOlwiQXJhZ29uZXNlXCIsaHk6XCJBcm1lbmlhblwiLGFzOlwiQXNzYW1lc2VcIixhc3Q6XCJBc3R1cmlhblwiLGF6OlwiQXplcmJhaWphbmlcIixldTpcIkJhc3F1ZVwiLGJlOlwiQmVsYXJ1c2lhblwiLGJuOlwiQmVuZ2FsaVwiLGJzOlwiQm9zbmlhblwiLGJyOlwiQnJldG9uXCIsYmc6XCJCdWxnYXJpYW5cIixteTpcIkJ1cm1lc2VcIixjYTpcIkNhdGFsYW5cIixjaDpcIkNoYW1vcnJvXCIsY2U6XCJDaGVjaGVuXCIsemg6XCJDaGluZXNlXCIsXCJ6aC1IS1wiOlwiQ2hpbmVzZSAoSG9uZyBLb25nKVwiLFwiemgtQ05cIjpcIkNoaW5lc2UgKFBSQylcIixcInpoLVNHXCI6XCJDaGluZXNlIChTaW5nYXBvcmUpXCIsXCJ6aC1UV1wiOlwiQ2hpbmVzZSAoVGFpd2FuKVwiLGN2OlwiQ2h1dmFzaFwiLGNvOlwiQ29yc2ljYW5cIixjcjpcIkNyZWVcIixocjpcIkNyb2F0aWFuXCIsY3M6XCJDemVjaFwiLGRhOlwiRGFuaXNoXCIsbmw6XCJEdXRjaCAoU3RhbmRhcmQpXCIsXCJubC1CRVwiOlwiRHV0Y2ggKEJlbGdpYW4pXCIsZW46XCJFbmdsaXNoXCIsXCJlbi1BVVwiOlwiRW5nbGlzaCAoQXVzdHJhbGlhKVwiLFwiZW4tQlpcIjpcIkVuZ2xpc2ggKEJlbGl6ZSlcIixcImVuLUNBXCI6XCJFbmdsaXNoIChDYW5hZGEpXCIsXCJlbi1JRVwiOlwiRW5nbGlzaCAoSXJlbGFuZClcIixcImVuLUpNXCI6XCJFbmdsaXNoIChKYW1haWNhKVwiLFwiZW4tTlpcIjpcIkVuZ2xpc2ggKE5ldyBaZWFsYW5kKVwiLFwiZW4tUEhcIjpcIkVuZ2xpc2ggKFBoaWxpcHBpbmVzKVwiLFwiZW4tWkFcIjpcIkVuZ2xpc2ggKFNvdXRoIEFmcmljYSlcIixcImVuLVRUXCI6XCJFbmdsaXNoIChUcmluaWRhZCAmIFRvYmFnbylcIixcImVuLUdCXCI6XCJFbmdsaXNoIChVbml0ZWQgS2luZ2RvbSlcIixcImVuLVVTXCI6XCJFbmdsaXNoIChVbml0ZWQgU3RhdGVzKVwiLFwiZW4tWldcIjpcIkVuZ2xpc2ggKFppbWJhYndlKVwiLGVvOlwiRXNwZXJhbnRvXCIsZXQ6XCJFc3RvbmlhblwiLGZvOlwiRmFlcm9lc2VcIixmajpcIkZpamlhblwiLGZpOlwiRmlubmlzaFwiLGZyOlwiRnJlbmNoIChTdGFuZGFyZClcIixcImZyLUJFXCI6XCJGcmVuY2ggKEJlbGdpdW0pXCIsXCJmci1DQVwiOlwiRnJlbmNoIChDYW5hZGEpXCIsXCJmci1GUlwiOlwiRnJlbmNoIChGcmFuY2UpXCIsXCJmci1MVVwiOlwiRnJlbmNoIChMdXhlbWJvdXJnKVwiLFwiZnItTUNcIjpcIkZyZW5jaCAoTW9uYWNvKVwiLFwiZnItQ0hcIjpcIkZyZW5jaCAoU3dpdHplcmxhbmQpXCIsZnk6XCJGcmlzaWFuXCIsZnVyOlwiRnJpdWxpYW5cIixnZDpcIkdhZWxpYyAoU2NvdHMpXCIsXCJnZC1JRVwiOlwiR2FlbGljIChJcmlzaClcIixnbDpcIkdhbGFjaWFuXCIsa2E6XCJHZW9yZ2lhblwiLGRlOlwiR2VybWFuIChTdGFuZGFyZClcIixcImRlLUFUXCI6XCJHZXJtYW4gKEF1c3RyaWEpXCIsXCJkZS1ERVwiOlwiR2VybWFuIChHZXJtYW55KVwiLFwiZGUtTElcIjpcIkdlcm1hbiAoTGllY2h0ZW5zdGVpbilcIixcImRlLUxVXCI6XCJHZXJtYW4gKEx1eGVtYm91cmcpXCIsXCJkZS1DSFwiOlwiR2VybWFuIChTd2l0emVybGFuZClcIixlbDpcIkdyZWVrXCIsZ3U6XCJHdWp1cmF0aVwiLGh0OlwiSGFpdGlhblwiLGhlOlwiSGVicmV3XCIsaGk6XCJIaW5kaVwiLGh1OlwiSHVuZ2FyaWFuXCIsaXM6XCJJY2VsYW5kaWNcIixpZDpcIkluZG9uZXNpYW5cIixpdTpcIkludWt0aXR1dFwiLGdhOlwiSXJpc2hcIixpdDpcIkl0YWxpYW4gKFN0YW5kYXJkKVwiLFwiaXQtQ0hcIjpcIkl0YWxpYW4gKFN3aXR6ZXJsYW5kKVwiLGphOlwiSmFwYW5lc2VcIixrbjpcIkthbm5hZGFcIixrczpcIkthc2htaXJpXCIsa2s6XCJLYXpha2hcIixrbTpcIktobWVyXCIsa3k6XCJLaXJnaGl6XCIsdGxoOlwiS2xpbmdvblwiLGtvOlwiS29yZWFuXCIsXCJrby1LUFwiOlwiS29yZWFuIChOb3J0aCBLb3JlYSlcIixcImtvLUtSXCI6XCJLb3JlYW4gKFNvdXRoIEtvcmVhKVwiLGxhOlwiTGF0aW5cIixsdjpcIkxhdHZpYW5cIixsdDpcIkxpdGh1YW5pYW5cIixsYjpcIkx1eGVtYm91cmdpc2hcIixtazpcIkZZUk8gTWFjZWRvbmlhblwiLG1zOlwiTWFsYXlcIixtbDpcIk1hbGF5YWxhbVwiLG10OlwiTWFsdGVzZVwiLG1pOlwiTWFvcmlcIixtcjpcIk1hcmF0aGlcIixtbzpcIk1vbGRhdmlhblwiLG52OlwiTmF2YWpvXCIsbmc6XCJOZG9uZ2FcIixuZTpcIk5lcGFsaVwiLG5vOlwiTm9yd2VnaWFuXCIsbmI6XCJOb3J3ZWdpYW4gKEJva21hbClcIixubjpcIk5vcndlZ2lhbiAoTnlub3JzaylcIixvYzpcIk9jY2l0YW5cIixvcjpcIk9yaXlhXCIsb206XCJPcm9tb1wiLGZhOlwiUGVyc2lhblwiLFwiZmEtSVJcIjpcIlBlcnNpYW4vSXJhblwiLHBsOlwiUG9saXNoXCIscHQ6XCJQb3J0dWd1ZXNlXCIsXCJwdC1CUlwiOlwiUG9ydHVndWVzZSAoQnJhemlsKVwiLHBhOlwiUHVuamFiaVwiLFwicGEtSU5cIjpcIlB1bmphYmkgKEluZGlhKVwiLFwicGEtUEtcIjpcIlB1bmphYmkgKFBha2lzdGFuKVwiLHF1OlwiUXVlY2h1YVwiLHJtOlwiUmhhZXRvLVJvbWFuaWNcIixybzpcIlJvbWFuaWFuXCIsXCJyby1NT1wiOlwiUm9tYW5pYW4gKE1vbGRhdmlhKVwiLHJ1OlwiUnVzc2lhblwiLFwicnUtTU9cIjpcIlJ1c3NpYW4gKE1vbGRhdmlhKVwiLHN6OlwiU2FtaSAoTGFwcGlzaClcIixzZzpcIlNhbmdvXCIsc2E6XCJTYW5za3JpdFwiLHNjOlwiU2FyZGluaWFuXCIsc2Q6XCJTaW5kaGlcIixzaTpcIlNpbmdoYWxlc2VcIixzcjpcIlNlcmJpYW5cIixzazpcIlNsb3Zha1wiLHNsOlwiU2xvdmVuaWFuXCIsc286XCJTb21hbmlcIixzYjpcIlNvcmJpYW5cIixlczpcIlNwYW5pc2hcIixcImVzLUFSXCI6XCJTcGFuaXNoIChBcmdlbnRpbmEpXCIsXCJlcy1CT1wiOlwiU3BhbmlzaCAoQm9saXZpYSlcIixcImVzLUNMXCI6XCJTcGFuaXNoIChDaGlsZSlcIixcImVzLUNPXCI6XCJTcGFuaXNoIChDb2xvbWJpYSlcIixcImVzLUNSXCI6XCJTcGFuaXNoIChDb3N0YSBSaWNhKVwiLFwiZXMtRE9cIjpcIlNwYW5pc2ggKERvbWluaWNhbiBSZXB1YmxpYylcIixcImVzLUVDXCI6XCJTcGFuaXNoIChFY3VhZG9yKVwiLFwiZXMtU1ZcIjpcIlNwYW5pc2ggKEVsIFNhbHZhZG9yKVwiLFwiZXMtR1RcIjpcIlNwYW5pc2ggKEd1YXRlbWFsYSlcIixcImVzLUhOXCI6XCJTcGFuaXNoIChIb25kdXJhcylcIixcImVzLU1YXCI6XCJTcGFuaXNoIChNZXhpY28pXCIsXCJlcy1OSVwiOlwiU3BhbmlzaCAoTmljYXJhZ3VhKVwiLFwiZXMtUEFcIjpcIlNwYW5pc2ggKFBhbmFtYSlcIixcImVzLVBZXCI6XCJTcGFuaXNoIChQYXJhZ3VheSlcIixcImVzLVBFXCI6XCJTcGFuaXNoIChQZXJ1KVwiLFwiZXMtUFJcIjpcIlNwYW5pc2ggKFB1ZXJ0byBSaWNvKVwiLFwiZXMtRVNcIjpcIlNwYW5pc2ggKFNwYWluKVwiLFwiZXMtVVlcIjpcIlNwYW5pc2ggKFVydWd1YXkpXCIsXCJlcy1WRVwiOlwiU3BhbmlzaCAoVmVuZXp1ZWxhKVwiLHN4OlwiU3V0dVwiLHN3OlwiU3dhaGlsaVwiLHN2OlwiU3dlZGlzaFwiLFwic3YtRklcIjpcIlN3ZWRpc2ggKEZpbmxhbmQpXCIsXCJzdi1TVlwiOlwiU3dlZGlzaCAoU3dlZGVuKVwiLHRhOlwiVGFtaWxcIix0dDpcIlRhdGFyXCIsdGU6XCJUZWx1Z2FcIix0aDpcIlRoYWlcIix0aWc6XCJUaWdyZVwiLHRzOlwiVHNvbmdhXCIsdG46XCJUc3dhbmFcIix0cjpcIlR1cmtpc2hcIix0azpcIlR1cmttZW5cIix1azpcIlVrcmFpbmlhblwiLGhzYjpcIlVwcGVyIFNvcmJpYW5cIix1cjpcIlVyZHVcIix2ZTpcIlZlbmRhXCIsdmk6XCJWaWV0bmFtZXNlXCIsdm86XCJWb2xhcHVrXCIsd2E6XCJXYWxsb29uXCIsY3k6XCJXZWxzaFwiLHhoOlwiWGhvc2FcIixqaTpcIllpZGRpc2hcIix6dTpcIlp1bHVcIn1bdF0mJih0aGlzLmludGVybmFsLmxhbmd1YWdlU2V0dGluZ3MubGFuZ3VhZ2VDb2RlPXQsITE9PT10aGlzLmludGVybmFsLmxhbmd1YWdlU2V0dGluZ3MuaXNTdWJzY3JpYmVkJiYodGhpcy5pbnRlcm5hbC5ldmVudHMuc3Vic2NyaWJlKFwicHV0Q2F0YWxvZ1wiLGZ1bmN0aW9uKCl7dGhpcy5pbnRlcm5hbC53cml0ZShcIi9MYW5nIChcIit0aGlzLmludGVybmFsLmxhbmd1YWdlU2V0dGluZ3MubGFuZ3VhZ2VDb2RlK1wiKVwiKX0pLHRoaXMuaW50ZXJuYWwubGFuZ3VhZ2VTZXR0aW5ncy5pc1N1YnNjcmliZWQ9ITApKSx0aGlzfSxcclxuLyoqIEBsaWNlbnNlXHJcbiAgICogTUlUIGxpY2Vuc2UuXHJcbiAgICogQ29weXJpZ2h0IChjKSAyMDEyIFdpbGxvdyBTeXN0ZW1zIENvcnBvcmF0aW9uLCB3aWxsb3ctc3lzdGVtcy5jb21cclxuICAgKiAgICAgICAgICAgICAgIDIwMTQgRGllZ28gQ2Fzb3JyYW4sIGh0dHBzOi8vZ2l0aHViLmNvbS9kaWVnb2NyXHJcbiAgICpcclxuICAgKiBcclxuICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAqL1xyXG5IPWx0LkFQSSxXPUguZ2V0Q2hhcldpZHRoc0FycmF5PWZ1bmN0aW9uKHQsZSl7dmFyIG4scixpLG89KGU9ZXx8e30pLmZvbnR8fHRoaXMuaW50ZXJuYWwuZ2V0Rm9udCgpLGE9ZS5mb250U2l6ZXx8dGhpcy5pbnRlcm5hbC5nZXRGb250U2l6ZSgpLHM9ZS5jaGFyU3BhY2V8fHRoaXMuaW50ZXJuYWwuZ2V0Q2hhclNwYWNlKCksbD1lLndpZHRocz9lLndpZHRoczpvLm1ldGFkYXRhLlVuaWNvZGUud2lkdGhzLGg9bC5mb2Y/bC5mb2Y6MSx1PWUua2VybmluZz9lLmtlcm5pbmc6by5tZXRhZGF0YS5Vbmljb2RlLmtlcm5pbmcsYz11LmZvZj91LmZvZjoxLGY9MCxwPWxbMF18fGgsZD1bXTtmb3Iobj0wLHI9dC5sZW5ndGg7bjxyO24rKylpPXQuY2hhckNvZGVBdChuKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBvLm1ldGFkYXRhLndpZHRoT2ZTdHJpbmc/ZC5wdXNoKChvLm1ldGFkYXRhLndpZHRoT2ZHbHlwaChvLm1ldGFkYXRhLmNoYXJhY3RlclRvR2x5cGgoaSkpK3MqKDFlMy9hKXx8MCkvMWUzKTpkLnB1c2goKGxbaV18fHApL2grKHVbaV0mJnVbaV1bZl18fDApL2MpLGY9aTtyZXR1cm4gZH0sVj1ILmdldEFycmF5U3VtPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10Lmxlbmd0aCxuPTA7ZTspbis9dFstLWVdO3JldHVybiBufSxHPUguZ2V0U3RyaW5nVW5pdFdpZHRoPWZ1bmN0aW9uKHQsZSl7dmFyIG49KGU9ZXx8e30pLmZvbnRTaXplfHx0aGlzLmludGVybmFsLmdldEZvbnRTaXplKCkscj1lLmZvbnR8fHRoaXMuaW50ZXJuYWwuZ2V0Rm9udCgpLGk9ZS5jaGFyU3BhY2V8fHRoaXMuaW50ZXJuYWwuZ2V0Q2hhclNwYWNlKCk7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2Ygci5tZXRhZGF0YS53aWR0aE9mU3RyaW5nP3IubWV0YWRhdGEud2lkdGhPZlN0cmluZyh0LG4saSkvbjpWKFcuYXBwbHkodGhpcyxhcmd1bWVudHMpKX0sWT1mdW5jdGlvbih0LGUsbixyKXtmb3IodmFyIGk9W10sbz0wLGE9dC5sZW5ndGgscz0wO28hPT1hJiZzK2Vbb108bjspcys9ZVtvXSxvKys7aS5wdXNoKHQuc2xpY2UoMCxvKSk7dmFyIGw9bztmb3Iocz0wO28hPT1hOylzK2Vbb10+ciYmKGkucHVzaCh0LnNsaWNlKGwsbykpLHM9MCxsPW8pLHMrPWVbb10sbysrO3JldHVybiBsIT09byYmaS5wdXNoKHQuc2xpY2UobCxvKSksaX0sSj1mdW5jdGlvbih0LGUsbil7bnx8KG49e30pO3ZhciByLGksbyxhLHMsbCxoPVtdLHU9W2hdLGM9bi50ZXh0SW5kZW50fHwwLGY9MCxwPTAsZD10LnNwbGl0KFwiIFwiKSxnPVcuYXBwbHkodGhpcyxbXCIgXCIsbl0pWzBdO2lmKGw9LTE9PT1uLmxpbmVJbmRlbnQ/ZFswXS5sZW5ndGgrMjpuLmxpbmVJbmRlbnR8fDApe3ZhciBtPUFycmF5KGwpLmpvaW4oXCIgXCIpLHk9W107ZC5tYXAoZnVuY3Rpb24odCl7MTwodD10LnNwbGl0KC9cXHMqXFxuLykpLmxlbmd0aD95PXkuY29uY2F0KHQubWFwKGZ1bmN0aW9uKHQsZSl7cmV0dXJuKGUmJnQubGVuZ3RoP1wiXFxuXCI6XCJcIikrdH0pKTp5LnB1c2godFswXSl9KSxkPXksbD1HLmFwcGx5KHRoaXMsW20sbl0pfWZvcihvPTAsYT1kLmxlbmd0aDtvPGE7bysrKXt2YXIgdj0wO2lmKHI9ZFtvXSxsJiZcIlxcblwiPT1yWzBdJiYocj1yLnN1YnN0cigxKSx2PTEpLGk9Vy5hcHBseSh0aGlzLFtyLG5dKSxlPGMrZisocD1WKGkpKXx8dil7aWYoZTxwKXtmb3Iocz1ZLmFwcGx5KHRoaXMsW3IsaSxlLShjK2YpLGVdKSxoLnB1c2gocy5zaGlmdCgpKSxoPVtzLnBvcCgpXTtzLmxlbmd0aDspdS5wdXNoKFtzLnNoaWZ0KCldKTtwPVYoaS5zbGljZShyLmxlbmd0aC0oaFswXT9oWzBdLmxlbmd0aDowKSkpfWVsc2UgaD1bcl07dS5wdXNoKGgpLGM9cCtsLGY9Z31lbHNlIGgucHVzaChyKSxjKz1mK3AsZj1nfWlmKGwpdmFyIHc9ZnVuY3Rpb24odCxlKXtyZXR1cm4oZT9tOlwiXCIpK3Quam9pbihcIiBcIil9O2Vsc2Ugdz1mdW5jdGlvbih0KXtyZXR1cm4gdC5qb2luKFwiIFwiKX07cmV0dXJuIHUubWFwKHcpfSxILnNwbGl0VGV4dFRvU2l6ZT1mdW5jdGlvbih0LGUsbil7dmFyIHIsaT0obj1ufHx7fSkuZm9udFNpemV8fHRoaXMuaW50ZXJuYWwuZ2V0Rm9udFNpemUoKSxvPWZ1bmN0aW9uKHQpe3ZhciBlPXswOjF9LG49e307aWYodC53aWR0aHMmJnQua2VybmluZylyZXR1cm57d2lkdGhzOnQud2lkdGhzLGtlcm5pbmc6dC5rZXJuaW5nfTt2YXIgcj10aGlzLmludGVybmFsLmdldEZvbnQodC5mb250TmFtZSx0LmZvbnRTdHlsZSksaT1cIlVuaWNvZGVcIjtyZXR1cm4gci5tZXRhZGF0YVtpXT97d2lkdGhzOnIubWV0YWRhdGFbaV0ud2lkdGhzfHxlLGtlcm5pbmc6ci5tZXRhZGF0YVtpXS5rZXJuaW5nfHxufTp7Zm9udDpyLm1ldGFkYXRhLGZvbnRTaXplOnRoaXMuaW50ZXJuYWwuZ2V0Rm9udFNpemUoKSxjaGFyU3BhY2U6dGhpcy5pbnRlcm5hbC5nZXRDaGFyU3BhY2UoKX19LmNhbGwodGhpcyxuKTtyPUFycmF5LmlzQXJyYXkodCk/dDp0LnNwbGl0KC9cXHI/XFxuLyk7dmFyIGE9MSp0aGlzLmludGVybmFsLnNjYWxlRmFjdG9yKmUvaTtvLnRleHRJbmRlbnQ9bi50ZXh0SW5kZW50PzEqbi50ZXh0SW5kZW50KnRoaXMuaW50ZXJuYWwuc2NhbGVGYWN0b3IvaTowLG8ubGluZUluZGVudD1uLmxpbmVJbmRlbnQ7dmFyIHMsbCxoPVtdO2ZvcihzPTAsbD1yLmxlbmd0aDtzPGw7cysrKWg9aC5jb25jYXQoSi5hcHBseSh0aGlzLFtyW3NdLGEsb10pKTtyZXR1cm4gaH0sXHJcbi8qKiBAbGljZW5zZVxyXG4gICBqc1BERiBzdGFuZGFyZF9mb250c19tZXRyaWNzIHBsdWdpblxyXG4gICAqIENvcHlyaWdodCAoYykgMjAxMiBXaWxsb3cgU3lzdGVtcyBDb3Jwb3JhdGlvbiwgd2lsbG93LXN5c3RlbXMuY29tXHJcbiAgICogTUlUIGxpY2Vuc2UuXHJcbiAgICogXHJcbiAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgKi9cclxuWD1sdC5BUEksWj17Y29kZVBhZ2VzOltcIldpbkFuc2lFbmNvZGluZ1wiXSxXaW5BbnNpRW5jb2Rpbmc6KEs9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVwia2xtbm9wcXJzdHV2d3h5elwiLG49e30scj0wO3I8ZS5sZW5ndGg7cisrKW5bZVtyXV09XCIwMTIzNDU2Nzg5YWJjZGVmXCJbcl07dmFyIGksbyxhLHMsbCxoPXt9LHU9MSxjPWgsZj1bXSxwPVwiXCIsZD1cIlwiLGc9dC5sZW5ndGgtMTtmb3Iocj0xO3IhPWc7KWw9dFtyXSxyKz0xLFwiJ1wiPT1sP289bz8ocz1vLmpvaW4oXCJcIiksaSk6W106bz9vLnB1c2gobCk6XCJ7XCI9PWw/KGYucHVzaChbYyxzXSksYz17fSxzPWkpOlwifVwiPT1sPygoYT1mLnBvcCgpKVswXVthWzFdXT1jLHM9aSxjPWFbMF0pOlwiLVwiPT1sP3U9LTE6cz09PWk/bi5oYXNPd25Qcm9wZXJ0eShsKT8ocCs9bltsXSxzPXBhcnNlSW50KHAsMTYpKnUsdT0xLHA9XCJcIik6cCs9bDpuLmhhc093blByb3BlcnR5KGwpPyhkKz1uW2xdLGNbc109cGFyc2VJbnQoZCwxNikqdSx1PTEscz1pLGQ9XCJcIik6ZCs9bDtyZXR1cm4gaH0pKFwiezE5bThuMjAxbjlxMjAxbzlyMjAxczlsMjAxdDltMjAxdThtMjAxdzluMjAxeDlvMjAxeThvMjAyazhxMjAybDhyMjAybTlwMjAycThwMjBhdzhrMjAzazh0MjAzdDh2MjAzdTl2MmNxOHMyMTJtOXQxNW04dzE1bjl3MmR3OXMxNms4dTE2bDl1MTdzOXoxN3g4eTE3eTl5fVwiKX0sUT17VW5pY29kZTp7Q291cmllcjpaLFwiQ291cmllci1Cb2xkXCI6WixcIkNvdXJpZXItQm9sZE9ibGlxdWVcIjpaLFwiQ291cmllci1PYmxpcXVlXCI6WixIZWx2ZXRpY2E6WixcIkhlbHZldGljYS1Cb2xkXCI6WixcIkhlbHZldGljYS1Cb2xkT2JsaXF1ZVwiOlosXCJIZWx2ZXRpY2EtT2JsaXF1ZVwiOlosXCJUaW1lcy1Sb21hblwiOlosXCJUaW1lcy1Cb2xkXCI6WixcIlRpbWVzLUJvbGRJdGFsaWNcIjpaLFwiVGltZXMtSXRhbGljXCI6Wn19LCQ9e1VuaWNvZGU6e1wiQ291cmllci1PYmxpcXVlXCI6SyhcInsnd2lkdGhzJ3trM3cnZm9mJzZvfSdrZXJuaW5nJ3snZm9mJy02b319XCIpLFwiVGltZXMtQm9sZEl0YWxpY1wiOksoXCJ7J3dpZHRocyd7azNvMnE0eWN4MnIyMDFuM20yMDFvNm8yMDFzMmwyMDF0MmwyMDF1MmwyMDF3M20yMDF4M20yMDF5M20yazF0MmwycjIwMm0ybjJuM20ybzNtMnA1bjIwMnE2bzJyMXcyczJsMnQybDJ1M20ydjN0MncxdDJ4MmwyeTF0MnoxdzNrM20zbDNtM20zbTNuM20zbzNtM3AzbTNxM20zcjNtM3MzbTIwM3QybDIwM3UybDN2MmwzdzN0M3gzdDN5M3QzejNtNGs1bjRsNG00bTRtNG40bTRvNHM0cDRtNHE0bTRyNHM0czR5NHQycjR1M200djRtNHczeDR4NXQ0eTRzNHo0czVrM3g1bDRzNW00bTVuM3I1bzN4NXA0czVxNG01cjV0NXM0bTV0M3g1dTN4NXYybDV3MXc1eDJsNXkzdDV6M202azJsNmwzbTZtM202bjJ3Nm8zbTZwMnc2cTJsNnIzbTZzM3I2dDF3NnUxdzZ2M202dzF3Nng0eTZ5M3I2ejNtN2szbTdsM203bTJyN24ycjdvMXc3cDNyN3EydzdyNG03czNtN3Qydzd1MnI3djJuN3cxcTd4Mm43eTN0MjAybDNtY2w0bWFsMnJhbTNtYW4zbWFvM21hcDNtYXIzbWFzMmxhdDR1YXUxdWF2M21hdzN3YXk0dWF6MmxiazJzYmwzdCdmb2YnNm9ibzJsYnAzdGJxM21icjF0YnMybGJ1MXlidjNtYnozbWNrNG0yMDJrM21jbTRtY240bWNvNG1jcDRtY3E1eWNyNG1jczRtY3Q0bWN1NG1jdjRtY3cycjJtM3JjeTJyY3oycmRsNHNkbTRzZG40c2RvNHNkcDRzZHE0c2RzNHNkdDRzZHU0c2R2NHNkdzRzZHozbWVrM21lbDNtZW0zbWVuM21lbzNtZXAzbWVxNHNlcjJ3ZXMyd2V0MndldTJ3ZXYyd2V3MXdleDF3ZXkxd2V6MXdmbDNyZm0zbWZuM21mbzNtZnAzbWZxM21mcjN0ZnMzbWZ0M3JmdTNyZnYzcmZ3M3JmejJ3MjAzazZvMjEybTZvMmR3MmwyY3EybDN0M20zdTJsMTdzM3gxOW0zbX0na2VybmluZyd7Y2x7NHF1NWt0NXF0NXJzMTdzczV0c30yMDFzezIwMXNzfTIwMXR7Y2tzNGxzY21zY25zY29zY3BzY2xzMnd1Mnl1MjAxdHN9MjAxeHsyd3UyeXV9Mmt7MjAxdHN9Mnd7NHF4NWt4NW91NXF4NXJzMTdzdTV0dX0yeHsxN3N1NXR1NW91fTJ5ezRxeDVreDVvdTVxeDVyczE3c3M1dHN9J2ZvZictNm9mbnsxN3N3NXR3NW91NXF3NXJzfTd0e2Nrc2Nsc2Ntc2Nuc2Nvc2NwczRsc30zdXsxN3N1NXR1NW9zNXFzfTN2ezE3c3U1dHU1b3M1cXN9N3B7MTdzdTV0dX1ja3s0cXU1a3Q1cXQ1cnMxN3NzNXRzfTRsezRxdTVrdDVxdDVyczE3c3M1dHN9Y217NHF1NWt0NXF0NXJzMTdzczV0c31jbns0cXU1a3Q1cXQ1cnMxN3NzNXRzfWNvezRxdTVrdDVxdDVyczE3c3M1dHN9Y3B7NHF1NWt0NXF0NXJzMTdzczV0c302bHs0cXU1b3U1cXc1cnQxN3N1NXR1fTVxe2NrdWNsdWNtdWNudWNvdWNwdTRsdX01cntja3VjbHVjbXVjbnVjb3VjcHU0bHV9N3F7Y2tzY2xzY21zY25zY29zY3BzNGxzfTZwezRxdTVvdTVxdzVydDE3c3c1dHd9ZWt7NHF1NW91NXF3NXJ0MTdzdTV0dX1lbHs0cXU1b3U1cXc1cnQxN3N1NXR1fWVtezRxdTVvdTVxdzVydDE3c3U1dHV9ZW57NHF1NW91NXF3NXJ0MTdzdTV0dX1lb3s0cXU1b3U1cXc1cnQxN3N1NXR1fWVwezRxdTVvdTVxdzVydDE3c3U1dHV9ZXN7MTdzczV0czVxczRxdX1ldHs0cXU1b3U1cXc1cnQxN3N3NXR3fWV1ezRxdTVvdTVxdzVydDE3c3M1dHN9ZXZ7MTdzczV0czVxczRxdX02ensxN3N3NXR3NW91NXF3NXJzfWZtezE3c3c1dHc1b3U1cXc1cnN9N257MjAxdHN9Zm97MTdzdzV0dzVvdTVxdzVyc31mcHsxN3N3NXR3NW91NXF3NXJzfWZxezE3c3c1dHc1b3U1cXc1cnN9N3J7Y2tzY2xzY21zY25zY29zY3BzNGxzfWZzezE3c3c1dHc1b3U1cXc1cnN9ZnR7MTdzdTV0dX1mdXsxN3N1NXR1fWZ2ezE3c3U1dHV9Znd7MTdzdTV0dX1mentja3NjbHNjbXNjbnNjb3NjcHM0bHN9fX1cIiksXCJIZWx2ZXRpY2EtQm9sZFwiOksoXCJ7J3dpZHRocyd7azNzMnE0c2N4MXcyMDFuM3IyMDFvNm8yMDFzMXcyMDF0MXcyMDF1MXcyMDF3M20yMDF4M20yMDF5M20yazF3MmwybDIwMm0ybjJuM3IybzNyMnA1dDIwMnE2bzJyMXMyczJsMnQybDJ1MnIydjN1MncxdzJ4MmwyeTF3MnoxdzNrM3IzbDNyM20zcjNuM3IzbzNyM3AzcjNxM3IzcjNyM3MzcjIwM3QybDIwM3UybDN2MmwzdzN1M3gzdTN5M3UzejN4NGs2bDRsNHM0bTRzNG40czRvNHM0cDRtNHEzeDRyNHk0czRzNHQxdzR1M3I0djRzNHczeDR4NW40eTRzNHo0eTVrNG01bDR5NW00czVuNG01bzN4NXA0czVxNG01cjV5NXM0bTV0NG01dTN4NXYybDV3MXc1eDJsNXkzdTV6M3I2azJsNmwzcjZtM3g2bjNyNm8zeDZwM3I2cTJsNnIzeDZzM3g2dDF3NnUxdzZ2M3I2dzF3Nng1dDZ5M3g2ejN4N2szeDdsM3g3bTJyN24zcjdvMmw3cDN4N3EzcjdyNHk3czNyN3Qzcjd1M203djJyN3cxdzd4MnI3eTN1MjAybDNyY2w0c2FsMmxhbTNyYW4zcmFvM3JhcDNyYXIzcmFzMmxhdDR0YXUycGF2M3JhdzN1YXk0dGF6MmxiazJzYmwzdSdmb2YnNm9ibzJsYnAzeGJxM3JicjF3YnMybGJ1Mm9idjNyYnozeGNrNHMyMDJrM3JjbTRzY240c2NvNHNjcDRzY3E2b2NyNHNjczRtY3Q0bWN1NG1jdjRtY3cxdzJtMnpjeTF3Y3oxd2RsNHNkbTR5ZG40eWRvNHlkcDR5ZHE0eWRzNHlkdDRzZHU0c2R2NHNkdzRzZHozeGVrM3JlbDNyZW0zcmVuM3JlbzNyZXAzcmVxNXRlcjNyZXMzcmV0M3JldTNyZXYzcmV3MXdleDF3ZXkxd2V6MXdmbDN4Zm0zeGZuM3hmbzN4ZnAzeGZxM3hmcjN1ZnMzeGZ0M3hmdTN4ZnYzeGZ3M3hmejNyMjAzazZvMjEybTZvMmR3MmwyY3EybDN0M3IzdTJsMTdzNG0xOW0zcn0na2VybmluZyd7Y2x7NHFzNWt1NW90NXFzMTdzdjV0dn0yMDF0ezJ3dzR3eTJ5d30yMDF3ezJrc30yMDF4ezJ3dzR3eTJ5d30ya3syMDF0czIwMXhzfTJ3ezdxczRxdTVrdzVvczVxdzVyczE3c3U1dHU3dHNmenN9Mnh7NW93NXFzfTJ5ezdxczRxdTVrdzVvczVxdzVyczE3c3U1dHU3dHNmenN9J2ZvZictNm83cHsxN3N1NXR1NW90fWNrezRxczVrdTVvdDVxczE3c3Y1dHZ9NGx7NHFzNWt1NW90NXFzMTdzdjV0dn1jbXs0cXM1a3U1b3Q1cXMxN3N2NXR2fWNuezRxczVrdTVvdDVxczE3c3Y1dHZ9Y297NHFzNWt1NW90NXFzMTdzdjV0dn1jcHs0cXM1a3U1b3Q1cXMxN3N2NXR2fTZsezE3c3Q1dHQ1b3N9MTdzezJrd2NsdmNtdmNudmNvdmNwdjRsdjR3d2Nrdn01b3sya3VjbHRjbXRjbnRjb3RjcHQ0bHQ0d3Rja3R9NXF7MmtzY2xzY21zY25zY29zY3BzNGxzNHd2Y2tzfTVyezJrczR3c301dHsya3djbHZjbXZjbnZjb3ZjcHY0bHY0d3dja3Z9ZW97MTdzdDV0dDVvc31mdXsxN3N1NXR1NW90fTZwezE3c3M1dHN9ZWt7MTdzdDV0dDVvc31lbHsxN3N0NXR0NW9zfWVtezE3c3Q1dHQ1b3N9ZW57MTdzdDV0dDVvc302b3syMDF0c31lcHsxN3N0NXR0NW9zfWVzezE3c3M1dHN9ZXR7MTdzczV0c31ldXsxN3NzNXRzfWV2ezE3c3M1dHN9Nnp7MTdzdTV0dTVvczVxdH1mbXsxN3N1NXR1NW9zNXF0fWZuezE3c3U1dHU1b3M1cXR9Zm97MTdzdTV0dTVvczVxdH1mcHsxN3N1NXR1NW9zNXF0fWZxezE3c3U1dHU1b3M1cXR9ZnN7MTdzdTV0dTVvczVxdH1mdHsxN3N1NXR1NW90fTdtezVvc31mdnsxN3N1NXR1NW90fWZ3ezE3c3U1dHU1b3R9fX1cIiksQ291cmllcjpLKFwieyd3aWR0aHMne2szdydmb2YnNm99J2tlcm5pbmcneydmb2YnLTZvfX1cIiksXCJDb3VyaWVyLUJvbGRPYmxpcXVlXCI6SyhcInsnd2lkdGhzJ3trM3cnZm9mJzZvfSdrZXJuaW5nJ3snZm9mJy02b319XCIpLFwiVGltZXMtQm9sZFwiOksoXCJ7J3dpZHRocyd7azNxMnE1bmN4MnIyMDFuM20yMDFvNm8yMDFzMmwyMDF0MmwyMDF1MmwyMDF3M20yMDF4M20yMDF5M20yazF0MmwybDIwMm0ybjJuM20ybzNtMnA2bzIwMnE2bzJyMXcyczJsMnQybDJ1M20ydjN0MncxdDJ4MmwyeTF0MnoxdzNrM20zbDNtM20zbTNuM20zbzNtM3AzbTNxM20zcjNtM3MzbTIwM3QybDIwM3UybDN2MmwzdzN0M3gzdDN5M3QzejNtNGs1eDRsNHM0bTRtNG40czRvNHM0cDRtNHEzeDRyNHk0czR5NHQycjR1M200djR5NHc0bTR4NXk0eTRzNHo0eTVrM3g1bDR5NW00czVuM3I1bzRtNXA0czVxNHM1cjZvNXM0czV0NHM1dTRtNXYybDV3MXc1eDJsNXkzdTV6M202azJsNmwzbTZtM3I2bjJ3Nm8zcjZwMnc2cTJsNnIzbTZzM3I2dDF3NnUybDZ2M3I2dzF3Nng1bjZ5M3I2ejNtN2szcjdsM3I3bTJ3N24ycjdvMmw3cDNyN3EzbTdyNHM3czNtN3QzbTd1Mnc3djJyN3cxcTd4MnI3eTNvMjAybDNtY2w0c2FsMmxhbTNtYW4zbWFvM21hcDNtYXIzbWFzMmxhdDR1YXUxeWF2M21hdzN0YXk0dWF6MmxiazJzYmwzdCdmb2YnNm9ibzJsYnAzcmJyMXRiczJsYnUybGJ2M21iejNtY2s0czIwMmszbWNtNHNjbjRzY280c2NwNHNjcTZvY3I0c2NzNG1jdDRtY3U0bWN2NG1jdzJyMm0zcmN5MnJjejJyZGw0c2RtNHlkbjR5ZG80eWRwNHlkcTR5ZHM0eWR0NHNkdTRzZHY0c2R3NHNkejNyZWszbWVsM21lbTNtZW4zbWVvM21lcDNtZXE0c2VyMndlczJ3ZXQyd2V1MndldjJ3ZXcxd2V4MXdleTF3ZXoxd2ZsM3JmbTNtZm4zbWZvM21mcDNtZnEzbWZyM3RmczNtZnQzcmZ1M3JmdjNyZnczcmZ6M20yMDNrNm8yMTJtNm8yZHcybDJjcTJsM3QzbTN1MmwxN3M0czE5bTNtfSdrZXJuaW5nJ3tjbHs0cXQ1a3M1b3Q1cXk1cncxN3N2NXR2fTIwMXR7Y2tzNGxzY21zY25zY29zY3BzY2xzNHd2fTJrezIwMXRzfTJ3ezRxdTVrdTdtdTVvczVxeDVydTE3c3U1dHV9Mnh7MTdzdTV0dTVvdTVxc30yeXs0cXY1a3Y3bXU1b3Q1cXo1cnUxN3N1NXR1fSdmb2YnLTZvN3R7Y2tzY2xzY21zY25zY29zY3BzNGxzfTN1ezE3c3U1dHU1b3M1cXV9M3Z7MTdzdTV0dTVvczVxdX1mdXsxN3N1NXR1NW91NXF1fTdwezE3c3U1dHU1b3U1cXV9Y2t7NHF0NWtzNW90NXF5NXJ3MTdzdjV0dn00bHs0cXQ1a3M1b3Q1cXk1cncxN3N2NXR2fWNtezRxdDVrczVvdDVxeTVydzE3c3Y1dHZ9Y257NHF0NWtzNW90NXF5NXJ3MTdzdjV0dn1jb3s0cXQ1a3M1b3Q1cXk1cncxN3N2NXR2fWNwezRxdDVrczVvdDVxeTVydzE3c3Y1dHZ9Nmx7MTdzdDV0dDVvdTVxdX0xN3N7Y2t1Y2x1Y211Y251Y291Y3B1NGx1NHd1fTVve2NrdWNsdWNtdWNudWNvdWNwdTRsdTR3dX01cXtja3pjbHpjbXpjbnpjb3pjcHo0bHo0d3V9NXJ7Y2t4Y2x4Y214Y254Y294Y3B4NGx4NHd1fTV0e2NrdWNsdWNtdWNudWNvdWNwdTRsdTR3dX03cXtja3VjbHVjbXVjbnVjb3VjcHU0bHV9NnB7MTdzdzV0dzVvdTVxdX1la3sxN3N0NXR0NXF1fWVsezE3c3Q1dHQ1b3U1cXV9ZW17MTdzdDV0dDVxdX1lbnsxN3N0NXR0NXF1fWVvezE3c3Q1dHQ1cXV9ZXB7MTdzdDV0dDVvdTVxdX1lc3sxN3NzNXRzNXF1fWV0ezE3c3c1dHc1b3U1cXV9ZXV7MTdzdzV0dzVvdTVxdX1ldnsxN3NzNXRzNXF1fTZ6ezE3c3c1dHc1b3U1cXU1cnN9Zm17MTdzdzV0dzVvdTVxdTVyc31mbnsxN3N3NXR3NW91NXF1NXJzfWZvezE3c3c1dHc1b3U1cXU1cnN9ZnB7MTdzdzV0dzVvdTVxdTVyc31mcXsxN3N3NXR3NW91NXF1NXJzfTdye2NrdGNsdGNtdGNudGNvdGNwdDRsdDVvc31mc3sxN3N3NXR3NW91NXF1NXJzfWZ0ezE3c3U1dHU1b3U1cXV9N217NW9zfWZ2ezE3c3U1dHU1b3U1cXV9Znd7MTdzdTV0dTVvdTVxdX1mentja3NjbHNjbXNjbnNjb3NjcHM0bHN9fX1cIiksU3ltYm9sOksoXCJ7J3dpZHRocyd7azN1YXc0cjE5bTNtMmsxdDJsMmwyMDJtMnkybjNtMnA1bjIwMnE2bzNrM20yczJsMnQybDJ2M3IydzF0M20zbTJ5MXQyejF3Ymsyc2JsM3InZm9mJzZvM24zbTNvM20zcDNtM3EzbTNyM20zczNtM3QzbTN1MXczdjF3M3czcjN4M3IzeTNyM3oyd2JwM3QzbDNtNXYybDV4Mmw1ejNtMnE0eWZyM3I3djNrN3cxbzd4M2t9J2tlcm5pbmcneydmb2YnLTZvfX1cIiksSGVsdmV0aWNhOksoXCJ7J3dpZHRocyd7azNwMnE0bWN4MXcyMDFuM3IyMDFvNm8yMDFzMXEyMDF0MXEyMDF1MXEyMDF3MmwyMDF4MmwyMDF5MmwyazF3MmwxdzIwMm0ybjJuM3IybzNyMnA1dDIwMnE2bzJyMW4yczJsMnQybDJ1MnIydjN1MncxdzJ4MmwyeTF3MnoxdzNrM3IzbDNyM20zcjNuM3IzbzNyM3AzcjNxM3IzcjNyM3MzcjIwM3QybDIwM3UybDN2MXczdzN1M3gzdTN5M3UzejNyNGs2cDRsNG00bTRtNG40czRvNHM0cDRtNHEzeDRyNHk0czRzNHQxdzR1M200djRtNHczcjR4NW40eTRzNHo0eTVrNG01bDR5NW00czVuNG01bzN4NXA0czVxNG01cjV5NXM0bTV0NG01dTN4NXYxdzV3MXc1eDF3NXkyejV6M3I2azJsNmwzcjZtM3I2bjNtNm8zcjZwM3I2cTF3NnIzcjZzM3I2dDFxNnUxcTZ2M202dzFxNng1bjZ5M3I2ejNyN2szcjdsM3I3bTJsN24zbTdvMXc3cDNyN3EzbTdyNHM3czNtN3QzbTd1M203djJsN3cxdTd4Mmw3eTN1MjAybDNyY2w0bWFsMmxhbTNyYW4zcmFvM3JhcDNyYXIzcmFzMmxhdDR0YXUycGF2M3JhdzN1YXk0dGF6MmxiazJzYmwzdSdmb2YnNm9ibzJsYnAzcmJyMXdiczJsYnUyb2J2M3JiejN4Y2s0bTIwMmszcmNtNG1jbjRtY280bWNwNG1jcTZvY3I0c2NzNG1jdDRtY3U0bWN2NG1jdzF3Mm0ybmN5MXdjejF3ZGw0c2RtNHlkbjR5ZG80eWRwNHlkcTR5ZHM0eWR0NHNkdTRzZHY0c2R3NHNkejN4ZWszcmVsM3JlbTNyZW4zcmVvM3JlcDNyZXE1dGVyM21lczNyZXQzcmV1M3JldjNyZXcxd2V4MXdleTF3ZXoxd2ZsM3JmbTNyZm4zcmZvM3JmcDNyZnEzcmZyM3VmczN4ZnQzcmZ1M3JmdjNyZnczcmZ6M20yMDNrNm8yMTJtNm8yZHcybDJjcTJsM3QzcjN1MXcxN3M0bTE5bTNyfSdrZXJuaW5nJ3s1cXs0d3Z9Y2x7NHFzNWt3NW93NXFzMTdzdjV0dn0yMDF0ezJ3dTR3MWsyeXV9MjAxeHsyd3U0d3kyeXV9MTdzezJrdGNsdWNtdWNudTRvdGNwdTRsdTR3eWNvdWNrdX0yd3s3cXM0cXo1azFtMTdzeTVvdzVxeDVyc2ZzdTV0eTd0dWZ6dX0yeHsxN3N5NXR5NW95NXFzfTJ5ezdxczRxejVrMW0xN3N5NW93NXF4NXJzZnN1NXR5N3R1Znp1fSdmb2YnLTZvN3B7MTdzdjV0djVvd31ja3s0cXM1a3c1b3c1cXMxN3N2NXR2fTRsezRxczVrdzVvdzVxczE3c3Y1dHZ9Y217NHFzNWt3NW93NXFzMTdzdjV0dn1jbns0cXM1a3c1b3c1cXMxN3N2NXR2fWNvezRxczVrdzVvdzVxczE3c3Y1dHZ9Y3B7NHFzNWt3NW93NXFzMTdzdjV0dn02bHsxN3N5NXR5NW93fWRvezE3c3Q1dHR9NHp7MTdzdDV0dH03c3tmc3R9ZG17MTdzdDV0dH1kbnsxN3N0NXR0fTVve2Nrd2Nsd2Ntd2Nud2Nvd2NwdzRsdzR3dn1kcHsxN3N0NXR0fWRxezE3c3Q1dHR9N3R7NW93fWRzezE3c3Q1dHR9NXR7Mmt0Y2x1Y211Y251NG90Y3B1NGx1NHd5Y291Y2t1fWZ1ezE3c3Y1dHY1b3d9NnB7MTdzeTV0eTVvdzVxc31la3sxN3N5NXR5NW93fWVsezE3c3k1dHk1b3d9ZW17MTdzeTV0eTVvd31lbns1dHl9ZW97MTdzeTV0eTVvd31lcHsxN3N5NXR5NW93fWVzezE3c3k1dHk1cXN9ZXR7MTdzeTV0eTVvdzVxc31ldXsxN3N5NXR5NW93NXFzfWV2ezE3c3k1dHk1b3c1cXN9Nnp7MTdzeTV0eTVvdzVxc31mbXsxN3N5NXR5NW93NXFzfWZuezE3c3k1dHk1b3c1cXN9Zm97MTdzeTV0eTVvdzVxc31mcHsxN3N5NXR5NXFzfWZxezE3c3k1dHk1b3c1cXN9N3J7NW93fWZzezE3c3k1dHk1b3c1cXN9ZnR7MTdzdjV0djVvd303bXs1b3d9ZnZ7MTdzdjV0djVvd31md3sxN3N2NXR2NW93fX19XCIpLFwiSGVsdmV0aWNhLUJvbGRPYmxpcXVlXCI6SyhcInsnd2lkdGhzJ3trM3MycTRzY3gxdzIwMW4zcjIwMW82bzIwMXMxdzIwMXQxdzIwMXUxdzIwMXczbTIwMXgzbTIwMXkzbTJrMXcybDJsMjAybTJuMm4zcjJvM3IycDV0MjAycTZvMnIxczJzMmwydDJsMnUycjJ2M3UydzF3MngybDJ5MXcyejF3M2szcjNsM3IzbTNyM24zcjNvM3IzcDNyM3EzcjNyM3IzczNyMjAzdDJsMjAzdTJsM3YybDN3M3UzeDN1M3kzdTN6M3g0azZsNGw0czRtNHM0bjRzNG80czRwNG00cTN4NHI0eTRzNHM0dDF3NHUzcjR2NHM0dzN4NHg1bjR5NHM0ejR5NWs0bTVsNHk1bTRzNW40bTVvM3g1cDRzNXE0bTVyNXk1czRtNXQ0bTV1M3g1djJsNXcxdzV4Mmw1eTN1NXozcjZrMmw2bDNyNm0zeDZuM3I2bzN4NnAzcjZxMmw2cjN4NnMzeDZ0MXc2dTF3NnYzcjZ3MXc2eDV0NnkzeDZ6M3g3azN4N2wzeDdtMnI3bjNyN28ybDdwM3g3cTNyN3I0eTdzM3I3dDNyN3UzbTd2MnI3dzF3N3gycjd5M3UyMDJsM3JjbDRzYWwybGFtM3JhbjNyYW8zcmFwM3JhcjNyYXMybGF0NHRhdTJwYXYzcmF3M3VheTR0YXoybGJrMnNibDN1J2ZvZic2b2JvMmxicDN4YnEzcmJyMXdiczJsYnUyb2J2M3JiejN4Y2s0czIwMmszcmNtNHNjbjRzY280c2NwNHNjcTZvY3I0c2NzNG1jdDRtY3U0bWN2NG1jdzF3Mm0yemN5MXdjejF3ZGw0c2RtNHlkbjR5ZG80eWRwNHlkcTR5ZHM0eWR0NHNkdTRzZHY0c2R3NHNkejN4ZWszcmVsM3JlbTNyZW4zcmVvM3JlcDNyZXE1dGVyM3JlczNyZXQzcmV1M3JldjNyZXcxd2V4MXdleTF3ZXoxd2ZsM3hmbTN4Zm4zeGZvM3hmcDN4ZnEzeGZyM3VmczN4ZnQzeGZ1M3hmdjN4ZnczeGZ6M3IyMDNrNm8yMTJtNm8yZHcybDJjcTJsM3QzcjN1MmwxN3M0bTE5bTNyfSdrZXJuaW5nJ3tjbHs0cXM1a3U1b3Q1cXMxN3N2NXR2fTIwMXR7Mnd3NHd5Mnl3fTIwMXd7MmtzfTIwMXh7Mnd3NHd5Mnl3fTJrezIwMXRzMjAxeHN9Mnd7N3FzNHF1NWt3NW9zNXF3NXJzMTdzdTV0dTd0c2Z6c30yeHs1b3c1cXN9Mnl7N3FzNHF1NWt3NW9zNXF3NXJzMTdzdTV0dTd0c2Z6c30nZm9mJy02bzdwezE3c3U1dHU1b3R9Y2t7NHFzNWt1NW90NXFzMTdzdjV0dn00bHs0cXM1a3U1b3Q1cXMxN3N2NXR2fWNtezRxczVrdTVvdDVxczE3c3Y1dHZ9Y257NHFzNWt1NW90NXFzMTdzdjV0dn1jb3s0cXM1a3U1b3Q1cXMxN3N2NXR2fWNwezRxczVrdTVvdDVxczE3c3Y1dHZ9Nmx7MTdzdDV0dDVvc30xN3N7Mmt3Y2x2Y212Y252Y292Y3B2NGx2NHd3Y2t2fTVvezJrdWNsdGNtdGNudGNvdGNwdDRsdDR3dGNrdH01cXsya3NjbHNjbXNjbnNjb3NjcHM0bHM0d3Zja3N9NXJ7MmtzNHdzfTV0ezJrd2NsdmNtdmNudmNvdmNwdjRsdjR3d2Nrdn1lb3sxN3N0NXR0NW9zfWZ1ezE3c3U1dHU1b3R9NnB7MTdzczV0c31la3sxN3N0NXR0NW9zfWVsezE3c3Q1dHQ1b3N9ZW17MTdzdDV0dDVvc31lbnsxN3N0NXR0NW9zfTZvezIwMXRzfWVwezE3c3Q1dHQ1b3N9ZXN7MTdzczV0c31ldHsxN3NzNXRzfWV1ezE3c3M1dHN9ZXZ7MTdzczV0c302ensxN3N1NXR1NW9zNXF0fWZtezE3c3U1dHU1b3M1cXR9Zm57MTdzdTV0dTVvczVxdH1mb3sxN3N1NXR1NW9zNXF0fWZwezE3c3U1dHU1b3M1cXR9ZnF7MTdzdTV0dTVvczVxdH1mc3sxN3N1NXR1NW9zNXF0fWZ0ezE3c3U1dHU1b3R9N217NW9zfWZ2ezE3c3U1dHU1b3R9Znd7MTdzdTV0dTVvdH19fVwiKSxaYXBmRGluZ2JhdHM6SyhcInsnd2lkdGhzJ3trNHUyazF3J2ZvZic2b30na2VybmluZyd7J2ZvZictNm99fVwiKSxcIkNvdXJpZXItQm9sZFwiOksoXCJ7J3dpZHRocyd7azN3J2ZvZic2b30na2VybmluZyd7J2ZvZictNm99fVwiKSxcIlRpbWVzLUl0YWxpY1wiOksoXCJ7J3dpZHRocyd7azNuMnE0eWN4MmwyMDFuM20yMDFvNXQyMDFzMmwyMDF0MmwyMDF1MmwyMDF3M3IyMDF4M3IyMDF5M3IyazF0MmwybDIwMm0ybjJuM20ybzNtMnA1bjIwMnE1dDJyMXAyczJsMnQybDJ1M20ydjRuMncxdDJ4MmwyeTF0MnoxdzNrM20zbDNtM20zbTNuM20zbzNtM3AzbTNxM20zcjNtM3MzbTIwM3QybDIwM3UybDN2MmwzdzRuM3g0bjN5NG4zejNtNGs1dzRsM3g0bTN4NG40bTRvNHM0cDN4NHEzeDRyNHM0czRzNHQybDR1Mnc0djRtNHczcjR4NW40eTRtNHo0czVrM3g1bDRzNW0zeDVuM201bzNyNXA0czVxM3g1cjVuNXMzeDV0M3I1dTNyNXYycjV3MXc1eDJyNXkydTV6M202azJsNmwzbTZtM202bjJ3Nm8zbTZwMnc2cTF3NnIzbTZzM202dDF3NnUxdzZ2Mnc2dzF3Nng0czZ5M202ejNtN2szbTdsM203bTJyN24ycjdvMXc3cDNtN3EydzdyNG03czJ3N3Qydzd1MnI3djJzN3cxdjd4MnM3eTNxMjAybDNtY2wzeGFsMnJhbTNtYW4zbWFvM21hcDNtYXIzbWFzMmxhdDR3YXUxdmF2M21hdzRuYXk0d2F6MmxiazJzYmw0bidmb2YnNm9ibzJsYnAzbWJxM29icjF0YnMybGJ1MXpidjNtYnozbWNrM3gyMDJrM21jbTN4Y24zeGNvM3hjcDN4Y3E1dGNyNG1jczN4Y3QzeGN1M3hjdjN4Y3cybDJtMnVjeTJsY3oybGRsNG1kbTRzZG40c2RvNHNkcDRzZHE0c2RzNHNkdDRzZHU0c2R2NHNkdzRzZHozbWVrM21lbDNtZW0zbWVuM21lbzNtZXAzbWVxNG1lcjJ3ZXMyd2V0MndldTJ3ZXYyd2V3MXdleDF3ZXkxd2V6MXdmbDNtZm0zbWZuM21mbzNtZnAzbWZxM21mcjRuZnMzbWZ0M21mdTNtZnYzbWZ3M21mejJ3MjAzazZvMjEybTZtMmR3MmwyY3EybDN0M20zdTJsMTdzM3IxOW0zbX0na2VybmluZyd7Y2x7NWt0NHF3fTIwMXN7MjAxc3d9MjAxdHsyMDF0dzJ3eTJ5eTZxLXR9MjAxeHsyd3kyeXl9Mmt7MjAxdHd9Mnd7N3FzNHF5N3JzNWt5N213NW9zNXF4NXJ1MTdzdTV0dX0yeHsxN3NzNXRzNW9zfTJ5ezdxczRxeTdyczVreTdtdzVvczVxeDVydTE3c3U1dHV9J2ZvZictNm82dHsxN3NzNXRzNXFzfTd0ezVvc30zdns1cXN9N3B7MTdzdTV0dTVxc31ja3s1a3Q0cXd9NGx7NWt0NHF3fWNtezVrdDRxd31jbns1a3Q0cXd9Y297NWt0NHF3fWNwezVrdDRxd302bHs0cXM1a3M1b3U1cXc1cnUxN3N1NXR1fTE3c3sya3N9NXF7Y2t2Y2x2Y212Y252Y292Y3B2NGx2fTVye2NrdWNsdWNtdWNudWNvdWNwdTRsdX01dHsya3N9NnB7NHFzNWtzNW91NXF3NXJ1MTdzdTV0dX1la3s0cXM1a3M1b3U1cXc1cnUxN3N1NXR1fWVsezRxczVrczVvdTVxdzVydTE3c3U1dHV9ZW17NHFzNWtzNW91NXF3NXJ1MTdzdTV0dX1lbns0cXM1a3M1b3U1cXc1cnUxN3N1NXR1fWVvezRxczVrczVvdTVxdzVydTE3c3U1dHV9ZXB7NHFzNWtzNW91NXF3NXJ1MTdzdTV0dX1lc3s1a3M1cXM0cXN9ZXR7NHFzNWtzNW91NXF3NXJ1MTdzdTV0dX1ldXs0cXM1a3M1cXc1cnUxN3N1NXR1fWV2ezVrczVxczRxc31leHsxN3NzNXRzNXFzfTZ6ezRxdjVrczVvdTVxdzVydTE3c3U1dHV9Zm17NHF2NWtzNW91NXF3NXJ1MTdzdTV0dX1mbns0cXY1a3M1b3U1cXc1cnUxN3N1NXR1fWZvezRxdjVrczVvdTVxdzVydTE3c3U1dHV9ZnB7NHF2NWtzNW91NXF3NXJ1MTdzdTV0dX1mcXs0cXY1a3M1b3U1cXc1cnUxN3N1NXR1fTdyezVvc31mc3s0cXY1a3M1b3U1cXc1cnUxN3N1NXR1fWZ0ezE3c3U1dHU1cXN9ZnV7MTdzdTV0dTVxc31mdnsxN3N1NXR1NXFzfWZ3ezE3c3U1dHU1cXN9fX1cIiksXCJUaW1lcy1Sb21hblwiOksoXCJ7J3dpZHRocyd7azNuMnE0eWN4MmwyMDFuM20yMDFvNm8yMDFzMmwyMDF0MmwyMDF1MmwyMDF3MncyMDF4MncyMDF5MncyazF0MmwybDIwMm0ybjJuM20ybzNtMnA1bjIwMnE2bzJyMW0yczJsMnQybDJ1M20ydjNzMncxdDJ4MmwyeTF0MnoxdzNrM20zbDNtM20zbTNuM20zbzNtM3AzbTNxM20zcjNtM3MzbTIwM3QybDIwM3UybDN2MXczdzNzM3gzczN5M3MzejJ3NGs1dzRsNHM0bTRtNG40bTRvNHM0cDN4NHEzcjRyNHM0czRzNHQybDR1MnI0djRzNHczeDR4NXQ0eTRzNHo0czVrM3I1bDRzNW00bTVuM3I1bzN4NXA0czVxNHM1cjV5NXM0czV0NHM1dTN4NXYybDV3MXc1eDJsNXkyejV6M202azJsNmwydzZtM202bjJ3Nm8zbTZwMnc2cTJsNnIzbTZzM202dDF3NnUxdzZ2M202dzF3Nng0eTZ5M202ejNtN2szbTdsM203bTJsN24ycjdvMXc3cDNtN3EzbTdyNHM3czNtN3QzbTd1Mnc3djNrN3cxbzd4M2s3eTNxMjAybDNtY2w0c2FsMmxhbTNtYW4zbWFvM21hcDNtYXIzbWFzMmxhdDR3YXUxdmF2M21hdzNzYXk0d2F6MmxiazJzYmwzcydmb2YnNm9ibzJsYnAzbWJxMnhicjF0YnMybGJ1MXpidjNtYnoyd2NrNHMyMDJrM21jbTRzY240c2NvNHNjcDRzY3E1dGNyNG1jczN4Y3QzeGN1M3hjdjN4Y3cybDJtMnRjeTJsY3oybGRsNHNkbTRzZG40c2RvNHNkcDRzZHE0c2RzNHNkdDRzZHU0c2R2NHNkdzRzZHozbWVrMndlbDJ3ZW0yd2VuMndlbzJ3ZXAyd2VxNG1lcjJ3ZXMyd2V0MndldTJ3ZXYyd2V3MXdleDF3ZXkxd2V6MXdmbDNtZm0zbWZuM21mbzNtZnAzbWZxM21mcjNzZnMzbWZ0M21mdTNtZnYzbWZ3M21mejNtMjAzazZvMjEybTZtMmR3MmwyY3EybDN0M20zdTF3MTdzNHMxOW0zbX0na2VybmluZyd7Y2x7NHFzNWt1MTdzdzVvdTVxeTVydzIwMXNzNXR3MjAxd3N9MjAxc3syMDFzc30yMDF0e2NrdzRsd2Ntd2Nud2Nvd2Nwd2NsdzR3dTIwMXRzfTJrezIwMXRzfTJ3ezRxczVrdzVvczVxeDVydTE3c3g1dHh9Mnh7MTdzdzV0dzVvdTVxdX0yeXs0cXM1a3c1b3M1cXg1cnUxN3N4NXR4fSdmb2YnLTZvN3R7Y2t1Y2x1Y211Y251Y291Y3B1NGx1NW9zNXJzfTN1ezE3c3U1dHU1cXN9M3Z7MTdzdTV0dTVxc303cHsxN3N3NXR3NXFzfWNrezRxczVrdTE3c3c1b3U1cXk1cncyMDFzczV0dzIwMXdzfTRsezRxczVrdTE3c3c1b3U1cXk1cncyMDFzczV0dzIwMXdzfWNtezRxczVrdTE3c3c1b3U1cXk1cncyMDFzczV0dzIwMXdzfWNuezRxczVrdTE3c3c1b3U1cXk1cncyMDFzczV0dzIwMXdzfWNvezRxczVrdTE3c3c1b3U1cXk1cncyMDFzczV0dzIwMXdzfWNwezRxczVrdTE3c3c1b3U1cXk1cncyMDFzczV0dzIwMXdzfTZsezE3c3U1dHU1b3M1cXc1cnN9MTdzezJrdGNsdmNtdmNudmNvdmNwdjRsdjR3dWNrdn01b3tja3djbHdjbXdjbndjb3djcHc0bHc0d3V9NXF7Y2t5Y2x5Y215Y255Y295Y3B5NGx5NHd1NW1zfTVye2NrdGNsdGNtdGNudGNvdGNwdDRsdDR3c301dHsya3RjbHZjbXZjbnZjb3ZjcHY0bHY0d3Vja3Z9N3F7Y2tzY2xzY21zY25zY29zY3BzNGxzfTZwezE3c3U1dHU1cXc1cnN9ZWt7NXFzNXJzfWVsezE3c3U1dHU1b3M1cXc1cnN9ZW17MTdzdTV0dTVvczVxczVyc31lbnsxN3N1NXFzNXJzfWVvezVxczVyc31lcHsxN3N1NXR1NW9zNXF3NXJzfWVzezVxc31ldHsxN3N1NXR1NXF3NXJzfWV1ezE3c3U1dHU1cXM1cnN9ZXZ7NXFzfTZ6ezE3c3Y1dHY1b3M1cXg1cnN9Zm17NW9zNXF0NXJzfWZuezE3c3Y1dHY1b3M1cXg1cnN9Zm97MTdzdjV0djVvczVxeDVyc31mcHs1b3M1cXQ1cnN9ZnF7NW9zNXF0NXJzfTdye2NrdWNsdWNtdWNudWNvdWNwdTRsdTVvc31mc3sxN3N2NXR2NW9zNXF4NXJzfWZ0ezE3c3M1dHM1cXN9ZnV7MTdzdzV0dzVxc31mdnsxN3N3NXR3NXFzfWZ3ezE3c3M1dHM1cXN9Znp7Y2t1Y2x1Y211Y251Y291Y3B1NGx1NW9zNXJzfX19XCIpLFwiSGVsdmV0aWNhLU9ibGlxdWVcIjpLKFwieyd3aWR0aHMne2szcDJxNG1jeDF3MjAxbjNyMjAxbzZvMjAxczFxMjAxdDFxMjAxdTFxMjAxdzJsMjAxeDJsMjAxeTJsMmsxdzJsMXcyMDJtMm4ybjNyMm8zcjJwNXQyMDJxNm8ycjFuMnMybDJ0MmwydTJyMnYzdTJ3MXcyeDJsMnkxdzJ6MXczazNyM2wzcjNtM3IzbjNyM28zcjNwM3IzcTNyM3IzcjNzM3IyMDN0MmwyMDN1MmwzdjF3M3czdTN4M3UzeTN1M3ozcjRrNnA0bDRtNG00bTRuNHM0bzRzNHA0bTRxM3g0cjR5NHM0czR0MXc0dTNtNHY0bTR3M3I0eDVuNHk0czR6NHk1azRtNWw0eTVtNHM1bjRtNW8zeDVwNHM1cTRtNXI1eTVzNG01dDRtNXUzeDV2MXc1dzF3NXgxdzV5Mno1ejNyNmsybDZsM3I2bTNyNm4zbTZvM3I2cDNyNnExdzZyM3I2czNyNnQxcTZ1MXE2djNtNncxcTZ4NW42eTNyNnozcjdrM3I3bDNyN20ybDduM203bzF3N3AzcjdxM203cjRzN3MzbTd0M203dTNtN3YybDd3MXU3eDJsN3kzdTIwMmwzcmNsNG1hbDJsYW0zcmFuM3JhbzNyYXAzcmFyM3JhczJsYXQ0dGF1MnBhdjNyYXczdWF5NHRhejJsYmsyc2JsM3UnZm9mJzZvYm8ybGJwM3JicjF3YnMybGJ1Mm9idjNyYnozeGNrNG0yMDJrM3JjbTRtY240bWNvNG1jcDRtY3E2b2NyNHNjczRtY3Q0bWN1NG1jdjRtY3cxdzJtMm5jeTF3Y3oxd2RsNHNkbTR5ZG40eWRvNHlkcDR5ZHE0eWRzNHlkdDRzZHU0c2R2NHNkdzRzZHozeGVrM3JlbDNyZW0zcmVuM3JlbzNyZXAzcmVxNXRlcjNtZXMzcmV0M3JldTNyZXYzcmV3MXdleDF3ZXkxd2V6MXdmbDNyZm0zcmZuM3JmbzNyZnAzcmZxM3JmcjN1ZnMzeGZ0M3JmdTNyZnYzcmZ3M3JmejNtMjAzazZvMjEybTZvMmR3MmwyY3EybDN0M3IzdTF3MTdzNG0xOW0zcn0na2VybmluZyd7NXF7NHd2fWNsezRxczVrdzVvdzVxczE3c3Y1dHZ9MjAxdHsyd3U0dzFrMnl1fTIwMXh7Mnd1NHd5Mnl1fTE3c3sya3RjbHVjbXVjbnU0b3RjcHU0bHU0d3ljb3Vja3V9Mnd7N3FzNHF6NWsxbTE3c3k1b3c1cXg1cnNmc3U1dHk3dHVmenV9Mnh7MTdzeTV0eTVveTVxc30yeXs3cXM0cXo1azFtMTdzeTVvdzVxeDVyc2ZzdTV0eTd0dWZ6dX0nZm9mJy02bzdwezE3c3Y1dHY1b3d9Y2t7NHFzNWt3NW93NXFzMTdzdjV0dn00bHs0cXM1a3c1b3c1cXMxN3N2NXR2fWNtezRxczVrdzVvdzVxczE3c3Y1dHZ9Y257NHFzNWt3NW93NXFzMTdzdjV0dn1jb3s0cXM1a3c1b3c1cXMxN3N2NXR2fWNwezRxczVrdzVvdzVxczE3c3Y1dHZ9Nmx7MTdzeTV0eTVvd31kb3sxN3N0NXR0fTR6ezE3c3Q1dHR9N3N7ZnN0fWRtezE3c3Q1dHR9ZG57MTdzdDV0dH01b3tja3djbHdjbXdjbndjb3djcHc0bHc0d3Z9ZHB7MTdzdDV0dH1kcXsxN3N0NXR0fTd0ezVvd31kc3sxN3N0NXR0fTV0ezJrdGNsdWNtdWNudTRvdGNwdTRsdTR3eWNvdWNrdX1mdXsxN3N2NXR2NW93fTZwezE3c3k1dHk1b3c1cXN9ZWt7MTdzeTV0eTVvd31lbHsxN3N5NXR5NW93fWVtezE3c3k1dHk1b3d9ZW57NXR5fWVvezE3c3k1dHk1b3d9ZXB7MTdzeTV0eTVvd31lc3sxN3N5NXR5NXFzfWV0ezE3c3k1dHk1b3c1cXN9ZXV7MTdzeTV0eTVvdzVxc31ldnsxN3N5NXR5NW93NXFzfTZ6ezE3c3k1dHk1b3c1cXN9Zm17MTdzeTV0eTVvdzVxc31mbnsxN3N5NXR5NW93NXFzfWZvezE3c3k1dHk1b3c1cXN9ZnB7MTdzeTV0eTVxc31mcXsxN3N5NXR5NW93NXFzfTdyezVvd31mc3sxN3N5NXR5NW93NXFzfWZ0ezE3c3Y1dHY1b3d9N217NW93fWZ2ezE3c3Y1dHY1b3d9Znd7MTdzdjV0djVvd319fVwiKX19LFguZXZlbnRzLnB1c2goW1wiYWRkRm9udFwiLGZ1bmN0aW9uKHQpe3ZhciBlLG4scixpPXQuZm9udCxvPVwiVW5pY29kZVwiOyhlPSRbb11baS5wb3N0U2NyaXB0TmFtZV0pJiYoKG49aS5tZXRhZGF0YVtvXT9pLm1ldGFkYXRhW29dOmkubWV0YWRhdGFbb109e30pLndpZHRocz1lLndpZHRocyxuLmtlcm5pbmc9ZS5rZXJuaW5nKSwocj1RW29dW2kucG9zdFNjcmlwdE5hbWVdKSYmKChuPWkubWV0YWRhdGFbb10/aS5tZXRhZGF0YVtvXTppLm1ldGFkYXRhW29dPXt9KS5lbmNvZGluZz1yKS5jb2RlUGFnZXMmJnIuY29kZVBhZ2VzLmxlbmd0aCYmKGkuZW5jb2Rpbmc9ci5jb2RlUGFnZXNbMF0pfV0pLFxyXG4vKipcclxuICAgKiBAbGljZW5zZVxyXG4gICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuICAgKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcclxuICAgKi9cclxudHQ9bHQsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGZ8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWwmJmdsb2JhbHx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93fHxGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCksdHQuQVBJLmV2ZW50cy5wdXNoKFtcImFkZEZvbnRcIixmdW5jdGlvbih0KXt2YXIgZT10LmZvbnQsbj10Lmluc3RhbmNlO2lmKHZvaWQgMCE9PW4mJm4uZXhpc3RzRmlsZUluVkZTKGUucG9zdFNjcmlwdE5hbWUpKXt2YXIgcj1uLmdldEZpbGVGcm9tVkZTKGUucG9zdFNjcmlwdE5hbWUpO2lmKFwic3RyaW5nXCIhPXR5cGVvZiByKXRocm93IG5ldyBFcnJvcihcIkZvbnQgaXMgbm90IHN0b3JlZCBhcyBzdHJpbmctZGF0YSBpbiB2RlMsIGltcG9ydCBmb250cyBvciByZW1vdmUgZGVjbGFyYXRpb24gZG9jLmFkZEZvbnQoJ1wiK2UucG9zdFNjcmlwdE5hbWUrXCInKS5cIik7ZS5tZXRhZGF0YT10dC5BUEkuVFRGRm9udC5vcGVuKGUucG9zdFNjcmlwdE5hbWUsZS5mb250TmFtZSxyLGUuZW5jb2RpbmcpLGUubWV0YWRhdGEuVW5pY29kZT1lLm1ldGFkYXRhLlVuaWNvZGV8fHtlbmNvZGluZzp7fSxrZXJuaW5nOnt9LHdpZHRoczpbXX0sZS5tZXRhZGF0YS5nbHlJZHNVc2VkPVswXX1lbHNlIGlmKCExPT09ZS5pc1N0YW5kYXJkRm9udCl0aHJvdyBuZXcgRXJyb3IoXCJGb250IGRvZXMgbm90IGV4aXN0IGluIHZGUywgaW1wb3J0IGZvbnRzIG9yIHJlbW92ZSBkZWNsYXJhdGlvbiBkb2MuYWRkRm9udCgnXCIrZS5wb3N0U2NyaXB0TmFtZStcIicpLlwiKX1dKSwoXHJcbi8qKiBAbGljZW5zZVxyXG4gICAqIENvcHlyaWdodCAoYykgMjAxMiBXaWxsb3cgU3lzdGVtcyBDb3Jwb3JhdGlvbiwgd2lsbG93LXN5c3RlbXMuY29tXHJcbiAgICogXHJcbiAgICogXHJcbiAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgKi9cclxuZXQ9bHQuQVBJKS5hZGRTdmc9ZnVuY3Rpb24odCxlLG4scixpKXtpZih2b2lkIDA9PT1lfHx2b2lkIDA9PT1uKXRocm93IG5ldyBFcnJvcihcImFkZFNWRyBuZWVkcyB2YWx1ZXMgZm9yICd4JyBhbmQgJ3knXCIpO2Z1bmN0aW9uIG8odCl7Zm9yKHZhciBlPXBhcnNlRmxvYXQodFsxXSksbj1wYXJzZUZsb2F0KHRbMl0pLHI9W10saT0zLG89dC5sZW5ndGg7aTxvOylcImNcIj09PXRbaV0/KHIucHVzaChbcGFyc2VGbG9hdCh0W2krMV0pLHBhcnNlRmxvYXQodFtpKzJdKSxwYXJzZUZsb2F0KHRbaSszXSkscGFyc2VGbG9hdCh0W2krNF0pLHBhcnNlRmxvYXQodFtpKzVdKSxwYXJzZUZsb2F0KHRbaSs2XSldKSxpKz03KTpcImxcIj09PXRbaV0/KHIucHVzaChbcGFyc2VGbG9hdCh0W2krMV0pLHBhcnNlRmxvYXQodFtpKzJdKV0pLGkrPTMpOmkrPTE7cmV0dXJuW2UsbixyXX12YXIgYSxzLGwsaCx1LGMsZixwLGQ9KGg9ZG9jdW1lbnQscD1oLmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIiksdT1cIi5qc1BERl9zaWxseXN2Z19pZnJhbWUge2Rpc3BsYXk6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZTt9XCIsKGY9KGM9aCkuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpKS50eXBlPVwidGV4dC9jc3NcIixmLnN0eWxlU2hlZXQ/Zi5zdHlsZVNoZWV0LmNzc1RleHQ9dTpmLmFwcGVuZENoaWxkKGMuY3JlYXRlVGV4dE5vZGUodSkpLGMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdLmFwcGVuZENoaWxkKGYpLHAubmFtZT1cImNoaWxkZnJhbWVcIixwLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsMCkscC5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwwKSxwLnNldEF0dHJpYnV0ZShcImZyYW1lYm9yZGVyXCIsXCIwXCIpLHAuc2V0QXR0cmlidXRlKFwic2Nyb2xsaW5nXCIsXCJub1wiKSxwLnNldEF0dHJpYnV0ZShcInNlYW1sZXNzXCIsXCJzZWFtbGVzc1wiKSxwLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsXCJqc1BERl9zaWxseXN2Z19pZnJhbWVcIiksaC5ib2R5LmFwcGVuZENoaWxkKHApLHApLGc9KGE9dCwobD0oKHM9ZCkuY29udGVudFdpbmRvd3x8cy5jb250ZW50RG9jdW1lbnQpLmRvY3VtZW50KS53cml0ZShhKSxsLmNsb3NlKCksbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInN2Z1wiKVswXSksbT1bMSwxXSx5PXBhcnNlRmxvYXQoZy5nZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiKSksdj1wYXJzZUZsb2F0KGcuZ2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIpKTt5JiZ2JiYociYmaT9tPVtyL3ksaS92XTpyP209W3IveSxyL3ldOmkmJihtPVtpL3YsaS92XSkpO3ZhciB3LGIseCxOLEw9Zy5jaGlsZE5vZGVzO2Zvcih3PTAsYj1MLmxlbmd0aDt3PGI7dysrKSh4PUxbd10pLnRhZ05hbWUmJlwiUEFUSFwiPT09eC50YWdOYW1lLnRvVXBwZXJDYXNlKCkmJigoTj1vKHguZ2V0QXR0cmlidXRlKFwiZFwiKS5zcGxpdChcIiBcIikpKVswXT1OWzBdKm1bMF0rZSxOWzFdPU5bMV0qbVsxXStuLHRoaXMubGluZXMuY2FsbCh0aGlzLE5bMl0sTlswXSxOWzFdLG0pKTtyZXR1cm4gdGhpc30sZXQuYWRkU1ZHPWV0LmFkZFN2ZyxldC5hZGRTdmdBc0ltYWdlPWZ1bmN0aW9uKHQsZSxuLHIsaSxvLGEscyl7aWYoaXNOYU4oZSl8fGlzTmFOKG4pKXRocm93IGNvbnNvbGUuZXJyb3IoXCJqc1BERi5hZGRTdmdBc0ltYWdlOiBJbnZhbGlkIGNvb3JkaW5hdGVzXCIsYXJndW1lbnRzKSxuZXcgRXJyb3IoXCJJbnZhbGlkIGNvb3JkaW5hdGVzIHBhc3NlZCB0byBqc1BERi5hZGRTdmdBc0ltYWdlXCIpO2lmKGlzTmFOKHIpfHxpc05hTihpKSl0aHJvdyBjb25zb2xlLmVycm9yKFwianNQREYuYWRkU3ZnQXNJbWFnZTogSW52YWxpZCBtZWFzdXJlbWVudHNcIixhcmd1bWVudHMpLG5ldyBFcnJvcihcIkludmFsaWQgbWVhc3VyZW1lbnRzICh3aWR0aCBhbmQvb3IgaGVpZ2h0KSBwYXNzZWQgdG8ganNQREYuYWRkU3ZnQXNJbWFnZVwiKTt2YXIgbD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO2wud2lkdGg9cixsLmhlaWdodD1pO3ZhciBoPWwuZ2V0Q29udGV4dChcIjJkXCIpO3JldHVybiBoLmZpbGxTdHlsZT1cIiNmZmZcIixoLmZpbGxSZWN0KDAsMCxsLndpZHRoLGwuaGVpZ2h0KSxjYW52ZyhsLHQse2lnbm9yZU1vdXNlOiEwLGlnbm9yZUFuaW1hdGlvbjohMCxpZ25vcmVEaW1lbnNpb25zOiEwLGlnbm9yZUNsZWFyOiEwfSksdGhpcy5hZGRJbWFnZShsLnRvRGF0YVVSTChcImltYWdlL2pwZWdcIiwxKSxlLG4scixpLGEscyksdGhpc30sbHQuQVBJLnB1dFRvdGFsUGFnZXM9ZnVuY3Rpb24odCl7dmFyIGUsbj0wO249cGFyc2VJbnQodGhpcy5pbnRlcm5hbC5nZXRGb250KCkuaWQuc3Vic3RyKDEpLDEwKTwxNT8oZT1uZXcgUmVnRXhwKHQsXCJnXCIpLHRoaXMuaW50ZXJuYWwuZ2V0TnVtYmVyT2ZQYWdlcygpKTooZT1uZXcgUmVnRXhwKHRoaXMucGRmRXNjYXBlMTYodCx0aGlzLmludGVybmFsLmdldEZvbnQoKSksXCJnXCIpLHRoaXMucGRmRXNjYXBlMTYodGhpcy5pbnRlcm5hbC5nZXROdW1iZXJPZlBhZ2VzKCkrXCJcIix0aGlzLmludGVybmFsLmdldEZvbnQoKSkpO2Zvcih2YXIgcj0xO3I8PXRoaXMuaW50ZXJuYWwuZ2V0TnVtYmVyT2ZQYWdlcygpO3IrKylmb3IodmFyIGk9MDtpPHRoaXMuaW50ZXJuYWwucGFnZXNbcl0ubGVuZ3RoO2krKyl0aGlzLmludGVybmFsLnBhZ2VzW3JdW2ldPXRoaXMuaW50ZXJuYWwucGFnZXNbcl1baV0ucmVwbGFjZShlLG4pO3JldHVybiB0aGlzfSxsdC5BUEkudmlld2VyUHJlZmVyZW5jZXM9ZnVuY3Rpb24odCxlKXt2YXIgbjt0PXR8fHt9LGU9ZXx8ITE7dmFyIHIsaSxvPXtIaWRlVG9vbGJhcjp7ZGVmYXVsdFZhbHVlOiExLHZhbHVlOiExLHR5cGU6XCJib29sZWFuXCIsZXhwbGljaXRTZXQ6ITEsdmFsdWVTZXQ6WyEwLCExXSxwZGZWZXJzaW9uOjEuM30sSGlkZU1lbnViYXI6e2RlZmF1bHRWYWx1ZTohMSx2YWx1ZTohMSx0eXBlOlwiYm9vbGVhblwiLGV4cGxpY2l0U2V0OiExLHZhbHVlU2V0OlshMCwhMV0scGRmVmVyc2lvbjoxLjN9LEhpZGVXaW5kb3dVSTp7ZGVmYXVsdFZhbHVlOiExLHZhbHVlOiExLHR5cGU6XCJib29sZWFuXCIsZXhwbGljaXRTZXQ6ITEsdmFsdWVTZXQ6WyEwLCExXSxwZGZWZXJzaW9uOjEuM30sRml0V2luZG93OntkZWZhdWx0VmFsdWU6ITEsdmFsdWU6ITEsdHlwZTpcImJvb2xlYW5cIixleHBsaWNpdFNldDohMSx2YWx1ZVNldDpbITAsITFdLHBkZlZlcnNpb246MS4zfSxDZW50ZXJXaW5kb3c6e2RlZmF1bHRWYWx1ZTohMSx2YWx1ZTohMSx0eXBlOlwiYm9vbGVhblwiLGV4cGxpY2l0U2V0OiExLHZhbHVlU2V0OlshMCwhMV0scGRmVmVyc2lvbjoxLjN9LERpc3BsYXlEb2NUaXRsZTp7ZGVmYXVsdFZhbHVlOiExLHZhbHVlOiExLHR5cGU6XCJib29sZWFuXCIsZXhwbGljaXRTZXQ6ITEsdmFsdWVTZXQ6WyEwLCExXSxwZGZWZXJzaW9uOjEuNH0sTm9uRnVsbFNjcmVlblBhZ2VNb2RlOntkZWZhdWx0VmFsdWU6XCJVc2VOb25lXCIsdmFsdWU6XCJVc2VOb25lXCIsdHlwZTpcIm5hbWVcIixleHBsaWNpdFNldDohMSx2YWx1ZVNldDpbXCJVc2VOb25lXCIsXCJVc2VPdXRsaW5lc1wiLFwiVXNlVGh1bWJzXCIsXCJVc2VPQ1wiXSxwZGZWZXJzaW9uOjEuM30sRGlyZWN0aW9uOntkZWZhdWx0VmFsdWU6XCJMMlJcIix2YWx1ZTpcIkwyUlwiLHR5cGU6XCJuYW1lXCIsZXhwbGljaXRTZXQ6ITEsdmFsdWVTZXQ6W1wiTDJSXCIsXCJSMkxcIl0scGRmVmVyc2lvbjoxLjN9LFZpZXdBcmVhOntkZWZhdWx0VmFsdWU6XCJDcm9wQm94XCIsdmFsdWU6XCJDcm9wQm94XCIsdHlwZTpcIm5hbWVcIixleHBsaWNpdFNldDohMSx2YWx1ZVNldDpbXCJNZWRpYUJveFwiLFwiQ3JvcEJveFwiLFwiVHJpbUJveFwiLFwiQmxlZWRCb3hcIixcIkFydEJveFwiXSxwZGZWZXJzaW9uOjEuNH0sVmlld0NsaXA6e2RlZmF1bHRWYWx1ZTpcIkNyb3BCb3hcIix2YWx1ZTpcIkNyb3BCb3hcIix0eXBlOlwibmFtZVwiLGV4cGxpY2l0U2V0OiExLHZhbHVlU2V0OltcIk1lZGlhQm94XCIsXCJDcm9wQm94XCIsXCJUcmltQm94XCIsXCJCbGVlZEJveFwiLFwiQXJ0Qm94XCJdLHBkZlZlcnNpb246MS40fSxQcmludEFyZWE6e2RlZmF1bHRWYWx1ZTpcIkNyb3BCb3hcIix2YWx1ZTpcIkNyb3BCb3hcIix0eXBlOlwibmFtZVwiLGV4cGxpY2l0U2V0OiExLHZhbHVlU2V0OltcIk1lZGlhQm94XCIsXCJDcm9wQm94XCIsXCJUcmltQm94XCIsXCJCbGVlZEJveFwiLFwiQXJ0Qm94XCJdLHBkZlZlcnNpb246MS40fSxQcmludENsaXA6e2RlZmF1bHRWYWx1ZTpcIkNyb3BCb3hcIix2YWx1ZTpcIkNyb3BCb3hcIix0eXBlOlwibmFtZVwiLGV4cGxpY2l0U2V0OiExLHZhbHVlU2V0OltcIk1lZGlhQm94XCIsXCJDcm9wQm94XCIsXCJUcmltQm94XCIsXCJCbGVlZEJveFwiLFwiQXJ0Qm94XCJdLHBkZlZlcnNpb246MS40fSxQcmludFNjYWxpbmc6e2RlZmF1bHRWYWx1ZTpcIkFwcERlZmF1bHRcIix2YWx1ZTpcIkFwcERlZmF1bHRcIix0eXBlOlwibmFtZVwiLGV4cGxpY2l0U2V0OiExLHZhbHVlU2V0OltcIkFwcERlZmF1bHRcIixcIk5vbmVcIl0scGRmVmVyc2lvbjoxLjZ9LER1cGxleDp7ZGVmYXVsdFZhbHVlOlwiXCIsdmFsdWU6XCJub25lXCIsdHlwZTpcIm5hbWVcIixleHBsaWNpdFNldDohMSx2YWx1ZVNldDpbXCJTaW1wbGV4XCIsXCJEdXBsZXhGbGlwU2hvcnRFZGdlXCIsXCJEdXBsZXhGbGlwTG9uZ0VkZ2VcIixcIm5vbmVcIl0scGRmVmVyc2lvbjoxLjd9LFBpY2tUcmF5QnlQREZTaXplOntkZWZhdWx0VmFsdWU6ITEsdmFsdWU6ITEsdHlwZTpcImJvb2xlYW5cIixleHBsaWNpdFNldDohMSx2YWx1ZVNldDpbITAsITFdLHBkZlZlcnNpb246MS43fSxQcmludFBhZ2VSYW5nZTp7ZGVmYXVsdFZhbHVlOlwiXCIsdmFsdWU6XCJcIix0eXBlOlwiYXJyYXlcIixleHBsaWNpdFNldDohMSx2YWx1ZVNldDpudWxsLHBkZlZlcnNpb246MS43fSxOdW1Db3BpZXM6e2RlZmF1bHRWYWx1ZToxLHZhbHVlOjEsdHlwZTpcImludGVnZXJcIixleHBsaWNpdFNldDohMSx2YWx1ZVNldDpudWxsLHBkZlZlcnNpb246MS43fX0sYT1PYmplY3Qua2V5cyhvKSxzPVtdLGw9MCxoPTAsdT0wLGM9ITA7ZnVuY3Rpb24gZih0LGUpe3ZhciBuLHI9ITE7Zm9yKG49MDtuPHQubGVuZ3RoO24rPTEpdFtuXT09PWUmJihyPSEwKTtyZXR1cm4gcn1pZih2b2lkIDA9PT10aGlzLmludGVybmFsLnZpZXdlcnByZWZlcmVuY2VzJiYodGhpcy5pbnRlcm5hbC52aWV3ZXJwcmVmZXJlbmNlcz17fSx0aGlzLmludGVybmFsLnZpZXdlcnByZWZlcmVuY2VzLmNvbmZpZ3VyYXRpb249SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvKSksdGhpcy5pbnRlcm5hbC52aWV3ZXJwcmVmZXJlbmNlcy5pc1N1YnNjcmliZWQ9ITEpLG49dGhpcy5pbnRlcm5hbC52aWV3ZXJwcmVmZXJlbmNlcy5jb25maWd1cmF0aW9uLFwicmVzZXRcIj09PXR8fCEwPT09ZSl7dmFyIHA9YS5sZW5ndGg7Zm9yKHU9MDt1PHA7dSs9MSluW2FbdV1dLnZhbHVlPW5bYVt1XV0uZGVmYXVsdFZhbHVlLG5bYVt1XV0uZXhwbGljaXRTZXQ9ITF9aWYoXCJvYmplY3RcIj09PXNlKHQpKWZvcihyIGluIHQpaWYoaT10W3JdLGYoYSxyKSYmdm9pZCAwIT09aSl7aWYoXCJib29sZWFuXCI9PT1uW3JdLnR5cGUmJlwiYm9vbGVhblwiPT10eXBlb2YgaSluW3JdLnZhbHVlPWk7ZWxzZSBpZihcIm5hbWVcIj09PW5bcl0udHlwZSYmZihuW3JdLnZhbHVlU2V0LGkpKW5bcl0udmFsdWU9aTtlbHNlIGlmKFwiaW50ZWdlclwiPT09bltyXS50eXBlJiZOdW1iZXIuaXNJbnRlZ2VyKGkpKW5bcl0udmFsdWU9aTtlbHNlIGlmKFwiYXJyYXlcIj09PW5bcl0udHlwZSl7Zm9yKGw9MDtsPGkubGVuZ3RoO2wrPTEpaWYoYz0hMCwxPT09aVtsXS5sZW5ndGgmJlwibnVtYmVyXCI9PXR5cGVvZiBpW2xdWzBdKXMucHVzaChTdHJpbmcoaVtsXS0xKSk7ZWxzZSBpZigxPGlbbF0ubGVuZ3RoKXtmb3IoaD0wO2g8aVtsXS5sZW5ndGg7aCs9MSlcIm51bWJlclwiIT10eXBlb2YgaVtsXVtoXSYmKGM9ITEpOyEwPT09YyYmcy5wdXNoKFtpW2xdWzBdLTEsaVtsXVsxXS0xXS5qb2luKFwiIFwiKSl9bltyXS52YWx1ZT1cIltcIitzLmpvaW4oXCIgXCIpK1wiXVwifWVsc2UgbltyXS52YWx1ZT1uW3JdLmRlZmF1bHRWYWx1ZTtuW3JdLmV4cGxpY2l0U2V0PSEwfXJldHVybiExPT09dGhpcy5pbnRlcm5hbC52aWV3ZXJwcmVmZXJlbmNlcy5pc1N1YnNjcmliZWQmJih0aGlzLmludGVybmFsLmV2ZW50cy5zdWJzY3JpYmUoXCJwdXRDYXRhbG9nXCIsZnVuY3Rpb24oKXt2YXIgdCxlPVtdO2Zvcih0IGluIG4pITA9PT1uW3RdLmV4cGxpY2l0U2V0JiYoXCJuYW1lXCI9PT1uW3RdLnR5cGU/ZS5wdXNoKFwiL1wiK3QrXCIgL1wiK25bdF0udmFsdWUpOmUucHVzaChcIi9cIit0K1wiIFwiK25bdF0udmFsdWUpKTswIT09ZS5sZW5ndGgmJnRoaXMuaW50ZXJuYWwud3JpdGUoXCIvVmlld2VyUHJlZmVyZW5jZXNcXG48PFxcblwiK2Uuam9pbihcIlxcblwiKStcIlxcbj4+XCIpfSksdGhpcy5pbnRlcm5hbC52aWV3ZXJwcmVmZXJlbmNlcy5pc1N1YnNjcmliZWQ9ITApLHRoaXMuaW50ZXJuYWwudmlld2VycHJlZmVyZW5jZXMuY29uZmlndXJhdGlvbj1uLHRoaXN9LFxyXG4vKiogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gXHJcbiAgICoganNQREYgWE1QIG1ldGFkYXRhIHBsdWdpblxyXG4gICAqIENvcHlyaWdodCAoYykgMjAxNiBKdXNzaSBVdHVuZW4sIHUtanVzc2lAc3VvbWkyNC5maVxyXG4gICAqIFxyXG4gICAqIFxyXG4gICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICovXHJcbm50PWx0LkFQSSxvdD1pdD1ydD1cIlwiLG50LmFkZE1ldGFkYXRhPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGl0PWV8fFwiaHR0cDovL2pzcGRmLmRlZmF1bHQubmFtZXNwYWNldXJpL1wiLHJ0PXQsdGhpcy5pbnRlcm5hbC5ldmVudHMuc3Vic2NyaWJlKFwicG9zdFB1dFJlc291cmNlc1wiLGZ1bmN0aW9uKCl7aWYocnQpe3ZhciB0PSc8cmRmOlJERiB4bWxuczpyZGY9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjXCI+PHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9XCJcIiB4bWxuczpqc3BkZj1cIicraXQrJ1wiPjxqc3BkZjptZXRhZGF0YT4nLGU9dW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KCc8eDp4bXBtZXRhIHhtbG5zOng9XCJhZG9iZTpuczptZXRhL1wiPicpKSxuPXVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudCh0KSkscj11bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQocnQpKSxpPXVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChcIjwvanNwZGY6bWV0YWRhdGE+PC9yZGY6RGVzY3JpcHRpb24+PC9yZGY6UkRGPlwiKSksbz11bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoXCI8L3g6eG1wbWV0YT5cIikpLGE9bi5sZW5ndGgrci5sZW5ndGgraS5sZW5ndGgrZS5sZW5ndGgrby5sZW5ndGg7b3Q9dGhpcy5pbnRlcm5hbC5uZXdPYmplY3QoKSx0aGlzLmludGVybmFsLndyaXRlKFwiPDwgL1R5cGUgL01ldGFkYXRhIC9TdWJ0eXBlIC9YTUwgL0xlbmd0aCBcIithK1wiID4+XCIpLHRoaXMuaW50ZXJuYWwud3JpdGUoXCJzdHJlYW1cIiksdGhpcy5pbnRlcm5hbC53cml0ZShlK24rcitpK28pLHRoaXMuaW50ZXJuYWwud3JpdGUoXCJlbmRzdHJlYW1cIiksdGhpcy5pbnRlcm5hbC53cml0ZShcImVuZG9ialwiKX1lbHNlIG90PVwiXCJ9KSx0aGlzLmludGVybmFsLmV2ZW50cy5zdWJzY3JpYmUoXCJwdXRDYXRhbG9nXCIsZnVuY3Rpb24oKXtvdCYmdGhpcy5pbnRlcm5hbC53cml0ZShcIi9NZXRhZGF0YSBcIitvdCtcIiAwIFJcIil9KSx0aGlzfSxmdW5jdGlvbihmLHQpe3ZhciBlPWYuQVBJO3ZhciBtPWUucGRmRXNjYXBlMTY9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG4scj1lLm1ldGFkYXRhLlVuaWNvZGUud2lkdGhzLGk9W1wiXCIsXCIwXCIsXCIwMFwiLFwiMDAwXCIsXCIwMDAwXCJdLG89W1wiXCJdLGE9MCxzPXQubGVuZ3RoO2E8czsrK2Epe2lmKG49ZS5tZXRhZGF0YS5jaGFyYWN0ZXJUb0dseXBoKHQuY2hhckNvZGVBdChhKSksZS5tZXRhZGF0YS5nbHlJZHNVc2VkLnB1c2gobiksZS5tZXRhZGF0YS50b1VuaWNvZGVbbl09dC5jaGFyQ29kZUF0KGEpLC0xPT1yLmluZGV4T2YobikmJihyLnB1c2gobiksci5wdXNoKFtwYXJzZUludChlLm1ldGFkYXRhLndpZHRoT2ZHbHlwaChuKSwxMCldKSksXCIwXCI9PW4pcmV0dXJuIG8uam9pbihcIlwiKTtuPW4udG9TdHJpbmcoMTYpLG8ucHVzaChpWzQtbi5sZW5ndGhdLG4pfXJldHVybiBvLmpvaW4oXCJcIil9LHA9ZnVuY3Rpb24odCl7dmFyIGUsbixyLGksbyxhLHM7Zm9yKG89XCIvQ0lESW5pdCAvUHJvY1NldCBmaW5kcmVzb3VyY2UgYmVnaW5cXG4xMiBkaWN0IGJlZ2luXFxuYmVnaW5jbWFwXFxuL0NJRFN5c3RlbUluZm8gPDxcXG4gIC9SZWdpc3RyeSAoQWRvYmUpXFxuICAvT3JkZXJpbmcgKFVDUylcXG4gIC9TdXBwbGVtZW50IDBcXG4+PiBkZWZcXG4vQ01hcE5hbWUgL0Fkb2JlLUlkZW50aXR5LVVDUyBkZWZcXG4vQ01hcFR5cGUgMiBkZWZcXG4xIGJlZ2luY29kZXNwYWNlcmFuZ2VcXG48MDAwMD48ZmZmZj5cXG5lbmRjb2Rlc3BhY2VyYW5nZVwiLHI9W10sYT0wLHM9KG49T2JqZWN0LmtleXModCkuc29ydChmdW5jdGlvbih0LGUpe3JldHVybiB0LWV9KSkubGVuZ3RoO2E8czthKyspZT1uW2FdLDEwMDw9ci5sZW5ndGgmJihvKz1cIlxcblwiK3IubGVuZ3RoK1wiIGJlZ2luYmZjaGFyXFxuXCIrci5qb2luKFwiXFxuXCIpK1wiXFxuZW5kYmZjaGFyXCIscj1bXSksaT0oXCIwMDAwXCIrdFtlXS50b1N0cmluZygxNikpLnNsaWNlKC00KSxlPShcIjAwMDBcIisoK2UpLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpLHIucHVzaChcIjxcIitlK1wiPjxcIitpK1wiPlwiKTtyZXR1cm4gci5sZW5ndGgmJihvKz1cIlxcblwiK3IubGVuZ3RoK1wiIGJlZ2luYmZjaGFyXFxuXCIrci5qb2luKFwiXFxuXCIpK1wiXFxuZW5kYmZjaGFyXFxuXCIpLG8rPVwiZW5kY21hcFxcbkNNYXBOYW1lIGN1cnJlbnRkaWN0IC9DTWFwIGRlZmluZXJlc291cmNlIHBvcFxcbmVuZFxcbmVuZFwifTtlLmV2ZW50cy5wdXNoKFtcInB1dEZvbnRcIixmdW5jdGlvbih0KXshZnVuY3Rpb24odCxlLG4scil7aWYodC5tZXRhZGF0YSBpbnN0YW5jZW9mIGYuQVBJLlRURkZvbnQmJlwiSWRlbnRpdHktSFwiPT09dC5lbmNvZGluZyl7Zm9yKHZhciBpPXQubWV0YWRhdGEuVW5pY29kZS53aWR0aHMsbz10Lm1ldGFkYXRhLnN1YnNldC5lbmNvZGUodC5tZXRhZGF0YS5nbHlJZHNVc2VkLDEpLGE9XCJcIixzPTA7czxvLmxlbmd0aDtzKyspYSs9U3RyaW5nLmZyb21DaGFyQ29kZShvW3NdKTt2YXIgbD1uKCk7cih7ZGF0YTphLGFkZExlbmd0aDE6ITB9KSxlKFwiZW5kb2JqXCIpO3ZhciBoPW4oKTtyKHtkYXRhOnAodC5tZXRhZGF0YS50b1VuaWNvZGUpLGFkZExlbmd0aDE6ITB9KSxlKFwiZW5kb2JqXCIpO3ZhciB1PW4oKTtlKFwiPDxcIiksZShcIi9UeXBlIC9Gb250RGVzY3JpcHRvclwiKSxlKFwiL0ZvbnROYW1lIC9cIit0LmZvbnROYW1lKSxlKFwiL0ZvbnRGaWxlMiBcIitsK1wiIDAgUlwiKSxlKFwiL0ZvbnRCQm94IFwiK2YuQVBJLlBERk9iamVjdC5jb252ZXJ0KHQubWV0YWRhdGEuYmJveCkpLGUoXCIvRmxhZ3MgXCIrdC5tZXRhZGF0YS5mbGFncyksZShcIi9TdGVtViBcIit0Lm1ldGFkYXRhLnN0ZW1WKSxlKFwiL0l0YWxpY0FuZ2xlIFwiK3QubWV0YWRhdGEuaXRhbGljQW5nbGUpLGUoXCIvQXNjZW50IFwiK3QubWV0YWRhdGEuYXNjZW5kZXIpLGUoXCIvRGVzY2VudCBcIit0Lm1ldGFkYXRhLmRlY2VuZGVyKSxlKFwiL0NhcEhlaWdodCBcIit0Lm1ldGFkYXRhLmNhcEhlaWdodCksZShcIj4+XCIpLGUoXCJlbmRvYmpcIik7dmFyIGM9bigpO2UoXCI8PFwiKSxlKFwiL1R5cGUgL0ZvbnRcIiksZShcIi9CYXNlRm9udCAvXCIrdC5mb250TmFtZSksZShcIi9Gb250RGVzY3JpcHRvciBcIit1K1wiIDAgUlwiKSxlKFwiL1cgXCIrZi5BUEkuUERGT2JqZWN0LmNvbnZlcnQoaSkpLGUoXCIvQ0lEVG9HSURNYXAgL0lkZW50aXR5XCIpLGUoXCIvRFcgMTAwMFwiKSxlKFwiL1N1YnR5cGUgL0NJREZvbnRUeXBlMlwiKSxlKFwiL0NJRFN5c3RlbUluZm9cIiksZShcIjw8XCIpLGUoXCIvU3VwcGxlbWVudCAwXCIpLGUoXCIvUmVnaXN0cnkgKEFkb2JlKVwiKSxlKFwiL09yZGVyaW5nIChcIit0LmVuY29kaW5nK1wiKVwiKSxlKFwiPj5cIiksZShcIj4+XCIpLGUoXCJlbmRvYmpcIiksdC5vYmplY3ROdW1iZXI9bigpLGUoXCI8PFwiKSxlKFwiL1R5cGUgL0ZvbnRcIiksZShcIi9TdWJ0eXBlIC9UeXBlMFwiKSxlKFwiL1RvVW5pY29kZSBcIitoK1wiIDAgUlwiKSxlKFwiL0Jhc2VGb250IC9cIit0LmZvbnROYW1lKSxlKFwiL0VuY29kaW5nIC9cIit0LmVuY29kaW5nKSxlKFwiL0Rlc2NlbmRhbnRGb250cyBbXCIrYytcIiAwIFJdXCIpLGUoXCI+PlwiKSxlKFwiZW5kb2JqXCIpLHQuaXNBbHJlYWR5UHV0dGVkPSEwfX0odC5mb250LHQub3V0LHQubmV3T2JqZWN0LHQucHV0U3RyZWFtKX1dKTtlLmV2ZW50cy5wdXNoKFtcInB1dEZvbnRcIixmdW5jdGlvbih0KXshZnVuY3Rpb24odCxlLG4scil7aWYodC5tZXRhZGF0YSBpbnN0YW5jZW9mIGYuQVBJLlRURkZvbnQmJlwiV2luQW5zaUVuY29kaW5nXCI9PT10LmVuY29kaW5nKXt0Lm1ldGFkYXRhLlVuaWNvZGUud2lkdGhzO2Zvcih2YXIgaT10Lm1ldGFkYXRhLnJhd0RhdGEsbz1cIlwiLGE9MDthPGkubGVuZ3RoO2ErKylvKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGlbYV0pO3ZhciBzPW4oKTtyKHtkYXRhOm8sYWRkTGVuZ3RoMTohMH0pLGUoXCJlbmRvYmpcIik7dmFyIGw9bigpO3Ioe2RhdGE6cCh0Lm1ldGFkYXRhLnRvVW5pY29kZSksYWRkTGVuZ3RoMTohMH0pLGUoXCJlbmRvYmpcIik7dmFyIGg9bigpO2ZvcihlKFwiPDxcIiksZShcIi9EZXNjZW50IFwiK3QubWV0YWRhdGEuZGVjZW5kZXIpLGUoXCIvQ2FwSGVpZ2h0IFwiK3QubWV0YWRhdGEuY2FwSGVpZ2h0KSxlKFwiL1N0ZW1WIFwiK3QubWV0YWRhdGEuc3RlbVYpLGUoXCIvVHlwZSAvRm9udERlc2NyaXB0b3JcIiksZShcIi9Gb250RmlsZTIgXCIrcytcIiAwIFJcIiksZShcIi9GbGFncyA5NlwiKSxlKFwiL0ZvbnRCQm94IFwiK2YuQVBJLlBERk9iamVjdC5jb252ZXJ0KHQubWV0YWRhdGEuYmJveCkpLGUoXCIvRm9udE5hbWUgL1wiK3QuZm9udE5hbWUpLGUoXCIvSXRhbGljQW5nbGUgXCIrdC5tZXRhZGF0YS5pdGFsaWNBbmdsZSksZShcIi9Bc2NlbnQgXCIrdC5tZXRhZGF0YS5hc2NlbmRlciksZShcIj4+XCIpLGUoXCJlbmRvYmpcIiksdC5vYmplY3ROdW1iZXI9bigpLGE9MDthPHQubWV0YWRhdGEuaG10eC53aWR0aHMubGVuZ3RoO2ErKyl0Lm1ldGFkYXRhLmhtdHgud2lkdGhzW2FdPXBhcnNlSW50KHQubWV0YWRhdGEuaG10eC53aWR0aHNbYV0qKDFlMy90Lm1ldGFkYXRhLmhlYWQudW5pdHNQZXJFbSkpO2UoXCI8PC9TdWJ0eXBlL1RydWVUeXBlL1R5cGUvRm9udC9Ub1VuaWNvZGUgXCIrbCtcIiAwIFIvQmFzZUZvbnQvXCIrdC5mb250TmFtZStcIi9Gb250RGVzY3JpcHRvciBcIitoK1wiIDAgUi9FbmNvZGluZy9cIit0LmVuY29kaW5nK1wiIC9GaXJzdENoYXIgMjkgL0xhc3RDaGFyIDI1NSAvV2lkdGhzIFwiK2YuQVBJLlBERk9iamVjdC5jb252ZXJ0KHQubWV0YWRhdGEuaG10eC53aWR0aHMpK1wiPj5cIiksZShcImVuZG9ialwiKSx0LmlzQWxyZWFkeVB1dHRlZD0hMH19KHQuZm9udCx0Lm91dCx0Lm5ld09iamVjdCx0LnB1dFN0cmVhbSl9XSk7dmFyIGg9ZnVuY3Rpb24odCl7dmFyIGUsbixyPXQudGV4dHx8XCJcIixpPXQueCxvPXQueSxhPXQub3B0aW9uc3x8e30scz10Lm11dGV4fHx7fSxsPXMucGRmRXNjYXBlLGg9cy5hY3RpdmVGb250S2V5LHU9cy5mb250cyxjPShzLmFjdGl2ZUZvbnRTaXplLFwiXCIpLGY9MCxwPVwiXCIsZD11W249aF0uZW5jb2Rpbmc7aWYoXCJJZGVudGl0eS1IXCIhPT11W25dLmVuY29kaW5nKXJldHVybnt0ZXh0OnIseDppLHk6byxvcHRpb25zOmEsbXV0ZXg6c307Zm9yKHA9cixuPWgsXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHIpJiYocD1yWzBdKSxmPTA7ZjxwLmxlbmd0aDtmKz0xKXVbbl0ubWV0YWRhdGEuaGFzT3duUHJvcGVydHkoXCJjbWFwXCIpJiYoZT11W25dLm1ldGFkYXRhLmNtYXAudW5pY29kZS5jb2RlTWFwW3BbZl0uY2hhckNvZGVBdCgwKV0pLGU/Yys9cFtmXTpwW2ZdLmNoYXJDb2RlQXQoMCk8MjU2JiZ1W25dLm1ldGFkYXRhLmhhc093blByb3BlcnR5KFwiVW5pY29kZVwiKT9jKz1wW2ZdOmMrPVwiXCI7dmFyIGc9XCJcIjtyZXR1cm4gcGFyc2VJbnQobi5zbGljZSgxKSk8MTR8fFwiV2luQW5zaUVuY29kaW5nXCI9PT1kP2c9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVwiXCIsbj0wO248dC5sZW5ndGg7bisrKWUrPVwiXCIrdC5jaGFyQ29kZUF0KG4pLnRvU3RyaW5nKDE2KTtyZXR1cm4gZX0obChjLG4pKTpcIklkZW50aXR5LUhcIj09PWQmJihnPW0oYyx1W25dKSkscy5pc0hleD0hMCx7dGV4dDpnLHg6aSx5Om8sb3B0aW9uczphLG11dGV4OnN9fTtlLmV2ZW50cy5wdXNoKFtcInBvc3RQcm9jZXNzVGV4dFwiLGZ1bmN0aW9uKHQpe3ZhciBlPXQudGV4dHx8XCJcIixuPXQueCxyPXQueSxpPXQub3B0aW9ucyxvPXQubXV0ZXgsYT0oaS5sYW5nLFtdKSxzPXt0ZXh0OmUseDpuLHk6cixvcHRpb25zOmksbXV0ZXg6b307aWYoXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpKXt2YXIgbD0wO2ZvcihsPTA7bDxlLmxlbmd0aDtsKz0xKVwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlW2xdKSYmMz09PWVbbF0ubGVuZ3RoP2EucHVzaChbaChPYmplY3QuYXNzaWduKHt9LHMse3RleHQ6ZVtsXVswXX0pKS50ZXh0LGVbbF1bMV0sZVtsXVsyXV0pOmEucHVzaChoKE9iamVjdC5hc3NpZ24oe30scyx7dGV4dDplW2xdfSkpLnRleHQpO3QudGV4dD1hfWVsc2UgdC50ZXh0PWgoT2JqZWN0LmFzc2lnbih7fSxzLHt0ZXh0OmV9KSkudGV4dH1dKX0obHQsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGZ8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWwmJmdsb2JhbHx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93fHxGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkpLGF0PWx0LkFQSSxzdD1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwIT09dCYmKHZvaWQgMD09PXQudkZTJiYodC52RlM9e30pLCEwKX0sYXQuZXhpc3RzRmlsZUluVkZTPWZ1bmN0aW9uKHQpe3JldHVybiEhc3QodGhpcy5pbnRlcm5hbCkmJnZvaWQgMCE9PXRoaXMuaW50ZXJuYWwudkZTW3RdfSxhdC5hZGRGaWxlVG9WRlM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gc3QodGhpcy5pbnRlcm5hbCksdGhpcy5pbnRlcm5hbC52RlNbdF09ZSx0aGlzfSxhdC5nZXRGaWxlRnJvbVZGUz1mdW5jdGlvbih0KXtyZXR1cm4gc3QodGhpcy5pbnRlcm5hbCksdm9pZCAwIT09dGhpcy5pbnRlcm5hbC52RlNbdF0/dGhpcy5pbnRlcm5hbC52RlNbdF06bnVsbH0sbHQuQVBJLmFkZEhUTUw9ZnVuY3Rpb24odCxkLGcscyxtKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgaHRtbDJjYW52YXMmJlwidW5kZWZpbmVkXCI9PXR5cGVvZiByYXN0ZXJpemVIVE1MKXRocm93IG5ldyBFcnJvcihcIllvdSBuZWVkIGVpdGhlciBodHRwczovL2dpdGh1Yi5jb20vbmlrbGFzdmgvaHRtbDJjYW52YXMgb3IgaHR0cHM6Ly9naXRodWIuY29tL2NidXJnbWVyL3Jhc3Rlcml6ZUhUTUwuanNcIik7XCJudW1iZXJcIiE9dHlwZW9mIGQmJihzPWQsbT1nKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBzJiYobT1zLHM9bnVsbCksXCJmdW5jdGlvblwiIT10eXBlb2YgbSYmKG09ZnVuY3Rpb24oKXt9KTt2YXIgZT10aGlzLmludGVybmFsLHk9ZS5zY2FsZUZhY3Rvcix2PWUucGFnZVNpemUuZ2V0V2lkdGgoKSx3PWUucGFnZVNpemUuZ2V0SGVpZ2h0KCk7aWYoKHM9c3x8e30pLm9ucmVuZGVyZWQ9ZnVuY3Rpb24obCl7ZD1wYXJzZUludChkKXx8MCxnPXBhcnNlSW50KGcpfHwwO3ZhciB0PXMuZGltfHx7fSxoPU9iamVjdC5hc3NpZ24oe3RvcDowLHJpZ2h0OjAsYm90dG9tOjAsbGVmdDowLHVzZUZvcjpcImNvbnRlbnRcIn0scy5tYXJnaW4pLGU9dC5ofHxNYXRoLm1pbih3LGwuaGVpZ2h0L3kpLHU9dC53fHxNYXRoLm1pbih2LGwud2lkdGgveSktZCxjPXMuZm9ybWF0fHxcIkpQRUdcIixmPXMuaW1hZ2VDb21wcmVzc2lvbnx8XCJTTE9XXCI7aWYobC5oZWlnaHQ+dy1oLnRvcC1oLmJvdHRvbSYmcy5wYWdlc3BsaXQpe3ZhciBwPWZ1bmN0aW9uKHQsZSxuLHIsaSl7dmFyIG89ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtvLmhlaWdodD1pLG8ud2lkdGg9cjt2YXIgYT1vLmdldENvbnRleHQoXCIyZFwiKTtyZXR1cm4gYS5tb3pJbWFnZVNtb290aGluZ0VuYWJsZWQ9ITEsYS53ZWJraXRJbWFnZVNtb290aGluZ0VuYWJsZWQ9ITEsYS5tc0ltYWdlU21vb3RoaW5nRW5hYmxlZD0hMSxhLmltYWdlU21vb3RoaW5nRW5hYmxlZD0hMSxhLmZpbGxTdHlsZT1zLmJhY2tncm91bmRDb2xvcnx8XCIjZmZmZmZmXCIsYS5maWxsUmVjdCgwLDAscixpKSxhLmRyYXdJbWFnZSh0LGUsbixyLGksMCwwLHIsaSksb30sbj1mdW5jdGlvbigpe2Zvcih2YXIgdCxlLG49MCxyPTAsaT17fSxvPSExOzspe3ZhciBhO2lmKHI9MCxpLnRvcD0wIT09bj9oLnRvcDpnLGkubGVmdD0wIT09bj9oLmxlZnQ6ZCxvPSh2LWgubGVmdC1oLnJpZ2h0KSp5PGwud2lkdGgsXCJjb250ZW50XCI9PT1oLnVzZUZvcj8wPT09bj8odD1NYXRoLm1pbigodi1oLmxlZnQpKnksbC53aWR0aCksZT1NYXRoLm1pbigody1oLnRvcCkqeSxsLmhlaWdodC1uKSk6KHQ9TWF0aC5taW4odip5LGwud2lkdGgpLGU9TWF0aC5taW4odyp5LGwuaGVpZ2h0LW4pLGkudG9wPTApOih0PU1hdGgubWluKCh2LWgubGVmdC1oLnJpZ2h0KSp5LGwud2lkdGgpLGU9TWF0aC5taW4oKHctaC5ib3R0b20taC50b3ApKnksbC5oZWlnaHQtbikpLG8pZm9yKDs7KXtcImNvbnRlbnRcIj09PWgudXNlRm9yJiYoMD09PXI/dD1NYXRoLm1pbigodi1oLmxlZnQpKnksbC53aWR0aCk6KHQ9TWF0aC5taW4odip5LGwud2lkdGgtciksaS5sZWZ0PTApKTt2YXIgcz1bYT1wKGwscixuLHQsZSksaS5sZWZ0LGkudG9wLGEud2lkdGgveSxhLmhlaWdodC95LGMsbnVsbCxmXTtpZih0aGlzLmFkZEltYWdlLmFwcGx5KHRoaXMscyksKHIrPXQpPj1sLndpZHRoKWJyZWFrO3RoaXMuYWRkUGFnZSgpfWVsc2Ugcz1bYT1wKGwsMCxuLHQsZSksaS5sZWZ0LGkudG9wLGEud2lkdGgveSxhLmhlaWdodC95LGMsbnVsbCxmXSx0aGlzLmFkZEltYWdlLmFwcGx5KHRoaXMscyk7aWYoKG4rPWUpPj1sLmhlaWdodClicmVhazt0aGlzLmFkZFBhZ2UoKX1tKHUsbixudWxsLHMpfS5iaW5kKHRoaXMpO2lmKFwiQ0FOVkFTXCI9PT1sLm5vZGVOYW1lKXt2YXIgcj1uZXcgSW1hZ2U7ci5vbmxvYWQ9bixyLnNyYz1sLnRvRGF0YVVSTChcImltYWdlL3BuZ1wiKSxsPXJ9ZWxzZSBuKCl9ZWxzZXt2YXIgaT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM1KSxvPVtsLGQsZyx1LGUsYyxpLGZdO3RoaXMuYWRkSW1hZ2UuYXBwbHkodGhpcyxvKSxtKHUsZSxpLG8pfX0uYmluZCh0aGlzKSxcInVuZGVmaW5lZFwiIT10eXBlb2YgaHRtbDJjYW52YXMmJiFzLnJzdHopcmV0dXJuIGh0bWwyY2FudmFzKHQscyk7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHJhc3Rlcml6ZUhUTUwpcmV0dXJuIG51bGw7dmFyIG49XCJkcmF3RG9jdW1lbnRcIjtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdCYmKG49L15odHRwLy50ZXN0KHQpP1wiZHJhd1VSTFwiOlwiZHJhd0hUTUxcIikscy53aWR0aD1zLndpZHRofHx2KnkscmFzdGVyaXplSFRNTFtuXSh0LHZvaWQgMCxzKS50aGVuKGZ1bmN0aW9uKHQpe3Mub25yZW5kZXJlZCh0LmltYWdlKX0sZnVuY3Rpb24odCl7bShudWxsLHQpfSl9LFxyXG4vKipcclxuICAgKiBqc1BERiBmcm9tSFRNTCBwbHVnaW4uIEJFVEEgc3RhZ2UuIEFQSSBzdWJqZWN0IHRvIGNoYW5nZS4gTmVlZHMgYnJvd3NlclxyXG4gICAqIENvcHlyaWdodCAoYykgMjAxMiBXaWxsb3cgU3lzdGVtcyBDb3Jwb3JhdGlvbiwgd2lsbG93LXN5c3RlbXMuY29tXHJcbiAgICogICAgICAgICAgICAgICAyMDE0IEp1YW4gUGFibG8gR2F2aXJpYSwgaHR0cHM6Ly9naXRodWIuY29tL2p1YW5wZ2F2aXJpYVxyXG4gICAqICAgICAgICAgICAgICAgMjAxNCBEaWVnbyBDYXNvcnJhbiwgaHR0cHM6Ly9naXRodWIuY29tL2RpZWdvY3JcclxuICAgKiAgICAgICAgICAgICAgIDIwMTQgRGFuaWVsIEh1c2FyLCBodHRwczovL2dpdGh1Yi5jb20vZGFuaWVsaHVzYXJcclxuICAgKiAgICAgICAgICAgICAgIDIwMTQgV29sZmdhbmcgR2Fzc2xlciwgaHR0cHM6Ly9naXRodWIuY29tL3dvb2xmZ1xyXG4gICAqICAgICAgICAgICAgICAgMjAxNCBTdGV2ZW4gU3B1bmdpbiwgaHR0cHM6Ly9naXRodWIuY29tL2ZsYW1lbmNvXHJcbiAgICpcclxuICAgKiBAbGljZW5zZVxyXG4gICAqIFxyXG4gICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICovXHJcbmZ1bmN0aW9uKHQpe3ZhciBQLGssaSxhLHMsbCxoLHUsSSx3LGYsYyxwLG4sQyxCLGQsZyxtLGo7UD1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gZS5wcm90b3R5cGU9dCxuZXcgZX07ZnVuY3Rpb24gZSgpe319KCksdz1mdW5jdGlvbih0KXt2YXIgZSxuLHIsaSxvLGEscztmb3Iobj0wLHI9dC5sZW5ndGgsZT12b2lkIDAsYT1pPSExOyFpJiZuIT09cjspKGU9dFtuXT10W25dLnRyaW1MZWZ0KCkpJiYoaT0hMCksbisrO2ZvcihuPXItMTtyJiYhYSYmLTEhPT1uOykoZT10W25dPXRbbl0udHJpbVJpZ2h0KCkpJiYoYT0hMCksbi0tO2ZvcihvPS9cXHMrJC9nLHM9ITAsbj0wO24hPT1yOylcIlxcdTIwMjhcIiE9dFtuXSYmKGU9dFtuXS5yZXBsYWNlKC9cXHMrL2csXCIgXCIpLHMmJihlPWUudHJpbUxlZnQoKSksZSYmKHM9by50ZXN0KGUpKSx0W25dPWUpLG4rKztyZXR1cm4gdH0sYz1mdW5jdGlvbih0KXt2YXIgZSxuLHI7Zm9yKGU9dm9pZCAwLG49KHI9dC5zcGxpdChcIixcIikpLnNoaWZ0KCk7IWUmJm47KWU9aVtuLnRyaW0oKS50b0xvd2VyQ2FzZSgpXSxuPXIuc2hpZnQoKTtyZXR1cm4gZX0scD1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4tMTwodD1cImF1dG9cIj09PXQ/XCIwcHhcIjp0KS5pbmRleE9mKFwiZW1cIikmJiFpc05hTihOdW1iZXIodC5yZXBsYWNlKFwiZW1cIixcIlwiKSkpJiYodD0xOC43MTkqTnVtYmVyKHQucmVwbGFjZShcImVtXCIsXCJcIikpK1wicHhcIiksLTE8dC5pbmRleE9mKFwicHRcIikmJiFpc05hTihOdW1iZXIodC5yZXBsYWNlKFwicHRcIixcIlwiKSkpJiYodD0xLjMzMypOdW1iZXIodC5yZXBsYWNlKFwicHRcIixcIlwiKSkrXCJweFwiKSx2b2lkIDAsMTYsKGU9blt0XSk/ZTp2b2lkIDAhPT0oZT17XCJ4eC1zbWFsbFwiOjksXCJ4LXNtYWxsXCI6MTEsc21hbGw6MTMsbWVkaXVtOjE2LGxhcmdlOjE5LFwieC1sYXJnZVwiOjIzLFwieHgtbGFyZ2VcIjoyOCxhdXRvOjB9W3RdKT9uW3RdPWUvMTY6KGU9cGFyc2VGbG9hdCh0KSk/blt0XT1lLzE2OihlPXQubWF0Y2goLyhbXFxkXFwuXSspKHB4KS8pLEFycmF5LmlzQXJyYXkoZSkmJjM9PT1lLmxlbmd0aD9uW3RdPXBhcnNlRmxvYXQoZVsxXSkvMTY6blt0XT0xKX0sST1mdW5jdGlvbih0KXt2YXIgZSxuLHIsaSxvO3JldHVybiBvPXQsaT1kb2N1bWVudC5kZWZhdWx0VmlldyYmZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZT9kb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKG8sbnVsbCk6by5jdXJyZW50U3R5bGU/by5jdXJyZW50U3R5bGU6by5zdHlsZSxuPXZvaWQgMCwoZT17fSlbXCJmb250LWZhbWlseVwiXT1jKChyPWZ1bmN0aW9uKHQpe3JldHVybiB0PXQucmVwbGFjZSgvLVxcRC9nLGZ1bmN0aW9uKHQpe3JldHVybiB0LmNoYXJBdCgxKS50b1VwcGVyQ2FzZSgpfSksaVt0XX0pKFwiZm9udC1mYW1pbHlcIikpfHxcInRpbWVzXCIsZVtcImZvbnQtc3R5bGVcIl09YVtyKFwiZm9udC1zdHlsZVwiKV18fFwibm9ybWFsXCIsZVtcInRleHQtYWxpZ25cIl09c1tyKFwidGV4dC1hbGlnblwiKV18fFwibGVmdFwiLFwiYm9sZFwiPT09KG49bFtyKFwiZm9udC13ZWlnaHRcIildfHxcIm5vcm1hbFwiKSYmKFwibm9ybWFsXCI9PT1lW1wiZm9udC1zdHlsZVwiXT9lW1wiZm9udC1zdHlsZVwiXT1uOmVbXCJmb250LXN0eWxlXCJdPW4rZVtcImZvbnQtc3R5bGVcIl0pLGVbXCJmb250LXNpemVcIl09cChyKFwiZm9udC1zaXplXCIpKXx8MSxlW1wibGluZS1oZWlnaHRcIl09cChyKFwibGluZS1oZWlnaHRcIikpfHwxLGUuZGlzcGxheT1cImlubGluZVwiPT09cihcImRpc3BsYXlcIik/XCJpbmxpbmVcIjpcImJsb2NrXCIsbj1cImJsb2NrXCI9PT1lLmRpc3BsYXksZVtcIm1hcmdpbi10b3BcIl09biYmcChyKFwibWFyZ2luLXRvcFwiKSl8fDAsZVtcIm1hcmdpbi1ib3R0b21cIl09biYmcChyKFwibWFyZ2luLWJvdHRvbVwiKSl8fDAsZVtcInBhZGRpbmctdG9wXCJdPW4mJnAocihcInBhZGRpbmctdG9wXCIpKXx8MCxlW1wicGFkZGluZy1ib3R0b21cIl09biYmcChyKFwicGFkZGluZy1ib3R0b21cIikpfHwwLGVbXCJtYXJnaW4tbGVmdFwiXT1uJiZwKHIoXCJtYXJnaW4tbGVmdFwiKSl8fDAsZVtcIm1hcmdpbi1yaWdodFwiXT1uJiZwKHIoXCJtYXJnaW4tcmlnaHRcIikpfHwwLGVbXCJwYWRkaW5nLWxlZnRcIl09biYmcChyKFwicGFkZGluZy1sZWZ0XCIpKXx8MCxlW1wicGFkZGluZy1yaWdodFwiXT1uJiZwKHIoXCJwYWRkaW5nLXJpZ2h0XCIpKXx8MCxlW1wicGFnZS1icmVhay1iZWZvcmVcIl09cihcInBhZ2UtYnJlYWstYmVmb3JlXCIpfHxcImF1dG9cIixlLmZsb2F0PWhbcihcImNzc0Zsb2F0XCIpXXx8XCJub25lXCIsZS5jbGVhcj11W3IoXCJjbGVhclwiKV18fFwibm9uZVwiLGUuY29sb3I9cihcImNvbG9yXCIpLGV9LEM9ZnVuY3Rpb24odCxlLG4pe3ZhciByLGksbyxhLHM7aWYobz0hMSxhPWk9dm9pZCAwLHI9bltcIiNcIit0LmlkXSlpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiByKW89cih0LGUpO2Vsc2UgZm9yKGk9MCxhPXIubGVuZ3RoOyFvJiZpIT09YTspbz1yW2ldKHQsZSksaSsrO2lmKHI9blt0Lm5vZGVOYW1lXSwhbyYmcilpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiByKW89cih0LGUpO2Vsc2UgZm9yKGk9MCxhPXIubGVuZ3RoOyFvJiZpIT09YTspbz1yW2ldKHQsZSksaSsrO2ZvcihzPVwic3RyaW5nXCI9PXR5cGVvZiB0LmNsYXNzTmFtZT90LmNsYXNzTmFtZS5zcGxpdChcIiBcIik6W10saT0wO2k8cy5sZW5ndGg7aSsrKWlmKHI9bltcIi5cIitzW2ldXSwhbyYmcilpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiByKW89cih0LGUpO2Vsc2UgZm9yKGk9MCxhPXIubGVuZ3RoOyFvJiZpIT09YTspbz1yW2ldKHQsZSksaSsrO3JldHVybiBvfSxqPWZ1bmN0aW9uKHQsZSl7dmFyIG4scixpLG8sYSxzLGwsaCx1O2ZvcihuPVtdLHI9W10saT0wLHU9dC5yb3dzWzBdLmNlbGxzLmxlbmd0aCxsPXQuY2xpZW50V2lkdGg7aTx1OyloPXQucm93c1swXS5jZWxsc1tpXSxyW2ldPXtuYW1lOmgudGV4dENvbnRlbnQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMrL2csXCJcIikscHJvbXB0OmgudGV4dENvbnRlbnQucmVwbGFjZSgvXFxyP1xcbi9nLFwiXCIpLHdpZHRoOmguY2xpZW50V2lkdGgvbCplLnBkZi5pbnRlcm5hbC5wYWdlU2l6ZS5nZXRXaWR0aCgpfSxpKys7Zm9yKGk9MTtpPHQucm93cy5sZW5ndGg7KXtmb3Iocz10LnJvd3NbaV0sYT17fSxvPTA7bzxzLmNlbGxzLmxlbmd0aDspYVtyW29dLm5hbWVdPXMuY2VsbHNbb10udGV4dENvbnRlbnQucmVwbGFjZSgvXFxyP1xcbi9nLFwiXCIpLG8rKztuLnB1c2goYSksaSsrfXJldHVybntyb3dzOm4saGVhZGVyczpyfX07dmFyIEU9e1NDUklQVDoxLFNUWUxFOjEsTk9TQ1JJUFQ6MSxPQkpFQ1Q6MSxFTUJFRDoxLFNFTEVDVDoxfSxNPTE7az1mdW5jdGlvbih0LGksZSl7dmFyIG4scixvLGEscyxsLGgsdTtmb3Iocj10LmNoaWxkTm9kZXMsbj12b2lkIDAsKHM9XCJibG9ja1wiPT09KG89SSh0KSkuZGlzcGxheSkmJihpLnNldEJsb2NrQm91bmRhcnkoKSxpLnNldEJsb2NrU3R5bGUobykpLGE9MCxsPXIubGVuZ3RoO2E8bDspe2lmKFwib2JqZWN0XCI9PT1zZShuPXJbYV0pKXtpZihpLmV4ZWN1dGVXYXRjaEZ1bmN0aW9ucyhuKSwxPT09bi5ub2RlVHlwZSYmXCJIRUFERVJcIj09PW4ubm9kZU5hbWUpe3ZhciBjPW4sZj1pLnBkZi5tYXJnaW5zX2RvYy50b3A7aS5wZGYuaW50ZXJuYWwuZXZlbnRzLnN1YnNjcmliZShcImFkZFBhZ2VcIixmdW5jdGlvbih0KXtpLnk9ZixrKGMsaSxlKSxpLnBkZi5tYXJnaW5zX2RvYy50b3A9aS55KzEwLGkueSs9MTB9LCExKX1pZig4PT09bi5ub2RlVHlwZSYmXCIjY29tbWVudFwiPT09bi5ub2RlTmFtZSl+bi50ZXh0Q29udGVudC5pbmRleE9mKFwiQUREX1BBR0VcIikmJihpLnBkZi5hZGRQYWdlKCksaS55PWkucGRmLm1hcmdpbnNfZG9jLnRvcCk7ZWxzZSBpZigxIT09bi5ub2RlVHlwZXx8RVtuLm5vZGVOYW1lXSlpZigzPT09bi5ub2RlVHlwZSl7dmFyIHA9bi5ub2RlVmFsdWU7aWYobi5ub2RlVmFsdWUmJlwiTElcIj09PW4ucGFyZW50Tm9kZS5ub2RlTmFtZSlpZihcIk9MXCI9PT1uLnBhcmVudE5vZGUucGFyZW50Tm9kZS5ub2RlTmFtZSlwPU0rKytcIi4gXCIrcDtlbHNle3ZhciBkPW9bXCJmb250LXNpemVcIl0sZz0oMy0uNzUqZCkqaS5wZGYuaW50ZXJuYWwuc2NhbGVGYWN0b3IsbT0uNzUqZCppLnBkZi5pbnRlcm5hbC5zY2FsZUZhY3Rvcix5PTEuNzQqZC9pLnBkZi5pbnRlcm5hbC5zY2FsZUZhY3Rvcjt1PWZ1bmN0aW9uKHQsZSl7dGhpcy5wZGYuY2lyY2xlKHQrZyxlK20seSxcIkZEXCIpfX0xNiZuLm93bmVyRG9jdW1lbnQuYm9keS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuKSYmaS5hZGRUZXh0KHAsbyl9ZWxzZVwic3RyaW5nXCI9PXR5cGVvZiBuJiZpLmFkZFRleHQobixvKTtlbHNle3ZhciB2O2lmKFwiSU1HXCI9PT1uLm5vZGVOYW1lKXt2YXIgdz1uLmdldEF0dHJpYnV0ZShcInNyY1wiKTt2PUJbaS5wZGYuc0hhc2hDb2RlKHcpfHx3XX1pZih2KXtpLnBkZi5pbnRlcm5hbC5wYWdlU2l6ZS5nZXRIZWlnaHQoKS1pLnBkZi5tYXJnaW5zX2RvYy5ib3R0b208aS55K24uaGVpZ2h0JiZpLnk+aS5wZGYubWFyZ2luc19kb2MudG9wJiYoaS5wZGYuYWRkUGFnZSgpLGkueT1pLnBkZi5tYXJnaW5zX2RvYy50b3AsaS5leGVjdXRlV2F0Y2hGdW5jdGlvbnMobikpO3ZhciBiPUkobikseD1pLngsTj0xMi9pLnBkZi5pbnRlcm5hbC5zY2FsZUZhY3RvcixMPShiW1wibWFyZ2luLWxlZnRcIl0rYltcInBhZGRpbmctbGVmdFwiXSkqTixBPShiW1wibWFyZ2luLXJpZ2h0XCJdK2JbXCJwYWRkaW5nLXJpZ2h0XCJdKSpOLFM9KGJbXCJtYXJnaW4tdG9wXCJdK2JbXCJwYWRkaW5nLXRvcFwiXSkqTixfPShiW1wibWFyZ2luLWJvdHRvbVwiXStiW1wicGFkZGluZy1ib3R0b21cIl0pKk47dm9pZCAwIT09Yi5mbG9hdCYmXCJyaWdodFwiPT09Yi5mbG9hdD94Kz1pLnNldHRpbmdzLndpZHRoLW4ud2lkdGgtQTp4Kz1MLGkucGRmLmFkZEltYWdlKHYseCxpLnkrUyxuLndpZHRoLG4uaGVpZ2h0KSx2PXZvaWQgMCxcInJpZ2h0XCI9PT1iLmZsb2F0fHxcImxlZnRcIj09PWIuZmxvYXQ/KGkud2F0Y2hGdW5jdGlvbnMucHVzaChmdW5jdGlvbih0LGUsbixyKXtyZXR1cm4gaS55Pj1lPyhpLngrPXQsaS5zZXR0aW5ncy53aWR0aCs9biwhMCk6ISEociYmMT09PXIubm9kZVR5cGUmJiFFW3Iubm9kZU5hbWVdJiZpLngrci53aWR0aD5pLnBkZi5tYXJnaW5zX2RvYy5sZWZ0K2kucGRmLm1hcmdpbnNfZG9jLndpZHRoKSYmKGkueCs9dCxpLnk9ZSxpLnNldHRpbmdzLndpZHRoKz1uLCEwKX0uYmluZCh0aGlzLFwibGVmdFwiPT09Yi5mbG9hdD8tbi53aWR0aC1MLUE6MCxpLnkrbi5oZWlnaHQrUytfLG4ud2lkdGgpKSxpLndhdGNoRnVuY3Rpb25zLnB1c2goZnVuY3Rpb24odCxlLG4pe3JldHVybiEoaS55PHQmJmU9PT1pLnBkZi5pbnRlcm5hbC5nZXROdW1iZXJPZlBhZ2VzKCkpfHwxPT09bi5ub2RlVHlwZSYmXCJib3RoXCI9PT1JKG4pLmNsZWFyJiYoaS55PXQsITApfS5iaW5kKHRoaXMsaS55K24uaGVpZ2h0LGkucGRmLmludGVybmFsLmdldE51bWJlck9mUGFnZXMoKSkpLGkuc2V0dGluZ3Mud2lkdGgtPW4ud2lkdGgrTCtBLFwibGVmdFwiPT09Yi5mbG9hdCYmKGkueCs9bi53aWR0aCtMK0EpKTppLnkrPW4uaGVpZ2h0K1MrX31lbHNlIGlmKFwiVEFCTEVcIj09PW4ubm9kZU5hbWUpaD1qKG4saSksaS55Kz0xMCxpLnBkZi50YWJsZShpLngsaS55LGgucm93cyxoLmhlYWRlcnMse2F1dG9TaXplOiExLHByaW50SGVhZGVyczplLnByaW50SGVhZGVycyxtYXJnaW5zOmkucGRmLm1hcmdpbnNfZG9jLGNzczpJKG4pfSksaS55PWkucGRmLmxhc3RDZWxsUG9zLnkraS5wZGYubGFzdENlbGxQb3MuaCsyMDtlbHNlIGlmKFwiT0xcIj09PW4ubm9kZU5hbWV8fFwiVUxcIj09PW4ubm9kZU5hbWUpTT0xLEMobixpLGUpfHxrKG4saSxlKSxpLnkrPTEwO2Vsc2UgaWYoXCJMSVwiPT09bi5ub2RlTmFtZSl7dmFyIEY9aS54O2kueCs9MjAvaS5wZGYuaW50ZXJuYWwuc2NhbGVGYWN0b3IsaS55Kz0zLEMobixpLGUpfHxrKG4saSxlKSxpLng9Rn1lbHNlXCJCUlwiPT09bi5ub2RlTmFtZT8oaS55Kz1vW1wiZm9udC1zaXplXCJdKmkucGRmLmludGVybmFsLnNjYWxlRmFjdG9yLGkuYWRkVGV4dChcIlxcdTIwMjhcIixQKG8pKSk6QyhuLGksZSl8fGsobixpLGUpfX1hKyt9aWYoZS5vdXRZPWkueSxzKXJldHVybiBpLnNldEJsb2NrQm91bmRhcnkodSl9LEI9e30sZD1mdW5jdGlvbih0LG8sZSxuKXt2YXIgYSxyPXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpbWdcIiksaT1yLmxlbmd0aCxzPTA7ZnVuY3Rpb24gbCgpe28ucGRmLmludGVybmFsLmV2ZW50cy5wdWJsaXNoKFwiaW1hZ2VzTG9hZGVkXCIpLG4oYSl9ZnVuY3Rpb24gaChlLG4scil7aWYoZSl7dmFyIGk9bmV3IEltYWdlO2E9KytzLGkuY3Jvc3NPcmlnaW49XCJcIixpLm9uZXJyb3I9aS5vbmxvYWQ9ZnVuY3Rpb24oKXtpZihpLmNvbXBsZXRlJiYoMD09PWkuc3JjLmluZGV4T2YoXCJkYXRhOmltYWdlL1wiKSYmKGkud2lkdGg9bnx8aS53aWR0aHx8MCxpLmhlaWdodD1yfHxpLmhlaWdodHx8MCksaS53aWR0aCtpLmhlaWdodCkpe3ZhciB0PW8ucGRmLnNIYXNoQ29kZShlKXx8ZTtCW3RdPUJbdF18fGl9LS1zfHxsKCl9LGkuc3JjPWV9fWZvcig7aS0tOyloKHJbaV0uZ2V0QXR0cmlidXRlKFwic3JjXCIpLHJbaV0ud2lkdGgscltpXS5oZWlnaHQpO3JldHVybiBzfHxsKCl9LGc9ZnVuY3Rpb24odCxvLGEpe3ZhciBzPXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJmb290ZXJcIik7aWYoMDxzLmxlbmd0aCl7cz1zWzBdO3ZhciBlPW8ucGRmLmludGVybmFsLndyaXRlLG49by55O28ucGRmLmludGVybmFsLndyaXRlPWZ1bmN0aW9uKCl7fSxrKHMsbyxhKTt2YXIgbD1NYXRoLmNlaWwoby55LW4pKzU7by55PW4sby5wZGYuaW50ZXJuYWwud3JpdGU9ZSxvLnBkZi5tYXJnaW5zX2RvYy5ib3R0b20rPWw7Zm9yKHZhciByPWZ1bmN0aW9uKHQpe3ZhciBlPXZvaWQgMCE9PXQ/dC5wYWdlTnVtYmVyOjEsbj1vLnk7by55PW8ucGRmLmludGVybmFsLnBhZ2VTaXplLmdldEhlaWdodCgpLW8ucGRmLm1hcmdpbnNfZG9jLmJvdHRvbSxvLnBkZi5tYXJnaW5zX2RvYy5ib3R0b20tPWw7Zm9yKHZhciByPXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzcGFuXCIpLGk9MDtpPHIubGVuZ3RoOysraSktMTwoXCIgXCIrcltpXS5jbGFzc05hbWUrXCIgXCIpLnJlcGxhY2UoL1tcXG5cXHRdL2csXCIgXCIpLmluZGV4T2YoXCIgcGFnZUNvdW50ZXIgXCIpJiYocltpXS5pbm5lckhUTUw9ZSksLTE8KFwiIFwiK3JbaV0uY2xhc3NOYW1lK1wiIFwiKS5yZXBsYWNlKC9bXFxuXFx0XS9nLFwiIFwiKS5pbmRleE9mKFwiIHRvdGFsUGFnZXMgXCIpJiYocltpXS5pbm5lckhUTUw9XCIjIyNqc1BERlZhclRvdGFsUGFnZXMjIyNcIik7ayhzLG8sYSksby5wZGYubWFyZ2luc19kb2MuYm90dG9tKz1sLG8ueT1ufSxpPXMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzcGFuXCIpLGg9MDtoPGkubGVuZ3RoOysraCktMTwoXCIgXCIraVtoXS5jbGFzc05hbWUrXCIgXCIpLnJlcGxhY2UoL1tcXG5cXHRdL2csXCIgXCIpLmluZGV4T2YoXCIgdG90YWxQYWdlcyBcIikmJm8ucGRmLmludGVybmFsLmV2ZW50cy5zdWJzY3JpYmUoXCJodG1sUmVuZGVyaW5nRmluaXNoZWRcIixvLnBkZi5wdXRUb3RhbFBhZ2VzLmJpbmQoby5wZGYsXCIjIyNqc1BERlZhclRvdGFsUGFnZXMjIyNcIiksITApO28ucGRmLmludGVybmFsLmV2ZW50cy5zdWJzY3JpYmUoXCJhZGRQYWdlXCIsciwhMSkscigpLEUuRk9PVEVSPTF9fSxtPWZ1bmN0aW9uKHQsZSxuLHIsaSxvKXtpZighZSlyZXR1cm4hMTt2YXIgYSxzLGwsaDtcInN0cmluZ1wiPT10eXBlb2YgZXx8ZS5wYXJlbnROb2RlfHwoZT1cIlwiK2UuaW5uZXJIVE1MKSxcInN0cmluZ1wiPT10eXBlb2YgZSYmKGE9ZS5yZXBsYWNlKC88XFwvP3NjcmlwdFtePl0qPz4vZ2ksXCJcIiksaD1cImpzUERGaHRtbFRleHRcIitEYXRlLm5vdygpLnRvU3RyaW5nKCkrKDFlMypNYXRoLnJhbmRvbSgpKS50b0ZpeGVkKDApLChsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjogYWJzb2x1dGUgIWltcG9ydGFudDtjbGlwOiByZWN0KDFweCAxcHggMXB4IDFweCk7IC8qIElFNiwgSUU3ICovY2xpcDogcmVjdCgxcHgsIDFweCwgMXB4LCAxcHgpO3BhZGRpbmc6MCAhaW1wb3J0YW50O2JvcmRlcjowICFpbXBvcnRhbnQ7aGVpZ2h0OiAxcHggIWltcG9ydGFudDt3aWR0aDogMXB4ICFpbXBvcnRhbnQ7IHRvcDphdXRvO2xlZnQ6LTEwMHB4O292ZXJmbG93OiBoaWRkZW47XCIsbC5pbm5lckhUTUw9JzxpZnJhbWUgc3R5bGU9XCJoZWlnaHQ6MXB4O3dpZHRoOjFweFwiIG5hbWU9XCInK2grJ1wiIC8+Jyxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGwpLChzPXdpbmRvdy5mcmFtZXNbaF0pLmRvY3VtZW50Lm9wZW4oKSxzLmRvY3VtZW50LndyaXRlbG4oYSkscy5kb2N1bWVudC5jbG9zZSgpLGU9cy5kb2N1bWVudC5ib2R5KTt2YXIgdSxjPW5ldyBmKHQsbixyLGkpO3JldHVybiBkLmNhbGwodGhpcyxlLGMsaS5lbGVtZW50SGFuZGxlcnMsZnVuY3Rpb24odCl7ZyhlLGMsaS5lbGVtZW50SGFuZGxlcnMpLGsoZSxjLGkuZWxlbWVudEhhbmRsZXJzKSxjLnBkZi5pbnRlcm5hbC5ldmVudHMucHVibGlzaChcImh0bWxSZW5kZXJpbmdGaW5pc2hlZFwiKSx1PWMuZGlzcG9zZSgpLFwiZnVuY3Rpb25cIj09dHlwZW9mIG8/byh1KTp0JiZjb25zb2xlLmVycm9yKFwianNQREYgV2FybmluZzogcmVuZGVyaW5nIGlzc3Vlcz8gcHJvdmlkZSBhIGNhbGxiYWNrIHRvIGZyb21IVE1MIVwiKX0pLHV8fHt4OmMueCx5OmMueX19LChmPWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiB0aGlzLnBkZj10LHRoaXMueD1lLHRoaXMueT1uLHRoaXMuc2V0dGluZ3M9cix0aGlzLndhdGNoRnVuY3Rpb25zPVtdLHRoaXMuaW5pdCgpLHRoaXN9KS5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnBhcmFncmFwaD17dGV4dDpbXSxzdHlsZTpbXX0sdGhpcy5wZGYuaW50ZXJuYWwud3JpdGUoXCJxXCIpfSxmLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGRmLmludGVybmFsLndyaXRlKFwiUVwiKSx7eDp0aGlzLngseTp0aGlzLnkscmVhZHk6ITB9fSxmLnByb3RvdHlwZS5leGVjdXRlV2F0Y2hGdW5jdGlvbnM9ZnVuY3Rpb24odCl7dmFyIGU9ITEsbj1bXTtpZigwPHRoaXMud2F0Y2hGdW5jdGlvbnMubGVuZ3RoKXtmb3IodmFyIHI9MDtyPHRoaXMud2F0Y2hGdW5jdGlvbnMubGVuZ3RoOysrcikhMD09PXRoaXMud2F0Y2hGdW5jdGlvbnNbcl0odCk/ZT0hMDpuLnB1c2godGhpcy53YXRjaEZ1bmN0aW9uc1tyXSk7dGhpcy53YXRjaEZ1bmN0aW9ucz1ufXJldHVybiBlfSxmLnByb3RvdHlwZS5zcGxpdEZyYWdtZW50c0ludG9MaW5lcz1mdW5jdGlvbih0LGUpe3ZhciBuLHIsaSxvLGEscyxsLGgsdSxjLGYscCxkLGc7Zm9yKDEyLGM9dGhpcy5wZGYuaW50ZXJuYWwuc2NhbGVGYWN0b3Isbz17fSxzPWw9aD1nPWE9aT11PXI9dm9pZCAwLHA9W2Y9W11dLG49MCxkPXRoaXMuc2V0dGluZ3Mud2lkdGg7dC5sZW5ndGg7KWlmKGE9dC5zaGlmdCgpLGc9ZS5zaGlmdCgpLGEpaWYoKGk9b1socj1nW1wiZm9udC1mYW1pbHlcIl0pKyh1PWdbXCJmb250LXN0eWxlXCJdKV0pfHwoaT10aGlzLnBkZi5pbnRlcm5hbC5nZXRGb250KHIsdSkubWV0YWRhdGEuVW5pY29kZSxvW3IrdV09aSksaD17d2lkdGhzOmkud2lkdGhzLGtlcm5pbmc6aS5rZXJuaW5nLGZvbnRTaXplOjEyKmdbXCJmb250LXNpemVcIl0sdGV4dEluZGVudDpufSxsPXRoaXMucGRmLmdldFN0cmluZ1VuaXRXaWR0aChhLGgpKmguZm9udFNpemUvYyxcIlxcdTIwMjhcIj09YSlmPVtdLHAucHVzaChmKTtlbHNlIGlmKGQ8bitsKXtmb3Iocz10aGlzLnBkZi5zcGxpdFRleHRUb1NpemUoYSxkLGgpLGYucHVzaChbcy5zaGlmdCgpLGddKTtzLmxlbmd0aDspZj1bW3Muc2hpZnQoKSxnXV0scC5wdXNoKGYpO249dGhpcy5wZGYuZ2V0U3RyaW5nVW5pdFdpZHRoKGZbMF1bMF0saCkqaC5mb250U2l6ZS9jfWVsc2UgZi5wdXNoKFthLGddKSxuKz1sO2lmKHZvaWQgMCE9PWdbXCJ0ZXh0LWFsaWduXCJdJiYoXCJjZW50ZXJcIj09PWdbXCJ0ZXh0LWFsaWduXCJdfHxcInJpZ2h0XCI9PT1nW1widGV4dC1hbGlnblwiXXx8XCJqdXN0aWZ5XCI9PT1nW1widGV4dC1hbGlnblwiXSkpZm9yKHZhciBtPTA7bTxwLmxlbmd0aDsrK20pe3ZhciB5PXRoaXMucGRmLmdldFN0cmluZ1VuaXRXaWR0aChwW21dWzBdWzBdLGgpKmguZm9udFNpemUvYzswPG0mJihwW21dWzBdWzFdPVAocFttXVswXVsxXSkpO3ZhciB2PWQteTtpZihcInJpZ2h0XCI9PT1nW1widGV4dC1hbGlnblwiXSlwW21dWzBdWzFdW1wibWFyZ2luLWxlZnRcIl09djtlbHNlIGlmKFwiY2VudGVyXCI9PT1nW1widGV4dC1hbGlnblwiXSlwW21dWzBdWzFdW1wibWFyZ2luLWxlZnRcIl09di8yO2Vsc2UgaWYoXCJqdXN0aWZ5XCI9PT1nW1widGV4dC1hbGlnblwiXSl7dmFyIHc9cFttXVswXVswXS5zcGxpdChcIiBcIikubGVuZ3RoLTE7cFttXVswXVsxXVtcIndvcmQtc3BhY2luZ1wiXT12L3csbT09PXAubGVuZ3RoLTEmJihwW21dWzBdWzFdW1wid29yZC1zcGFjaW5nXCJdPTApfX1yZXR1cm4gcH0sZi5wcm90b3R5cGUuUmVuZGVyVGV4dEZyYWdtZW50PWZ1bmN0aW9uKHQsZSl7dmFyIG4scjtyPTAsdGhpcy5wZGYuaW50ZXJuYWwucGFnZVNpemUuZ2V0SGVpZ2h0KCktdGhpcy5wZGYubWFyZ2luc19kb2MuYm90dG9tPHRoaXMueSt0aGlzLnBkZi5pbnRlcm5hbC5nZXRGb250U2l6ZSgpJiYodGhpcy5wZGYuaW50ZXJuYWwud3JpdGUoXCJFVFwiLFwiUVwiKSx0aGlzLnBkZi5hZGRQYWdlKCksdGhpcy55PXRoaXMucGRmLm1hcmdpbnNfZG9jLnRvcCx0aGlzLnBkZi5pbnRlcm5hbC53cml0ZShcInFcIixcIkJUXCIsdGhpcy5nZXRQZGZDb2xvcihlLmNvbG9yKSx0aGlzLnBkZi5pbnRlcm5hbC5nZXRDb29yZGluYXRlU3RyaW5nKHRoaXMueCksdGhpcy5wZGYuaW50ZXJuYWwuZ2V0VmVydGljYWxDb29yZGluYXRlU3RyaW5nKHRoaXMueSksXCJUZFwiKSxyPU1hdGgubWF4KHIsZVtcImxpbmUtaGVpZ2h0XCJdLGVbXCJmb250LXNpemVcIl0pLHRoaXMucGRmLmludGVybmFsLndyaXRlKDAsKC0xMipyKS50b0ZpeGVkKDIpLFwiVGRcIikpLG49dGhpcy5wZGYuaW50ZXJuYWwuZ2V0Rm9udChlW1wiZm9udC1mYW1pbHlcIl0sZVtcImZvbnQtc3R5bGVcIl0pO3ZhciBpPXRoaXMuZ2V0UGRmQ29sb3IoZS5jb2xvcik7aSE9PXRoaXMubGFzdFRleHRDb2xvciYmKHRoaXMucGRmLmludGVybmFsLndyaXRlKGkpLHRoaXMubGFzdFRleHRDb2xvcj1pKSx2b2lkIDAhPT1lW1wid29yZC1zcGFjaW5nXCJdJiYwPGVbXCJ3b3JkLXNwYWNpbmdcIl0mJnRoaXMucGRmLmludGVybmFsLndyaXRlKGVbXCJ3b3JkLXNwYWNpbmdcIl0udG9GaXhlZCgyKSxcIlR3XCIpLHRoaXMucGRmLmludGVybmFsLndyaXRlKFwiL1wiK24uaWQsKDEyKmVbXCJmb250LXNpemVcIl0pLnRvRml4ZWQoMiksXCJUZlwiLFwiKFwiK3RoaXMucGRmLmludGVybmFsLnBkZkVzY2FwZSh0KStcIikgVGpcIiksdm9pZCAwIT09ZVtcIndvcmQtc3BhY2luZ1wiXSYmdGhpcy5wZGYuaW50ZXJuYWwud3JpdGUoMCxcIlR3XCIpfSxmLnByb3RvdHlwZS5nZXRQZGZDb2xvcj1mdW5jdGlvbih0KXt2YXIgZSxuLHIsaT0vcmdiXFxzKlxcKFxccyooXFxkKyksXFxzKihcXGQrKSxcXHMqKFxcZCtcXHMqKVxcKS8uZXhlYyh0KTtpZihudWxsIT1pKWU9cGFyc2VJbnQoaVsxXSksbj1wYXJzZUludChpWzJdKSxyPXBhcnNlSW50KGlbM10pO2Vsc2V7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQmJlwiI1wiIT10LmNoYXJBdCgwKSl7dmFyIG89bmV3IFJHQkNvbG9yKHQpO3Q9by5vaz9vLnRvSGV4KCk6XCIjMDAwMDAwXCJ9ZT10LnN1YnN0cmluZygxLDMpLGU9cGFyc2VJbnQoZSwxNiksbj10LnN1YnN0cmluZygzLDUpLG49cGFyc2VJbnQobiwxNikscj10LnN1YnN0cmluZyg1LDcpLHI9cGFyc2VJbnQociwxNil9aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUmJi9eI1swLTlBLUZhLWZdezZ9JC8udGVzdChlKSl7dmFyIGE9cGFyc2VJbnQoZS5zdWJzdHIoMSksMTYpO2U9YT4+MTYmMjU1LG49YT4+OCYyNTUscj0yNTUmYX12YXIgcz10aGlzLmYzO3JldHVybiAwPT09ZSYmMD09PW4mJjA9PT1yfHx2b2lkIDA9PT1uP3MoZS8yNTUpK1wiIGdcIjpbcyhlLzI1NSkscyhuLzI1NSkscyhyLzI1NSksXCJyZ1wiXS5qb2luKFwiIFwiKX0sZi5wcm90b3R5cGUuZjM9ZnVuY3Rpb24odCl7cmV0dXJuIHQudG9GaXhlZCgzKX0sZi5wcm90b3R5cGUucmVuZGVyUGFyYWdyYXBoPWZ1bmN0aW9uKHQpe3ZhciBlLG4scixpLG8sYSxzLGwsaCx1LGMsZixwO2lmKHI9dyh0aGlzLnBhcmFncmFwaC50ZXh0KSxmPXRoaXMucGFyYWdyYXBoLnN0eWxlLGU9dGhpcy5wYXJhZ3JhcGguYmxvY2tzdHlsZSx0aGlzLnBhcmFncmFwaC5wcmlvcmJsb2Nrc3R5bGV8fHt9LHRoaXMucGFyYWdyYXBoPXt0ZXh0OltdLHN0eWxlOltdLGJsb2Nrc3R5bGU6e30scHJpb3JibG9ja3N0eWxlOmV9LHIuam9pbihcIlwiKS50cmltKCkpe3M9dGhpcy5zcGxpdEZyYWdtZW50c0ludG9MaW5lcyhyLGYpLGw9YT12b2lkIDAsbj0xMi90aGlzLnBkZi5pbnRlcm5hbC5zY2FsZUZhY3Rvcix0aGlzLnByaW9yTWFyZ2luQm90dG9tPXRoaXMucHJpb3JNYXJnaW5Cb3R0b218fDAsYz0oTWF0aC5tYXgoKGVbXCJtYXJnaW4tdG9wXCJdfHwwKS10aGlzLnByaW9yTWFyZ2luQm90dG9tLDApKyhlW1wicGFkZGluZy10b3BcIl18fDApKSpuLHU9KChlW1wibWFyZ2luLWJvdHRvbVwiXXx8MCkrKGVbXCJwYWRkaW5nLWJvdHRvbVwiXXx8MCkpKm4sdGhpcy5wcmlvck1hcmdpbkJvdHRvbT1lW1wibWFyZ2luLWJvdHRvbVwiXXx8MCxcImFsd2F5c1wiPT09ZVtcInBhZ2UtYnJlYWstYmVmb3JlXCJdJiYodGhpcy5wZGYuYWRkUGFnZSgpLHRoaXMueT0wLGM9KChlW1wibWFyZ2luLXRvcFwiXXx8MCkrKGVbXCJwYWRkaW5nLXRvcFwiXXx8MCkpKm4pLGg9dGhpcy5wZGYuaW50ZXJuYWwud3JpdGUsbz1pPXZvaWQgMCx0aGlzLnkrPWMsaChcInFcIixcIkJUIDAgZ1wiLHRoaXMucGRmLmludGVybmFsLmdldENvb3JkaW5hdGVTdHJpbmcodGhpcy54KSx0aGlzLnBkZi5pbnRlcm5hbC5nZXRWZXJ0aWNhbENvb3JkaW5hdGVTdHJpbmcodGhpcy55KSxcIlRkXCIpO2Zvcih2YXIgZD0wO3MubGVuZ3RoOyl7Zm9yKGk9bD0wLG89KGE9cy5zaGlmdCgpKS5sZW5ndGg7aSE9PW87KWFbaV1bMF0udHJpbSgpJiYobD1NYXRoLm1heChsLGFbaV1bMV1bXCJsaW5lLWhlaWdodFwiXSxhW2ldWzFdW1wiZm9udC1zaXplXCJdKSxwPTcqYVtpXVsxXVtcImZvbnQtc2l6ZVwiXSksaSsrO3ZhciBnPTAsbT0wO2Zvcih2b2lkIDAhPT1hWzBdWzFdW1wibWFyZ2luLWxlZnRcIl0mJjA8YVswXVsxXVtcIm1hcmdpbi1sZWZ0XCJdJiYoZz0obT10aGlzLnBkZi5pbnRlcm5hbC5nZXRDb29yZGluYXRlU3RyaW5nKGFbMF1bMV1bXCJtYXJnaW4tbGVmdFwiXSkpLWQsZD1tKSxoKGcrTWF0aC5tYXgoZVtcIm1hcmdpbi1sZWZ0XCJdfHwwLDApKm4sKC0xMipsKS50b0ZpeGVkKDIpLFwiVGRcIiksaT0wLG89YS5sZW5ndGg7aSE9PW87KWFbaV1bMF0mJnRoaXMuUmVuZGVyVGV4dEZyYWdtZW50KGFbaV1bMF0sYVtpXVsxXSksaSsrO2lmKHRoaXMueSs9bCpuLHRoaXMuZXhlY3V0ZVdhdGNoRnVuY3Rpb25zKGFbMF1bMV0pJiYwPHMubGVuZ3RoKXt2YXIgeT1bXSx2PVtdO3MuZm9yRWFjaChmdW5jdGlvbih0KXtmb3IodmFyIGU9MCxuPXQubGVuZ3RoO2UhPT1uOyl0W2VdWzBdJiYoeS5wdXNoKHRbZV1bMF0rXCIgXCIpLHYucHVzaCh0W2VdWzFdKSksKytlfSkscz10aGlzLnNwbGl0RnJhZ21lbnRzSW50b0xpbmVzKHcoeSksdiksaChcIkVUXCIsXCJRXCIpLGgoXCJxXCIsXCJCVCAwIGdcIix0aGlzLnBkZi5pbnRlcm5hbC5nZXRDb29yZGluYXRlU3RyaW5nKHRoaXMueCksdGhpcy5wZGYuaW50ZXJuYWwuZ2V0VmVydGljYWxDb29yZGluYXRlU3RyaW5nKHRoaXMueSksXCJUZFwiKX19cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJnQuY2FsbCh0aGlzLHRoaXMueC05LHRoaXMueS1wLzIpLGgoXCJFVFwiLFwiUVwiKSx0aGlzLnkrPXV9fSxmLnByb3RvdHlwZS5zZXRCbG9ja0JvdW5kYXJ5PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnJlbmRlclBhcmFncmFwaCh0KX0sZi5wcm90b3R5cGUuc2V0QmxvY2tTdHlsZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5wYXJhZ3JhcGguYmxvY2tzdHlsZT10fSxmLnByb3RvdHlwZS5hZGRUZXh0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMucGFyYWdyYXBoLnRleHQucHVzaCh0KSx0aGlzLnBhcmFncmFwaC5zdHlsZS5wdXNoKGUpfSxpPXtoZWx2ZXRpY2E6XCJoZWx2ZXRpY2FcIixcInNhbnMtc2VyaWZcIjpcImhlbHZldGljYVwiLFwidGltZXMgbmV3IHJvbWFuXCI6XCJ0aW1lc1wiLHNlcmlmOlwidGltZXNcIix0aW1lczpcInRpbWVzXCIsbW9ub3NwYWNlOlwiY291cmllclwiLGNvdXJpZXI6XCJjb3VyaWVyXCJ9LGw9ezEwMDpcIm5vcm1hbFwiLDIwMDpcIm5vcm1hbFwiLDMwMDpcIm5vcm1hbFwiLDQwMDpcIm5vcm1hbFwiLDUwMDpcImJvbGRcIiw2MDA6XCJib2xkXCIsNzAwOlwiYm9sZFwiLDgwMDpcImJvbGRcIiw5MDA6XCJib2xkXCIsbm9ybWFsOlwibm9ybWFsXCIsYm9sZDpcImJvbGRcIixib2xkZXI6XCJib2xkXCIsbGlnaHRlcjpcIm5vcm1hbFwifSxhPXtub3JtYWw6XCJub3JtYWxcIixpdGFsaWM6XCJpdGFsaWNcIixvYmxpcXVlOlwiaXRhbGljXCJ9LHM9e2xlZnQ6XCJsZWZ0XCIscmlnaHQ6XCJyaWdodFwiLGNlbnRlcjpcImNlbnRlclwiLGp1c3RpZnk6XCJqdXN0aWZ5XCJ9LGg9e25vbmU6XCJub25lXCIscmlnaHQ6XCJyaWdodFwiLGxlZnQ6XCJsZWZ0XCJ9LHU9e25vbmU6XCJub25lXCIsYm90aDpcImJvdGhcIn0sbj17bm9ybWFsOjF9LHQuZnJvbUhUTUw9ZnVuY3Rpb24odCxlLG4scixpLG8pe3JldHVybiB0aGlzLm1hcmdpbnNfZG9jPW98fHt0b3A6MCxib3R0b206MH0scnx8KHI9e30pLHIuZWxlbWVudEhhbmRsZXJzfHwoci5lbGVtZW50SGFuZGxlcnM9e30pLG0odGhpcyx0LGlzTmFOKGUpPzQ6ZSxpc05hTihuKT80Om4scixpKX19KGx0LkFQSSksbHQuQVBJLChcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3d8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWwmJmdsb2JhbCkuaHRtbDJwZGY9ZnVuY3Rpb24odCxhLGUpe3ZhciBuPWEuY2FudmFzO2lmKG4pe3ZhciByLGk7aWYoKG4ucGRmPWEpLmFubm90YXRpb25zPXtfbmFtZU1hcDpbXSxjcmVhdGVBbm5vdGF0aW9uOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1hLmNvbnRleHQyZC5fd3JhcFgoZS5sZWZ0KSxpPWEuY29udGV4dDJkLl93cmFwWShlLnRvcCksbz0oYS5jb250ZXh0MmQuX3BhZ2UoZS50b3ApLHQuaW5kZXhPZihcIiNcIikpO249MDw9bz97bmFtZTp0LnN1YnN0cmluZyhvKzEpfTp7dXJsOnR9LGEubGluayhyLGksZS5yaWdodC1lLmxlZnQsZS5ib3R0b20tZS50b3Asbil9LHNldE5hbWU6ZnVuY3Rpb24odCxlKXt2YXIgbj1hLmNvbnRleHQyZC5fd3JhcFgoZS5sZWZ0KSxyPWEuY29udGV4dDJkLl93cmFwWShlLnRvcCksaT1hLmNvbnRleHQyZC5fcGFnZShlLnRvcCk7dGhpcy5fbmFtZU1hcFt0XT17cGFnZTppLHg6bix5OnJ9fX0sbi5hbm5vdGF0aW9ucz1hLmFubm90YXRpb25zLGEuY29udGV4dDJkLl9wYWdlQnJlYWtBdD1mdW5jdGlvbih0KXt0aGlzLnBhZ2VCcmVha3MucHVzaCh0KX0sYS5jb250ZXh0MmQuX2dvdG9QYWdlPWZ1bmN0aW9uKHQpe2Zvcig7YS5pbnRlcm5hbC5nZXROdW1iZXJPZlBhZ2VzKCk8dDspYS5hZGRQYWdlKCk7YS5zZXRQYWdlKHQpfSxcInN0cmluZ1wiPT10eXBlb2YgdCl7dD10LnJlcGxhY2UoLzxzY3JpcHRcXGJbXjxdKig/Oig/ITxcXC9zY3JpcHQ+KTxbXjxdKikqPFxcL3NjcmlwdD4vZ2ksXCJcIik7dmFyIG8scyxsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsKSxudWxsIT0obz1sLmNvbnRlbnREb2N1bWVudCkmJm51bGwhPW98fChvPWwuY29udGVudFdpbmRvdy5kb2N1bWVudCksby5vcGVuKCksby53cml0ZSh0KSxvLmNsb3NlKCkscj1vLmJvZHkscz1vLmJvZHl8fHt9LHQ9by5kb2N1bWVudEVsZW1lbnR8fHt9LGk9TWF0aC5tYXgocy5zY3JvbGxIZWlnaHQscy5vZmZzZXRIZWlnaHQsdC5jbGllbnRIZWlnaHQsdC5zY3JvbGxIZWlnaHQsdC5vZmZzZXRIZWlnaHQpfWVsc2Ugcz0ocj10KS5ib2R5fHx7fSxpPU1hdGgubWF4KHMuc2Nyb2xsSGVpZ2h0LHMub2Zmc2V0SGVpZ2h0LHQuY2xpZW50SGVpZ2h0LHQuc2Nyb2xsSGVpZ2h0LHQub2Zmc2V0SGVpZ2h0KTt2YXIgaD17YXN5bmM6ITAsYWxsb3dUYWludDohMCxiYWNrZ3JvdW5kQ29sb3I6XCIjZmZmZmZmXCIsY2FudmFzOm4saW1hZ2VUaW1lb3V0OjE1ZTMsbG9nZ2luZzohMCxwcm94eTpudWxsLHJlbW92ZUNvbnRhaW5lcjohMCxmb3JlaWduT2JqZWN0UmVuZGVyaW5nOiExLHVzZUNPUlM6ITEsd2luZG93SGVpZ2h0Omk9YS5pbnRlcm5hbC5wYWdlU2l6ZS5nZXRIZWlnaHQoKSxzY3JvbGxZOml9O2EuY29udGV4dDJkLnBhZ2VXcmFwWUVuYWJsZWQ9ITAsYS5jb250ZXh0MmQucGFnZVdyYXBZPWEuaW50ZXJuYWwucGFnZVNpemUuZ2V0SGVpZ2h0KCksaHRtbDJjYW52YXMocixoKS50aGVuKGZ1bmN0aW9uKHQpe2UmJihsJiZsLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQobCksZShhKSl9KX1lbHNlIGFsZXJ0KFwianNQREYgY2FudmFzIHBsdWdpbiBub3QgaW5zdGFsbGVkXCIpfSx3aW5kb3cudG1wPWh0bWwycGRmLGZ1bmN0aW9uKGYpe3ZhciByPWYuQmxvYkJ1aWxkZXJ8fGYuV2ViS2l0QmxvYkJ1aWxkZXJ8fGYuTVNCbG9iQnVpbGRlcnx8Zi5Nb3pCbG9iQnVpbGRlcjtmLlVSTD1mLlVSTHx8Zi53ZWJraXRVUkx8fGZ1bmN0aW9uKHQsZSl7cmV0dXJuKGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIikpLmhyZWY9dCxlfTt2YXIgbj1mLkJsb2IscD1VUkwuY3JlYXRlT2JqZWN0VVJMLGQ9VVJMLnJldm9rZU9iamVjdFVSTCxvPWYuU3ltYm9sJiZmLlN5bWJvbC50b1N0cmluZ1RhZyx0PSExLGU9ITEsZz0hIWYuQXJyYXlCdWZmZXIsaT1yJiZyLnByb3RvdHlwZS5hcHBlbmQmJnIucHJvdG90eXBlLmdldEJsb2I7dHJ5e3Q9Mj09PW5ldyBCbG9iKFtcIsOkXCJdKS5zaXplLGU9Mj09PW5ldyBCbG9iKFtuZXcgVWludDhBcnJheShbMSwyXSldKS5zaXplfWNhdGNoKHQpe31mdW5jdGlvbiBhKHQpe3JldHVybiB0Lm1hcChmdW5jdGlvbih0KXtpZih0LmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXt2YXIgZT10LmJ1ZmZlcjtpZih0LmJ5dGVMZW5ndGghPT1lLmJ5dGVMZW5ndGgpe3ZhciBuPW5ldyBVaW50OEFycmF5KHQuYnl0ZUxlbmd0aCk7bi5zZXQobmV3IFVpbnQ4QXJyYXkoZSx0LmJ5dGVPZmZzZXQsdC5ieXRlTGVuZ3RoKSksZT1uLmJ1ZmZlcn1yZXR1cm4gZX1yZXR1cm4gdH0pfWZ1bmN0aW9uIHModCxlKXtlPWV8fHt9O3ZhciBuPW5ldyByO3JldHVybiBhKHQpLmZvckVhY2goZnVuY3Rpb24odCl7bi5hcHBlbmQodCl9KSxlLnR5cGU/bi5nZXRCbG9iKGUudHlwZSk6bi5nZXRCbG9iKCl9ZnVuY3Rpb24gbCh0LGUpe3JldHVybiBuZXcgbihhKHQpLGV8fHt9KX1pZihmLkJsb2ImJihzLnByb3RvdHlwZT1CbG9iLnByb3RvdHlwZSxsLnByb3RvdHlwZT1CbG9iLnByb3RvdHlwZSksbyl0cnl7RmlsZS5wcm90b3R5cGVbb109XCJGaWxlXCIsQmxvYi5wcm90b3R5cGVbb109XCJCbG9iXCIsRmlsZVJlYWRlci5wcm90b3R5cGVbb109XCJGaWxlUmVhZGVyXCJ9Y2F0Y2godCl7fWZ1bmN0aW9uIGgoKXt2YXIgdD0hIWYuQWN0aXZlWE9iamVjdHx8XCItbXMtc2Nyb2xsLWxpbWl0XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUmJlwiLW1zLWltZS1hbGlnblwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLGU9Zi5YTUxIdHRwUmVxdWVzdCYmZi5YTUxIdHRwUmVxdWVzdC5wcm90b3R5cGUuc2VuZDt0JiZlJiYoWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLnNlbmQ9ZnVuY3Rpb24odCl7dCBpbnN0YW5jZW9mIEJsb2ImJnRoaXMuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLHQudHlwZSksZS5jYWxsKHRoaXMsdCl9KTt0cnl7bmV3IEZpbGUoW10sXCJcIil9Y2F0Y2godCl7dHJ5e3ZhciBuPW5ldyBGdW5jdGlvbignY2xhc3MgRmlsZSBleHRlbmRzIEJsb2Ige2NvbnN0cnVjdG9yKGNodW5rcywgbmFtZSwgb3B0cykge29wdHMgPSBvcHRzIHx8IHt9O3N1cGVyKGNodW5rcywgb3B0cyB8fCB7fSk7dGhpcy5uYW1lID0gbmFtZTt0aGlzLmxhc3RNb2RpZmllZERhdGUgPSBvcHRzLmxhc3RNb2RpZmllZCA/IG5ldyBEYXRlKG9wdHMubGFzdE1vZGlmaWVkKSA6IG5ldyBEYXRlO3RoaXMubGFzdE1vZGlmaWVkID0gK3RoaXMubGFzdE1vZGlmaWVkRGF0ZTt9fTtyZXR1cm4gbmV3IEZpbGUoW10sIFwiXCIpLCBGaWxlJykoKTtmLkZpbGU9bn1jYXRjaCh0KXtuPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uZXcgQmxvYih0LG4pLGk9biYmdm9pZCAwIT09bi5sYXN0TW9kaWZpZWQ/bmV3IERhdGUobi5sYXN0TW9kaWZpZWQpOm5ldyBEYXRlO3JldHVybiByLm5hbWU9ZSxyLmxhc3RNb2RpZmllZERhdGU9aSxyLmxhc3RNb2RpZmllZD0raSxyLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJbb2JqZWN0IEZpbGVdXCJ9LG8mJihyW29dPVwiRmlsZVwiKSxyfTtmLkZpbGU9bn19fXQ/KGgoKSxmLkJsb2I9ZT9mLkJsb2I6bCk6aT8oaCgpLGYuQmxvYj1zKTpmdW5jdGlvbigpe2Z1bmN0aW9uIGEodCl7Zm9yKHZhciBlPVtdLG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dC5jaGFyQ29kZUF0KG4pO3I8MTI4P2UucHVzaChyKTpyPDIwNDg/ZS5wdXNoKDE5MnxyPj42LDEyOHw2MyZyKTpyPDU1Mjk2fHw1NzM0NDw9cj9lLnB1c2goMjI0fHI+PjEyLDEyOHxyPj42JjYzLDEyOHw2MyZyKToobisrLHI9NjU1MzYrKCgxMDIzJnIpPDwxMHwxMDIzJnQuY2hhckNvZGVBdChuKSksZS5wdXNoKDI0MHxyPj4xOCwxMjh8cj4+MTImNjMsMTI4fHI+PjYmNjMsMTI4fDYzJnIpKX1yZXR1cm4gZX1mdW5jdGlvbiBlKHQpe3ZhciBlLG4scixpLG8sYTtmb3IoZT1cIlwiLHI9dC5sZW5ndGgsbj0wO248cjspc3dpdGNoKChpPXRbbisrXSk+PjQpe2Nhc2UgMDpjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmNhc2UgNjpjYXNlIDc6ZSs9U3RyaW5nLmZyb21DaGFyQ29kZShpKTticmVhaztjYXNlIDEyOmNhc2UgMTM6bz10W24rK10sZSs9U3RyaW5nLmZyb21DaGFyQ29kZSgoMzEmaSk8PDZ8NjMmbyk7YnJlYWs7Y2FzZSAxNDpvPXRbbisrXSxhPXRbbisrXSxlKz1TdHJpbmcuZnJvbUNoYXJDb2RlKCgxNSZpKTw8MTJ8KDYzJm8pPDw2fCg2MyZhKTw8MCl9cmV0dXJuIGV9ZnVuY3Rpb24gcyh0KXtmb3IodmFyIGU9bmV3IEFycmF5KHQuYnl0ZUxlbmd0aCksbj1uZXcgVWludDhBcnJheSh0KSxyPWUubGVuZ3RoO3ItLTspZVtyXT1uW3JdO3JldHVybiBlfWZ1bmN0aW9uIG4odCl7Zm9yKHZhciBlPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODlcIixuPVtdLHI9MDtyPHQubGVuZ3RoO3IrPTMpe3ZhciBpPXRbcl0sbz1yKzE8dC5sZW5ndGgsYT1vP3RbcisxXTowLHM9cisyPHQubGVuZ3RoLGw9cz90W3IrMl06MCxoPWk+PjIsdT0oMyZpKTw8NHxhPj40LGM9KDE1JmEpPDwyfGw+PjYsZj02MyZsO3N8fChmPTY0LG98fChjPTY0KSksbi5wdXNoKGVbaF0sZVt1XSxlW2NdLGVbZl0pfXJldHVybiBuLmpvaW4oXCJcIil9dmFyIHQ9T2JqZWN0LmNyZWF0ZXx8ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe31yZXR1cm4gZS5wcm90b3R5cGU9dCxuZXcgZX07aWYoZyl2YXIgcj1bXCJbb2JqZWN0IEludDhBcnJheV1cIixcIltvYmplY3QgVWludDhBcnJheV1cIixcIltvYmplY3QgVWludDhDbGFtcGVkQXJyYXldXCIsXCJbb2JqZWN0IEludDE2QXJyYXldXCIsXCJbb2JqZWN0IFVpbnQxNkFycmF5XVwiLFwiW29iamVjdCBJbnQzMkFycmF5XVwiLFwiW29iamVjdCBVaW50MzJBcnJheV1cIixcIltvYmplY3QgRmxvYXQzMkFycmF5XVwiLFwiW29iamVjdCBGbG9hdDY0QXJyYXldXCJdLGw9QXJyYXlCdWZmZXIuaXNWaWV3fHxmdW5jdGlvbih0KXtyZXR1cm4gdCYmLTE8ci5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSl9O2Z1bmN0aW9uIGgodCxlKXtmb3IodmFyIG49MCxyPSh0PXR8fFtdKS5sZW5ndGg7bjxyO24rKyl7dmFyIGk9dFtuXTtpIGluc3RhbmNlb2YgaD90W25dPWkuX2J1ZmZlcjpcInN0cmluZ1wiPT10eXBlb2YgaT90W25dPWEoaSk6ZyYmKEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGkpfHxsKGkpKT90W25dPXMoaSk6ZyYmKG89aSkmJkRhdGFWaWV3LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKG8pP3Rbbl09cyhpLmJ1ZmZlcik6dFtuXT1hKFN0cmluZyhpKSl9dmFyIG87dGhpcy5fYnVmZmVyPVtdLmNvbmNhdC5hcHBseShbXSx0KSx0aGlzLnNpemU9dGhpcy5fYnVmZmVyLmxlbmd0aCx0aGlzLnR5cGU9ZSYmZS50eXBlfHxcIlwifWZ1bmN0aW9uIGkodCxlLG4pe3ZhciByPWguY2FsbCh0aGlzLHQsbj1ufHx7fSl8fHRoaXM7cmV0dXJuIHIubmFtZT1lLHIubGFzdE1vZGlmaWVkRGF0ZT1uLmxhc3RNb2RpZmllZD9uZXcgRGF0ZShuLmxhc3RNb2RpZmllZCk6bmV3IERhdGUsci5sYXN0TW9kaWZpZWQ9K3IubGFzdE1vZGlmaWVkRGF0ZSxyfWlmKGgucHJvdG90eXBlLnNsaWNlPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gbmV3IGgoW3RoaXMuX2J1ZmZlci5zbGljZSh0fHwwLGV8fHRoaXMuX2J1ZmZlci5sZW5ndGgpXSx7dHlwZTpufSl9LGgucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJbb2JqZWN0IEJsb2JdXCJ9LChpLnByb3RvdHlwZT10KGgucHJvdG90eXBlKSkuY29uc3RydWN0b3I9aSxPYmplY3Quc2V0UHJvdG90eXBlT2YpT2JqZWN0LnNldFByb3RvdHlwZU9mKGksaCk7ZWxzZSB0cnl7aS5fX3Byb3RvX189aH1jYXRjaCh0KXt9ZnVuY3Rpb24gbygpe2lmKCEodGhpcyBpbnN0YW5jZW9mIG8pKXRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdGaWxlUmVhZGVyJzogUGxlYXNlIHVzZSB0aGUgJ25ldycgb3BlcmF0b3IsIHRoaXMgRE9NIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO3ZhciBuPWRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTt0aGlzLmFkZEV2ZW50TGlzdGVuZXI9bi5hZGRFdmVudExpc3RlbmVyLHRoaXMuZGlzcGF0Y2hFdmVudD1mdW5jdGlvbih0KXt2YXIgZT10aGlzW1wib25cIit0LnR5cGVdO1wiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmUodCksbi5kaXNwYXRjaEV2ZW50KHQpfSx0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXI9bi5yZW1vdmVFdmVudExpc3RlbmVyfWZ1bmN0aW9uIHUodCxlLG4pe2lmKCEoZSBpbnN0YW5jZW9mIGgpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gZXhlY3V0ZSAnXCIrbitcIicgb24gJ0ZpbGVSZWFkZXInOiBwYXJhbWV0ZXIgMSBpcyBub3Qgb2YgdHlwZSAnQmxvYicuXCIpO3QucmVzdWx0PVwiXCIsc2V0VGltZW91dChmdW5jdGlvbigpe3RoaXMucmVhZHlTdGF0ZT1vLkxPQURJTkcsdC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImxvYWRcIikpLHQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJsb2FkZW5kXCIpKX0pfWkucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJbb2JqZWN0IEZpbGVdXCJ9LG8uRU1QVFk9MCxvLkxPQURJTkc9MSxvLkRPTkU9MixvLnByb3RvdHlwZS5lcnJvcj1udWxsLG8ucHJvdG90eXBlLm9uYWJvcnQ9bnVsbCxvLnByb3RvdHlwZS5vbmVycm9yPW51bGwsby5wcm90b3R5cGUub25sb2FkPW51bGwsby5wcm90b3R5cGUub25sb2FkZW5kPW51bGwsby5wcm90b3R5cGUub25sb2Fkc3RhcnQ9bnVsbCxvLnByb3RvdHlwZS5vbnByb2dyZXNzPW51bGwsby5wcm90b3R5cGUucmVhZEFzRGF0YVVSTD1mdW5jdGlvbih0KXt1KHRoaXMsdCxcInJlYWRBc0RhdGFVUkxcIiksdGhpcy5yZXN1bHQ9XCJkYXRhOlwiK3QudHlwZStcIjtiYXNlNjQsXCIrbih0Ll9idWZmZXIpfSxvLnByb3RvdHlwZS5yZWFkQXNUZXh0PWZ1bmN0aW9uKHQpe3UodGhpcyx0LFwicmVhZEFzVGV4dFwiKSx0aGlzLnJlc3VsdD1lKHQuX2J1ZmZlcil9LG8ucHJvdG90eXBlLnJlYWRBc0FycmF5QnVmZmVyPWZ1bmN0aW9uKHQpe3UodGhpcyx0LFwicmVhZEFzVGV4dFwiKSx0aGlzLnJlc3VsdD10Ll9idWZmZXIuc2xpY2UoKX0sby5wcm90b3R5cGUuYWJvcnQ9ZnVuY3Rpb24oKXt9LFVSTC5jcmVhdGVPYmplY3RVUkw9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBoP1wiZGF0YTpcIit0LnR5cGUrXCI7YmFzZTY0LFwiK24odC5fYnVmZmVyKTpwLmNhbGwoVVJMLHQpfSxVUkwucmV2b2tlT2JqZWN0VVJMPWZ1bmN0aW9uKHQpe2QmJmQuY2FsbChVUkwsdCl9O3ZhciBjPWYuWE1MSHR0cFJlcXVlc3QmJmYuWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlLnNlbmQ7YyYmKFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZS5zZW5kPWZ1bmN0aW9uKHQpe3QgaW5zdGFuY2VvZiBoPyh0aGlzLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIix0LnR5cGUpLGMuY2FsbCh0aGlzLGUodC5fYnVmZmVyKSkpOmMuY2FsbCh0aGlzLHQpfSksZi5GaWxlUmVhZGVyPW8sZi5GaWxlPWksZi5CbG9iPWh9KCl9KFwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmfHxcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3d8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWwmJmdsb2JhbHx8RnVuY3Rpb24oJ3JldHVybiB0eXBlb2YgdGhpcyA9PT0gXCJvYmplY3RcIiAmJiB0aGlzLmNvbnRlbnQnKSgpfHxGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkpO3ZhciBodCx1dCxjdCxmdCxwdCxkdCxndCxtdCx5dCx2dCx3dCxidCx4dCxOdCxMdCxsZT1sZXx8ZnVuY3Rpb24ocyl7aWYoISh2b2lkIDA9PT1zfHxcInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yJiYvTVNJRSBbMS05XVxcLi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkpe3ZhciB0PXMuZG9jdW1lbnQsbD1mdW5jdGlvbigpe3JldHVybiBzLlVSTHx8cy53ZWJraXRVUkx8fHN9LGg9dC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsXCJhXCIpLHU9XCJkb3dubG9hZFwiaW4gaCxjPS9jb25zdHJ1Y3Rvci9pLnRlc3Qocy5IVE1MRWxlbWVudCl8fHMuc2FmYXJpLGY9L0NyaU9TXFwvW1xcZF0rLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLHA9cy5zZXRJbW1lZGlhdGV8fHMuc2V0VGltZW91dCxkPWZ1bmN0aW9uKHQpe3AoZnVuY3Rpb24oKXt0aHJvdyB0fSwwKX0sZz1mdW5jdGlvbih0KXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XCJzdHJpbmdcIj09dHlwZW9mIHQ/bCgpLnJldm9rZU9iamVjdFVSTCh0KTp0LnJlbW92ZSgpfSw0ZTQpfSxtPWZ1bmN0aW9uKHQpe3JldHVybi9eXFxzKig/OnRleHRcXC9cXFMqfGFwcGxpY2F0aW9uXFwveG1sfFxcUypcXC9cXFMqXFwreG1sKVxccyo7LipjaGFyc2V0XFxzKj1cXHMqdXRmLTgvaS50ZXN0KHQudHlwZSk/bmV3IEJsb2IoW1N0cmluZy5mcm9tQ2hhckNvZGUoNjUyNzkpLHRdLHt0eXBlOnQudHlwZX0pOnR9LHI9ZnVuY3Rpb24odCxuLGUpe2V8fCh0PW0odCkpO3ZhciByLGk9dGhpcyxvPVwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCI9PT10LnR5cGUsYT1mdW5jdGlvbigpeyFmdW5jdGlvbih0LGUsbil7Zm9yKHZhciByPShlPVtdLmNvbmNhdChlKSkubGVuZ3RoO3ItLTspe3ZhciBpPXRbXCJvblwiK2Vbcl1dO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGkpdHJ5e2kuY2FsbCh0LG58fHQpfWNhdGNoKHQpe2QodCl9fX0oaSxcIndyaXRlc3RhcnQgcHJvZ3Jlc3Mgd3JpdGUgd3JpdGVlbmRcIi5zcGxpdChcIiBcIikpfTtpZihpLnJlYWR5U3RhdGU9aS5JTklULHUpcmV0dXJuIHI9bCgpLmNyZWF0ZU9iamVjdFVSTCh0KSx2b2lkIHAoZnVuY3Rpb24oKXt2YXIgdCxlO2guaHJlZj1yLGguZG93bmxvYWQ9bix0PWgsZT1uZXcgTW91c2VFdmVudChcImNsaWNrXCIpLHQuZGlzcGF0Y2hFdmVudChlKSxhKCksZyhyKSxpLnJlYWR5U3RhdGU9aS5ET05FfSwwKTshZnVuY3Rpb24oKXtpZigoZnx8byYmYykmJnMuRmlsZVJlYWRlcil7dmFyIGU9bmV3IEZpbGVSZWFkZXI7cmV0dXJuIGUub25sb2FkZW5kPWZ1bmN0aW9uKCl7dmFyIHQ9Zj9lLnJlc3VsdDplLnJlc3VsdC5yZXBsYWNlKC9eZGF0YTpbXjtdKjsvLFwiZGF0YTphdHRhY2htZW50L2ZpbGU7XCIpO3Mub3Blbih0LFwiX2JsYW5rXCIpfHwocy5sb2NhdGlvbi5ocmVmPXQpLHQ9dm9pZCAwLGkucmVhZHlTdGF0ZT1pLkRPTkUsYSgpfSxlLnJlYWRBc0RhdGFVUkwodCksaS5yZWFkeVN0YXRlPWkuSU5JVH1yfHwocj1sKCkuY3JlYXRlT2JqZWN0VVJMKHQpKSxvP3MubG9jYXRpb24uaHJlZj1yOnMub3BlbihyLFwiX2JsYW5rXCIpfHwocy5sb2NhdGlvbi5ocmVmPXIpO2kucmVhZHlTdGF0ZT1pLkRPTkUsYSgpLGcocil9KCl9LGU9ci5wcm90b3R5cGU7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmbmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2I/ZnVuY3Rpb24odCxlLG4pe3JldHVybiBlPWV8fHQubmFtZXx8XCJkb3dubG9hZFwiLG58fCh0PW0odCkpLG5hdmlnYXRvci5tc1NhdmVPck9wZW5CbG9iKHQsZSl9OihlLmFib3J0PWZ1bmN0aW9uKCl7fSxlLnJlYWR5U3RhdGU9ZS5JTklUPTAsZS5XUklUSU5HPTEsZS5ET05FPTIsZS5lcnJvcj1lLm9ud3JpdGVzdGFydD1lLm9ucHJvZ3Jlc3M9ZS5vbndyaXRlPWUub25hYm9ydD1lLm9uZXJyb3I9ZS5vbndyaXRlZW5kPW51bGwsZnVuY3Rpb24odCxlLG4pe3JldHVybiBuZXcgcih0LGV8fHQubmFtZXx8XCJkb3dubG9hZFwiLG4pfSl9fShcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZnx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93fHx2b2lkIDApO2Z1bmN0aW9uIEF0KHgpe3ZhciB0PTA7aWYoNzEhPT14W3QrK118fDczIT09eFt0KytdfHw3MCE9PXhbdCsrXXx8NTYhPT14W3QrK118fDU2IT0oeFt0KytdKzEmMjUzKXx8OTchPT14W3QrK10pdGhyb3dcIkludmFsaWQgR0lGIDg3YS84OWEgaGVhZGVyLlwiO3ZhciBOPXhbdCsrXXx4W3QrK108PDgsZT14W3QrK118eFt0KytdPDw4LG49eFt0KytdLHI9bj4+NyxpPTE8PCg3Jm4pKzE7eFt0KytdO3hbdCsrXTt2YXIgbz1udWxsO3ImJihvPXQsdCs9MyppKTt2YXIgYT0hMCxzPVtdLGw9MCxoPW51bGwsdT0wLGM9bnVsbDtmb3IodGhpcy53aWR0aD1OLHRoaXMuaGVpZ2h0PWU7YSYmdDx4Lmxlbmd0aDspc3dpdGNoKHhbdCsrXSl7Y2FzZSAzMzpzd2l0Y2goeFt0KytdKXtjYXNlIDI1NTppZigxMSE9PXhbdF18fDc4PT14W3QrMV0mJjY5PT14W3QrMl0mJjg0PT14W3QrM10mJjgzPT14W3QrNF0mJjY3PT14W3QrNV0mJjY1PT14W3QrNl0mJjgwPT14W3QrN10mJjY5PT14W3QrOF0mJjUwPT14W3QrOV0mJjQ2PT14W3QrMTBdJiY0OD09eFt0KzExXSYmMz09eFt0KzEyXSYmMT09eFt0KzEzXSYmMD09eFt0KzE2XSl0Kz0xNCxjPXhbdCsrXXx4W3QrK108PDgsdCsrO2Vsc2UgZm9yKHQrPTEyOzspe2lmKDA9PT0oQT14W3QrK10pKWJyZWFrO3QrPUF9YnJlYWs7Y2FzZSAyNDk6aWYoNCE9PXhbdCsrXXx8MCE9PXhbdCs0XSl0aHJvd1wiSW52YWxpZCBncmFwaGljcyBleHRlbnNpb24gYmxvY2suXCI7dmFyIGY9eFt0KytdO2w9eFt0KytdfHhbdCsrXTw8OCxoPXhbdCsrXSwwPT0oMSZmKSYmKGg9bnVsbCksdT1mPj4yJjcsdCsrO2JyZWFrO2Nhc2UgMjU0OmZvcig7Oyl7aWYoMD09PShBPXhbdCsrXSkpYnJlYWs7dCs9QX1icmVhaztkZWZhdWx0OnRocm93XCJVbmtub3duIGdyYXBoaWMgY29udHJvbCBsYWJlbDogMHhcIit4W3QtMV0udG9TdHJpbmcoMTYpfWJyZWFrO2Nhc2UgNDQ6dmFyIHA9eFt0KytdfHhbdCsrXTw8OCxkPXhbdCsrXXx4W3QrK108PDgsZz14W3QrK118eFt0KytdPDw4LG09eFt0KytdfHhbdCsrXTw8OCx5PXhbdCsrXSx2PXk+PjYmMSx3PW8sYj0hMTtpZih5Pj43KXtiPSEwO3c9dCx0Kz0zKigxPDwoNyZ5KSsxKX12YXIgTD10O2Zvcih0Kys7Oyl7dmFyIEE7aWYoMD09PShBPXhbdCsrXSkpYnJlYWs7dCs9QX1zLnB1c2goe3g6cCx5OmQsd2lkdGg6ZyxoZWlnaHQ6bSxoYXNfbG9jYWxfcGFsZXR0ZTpiLHBhbGV0dGVfb2Zmc2V0OncsZGF0YV9vZmZzZXQ6TCxkYXRhX2xlbmd0aDp0LUwsdHJhbnNwYXJlbnRfaW5kZXg6aCxpbnRlcmxhY2VkOiEhdixkZWxheTpsLGRpc3Bvc2FsOnV9KTticmVhaztjYXNlIDU5OmE9ITE7YnJlYWs7ZGVmYXVsdDp0aHJvd1wiVW5rbm93biBnaWYgYmxvY2s6IDB4XCIreFt0LTFdLnRvU3RyaW5nKDE2KX10aGlzLm51bUZyYW1lcz1mdW5jdGlvbigpe3JldHVybiBzLmxlbmd0aH0sdGhpcy5sb29wQ291bnQ9ZnVuY3Rpb24oKXtyZXR1cm4gY30sdGhpcy5mcmFtZUluZm89ZnVuY3Rpb24odCl7aWYodDwwfHx0Pj1zLmxlbmd0aCl0aHJvd1wiRnJhbWUgaW5kZXggb3V0IG9mIHJhbmdlLlwiO3JldHVybiBzW3RdfSx0aGlzLmRlY29kZUFuZEJsaXRGcmFtZUJHUkE9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmZyYW1lSW5mbyh0KSxyPW4ud2lkdGgqbi5oZWlnaHQsaT1uZXcgVWludDhBcnJheShyKTtTdCh4LG4uZGF0YV9vZmZzZXQsaSxyKTt2YXIgbz1uLnBhbGV0dGVfb2Zmc2V0LGE9bi50cmFuc3BhcmVudF9pbmRleDtudWxsPT09YSYmKGE9MjU2KTt2YXIgcz1uLndpZHRoLGw9Ti1zLGg9cyx1PTQqKG4ueSpOK24ueCksYz00Kigobi55K24uaGVpZ2h0KSpOK24ueCksZj11LHA9NCpsOyEwPT09bi5pbnRlcmxhY2VkJiYocCs9NCoocytsKSo3KTtmb3IodmFyIGQ9OCxnPTAsbT1pLmxlbmd0aDtnPG07KytnKXt2YXIgeT1pW2ddO2lmKDA9PT1oJiYoaD1zLGM8PShmKz1wKSYmKHA9bCs0KihzK2wpKihkLTEpLGY9dSsocytsKSooZDw8MSksZD4+PTEpKSx5PT09YSlmKz00O2Vsc2V7dmFyIHY9eFtvKzMqeV0sdz14W28rMyp5KzFdLGI9eFtvKzMqeSsyXTtlW2YrK109YixlW2YrK109dyxlW2YrK109dixlW2YrK109MjU1fS0taH19LHRoaXMuZGVjb2RlQW5kQmxpdEZyYW1lUkdCQT1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuZnJhbWVJbmZvKHQpLHI9bi53aWR0aCpuLmhlaWdodCxpPW5ldyBVaW50OEFycmF5KHIpO1N0KHgsbi5kYXRhX29mZnNldCxpLHIpO3ZhciBvPW4ucGFsZXR0ZV9vZmZzZXQsYT1uLnRyYW5zcGFyZW50X2luZGV4O251bGw9PT1hJiYoYT0yNTYpO3ZhciBzPW4ud2lkdGgsbD1OLXMsaD1zLHU9NCoobi55Kk4rbi54KSxjPTQqKChuLnkrbi5oZWlnaHQpKk4rbi54KSxmPXUscD00Kmw7ITA9PT1uLmludGVybGFjZWQmJihwKz00KihzK2wpKjcpO2Zvcih2YXIgZD04LGc9MCxtPWkubGVuZ3RoO2c8bTsrK2cpe3ZhciB5PWlbZ107aWYoMD09PWgmJihoPXMsYzw9KGYrPXApJiYocD1sKzQqKHMrbCkqKGQtMSksZj11KyhzK2wpKihkPDwxKSxkPj49MSkpLHk9PT1hKWYrPTQ7ZWxzZXt2YXIgdj14W28rMyp5XSx3PXhbbyszKnkrMV0sYj14W28rMyp5KzJdO2VbZisrXT12LGVbZisrXT13LGVbZisrXT1iLGVbZisrXT0yNTV9LS1ofX19ZnVuY3Rpb24gU3QodCxlLG4scil7Zm9yKHZhciBpPXRbZSsrXSxvPTE8PGksYT1vKzEscz1hKzEsbD1pKzEsaD0oMTw8bCktMSx1PTAsYz0wLGY9MCxwPXRbZSsrXSxkPW5ldyBJbnQzMkFycmF5KDQwOTYpLGc9bnVsbDs7KXtmb3IoO3U8MTYmJjAhPT1wOyljfD10W2UrK108PHUsdSs9OCwxPT09cD9wPXRbZSsrXTotLXA7aWYodTxsKWJyZWFrO3ZhciBtPWMmaDtpZihjPj49bCx1LT1sLG0hPT1vKXtpZihtPT09YSlicmVhaztmb3IodmFyIHk9bTxzP206Zyx2PTAsdz15O288dzspdz1kW3ddPj44LCsrdjt2YXIgYj13O2lmKHI8Zit2Kyh5IT09bT8xOjApKXJldHVybiB2b2lkIGNvbnNvbGUubG9nKFwiV2FybmluZywgZ2lmIHN0cmVhbSBsb25nZXIgdGhhbiBleHBlY3RlZC5cIik7bltmKytdPWI7dmFyIHg9Zis9djtmb3IoeSE9PW0mJihuW2YrK109Yiksdz15O3YtLTspdz1kW3ddLG5bLS14XT0yNTUmdyx3Pj49ODtudWxsIT09ZyYmczw0MDk2JiYoZFtzKytdPWc8PDh8YixoKzE8PXMmJmw8MTImJigrK2wsaD1oPDwxfDEpKSxnPW19ZWxzZSBzPWErMSxoPSgxPDwobD1pKzEpKS0xLGc9bnVsbH1yZXR1cm4gZiE9PXImJmNvbnNvbGUubG9nKFwiV2FybmluZywgZ2lmIHN0cmVhbSBzaG9ydGVyIHRoYW4gZXhwZWN0ZWQuXCIpLG59dHJ5e2V4cG9ydHMuR2lmV3JpdGVyPWZ1bmN0aW9uKHksdCxlLG4pe3ZhciB2PTAscj12b2lkIDA9PT0obj12b2lkIDA9PT1uP3t9Om4pLmxvb3A/bnVsbDpuLmxvb3Asdz12b2lkIDA9PT1uLnBhbGV0dGU/bnVsbDpuLnBhbGV0dGU7aWYodDw9MHx8ZTw9MHx8NjU1MzU8dHx8NjU1MzU8ZSl0aHJvd1wiV2lkdGgvSGVpZ2h0IGludmFsaWQuXCI7ZnVuY3Rpb24gYih0KXt2YXIgZT10Lmxlbmd0aDtpZihlPDJ8fDI1NjxlfHxlJmUtMSl0aHJvd1wiSW52YWxpZCBjb2RlL2NvbG9yIGxlbmd0aCwgbXVzdCBiZSBwb3dlciBvZiAyIGFuZCAyIC4uIDI1Ni5cIjtyZXR1cm4gZX15W3YrK109NzEseVt2KytdPTczLHlbdisrXT03MCx5W3YrK109NTYseVt2KytdPTU3LHlbdisrXT05Nzt2YXIgaT0wLG89MDtpZihudWxsIT09dyl7Zm9yKHZhciBhPWIodyk7YT4+PTE7KSsraTtpZihhPTE8PGksLS1pLHZvaWQgMCE9PW4uYmFja2dyb3VuZCl7aWYoYTw9KG89bi5iYWNrZ3JvdW5kKSl0aHJvd1wiQmFja2dyb3VuZCBpbmRleCBvdXQgb2YgcmFuZ2UuXCI7aWYoMD09PW8pdGhyb3dcIkJhY2tncm91bmQgaW5kZXggZXhwbGljaXRseSBwYXNzZWQgYXMgMC5cIn19aWYoeVt2KytdPTI1NSZ0LHlbdisrXT10Pj44JjI1NSx5W3YrK109MjU1JmUseVt2KytdPWU+PjgmMjU1LHlbdisrXT0obnVsbCE9PXc/MTI4OjApfGkseVt2KytdPW8seVt2KytdPTAsbnVsbCE9PXcpZm9yKHZhciBzPTAsbD13Lmxlbmd0aDtzPGw7KytzKXt2YXIgaD13W3NdO3lbdisrXT1oPj4xNiYyNTUseVt2KytdPWg+PjgmMjU1LHlbdisrXT0yNTUmaH1pZihudWxsIT09cil7aWYocjwwfHw2NTUzNTxyKXRocm93XCJMb29wIGNvdW50IGludmFsaWQuXCI7eVt2KytdPTMzLHlbdisrXT0yNTUseVt2KytdPTExLHlbdisrXT03OCx5W3YrK109NjkseVt2KytdPTg0LHlbdisrXT04Myx5W3YrK109NjcseVt2KytdPTY1LHlbdisrXT04MCx5W3YrK109NjkseVt2KytdPTUwLHlbdisrXT00Nix5W3YrK109NDgseVt2KytdPTMseVt2KytdPTEseVt2KytdPTI1NSZyLHlbdisrXT1yPj44JjI1NSx5W3YrK109MH12YXIgeD0hMTt0aGlzLmFkZEZyYW1lPWZ1bmN0aW9uKHQsZSxuLHIsaSxvKXtpZighMD09PXgmJigtLXYseD0hMSksbz12b2lkIDA9PT1vP3t9Om8sdDwwfHxlPDB8fDY1NTM1PHR8fDY1NTM1PGUpdGhyb3dcIngveSBpbnZhbGlkLlwiO2lmKG48PTB8fHI8PTB8fDY1NTM1PG58fDY1NTM1PHIpdGhyb3dcIldpZHRoL0hlaWdodCBpbnZhbGlkLlwiO2lmKGkubGVuZ3RoPG4qcil0aHJvd1wiTm90IGVub3VnaCBwaXhlbHMgZm9yIHRoZSBmcmFtZSBzaXplLlwiO3ZhciBhPSEwLHM9by5wYWxldHRlO2lmKG51bGw9PXMmJihhPSExLHM9dyksbnVsbD09cyl0aHJvd1wiTXVzdCBzdXBwbHkgZWl0aGVyIGEgbG9jYWwgb3IgZ2xvYmFsIHBhbGV0dGUuXCI7Zm9yKHZhciBsPWIocyksaD0wO2w+Pj0xOykrK2g7bD0xPDxoO3ZhciB1PXZvaWQgMD09PW8uZGVsYXk/MDpvLmRlbGF5LGM9dm9pZCAwPT09by5kaXNwb3NhbD8wOm8uZGlzcG9zYWw7aWYoYzwwfHwzPGMpdGhyb3dcIkRpc3Bvc2FsIG91dCBvZiByYW5nZS5cIjt2YXIgZj0hMSxwPTA7aWYodm9pZCAwIT09by50cmFuc3BhcmVudCYmbnVsbCE9PW8udHJhbnNwYXJlbnQmJihmPSEwLChwPW8udHJhbnNwYXJlbnQpPDB8fGw8PXApKXRocm93XCJUcmFuc3BhcmVudCBjb2xvciBpbmRleC5cIjtpZigoMCE9PWN8fGZ8fDAhPT11KSYmKHlbdisrXT0zMyx5W3YrK109MjQ5LHlbdisrXT00LHlbdisrXT1jPDwyfCghMD09PWY/MTowKSx5W3YrK109MjU1JnUseVt2KytdPXU+PjgmMjU1LHlbdisrXT1wLHlbdisrXT0wKSx5W3YrK109NDQseVt2KytdPTI1NSZ0LHlbdisrXT10Pj44JjI1NSx5W3YrK109MjU1JmUseVt2KytdPWU+PjgmMjU1LHlbdisrXT0yNTUmbix5W3YrK109bj4+OCYyNTUseVt2KytdPTI1NSZyLHlbdisrXT1yPj44JjI1NSx5W3YrK109ITA9PT1hPzEyOHxoLTE6MCwhMD09PWEpZm9yKHZhciBkPTAsZz1zLmxlbmd0aDtkPGc7KytkKXt2YXIgbT1zW2RdO3lbdisrXT1tPj4xNiYyNTUseVt2KytdPW0+PjgmMjU1LHlbdisrXT0yNTUmbX12PWZ1bmN0aW9uKGUsbix0LHIpe2VbbisrXT10O3ZhciBpPW4rKyxvPTE8PHQsYT1vLTEscz1vKzEsbD1zKzEsaD10KzEsdT0wLGM9MDtmdW5jdGlvbiBmKHQpe2Zvcig7dDw9dTspZVtuKytdPTI1NSZjLGM+Pj04LHUtPTgsbj09PWkrMjU2JiYoZVtpXT0yNTUsaT1uKyspfWZ1bmN0aW9uIHAodCl7Y3w9dDw8dSx1Kz1oLGYoOCl9dmFyIGQ9clswXSZhLGc9e307cChvKTtmb3IodmFyIG09MSx5PXIubGVuZ3RoO208eTsrK20pe3ZhciB2PXJbbV0mYSx3PWQ8PDh8dixiPWdbd107aWYodm9pZCAwPT09Yil7Zm9yKGN8PWQ8PHUsdSs9aDs4PD11OyllW24rK109MjU1JmMsYz4+PTgsdS09OCxuPT09aSsyNTYmJihlW2ldPTI1NSxpPW4rKyk7NDA5Nj09PWw/KHAobyksbD1zKzEsaD10KzEsZz17fSk6KDE8PGg8PWwmJisraCxnW3ddPWwrKyksZD12fWVsc2UgZD1ifXJldHVybiBwKGQpLHAocyksZigxKSxpKzE9PT1uP2VbaV09MDooZVtpXT1uLWktMSxlW24rK109MCksbn0oeSx2LGg8Mj8yOmgsaSl9LHRoaXMuZW5kPWZ1bmN0aW9uKCl7cmV0dXJuITE9PT14JiYoeVt2KytdPTU5LHg9ITApLHZ9fSxleHBvcnRzLkdpZlJlYWRlcj1BdH1jYXRjaCh0KXt9XHJcbi8qXHJcbiAgICBDb3B5cmlnaHQgKGMpIDIwMDgsIEFkb2JlIFN5c3RlbXMgSW5jb3Jwb3JhdGVkXHJcbiAgICBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5cclxuICAgIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBcclxuICAgIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcclxuICAgIG1ldDpcclxuXHJcbiAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXHJcbiAgICAgIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXHJcbiAgICBcclxuICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcclxuICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBcclxuICAgICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cclxuICAgIFxyXG4gICAgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIEFkb2JlIFN5c3RlbXMgSW5jb3Jwb3JhdGVkIG5vciB0aGUgbmFtZXMgb2YgaXRzIFxyXG4gICAgICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSBcclxuICAgICAgdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cclxuXHJcbiAgICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVNcclxuICAgIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sXHJcbiAgICBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSXHJcbiAgICBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIE9XTkVSIE9SIFxyXG4gICAgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsXHJcbiAgICBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sXHJcbiAgICBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1JcclxuICAgIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0ZcclxuICAgIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HXHJcbiAgICBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcclxuICAgIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxyXG4gICovXHJcbmZ1bmN0aW9uIF90KHQpe3ZhciBOLEwsQSxTLGUsYz1NYXRoLmZsb29yLF89bmV3IEFycmF5KDY0KSxGPW5ldyBBcnJheSg2NCksUD1uZXcgQXJyYXkoNjQpLGs9bmV3IEFycmF5KDY0KSx5PW5ldyBBcnJheSg2NTUzNSksdj1uZXcgQXJyYXkoNjU1MzUpLFo9bmV3IEFycmF5KDY0KSx3PW5ldyBBcnJheSg2NCksST1bXSxDPTAsQj03LGo9bmV3IEFycmF5KDY0KSxFPW5ldyBBcnJheSg2NCksTT1uZXcgQXJyYXkoNjQpLG49bmV3IEFycmF5KDI1NiksTz1uZXcgQXJyYXkoMjA0OCksYj1bMCwxLDUsNiwxNCwxNSwyNywyOCwyLDQsNywxMywxNiwyNiwyOSw0MiwzLDgsMTIsMTcsMjUsMzAsNDEsNDMsOSwxMSwxOCwyNCwzMSw0MCw0NCw1MywxMCwxOSwyMywzMiwzOSw0NSw1Miw1NCwyMCwyMiwzMywzOCw0Niw1MSw1NSw2MCwyMSwzNCwzNyw0Nyw1MCw1Niw1OSw2MSwzNSwzNiw0OCw0OSw1Nyw1OCw2Miw2M10scT1bMCwwLDEsNSwxLDEsMSwxLDEsMSwwLDAsMCwwLDAsMCwwXSxUPVswLDEsMiwzLDQsNSw2LDcsOCw5LDEwLDExXSxSPVswLDAsMiwxLDMsMywyLDQsMyw1LDUsNCw0LDAsMCwxLDEyNV0sRD1bMSwyLDMsMCw0LDE3LDUsMTgsMzMsNDksNjUsNiwxOSw4MSw5Nyw3LDM0LDExMywyMCw1MCwxMjksMTQ1LDE2MSw4LDM1LDY2LDE3NywxOTMsMjEsODIsMjA5LDI0MCwzNiw1MSw5OCwxMTQsMTMwLDksMTAsMjIsMjMsMjQsMjUsMjYsMzcsMzgsMzksNDAsNDEsNDIsNTIsNTMsNTQsNTUsNTYsNTcsNTgsNjcsNjgsNjksNzAsNzEsNzIsNzMsNzQsODMsODQsODUsODYsODcsODgsODksOTAsOTksMTAwLDEwMSwxMDIsMTAzLDEwNCwxMDUsMTA2LDExNSwxMTYsMTE3LDExOCwxMTksMTIwLDEyMSwxMjIsMTMxLDEzMiwxMzMsMTM0LDEzNSwxMzYsMTM3LDEzOCwxNDYsMTQ3LDE0OCwxNDksMTUwLDE1MSwxNTIsMTUzLDE1NCwxNjIsMTYzLDE2NCwxNjUsMTY2LDE2NywxNjgsMTY5LDE3MCwxNzgsMTc5LDE4MCwxODEsMTgyLDE4MywxODQsMTg1LDE4NiwxOTQsMTk1LDE5NiwxOTcsMTk4LDE5OSwyMDAsMjAxLDIwMiwyMTAsMjExLDIxMiwyMTMsMjE0LDIxNSwyMTYsMjE3LDIxOCwyMjUsMjI2LDIyNywyMjgsMjI5LDIzMCwyMzEsMjMyLDIzMywyMzQsMjQxLDI0MiwyNDMsMjQ0LDI0NSwyNDYsMjQ3LDI0OCwyNDksMjUwXSxVPVswLDAsMywxLDEsMSwxLDEsMSwxLDEsMSwwLDAsMCwwLDBdLHo9WzAsMSwyLDMsNCw1LDYsNyw4LDksMTAsMTFdLEg9WzAsMCwyLDEsMiw0LDQsMyw0LDcsNSw0LDQsMCwxLDIsMTE5XSxXPVswLDEsMiwzLDE3LDQsNSwzMyw0OSw2LDE4LDY1LDgxLDcsOTcsMTEzLDE5LDM0LDUwLDEyOSw4LDIwLDY2LDE0NSwxNjEsMTc3LDE5Myw5LDM1LDUxLDgyLDI0MCwyMSw5OCwxMTQsMjA5LDEwLDIyLDM2LDUyLDIyNSwzNywyNDEsMjMsMjQsMjUsMjYsMzgsMzksNDAsNDEsNDIsNTMsNTQsNTUsNTYsNTcsNTgsNjcsNjgsNjksNzAsNzEsNzIsNzMsNzQsODMsODQsODUsODYsODcsODgsODksOTAsOTksMTAwLDEwMSwxMDIsMTAzLDEwNCwxMDUsMTA2LDExNSwxMTYsMTE3LDExOCwxMTksMTIwLDEyMSwxMjIsMTMwLDEzMSwxMzIsMTMzLDEzNCwxMzUsMTM2LDEzNywxMzgsMTQ2LDE0NywxNDgsMTQ5LDE1MCwxNTEsMTUyLDE1MywxNTQsMTYyLDE2MywxNjQsMTY1LDE2NiwxNjcsMTY4LDE2OSwxNzAsMTc4LDE3OSwxODAsMTgxLDE4MiwxODMsMTg0LDE4NSwxODYsMTk0LDE5NSwxOTYsMTk3LDE5OCwxOTksMjAwLDIwMSwyMDIsMjEwLDIxMSwyMTIsMjEzLDIxNCwyMTUsMjE2LDIxNywyMTgsMjI2LDIyNywyMjgsMjI5LDIzMCwyMzEsMjMyLDIzMywyMzQsMjQyLDI0MywyNDQsMjQ1LDI0NiwyNDcsMjQ4LDI0OSwyNTBdO2Z1bmN0aW9uIHIodCxlKXtmb3IodmFyIG49MCxyPTAsaT1uZXcgQXJyYXksbz0xO288PTE2O28rKyl7Zm9yKHZhciBhPTE7YTw9dFtvXTthKyspaVtlW3JdXT1bXSxpW2Vbcl1dWzBdPW4saVtlW3JdXVsxXT1vLHIrKyxuKys7bio9Mn1yZXR1cm4gaX1mdW5jdGlvbiBWKHQpe2Zvcih2YXIgZT10WzBdLG49dFsxXS0xOzA8PW47KWUmMTw8biYmKEN8PTE8PEIpLG4tLSwtLUI8MCYmKDI1NT09Qz8oRygyNTUpLEcoMCkpOkcoQyksQj03LEM9MCl9ZnVuY3Rpb24gRyh0KXtJLnB1c2godCl9ZnVuY3Rpb24gWSh0KXtHKHQ+PjgmMjU1KSxHKDI1NSZ0KX1mdW5jdGlvbiBKKHQsZSxuLHIsaSl7Zm9yKHZhciBvLGE9aVswXSxzPWlbMjQwXSxsPWZ1bmN0aW9uKHQsZSl7dmFyIG4scixpLG8sYSxzLGwsaCx1LGMsZj0wO2Zvcih1PTA7dTw4OysrdSl7bj10W2ZdLHI9dFtmKzFdLGk9dFtmKzJdLG89dFtmKzNdLGE9dFtmKzRdLHM9dFtmKzVdLGw9dFtmKzZdO3ZhciBwPW4rKGg9dFtmKzddKSxkPW4taCxnPXIrbCxtPXItbCx5PWkrcyx2PWktcyx3PW8rYSxiPW8tYSx4PXArdyxOPXAtdyxMPWcreSxBPWcteTt0W2ZdPXgrTCx0W2YrNF09eC1MO3ZhciBTPS43MDcxMDY3ODEqKEErTik7dFtmKzJdPU4rUyx0W2YrNl09Ti1TO3ZhciBfPS4zODI2ODM0MzMqKCh4PWIrdiktKEE9bStkKSksRj0uNTQxMTk2MSp4K18sUD0xLjMwNjU2Mjk2NSpBK18saz0uNzA3MTA2NzgxKihMPXYrbSksST1kK2ssQz1kLWs7dFtmKzVdPUMrRix0W2YrM109Qy1GLHRbZisxXT1JK1AsdFtmKzddPUktUCxmKz04fWZvcih1PWY9MDt1PDg7Kyt1KXtuPXRbZl0scj10W2YrOF0saT10W2YrMTZdLG89dFtmKzI0XSxhPXRbZiszMl0scz10W2YrNDBdLGw9dFtmKzQ4XTt2YXIgQj1uKyhoPXRbZis1Nl0pLGo9bi1oLEU9citsLE09ci1sLE89aStzLHE9aS1zLFQ9bythLFI9by1hLEQ9QitULFU9Qi1ULHo9RStPLEg9RS1PO3RbZl09RCt6LHRbZiszMl09RC16O3ZhciBXPS43MDcxMDY3ODEqKEgrVSk7dFtmKzE2XT1VK1csdFtmKzQ4XT1VLVc7dmFyIFY9LjM4MjY4MzQzMyooKEQ9UitxKS0oSD1NK2opKSxHPS41NDExOTYxKkQrVixZPTEuMzA2NTYyOTY1KkgrVixKPS43MDcxMDY3ODEqKHo9cStNKSxYPWorSixLPWotSjt0W2YrNDBdPUsrRyx0W2YrMjRdPUstRyx0W2YrOF09WCtZLHRbZis1Nl09WC1ZLGYrK31mb3IodT0wO3U8NjQ7Kyt1KWM9dFt1XSplW3VdLFpbdV09MDxjP2MrLjV8MDpjLS41fDA7cmV0dXJuIFp9KHQsZSksaD0wO2g8NjQ7KytoKXdbYltoXV09bFtoXTt2YXIgdT13WzBdLW47bj13WzBdLDA9PXU/VihyWzBdKTooVihyW3Zbbz0zMjc2Nyt1XV0pLFYoeVtvXSkpO2Zvcih2YXIgYz02MzswPGMmJjA9PXdbY107Yy0tKTtpZigwPT1jKXJldHVybiBWKGEpLG47Zm9yKHZhciBmLHA9MTtwPD1jOyl7Zm9yKHZhciBkPXA7MD09d1twXSYmcDw9YzsrK3ApO3ZhciBnPXAtZDtpZigxNjw9Zyl7Zj1nPj40O2Zvcih2YXIgbT0xO208PWY7KyttKVYocyk7ZyY9MTV9bz0zMjc2Nyt3W3BdLFYoaVsoZzw8NCkrdltvXV0pLFYoeVtvXSkscCsrfXJldHVybiA2MyE9YyYmVihhKSxufWZ1bmN0aW9uIFgodCl7aWYodDw9MCYmKHQ9MSksMTAwPHQmJih0PTEwMCksZSE9dCl7KGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bMTYsMTEsMTAsMTYsMjQsNDAsNTEsNjEsMTIsMTIsMTQsMTksMjYsNTgsNjAsNTUsMTQsMTMsMTYsMjQsNDAsNTcsNjksNTYsMTQsMTcsMjIsMjksNTEsODcsODAsNjIsMTgsMjIsMzcsNTYsNjgsMTA5LDEwMyw3NywyNCwzNSw1NSw2NCw4MSwxMDQsMTEzLDkyLDQ5LDY0LDc4LDg3LDEwMywxMjEsMTIwLDEwMSw3Miw5Miw5NSw5OCwxMTIsMTAwLDEwMyw5OV0sbj0wO248NjQ7bisrKXt2YXIgcj1jKChlW25dKnQrNTApLzEwMCk7cjwxP3I9MToyNTU8ciYmKHI9MjU1KSxfW2Jbbl1dPXJ9Zm9yKHZhciBpPVsxNywxOCwyNCw0Nyw5OSw5OSw5OSw5OSwxOCwyMSwyNiw2Niw5OSw5OSw5OSw5OSwyNCwyNiw1Niw5OSw5OSw5OSw5OSw5OSw0Nyw2Niw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OV0sbz0wO288NjQ7bysrKXt2YXIgYT1jKChpW29dKnQrNTApLzEwMCk7YTwxP2E9MToyNTU8YSYmKGE9MjU1KSxGW2Jbb11dPWF9Zm9yKHZhciBzPVsxLDEuMzg3MDM5ODQ1LDEuMzA2NTYyOTY1LDEuMTc1ODc1NjAyLDEsLjc4NTY5NDk1OCwuNTQxMTk2MSwuMjc1ODk5Mzc5XSxsPTAsaD0wO2g8ODtoKyspZm9yKHZhciB1PTA7dTw4O3UrKylQW2xdPTEvKF9bYltsXV0qc1toXSpzW3VdKjgpLGtbbF09MS8oRltiW2xdXSpzW2hdKnNbdV0qOCksbCsrfSkodDw1MD9NYXRoLmZsb29yKDVlMy90KTpNYXRoLmZsb29yKDIwMC0yKnQpKSxlPXR9fXRoaXMuZW5jb2RlPWZ1bmN0aW9uKHQsZSl7dmFyIG4scjsobmV3IERhdGUpLmdldFRpbWUoKTtlJiZYKGUpLEk9bmV3IEFycmF5LEM9MCxCPTcsWSg2NTQ5NiksWSg2NTUwNCksWSgxNiksRyg3NCksRyg3MCksRyg3MyksRyg3MCksRygwKSxHKDEpLEcoMSksRygwKSxZKDEpLFkoMSksRygwKSxHKDApLGZ1bmN0aW9uKCl7WSg2NTQ5OSksWSgxMzIpLEcoMCk7Zm9yKHZhciB0PTA7dDw2NDt0KyspRyhfW3RdKTtHKDEpO2Zvcih2YXIgZT0wO2U8NjQ7ZSsrKUcoRltlXSl9KCksbj10LndpZHRoLHI9dC5oZWlnaHQsWSg2NTQ3MiksWSgxNyksRyg4KSxZKHIpLFkobiksRygzKSxHKDEpLEcoMTcpLEcoMCksRygyKSxHKDE3KSxHKDEpLEcoMyksRygxNyksRygxKSxmdW5jdGlvbigpe1koNjU0NzYpLFkoNDE4KSxHKDApO2Zvcih2YXIgdD0wO3Q8MTY7dCsrKUcocVt0KzFdKTtmb3IodmFyIGU9MDtlPD0xMTtlKyspRyhUW2VdKTtHKDE2KTtmb3IodmFyIG49MDtuPDE2O24rKylHKFJbbisxXSk7Zm9yKHZhciByPTA7cjw9MTYxO3IrKylHKERbcl0pO0coMSk7Zm9yKHZhciBpPTA7aTwxNjtpKyspRyhVW2krMV0pO2Zvcih2YXIgbz0wO288PTExO28rKylHKHpbb10pO0coMTcpO2Zvcih2YXIgYT0wO2E8MTY7YSsrKUcoSFthKzFdKTtmb3IodmFyIHM9MDtzPD0xNjE7cysrKUcoV1tzXSl9KCksWSg2NTQ5OCksWSgxMiksRygzKSxHKDEpLEcoMCksRygyKSxHKDE3KSxHKDMpLEcoMTcpLEcoMCksRyg2MyksRygwKTt2YXIgaT0wLG89MCxhPTA7Qz0wLEI9Nyx0aGlzLmVuY29kZS5kaXNwbGF5TmFtZT1cIl9lbmNvZGVfXCI7Zm9yKHZhciBzLGwsaCx1LGMsZixwLGQsZyxtPXQuZGF0YSx5PXQud2lkdGgsdj10LmhlaWdodCx3PTQqeSxiPTA7Yjx2Oyl7Zm9yKHM9MDtzPHc7KXtmb3IoZj1jPXcqYitzLHA9LTEsZz1kPTA7Zzw2NDtnKyspZj1jKyhkPWc+PjMpKncrKHA9NCooNyZnKSksdjw9YitkJiYoZi09dyooYisxK2QtdikpLHc8PXMrcCYmKGYtPXMrcC13KzQpLGw9bVtmKytdLGg9bVtmKytdLHU9bVtmKytdLGpbZ109KE9bbF0rT1toKzI1Nj4+MF0rT1t1KzUxMj4+MF0+PjE2KS0xMjgsRVtnXT0oT1tsKzc2OD4+MF0rT1toKzEwMjQ+PjBdK09bdSsxMjgwPj4wXT4+MTYpLTEyOCxNW2ddPShPW2wrMTI4MD4+MF0rT1toKzE1MzY+PjBdK09bdSsxNzkyPj4wXT4+MTYpLTEyODtpPUooaixQLGksTixBKSxvPUooRSxrLG8sTCxTKSxhPUooTSxrLGEsTCxTKSxzKz0zMn1iKz04fWlmKDA8PUIpe3ZhciB4PVtdO3hbMV09QisxLHhbMF09KDE8PEIrMSktMSxWKHgpfXJldHVybiBZKDY1NDk3KSxuZXcgVWludDhBcnJheShJKX0sZnVuY3Rpb24oKXsobmV3IERhdGUpLmdldFRpbWUoKTt0fHwodD01MCksZnVuY3Rpb24oKXtmb3IodmFyIHQ9U3RyaW5nLmZyb21DaGFyQ29kZSxlPTA7ZTwyNTY7ZSsrKW5bZV09dChlKX0oKSxOPXIocSxUKSxMPXIoVSx6KSxBPXIoUixEKSxTPXIoSCxXKSxmdW5jdGlvbigpe2Zvcih2YXIgdD0xLGU9MixuPTE7bjw9MTU7bisrKXtmb3IodmFyIHI9dDtyPGU7cisrKXZbMzI3Njcrcl09bix5WzMyNzY3K3JdPVtdLHlbMzI3Njcrcl1bMV09bix5WzMyNzY3K3JdWzBdPXI7Zm9yKHZhciBpPS0oZS0xKTtpPD0tdDtpKyspdlszMjc2NytpXT1uLHlbMzI3NjcraV09W10seVszMjc2NytpXVsxXT1uLHlbMzI3NjcraV1bMF09ZS0xK2k7dDw8PTEsZTw8PTF9fSgpLGZ1bmN0aW9uKCl7Zm9yKHZhciB0PTA7dDwyNTY7dCsrKU9bdF09MTk1OTUqdCxPW3QrMjU2Pj4wXT0zODQ3MCp0LE9bdCs1MTI+PjBdPTc0NzEqdCszMjc2OCxPW3QrNzY4Pj4wXT0tMTEwNTkqdCxPW3QrMTAyND4+MF09LTIxNzA5KnQsT1t0KzEyODA+PjBdPTMyNzY4KnQrODQyMTM3NSxPW3QrMTUzNj4+MF09LTI3NDM5KnQsT1t0KzE3OTI+PjBdPS01MzI5KnR9KCksWCh0KSwobmV3IERhdGUpLmdldFRpbWUoKX0oKX1mdW5jdGlvbiBGdCh0LGUpe2lmKHRoaXMucG9zPTAsdGhpcy5idWZmZXI9dCx0aGlzLmRhdGF2PW5ldyBEYXRhVmlldyh0LmJ1ZmZlciksdGhpcy5pc193aXRoX2FscGhhPSEhZSx0aGlzLmJvdHRvbV91cD0hMCx0aGlzLmZsYWc9U3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLmJ1ZmZlclswXSkrU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLmJ1ZmZlclsxXSksdGhpcy5wb3MrPTIsLTE9PT1bXCJCTVwiLFwiQkFcIixcIkNJXCIsXCJDUFwiLFwiSUNcIixcIlBUXCJdLmluZGV4T2YodGhpcy5mbGFnKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIEJNUCBGaWxlXCIpO3RoaXMucGFyc2VIZWFkZXIoKSx0aGlzLnBhcnNlQkdSKCl9d2luZG93LnRtcD1BdCxsdC5BUEkuYWRsZXIzMmNzPShkdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBBcnJheUJ1ZmZlciYmXCJmdW5jdGlvblwiPT10eXBlb2YgVWludDhBcnJheSxndD1udWxsLG10PWZ1bmN0aW9uKCl7aWYoIWR0KXJldHVybiBmdW5jdGlvbigpe3JldHVybiExfTt0cnl7dmFyIHQ9e307XCJmdW5jdGlvblwiPT10eXBlb2YgdC5CdWZmZXImJihndD10LkJ1ZmZlcil9Y2F0Y2godCl7fXJldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyfHxudWxsIT09Z3QmJnQgaW5zdGFuY2VvZiBndH19KCkseXQ9bnVsbCE9PWd0P2Z1bmN0aW9uKHQpe3JldHVybiBuZXcgZ3QodCxcInV0ZjhcIikudG9TdHJpbmcoXCJiaW5hcnlcIil9OmZ1bmN0aW9uKHQpe3JldHVybiB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQodCkpfSx2dD1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj02NTUzNSZ0LHI9dD4+PjE2LGk9MCxvPWUubGVuZ3RoO2k8bztpKyspbj0obisoMjU1JmUuY2hhckNvZGVBdChpKSkpJTY1NTIxLHI9KHIrbiklNjU1MjE7cmV0dXJuKHI8PDE2fG4pPj4+MH0sd3Q9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49NjU1MzUmdCxyPXQ+Pj4xNixpPTAsbz1lLmxlbmd0aDtpPG87aSsrKW49KG4rZVtpXSklNjU1MjEscj0ocituKSU2NTUyMTtyZXR1cm4ocjw8MTZ8bik+Pj4wfSx4dD0oYnQ9e30pLkFkbGVyMzI9KCgocHQ9KGZ0PWZ1bmN0aW9uKHQpe2lmKCEodGhpcyBpbnN0YW5jZW9mIGZ0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ29uc3RydWN0b3IgY2Fubm90IGNhbGxlZCBiZSBhcyBhIGZ1bmN0aW9uLlwiKTtpZighaXNGaW5pdGUodD1udWxsPT10PzE6K3QpKXRocm93IG5ldyBFcnJvcihcIkZpcnN0IGFyZ3VtZW50cyBuZWVkcyB0byBiZSBhIGZpbml0ZSBudW1iZXIuXCIpO3RoaXMuY2hlY2tzdW09dD4+PjB9KS5wcm90b3R5cGU9e30pLmNvbnN0cnVjdG9yPWZ0KS5mcm9tPSgoaHQ9ZnVuY3Rpb24odCl7aWYoISh0aGlzIGluc3RhbmNlb2YgZnQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDb25zdHJ1Y3RvciBjYW5ub3QgY2FsbGVkIGJlIGFzIGEgZnVuY3Rpb24uXCIpO2lmKG51bGw9PXQpdGhyb3cgbmV3IEVycm9yKFwiRmlyc3QgYXJndW1lbnQgbmVlZHMgdG8gYmUgYSBzdHJpbmcuXCIpO3RoaXMuY2hlY2tzdW09dnQoMSx0LnRvU3RyaW5nKCkpfSkucHJvdG90eXBlPXB0LGh0KSxmdC5mcm9tVXRmOD0oKHV0PWZ1bmN0aW9uKHQpe2lmKCEodGhpcyBpbnN0YW5jZW9mIGZ0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ29uc3RydWN0b3IgY2Fubm90IGNhbGxlZCBiZSBhcyBhIGZ1bmN0aW9uLlwiKTtpZihudWxsPT10KXRocm93IG5ldyBFcnJvcihcIkZpcnN0IGFyZ3VtZW50IG5lZWRzIHRvIGJlIGEgc3RyaW5nLlwiKTt2YXIgZT15dCh0LnRvU3RyaW5nKCkpO3RoaXMuY2hlY2tzdW09dnQoMSxlKX0pLnByb3RvdHlwZT1wdCx1dCksZHQmJihmdC5mcm9tQnVmZmVyPSgoY3Q9ZnVuY3Rpb24odCl7aWYoISh0aGlzIGluc3RhbmNlb2YgZnQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDb25zdHJ1Y3RvciBjYW5ub3QgY2FsbGVkIGJlIGFzIGEgZnVuY3Rpb24uXCIpO2lmKCFtdCh0KSl0aHJvdyBuZXcgRXJyb3IoXCJGaXJzdCBhcmd1bWVudCBuZWVkcyB0byBiZSBBcnJheUJ1ZmZlci5cIik7dmFyIGU9bmV3IFVpbnQ4QXJyYXkodCk7cmV0dXJuIHRoaXMuY2hlY2tzdW09d3QoMSxlKX0pLnByb3RvdHlwZT1wdCxjdCkpLHB0LnVwZGF0ZT1mdW5jdGlvbih0KXtpZihudWxsPT10KXRocm93IG5ldyBFcnJvcihcIkZpcnN0IGFyZ3VtZW50IG5lZWRzIHRvIGJlIGEgc3RyaW5nLlwiKTtyZXR1cm4gdD10LnRvU3RyaW5nKCksdGhpcy5jaGVja3N1bT12dCh0aGlzLmNoZWNrc3VtLHQpfSxwdC51cGRhdGVVdGY4PWZ1bmN0aW9uKHQpe2lmKG51bGw9PXQpdGhyb3cgbmV3IEVycm9yKFwiRmlyc3QgYXJndW1lbnQgbmVlZHMgdG8gYmUgYSBzdHJpbmcuXCIpO3ZhciBlPXl0KHQudG9TdHJpbmcoKSk7cmV0dXJuIHRoaXMuY2hlY2tzdW09dnQodGhpcy5jaGVja3N1bSxlKX0sZHQmJihwdC51cGRhdGVCdWZmZXI9ZnVuY3Rpb24odCl7aWYoIW10KHQpKXRocm93IG5ldyBFcnJvcihcIkZpcnN0IGFyZ3VtZW50IG5lZWRzIHRvIGJlIEFycmF5QnVmZmVyLlwiKTt2YXIgZT1uZXcgVWludDhBcnJheSh0KTtyZXR1cm4gdGhpcy5jaGVja3N1bT13dCh0aGlzLmNoZWNrc3VtLGUpfSkscHQuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHh0KHRoaXMuY2hlY2tzdW0pfSxmdCksYnQuZnJvbT1mdW5jdGlvbih0KXtpZihudWxsPT10KXRocm93IG5ldyBFcnJvcihcIkZpcnN0IGFyZ3VtZW50IG5lZWRzIHRvIGJlIGEgc3RyaW5nLlwiKTtyZXR1cm4gdnQoMSx0LnRvU3RyaW5nKCkpfSxidC5mcm9tVXRmOD1mdW5jdGlvbih0KXtpZihudWxsPT10KXRocm93IG5ldyBFcnJvcihcIkZpcnN0IGFyZ3VtZW50IG5lZWRzIHRvIGJlIGEgc3RyaW5nLlwiKTt2YXIgZT15dCh0LnRvU3RyaW5nKCkpO3JldHVybiB2dCgxLGUpfSxkdCYmKGJ0LmZyb21CdWZmZXI9ZnVuY3Rpb24odCl7aWYoIW10KHQpKXRocm93IG5ldyBFcnJvcihcIkZpcnN0IGFyZ3VtZW50IG5lZWQgdG8gYmUgQXJyYXlCdWZmZXIuXCIpO3ZhciBlPW5ldyBVaW50OEFycmF5KHQpO3JldHVybiB3dCgxLGUpfSksYnQpLGZ1bmN0aW9uKHQpe3QuX19iaWRpRW5naW5lX189dC5wcm90b3R5cGUuX19iaWRpRW5naW5lX189ZnVuY3Rpb24odCl7dmFyIGQsZyxjLGYsaSxvLGEscz1lLG09W1swLDMsMCwxLDAsMCwwXSxbMCwzLDAsMSwyLDIsMF0sWzAsMywwLDE3LDIsMCwxXSxbMCwzLDUsNSw0LDEsMF0sWzAsMywyMSwyMSw0LDAsMV0sWzAsMyw1LDUsNCwyLDBdXSx5PVtbMiwwLDEsMSwwLDEsMF0sWzIsMCwxLDEsMCwyLDBdLFsyLDAsMiwxLDMsMiwwXSxbMiwwLDIsMzMsMywxLDFdXSx2PXtMOjAsUjoxLEVOOjIsQU46MyxOOjQsQjo1LFM6Nn0sbD17MDowLDU6MSw2OjIsNzozLDMyOjQsMjUxOjUsMjU0OjYsMjU1Ojd9LGg9W1wiKFwiLFwiKVwiLFwiKFwiLFwiPFwiLFwiPlwiLFwiPFwiLFwiW1wiLFwiXVwiLFwiW1wiLFwie1wiLFwifVwiLFwie1wiLFwiwqtcIixcIsK7XCIsXCLCq1wiLFwi4oC5XCIsXCLigLpcIixcIuKAuVwiLFwi4oGFXCIsXCLigYZcIixcIuKBhVwiLFwi4oG9XCIsXCLigb5cIixcIuKBvVwiLFwi4oKNXCIsXCLigo5cIixcIuKCjVwiLFwi4omkXCIsXCLiiaVcIixcIuKJpFwiLFwi4oypXCIsXCLijKpcIixcIuKMqVwiLFwi77mZXCIsXCLvuZpcIixcIu+5mVwiLFwi77mbXCIsXCLvuZxcIixcIu+5m1wiLFwi77mdXCIsXCLvuZ5cIixcIu+5nVwiLFwi77mkXCIsXCLvuaVcIixcIu+5pFwiXSx1PW5ldyBSZWdFeHAoL14oWzEtNHw5XXwxWzAtOV18MlswLTldfDNbMDE2OF18NFswNDU4OV18NVswMTJdfDdbNzhdfDE1OXwxNlswLTldfDE3WzAtMl18MjFbNTY5XXwyMlswMzQ4OV18MjUwKSQvKSx3PSExLGI9MDt0aGlzLl9fYmlkaUVuZ2luZV9fPXt9O3ZhciB4PWZ1bmN0aW9uKHQpe3ZhciBlPXQuY2hhckNvZGVBdCgpLG49ZT4+OCxyPWxbbl07cmV0dXJuIHZvaWQgMCE9PXI/c1syNTYqcisoMjU1JmUpXToyNTI9PT1ufHwyNTM9PT1uP1wiQUxcIjp1LnRlc3Qobik/XCJMXCI6OD09PW4/XCJSXCI6XCJOXCJ9LHA9ZnVuY3Rpb24odCl7Zm9yKHZhciBlLG49MDtuPHQubGVuZ3RoO24rKyl7aWYoXCJMXCI9PT0oZT14KHQuY2hhckF0KG4pKSkpcmV0dXJuITE7aWYoXCJSXCI9PT1lKXJldHVybiEwfXJldHVybiExfSxOPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBpLG8sYSxzLGw9ZVtyXTtzd2l0Y2gobCl7Y2FzZVwiTFwiOmNhc2VcIlJcIjp3PSExO2JyZWFrO2Nhc2VcIk5cIjpjYXNlXCJBTlwiOmJyZWFrO2Nhc2VcIkVOXCI6dyYmKGw9XCJBTlwiKTticmVhaztjYXNlXCJBTFwiOnc9ITAsbD1cIlJcIjticmVhaztjYXNlXCJXU1wiOmw9XCJOXCI7YnJlYWs7Y2FzZVwiQ1NcIjpyPDF8fHIrMT49ZS5sZW5ndGh8fFwiRU5cIiE9PShpPW5bci0xXSkmJlwiQU5cIiE9PWl8fFwiRU5cIiE9PShvPWVbcisxXSkmJlwiQU5cIiE9PW8/bD1cIk5cIjp3JiYobz1cIkFOXCIpLGw9bz09PWk/bzpcIk5cIjticmVhaztjYXNlXCJFU1wiOmw9XCJFTlwiPT09KGk9MDxyP25bci0xXTpcIkJcIikmJnIrMTxlLmxlbmd0aCYmXCJFTlwiPT09ZVtyKzFdP1wiRU5cIjpcIk5cIjticmVhaztjYXNlXCJFVFwiOmlmKDA8ciYmXCJFTlwiPT09bltyLTFdKXtsPVwiRU5cIjticmVha31pZih3KXtsPVwiTlwiO2JyZWFrfWZvcihhPXIrMSxzPWUubGVuZ3RoO2E8cyYmXCJFVFwiPT09ZVthXTspYSsrO2w9YTxzJiZcIkVOXCI9PT1lW2FdP1wiRU5cIjpcIk5cIjticmVhaztjYXNlXCJOU01cIjppZihjJiYhZil7Zm9yKHM9ZS5sZW5ndGgsYT1yKzE7YTxzJiZcIk5TTVwiPT09ZVthXTspYSsrO2lmKGE8cyl7dmFyIGg9dFtyXSx1PTE0MjU8PWgmJmg8PTIzMDN8fDY0Mjg2PT09aDtpZihpPWVbYV0sdSYmKFwiUlwiPT09aXx8XCJBTFwiPT09aSkpe2w9XCJSXCI7YnJlYWt9fX1sPXI8MXx8XCJCXCI9PT0oaT1lW3ItMV0pP1wiTlwiOm5bci0xXTticmVhaztjYXNlXCJCXCI6ZD0hKHc9ITEpLGw9YjticmVhaztjYXNlXCJTXCI6Zz0hMCxsPVwiTlwiO2JyZWFrO2Nhc2VcIkxSRVwiOmNhc2VcIlJMRVwiOmNhc2VcIkxST1wiOmNhc2VcIlJMT1wiOmNhc2VcIlBERlwiOnc9ITE7YnJlYWs7Y2FzZVwiQk5cIjpsPVwiTlwifXJldHVybiBsfSxMPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10LnNwbGl0KFwiXCIpO3JldHVybiBuJiZBKHIsbix7aGlMZXZlbDpifSksci5yZXZlcnNlKCksZSYmZS5yZXZlcnNlKCksci5qb2luKFwiXCIpfSxBPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcixpLG8sYSxzLGw9LTEsaD10Lmxlbmd0aCx1PTAsYz1bXSxmPWI/eTptLHA9W107Zm9yKGc9ZD13PSExLGk9MDtpPGg7aSsrKXBbaV09eCh0W2ldKTtmb3Iobz0wO288aDtvKyspe2lmKHM9dSxjW29dPU4odCxwLGMsbykscj0yNDAmKHU9ZltzXVt2W2Nbb11dXSksdSY9MTUsZVtvXT1hPWZbdV1bNV0sMDxyKWlmKDE2PT09cil7Zm9yKGk9bDtpPG87aSsrKWVbaV09MTtsPS0xfWVsc2UgbD0tMTtpZihmW3VdWzZdKS0xPT09bCYmKGw9byk7ZWxzZSBpZigtMTxsKXtmb3IoaT1sO2k8bztpKyspZVtpXT1hO2w9LTF9XCJCXCI9PT1wW29dJiYoZVtvXT0wKSxuLmhpTGV2ZWx8PWF9ZyYmZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgcj0wO3I8bjtyKyspaWYoXCJTXCI9PT10W3JdKXtlW3JdPWI7Zm9yKHZhciBpPXItMTswPD1pJiZcIldTXCI9PT10W2ldO2ktLSllW2ldPWJ9fShwLGUsaCl9LFM9ZnVuY3Rpb24odCxlLG4scixpKXtpZighKGkuaGlMZXZlbDx0KSl7aWYoMT09PXQmJjE9PT1iJiYhZClyZXR1cm4gZS5yZXZlcnNlKCksdm9pZChuJiZuLnJldmVyc2UoKSk7Zm9yKHZhciBvLGEscyxsLGg9ZS5sZW5ndGgsdT0wO3U8aDspe2lmKHJbdV0+PXQpe2ZvcihzPXUrMTtzPGgmJnJbc10+PXQ7KXMrKztmb3IobD11LGE9cy0xO2w8YTtsKyssYS0tKW89ZVtsXSxlW2xdPWVbYV0sZVthXT1vLG4mJihvPW5bbF0sbltsXT1uW2FdLG5bYV09byk7dT1zfXUrK319fSxfPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10LnNwbGl0KFwiXCIpLGk9e2hpTGV2ZWw6Yn07cmV0dXJuIG58fChuPVtdKSxBKHIsbixpKSxmdW5jdGlvbih0LGUsbil7aWYoMCE9PW4uaGlMZXZlbCYmYSlmb3IodmFyIHIsaT0wO2k8dC5sZW5ndGg7aSsrKTE9PT1lW2ldJiYwPD0ocj1oLmluZGV4T2YodFtpXSkpJiYodFtpXT1oW3IrMV0pfShyLG4saSksUygyLHIsZSxuLGkpLFMoMSxyLGUsbixpKSxyLmpvaW4oXCJcIil9O3JldHVybiB0aGlzLl9fYmlkaUVuZ2luZV9fLmRvQmlkaVJlb3JkZXI9ZnVuY3Rpb24odCxlLG4pe2lmKGZ1bmN0aW9uKHQsZSl7aWYoZSlmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyllW25dPW47dm9pZCAwPT09ZiYmKGY9cCh0KSksdm9pZCAwPT09byYmKG89cCh0KSl9KHQsZSksY3x8IWl8fG8paWYoYyYmaSYmZl5vKWI9Zj8xOjAsdD1MKHQsZSxuKTtlbHNlIGlmKCFjJiZpJiZvKWI9Zj8xOjAsdD1fKHQsZSxuKSx0PUwodCxlKTtlbHNlIGlmKCFjfHxmfHxpfHxvKXtpZihjJiYhaSYmZl5vKXQ9TCh0LGUpLHQ9Zj8oYj0wLF8odCxlLG4pKTooYj0xLHQ9Xyh0LGUsbiksTCh0LGUpKTtlbHNlIGlmKGMmJmYmJiFpJiZvKWI9MSx0PV8odCxlLG4pLHQ9TCh0LGUpO2Vsc2UgaWYoIWMmJiFpJiZmXm8pe3ZhciByPWE7Zj8oYj0xLHQ9Xyh0LGUsbiksYj0wLGE9ITEsdD1fKHQsZSxuKSxhPXIpOihiPTAsdD1fKHQsZSxuKSx0PUwodCxlKSxhPSEoYj0xKSx0PV8odCxlLG4pLGE9cix0PUwodCxlKSl9fWVsc2UgYj0wLHQ9Xyh0LGUsbik7ZWxzZSBiPWY/MTowLHQ9Xyh0LGUsbik7cmV0dXJuIHR9LHRoaXMuX19iaWRpRW5naW5lX18uc2V0T3B0aW9ucz1mdW5jdGlvbih0KXt0JiYoYz10LmlzSW5wdXRWaXN1YWwsaT10LmlzT3V0cHV0VmlzdWFsLGY9dC5pc0lucHV0UnRsLG89dC5pc091dHB1dFJ0bCxhPXQuaXNTeW1tZXRyaWNTd2FwcGluZyl9LHRoaXMuX19iaWRpRW5naW5lX18uc2V0T3B0aW9ucyh0KSx0aGlzLl9fYmlkaUVuZ2luZV9ffTt2YXIgZT1bXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJTXCIsXCJCXCIsXCJTXCIsXCJXU1wiLFwiQlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCXCIsXCJCXCIsXCJCXCIsXCJTXCIsXCJXU1wiLFwiTlwiLFwiTlwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiRVNcIixcIkNTXCIsXCJFU1wiLFwiQ1NcIixcIkNTXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiQ1NcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJcIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQ1NcIixcIk5cIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJMXCIsXCJOXCIsXCJOXCIsXCJCTlwiLFwiTlwiLFwiTlwiLFwiRVRcIixcIkVUXCIsXCJFTlwiLFwiRU5cIixcIk5cIixcIkxcIixcIk5cIixcIk5cIixcIk5cIixcIkVOXCIsXCJMXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJOXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJOXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJOXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJOXCIsXCJOXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJOXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJOXCIsXCJMXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJFVFwiLFwiTlwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiUlwiLFwiTlNNXCIsXCJSXCIsXCJOU01cIixcIk5TTVwiLFwiUlwiLFwiTlNNXCIsXCJOU01cIixcIlJcIixcIk5TTVwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiQU5cIixcIkFOXCIsXCJBTlwiLFwiQU5cIixcIkFOXCIsXCJBTlwiLFwiTlwiLFwiTlwiLFwiQUxcIixcIkVUXCIsXCJFVFwiLFwiQUxcIixcIkNTXCIsXCJBTFwiLFwiTlwiLFwiTlwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIkFMXCIsXCJBTFwiLFwiTlwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiQU5cIixcIkFOXCIsXCJBTlwiLFwiQU5cIixcIkFOXCIsXCJBTlwiLFwiQU5cIixcIkFOXCIsXCJBTlwiLFwiQU5cIixcIkVUXCIsXCJBTlwiLFwiQU5cIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIk5TTVwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIkFOXCIsXCJOXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJBTFwiLFwiQUxcIixcIk5TTVwiLFwiTlNNXCIsXCJOXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIkFMXCIsXCJBTFwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiTlwiLFwiQUxcIixcIkFMXCIsXCJOU01cIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5cIixcIk5cIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIkFMXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJSXCIsXCJSXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJSXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJXU1wiLFwiV1NcIixcIldTXCIsXCJXU1wiLFwiV1NcIixcIldTXCIsXCJXU1wiLFwiV1NcIixcIldTXCIsXCJXU1wiLFwiV1NcIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkxcIixcIlJcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIldTXCIsXCJCXCIsXCJMUkVcIixcIlJMRVwiLFwiUERGXCIsXCJMUk9cIixcIlJMT1wiLFwiQ1NcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiQ1NcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIldTXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIk5cIixcIkxSSVwiLFwiUkxJXCIsXCJGU0lcIixcIlBESVwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiRU5cIixcIkxcIixcIk5cIixcIk5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVTXCIsXCJFU1wiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTFwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVTXCIsXCJFU1wiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIlJcIixcIk5TTVwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiRVNcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIk5cIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIk5cIixcIlJcIixcIk5cIixcIlJcIixcIlJcIixcIk5cIixcIlJcIixcIlJcIixcIk5cIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJDU1wiLFwiTlwiLFwiQ1NcIixcIk5cIixcIk5cIixcIkNTXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJFVFwiLFwiTlwiLFwiTlwiLFwiRVNcIixcIkVTXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJFVFwiLFwiRVRcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiTlwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiTlwiLFwiTlwiLFwiQk5cIixcIk5cIixcIk5cIixcIk5cIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIkVTXCIsXCJDU1wiLFwiRVNcIixcIkNTXCIsXCJDU1wiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkNTXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJOXCIsXCJOXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJOXCIsXCJOXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJOXCIsXCJOXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJFVFwiLFwiRVRcIixcIk5cIixcIk5cIixcIk5cIixcIkVUXCIsXCJFVFwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiXSxvPW5ldyB0Ll9fYmlkaUVuZ2luZV9fKHtpc0lucHV0VmlzdWFsOiEwfSk7dC5BUEkuZXZlbnRzLnB1c2goW1wicG9zdFByb2Nlc3NUZXh0XCIsZnVuY3Rpb24odCl7dmFyIGU9dC50ZXh0LG49KHQueCx0LnksdC5vcHRpb25zfHx7fSkscj0odC5tdXRleCxuLmxhbmcsW10pO2lmKFwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSl7dmFyIGk9MDtmb3Iocj1bXSxpPTA7aTxlLmxlbmd0aDtpKz0xKVwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlW2ldKT9yLnB1c2goW28uZG9CaWRpUmVvcmRlcihlW2ldWzBdKSxlW2ldWzFdLGVbaV1bMl1dKTpyLnB1c2goW28uZG9CaWRpUmVvcmRlcihlW2ldKV0pO3QudGV4dD1yfWVsc2UgdC50ZXh0PW8uZG9CaWRpUmVvcmRlcihlKX1dKX0obHQpLHdpbmRvdy50bXA9X3QsRnQucHJvdG90eXBlLnBhcnNlSGVhZGVyPWZ1bmN0aW9uKCl7aWYodGhpcy5maWxlU2l6ZT10aGlzLmRhdGF2LmdldFVpbnQzMih0aGlzLnBvcywhMCksdGhpcy5wb3MrPTQsdGhpcy5yZXNlcnZlZD10aGlzLmRhdGF2LmdldFVpbnQzMih0aGlzLnBvcywhMCksdGhpcy5wb3MrPTQsdGhpcy5vZmZzZXQ9dGhpcy5kYXRhdi5nZXRVaW50MzIodGhpcy5wb3MsITApLHRoaXMucG9zKz00LHRoaXMuaGVhZGVyU2l6ZT10aGlzLmRhdGF2LmdldFVpbnQzMih0aGlzLnBvcywhMCksdGhpcy5wb3MrPTQsdGhpcy53aWR0aD10aGlzLmRhdGF2LmdldFVpbnQzMih0aGlzLnBvcywhMCksdGhpcy5wb3MrPTQsdGhpcy5oZWlnaHQ9dGhpcy5kYXRhdi5nZXRJbnQzMih0aGlzLnBvcywhMCksdGhpcy5wb3MrPTQsdGhpcy5wbGFuZXM9dGhpcy5kYXRhdi5nZXRVaW50MTYodGhpcy5wb3MsITApLHRoaXMucG9zKz0yLHRoaXMuYml0UFA9dGhpcy5kYXRhdi5nZXRVaW50MTYodGhpcy5wb3MsITApLHRoaXMucG9zKz0yLHRoaXMuY29tcHJlc3M9dGhpcy5kYXRhdi5nZXRVaW50MzIodGhpcy5wb3MsITApLHRoaXMucG9zKz00LHRoaXMucmF3U2l6ZT10aGlzLmRhdGF2LmdldFVpbnQzMih0aGlzLnBvcywhMCksdGhpcy5wb3MrPTQsdGhpcy5ocj10aGlzLmRhdGF2LmdldFVpbnQzMih0aGlzLnBvcywhMCksdGhpcy5wb3MrPTQsdGhpcy52cj10aGlzLmRhdGF2LmdldFVpbnQzMih0aGlzLnBvcywhMCksdGhpcy5wb3MrPTQsdGhpcy5jb2xvcnM9dGhpcy5kYXRhdi5nZXRVaW50MzIodGhpcy5wb3MsITApLHRoaXMucG9zKz00LHRoaXMuaW1wb3J0YW50Q29sb3JzPXRoaXMuZGF0YXYuZ2V0VWludDMyKHRoaXMucG9zLCEwKSx0aGlzLnBvcys9NCwxNj09PXRoaXMuYml0UFAmJnRoaXMuaXNfd2l0aF9hbHBoYSYmKHRoaXMuYml0UFA9MTUpLHRoaXMuYml0UFA8MTUpe3ZhciB0PTA9PT10aGlzLmNvbG9ycz8xPDx0aGlzLmJpdFBQOnRoaXMuY29sb3JzO3RoaXMucGFsZXR0ZT1uZXcgQXJyYXkodCk7Zm9yKHZhciBlPTA7ZTx0O2UrKyl7dmFyIG49dGhpcy5kYXRhdi5nZXRVaW50OCh0aGlzLnBvcysrLCEwKSxyPXRoaXMuZGF0YXYuZ2V0VWludDgodGhpcy5wb3MrKywhMCksaT10aGlzLmRhdGF2LmdldFVpbnQ4KHRoaXMucG9zKyssITApLG89dGhpcy5kYXRhdi5nZXRVaW50OCh0aGlzLnBvcysrLCEwKTt0aGlzLnBhbGV0dGVbZV09e3JlZDppLGdyZWVuOnIsYmx1ZTpuLHF1YWQ6b319fXRoaXMuaGVpZ2h0PDAmJih0aGlzLmhlaWdodCo9LTEsdGhpcy5ib3R0b21fdXA9ITEpfSxGdC5wcm90b3R5cGUucGFyc2VCR1I9ZnVuY3Rpb24oKXt0aGlzLnBvcz10aGlzLm9mZnNldDt0cnl7dmFyIHQ9XCJiaXRcIit0aGlzLmJpdFBQLGU9dGhpcy53aWR0aCp0aGlzLmhlaWdodCo0O3RoaXMuZGF0YT1uZXcgVWludDhBcnJheShlKSx0aGlzW3RdKCl9Y2F0Y2godCl7Y29uc29sZS5sb2coXCJiaXQgZGVjb2RlIGVycm9yOlwiK3QpfX0sRnQucHJvdG90eXBlLmJpdDE9ZnVuY3Rpb24oKXt2YXIgdD1NYXRoLmNlaWwodGhpcy53aWR0aC84KSxlPXQlNCxuPTA8PXRoaXMuaGVpZ2h0P3RoaXMuaGVpZ2h0LTE6LXRoaXMuaGVpZ2h0O2ZvcihuPXRoaXMuaGVpZ2h0LTE7MDw9bjtuLS0pe2Zvcih2YXIgcj10aGlzLmJvdHRvbV91cD9uOnRoaXMuaGVpZ2h0LTEtbixpPTA7aTx0O2krKylmb3IodmFyIG89dGhpcy5kYXRhdi5nZXRVaW50OCh0aGlzLnBvcysrLCEwKSxhPXIqdGhpcy53aWR0aCo0KzgqaSo0LHM9MDtzPDgmJjgqaStzPHRoaXMud2lkdGg7cysrKXt2YXIgbD10aGlzLnBhbGV0dGVbbz4+Ny1zJjFdO3RoaXMuZGF0YVthKzQqc109bC5ibHVlLHRoaXMuZGF0YVthKzQqcysxXT1sLmdyZWVuLHRoaXMuZGF0YVthKzQqcysyXT1sLnJlZCx0aGlzLmRhdGFbYSs0KnMrM109MjU1fTAhPWUmJih0aGlzLnBvcys9NC1lKX19LEZ0LnByb3RvdHlwZS5iaXQ0PWZ1bmN0aW9uKCl7Zm9yKHZhciB0PU1hdGguY2VpbCh0aGlzLndpZHRoLzIpLGU9dCU0LG49dGhpcy5oZWlnaHQtMTswPD1uO24tLSl7Zm9yKHZhciByPXRoaXMuYm90dG9tX3VwP246dGhpcy5oZWlnaHQtMS1uLGk9MDtpPHQ7aSsrKXt2YXIgbz10aGlzLmRhdGF2LmdldFVpbnQ4KHRoaXMucG9zKyssITApLGE9cip0aGlzLndpZHRoKjQrMippKjQscz1vPj40LGw9MTUmbyxoPXRoaXMucGFsZXR0ZVtzXTtpZih0aGlzLmRhdGFbYV09aC5ibHVlLHRoaXMuZGF0YVthKzFdPWguZ3JlZW4sdGhpcy5kYXRhW2ErMl09aC5yZWQsdGhpcy5kYXRhW2ErM109MjU1LDIqaSsxPj10aGlzLndpZHRoKWJyZWFrO2g9dGhpcy5wYWxldHRlW2xdLHRoaXMuZGF0YVthKzRdPWguYmx1ZSx0aGlzLmRhdGFbYSs0KzFdPWguZ3JlZW4sdGhpcy5kYXRhW2ErNCsyXT1oLnJlZCx0aGlzLmRhdGFbYSs0KzNdPTI1NX0wIT1lJiYodGhpcy5wb3MrPTQtZSl9fSxGdC5wcm90b3R5cGUuYml0OD1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLndpZHRoJTQsZT10aGlzLmhlaWdodC0xOzA8PWU7ZS0tKXtmb3IodmFyIG49dGhpcy5ib3R0b21fdXA/ZTp0aGlzLmhlaWdodC0xLWUscj0wO3I8dGhpcy53aWR0aDtyKyspe3ZhciBpPXRoaXMuZGF0YXYuZ2V0VWludDgodGhpcy5wb3MrKywhMCksbz1uKnRoaXMud2lkdGgqNCs0KnI7aWYoaTx0aGlzLnBhbGV0dGUubGVuZ3RoKXt2YXIgYT10aGlzLnBhbGV0dGVbaV07dGhpcy5kYXRhW29dPWEucmVkLHRoaXMuZGF0YVtvKzFdPWEuZ3JlZW4sdGhpcy5kYXRhW28rMl09YS5ibHVlLHRoaXMuZGF0YVtvKzNdPTI1NX1lbHNlIHRoaXMuZGF0YVtvXT0yNTUsdGhpcy5kYXRhW28rMV09MjU1LHRoaXMuZGF0YVtvKzJdPTI1NSx0aGlzLmRhdGFbbyszXT0yNTV9MCE9dCYmKHRoaXMucG9zKz00LXQpfX0sRnQucHJvdG90eXBlLmJpdDE1PWZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMud2lkdGglMyxlPXBhcnNlSW50KFwiMTExMTFcIiwyKSxuPXRoaXMuaGVpZ2h0LTE7MDw9bjtuLS0pe2Zvcih2YXIgcj10aGlzLmJvdHRvbV91cD9uOnRoaXMuaGVpZ2h0LTEtbixpPTA7aTx0aGlzLndpZHRoO2krKyl7dmFyIG89dGhpcy5kYXRhdi5nZXRVaW50MTYodGhpcy5wb3MsITApO3RoaXMucG9zKz0yO3ZhciBhPShvJmUpL2UqMjU1fDAscz0obz4+NSZlKS9lKjI1NXwwLGw9KG8+PjEwJmUpL2UqMjU1fDAsaD1vPj4xNT8yNTU6MCx1PXIqdGhpcy53aWR0aCo0KzQqaTt0aGlzLmRhdGFbdV09bCx0aGlzLmRhdGFbdSsxXT1zLHRoaXMuZGF0YVt1KzJdPWEsdGhpcy5kYXRhW3UrM109aH10aGlzLnBvcys9dH19LEZ0LnByb3RvdHlwZS5iaXQxNj1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLndpZHRoJTMsZT1wYXJzZUludChcIjExMTExXCIsMiksbj1wYXJzZUludChcIjExMTExMVwiLDIpLHI9dGhpcy5oZWlnaHQtMTswPD1yO3ItLSl7Zm9yKHZhciBpPXRoaXMuYm90dG9tX3VwP3I6dGhpcy5oZWlnaHQtMS1yLG89MDtvPHRoaXMud2lkdGg7bysrKXt2YXIgYT10aGlzLmRhdGF2LmdldFVpbnQxNih0aGlzLnBvcywhMCk7dGhpcy5wb3MrPTI7dmFyIHM9KGEmZSkvZSoyNTV8MCxsPShhPj41Jm4pL24qMjU1fDAsaD0oYT4+MTEpL2UqMjU1fDAsdT1pKnRoaXMud2lkdGgqNCs0Km87dGhpcy5kYXRhW3VdPWgsdGhpcy5kYXRhW3UrMV09bCx0aGlzLmRhdGFbdSsyXT1zLHRoaXMuZGF0YVt1KzNdPTI1NX10aGlzLnBvcys9dH19LEZ0LnByb3RvdHlwZS5iaXQyND1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLmhlaWdodC0xOzA8PXQ7dC0tKXtmb3IodmFyIGU9dGhpcy5ib3R0b21fdXA/dDp0aGlzLmhlaWdodC0xLXQsbj0wO248dGhpcy53aWR0aDtuKyspe3ZhciByPXRoaXMuZGF0YXYuZ2V0VWludDgodGhpcy5wb3MrKywhMCksaT10aGlzLmRhdGF2LmdldFVpbnQ4KHRoaXMucG9zKyssITApLG89dGhpcy5kYXRhdi5nZXRVaW50OCh0aGlzLnBvcysrLCEwKSxhPWUqdGhpcy53aWR0aCo0KzQqbjt0aGlzLmRhdGFbYV09byx0aGlzLmRhdGFbYSsxXT1pLHRoaXMuZGF0YVthKzJdPXIsdGhpcy5kYXRhW2ErM109MjU1fXRoaXMucG9zKz10aGlzLndpZHRoJTR9fSxGdC5wcm90b3R5cGUuYml0MzI9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5oZWlnaHQtMTswPD10O3QtLSlmb3IodmFyIGU9dGhpcy5ib3R0b21fdXA/dDp0aGlzLmhlaWdodC0xLXQsbj0wO248dGhpcy53aWR0aDtuKyspe3ZhciByPXRoaXMuZGF0YXYuZ2V0VWludDgodGhpcy5wb3MrKywhMCksaT10aGlzLmRhdGF2LmdldFVpbnQ4KHRoaXMucG9zKyssITApLG89dGhpcy5kYXRhdi5nZXRVaW50OCh0aGlzLnBvcysrLCEwKSxhPXRoaXMuZGF0YXYuZ2V0VWludDgodGhpcy5wb3MrKywhMCkscz1lKnRoaXMud2lkdGgqNCs0Km47dGhpcy5kYXRhW3NdPW8sdGhpcy5kYXRhW3MrMV09aSx0aGlzLmRhdGFbcysyXT1yLHRoaXMuZGF0YVtzKzNdPWF9fSxGdC5wcm90b3R5cGUuZ2V0RGF0YT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGF9LHdpbmRvdy50bXA9RnQsXHJcbi8qXHJcbiAgIENvcHlyaWdodCAoYykgMjAxMyBHaWxkYXMgTG9ybWVhdS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuXHJcbiAgIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxyXG4gICBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcclxuXHJcbiAgIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcclxuICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cclxuXHJcbiAgIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IFxyXG4gICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gXHJcbiAgIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxyXG5cclxuICAgMy4gVGhlIG5hbWVzIG9mIHRoZSBhdXRob3JzIG1heSBub3QgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHNcclxuICAgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXHJcblxyXG4gICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIGBgQVMgSVMnJyBBTkQgQU5ZIEVYUFJFU1NFRCBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsXHJcbiAgIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkRcclxuICAgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIEpDUkFGVCxcclxuICAgSU5DLiBPUiBBTlkgQ09OVFJJQlVUT1JTIFRPIFRISVMgU09GVFdBUkUgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCxcclxuICAgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxyXG4gICBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSxcclxuICAgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxyXG4gICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xyXG4gICBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsXHJcbiAgIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXHJcbiAgICovXHJcbmZ1bmN0aW9uKHQpe3ZhciBkPTE1LGc9NTczLGU9WzAsMSwyLDMsNCw0LDUsNSw2LDYsNiw2LDcsNyw3LDcsOCw4LDgsOCw4LDgsOCw4LDksOSw5LDksOSw5LDksOSwxMCwxMCwxMCwxMCwxMCwxMCwxMCwxMCwxMCwxMCwxMCwxMCwxMCwxMCwxMCwxMCwxMSwxMSwxMSwxMSwxMSwxMSwxMSwxMSwxMSwxMSwxMSwxMSwxMSwxMSwxMSwxMSwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMiwxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxMywxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNCwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwxNSwwLDAsMTYsMTcsMTgsMTgsMTksMTksMjAsMjAsMjAsMjAsMjEsMjEsMjEsMjEsMjIsMjIsMjIsMjIsMjIsMjIsMjIsMjIsMjMsMjMsMjMsMjMsMjMsMjMsMjMsMjMsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjgsMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjksMjldO2Z1bmN0aW9uIGN0KCl7dmFyIHA9dGhpcztmdW5jdGlvbiBsKHQsZSl7Zm9yKHZhciBuPTA7bnw9MSZ0LHQ+Pj49MSxuPDw9MSwwPC0tZTspO3JldHVybiBuPj4+MX1wLmJ1aWxkX3RyZWU9ZnVuY3Rpb24odCl7dmFyIGUsbixyLGk9cC5keW5fdHJlZSxvPXAuc3RhdF9kZXNjLnN0YXRpY190cmVlLGE9cC5zdGF0X2Rlc2MuZWxlbXMscz0tMTtmb3IodC5oZWFwX2xlbj0wLHQuaGVhcF9tYXg9ZyxlPTA7ZTxhO2UrKykwIT09aVsyKmVdPyh0LmhlYXBbKyt0LmhlYXBfbGVuXT1zPWUsdC5kZXB0aFtlXT0wKTppWzIqZSsxXT0wO2Zvcig7dC5oZWFwX2xlbjwyOylpWzIqKHI9dC5oZWFwWysrdC5oZWFwX2xlbl09czwyPysrczowKV09MSx0LmRlcHRoW3JdPTAsdC5vcHRfbGVuLS0sbyYmKHQuc3RhdGljX2xlbi09b1syKnIrMV0pO2ZvcihwLm1heF9jb2RlPXMsZT1NYXRoLmZsb29yKHQuaGVhcF9sZW4vMik7MTw9ZTtlLS0pdC5wcWRvd25oZWFwKGksZSk7Zm9yKHI9YTtlPXQuaGVhcFsxXSx0LmhlYXBbMV09dC5oZWFwW3QuaGVhcF9sZW4tLV0sdC5wcWRvd25oZWFwKGksMSksbj10LmhlYXBbMV0sdC5oZWFwWy0tdC5oZWFwX21heF09ZSx0LmhlYXBbLS10LmhlYXBfbWF4XT1uLGlbMipyXT1pWzIqZV0raVsyKm5dLHQuZGVwdGhbcl09TWF0aC5tYXgodC5kZXB0aFtlXSx0LmRlcHRoW25dKSsxLGlbMiplKzFdPWlbMipuKzFdPXIsdC5oZWFwWzFdPXIrKyx0LnBxZG93bmhlYXAoaSwxKSwyPD10LmhlYXBfbGVuOyk7dC5oZWFwWy0tdC5oZWFwX21heF09dC5oZWFwWzFdLGZ1bmN0aW9uKHQpe3ZhciBlLG4scixpLG8sYSxzPXAuZHluX3RyZWUsbD1wLnN0YXRfZGVzYy5zdGF0aWNfdHJlZSxoPXAuc3RhdF9kZXNjLmV4dHJhX2JpdHMsdT1wLnN0YXRfZGVzYy5leHRyYV9iYXNlLGM9cC5zdGF0X2Rlc2MubWF4X2xlbmd0aCxmPTA7Zm9yKGk9MDtpPD1kO2krKyl0LmJsX2NvdW50W2ldPTA7Zm9yKHNbMip0LmhlYXBbdC5oZWFwX21heF0rMV09MCxlPXQuaGVhcF9tYXgrMTtlPGc7ZSsrKWM8KGk9c1syKnNbMioobj10LmhlYXBbZV0pKzFdKzFdKzEpJiYoaT1jLGYrKyksc1syKm4rMV09aSxuPnAubWF4X2NvZGV8fCh0LmJsX2NvdW50W2ldKyssbz0wLHU8PW4mJihvPWhbbi11XSksYT1zWzIqbl0sdC5vcHRfbGVuKz1hKihpK28pLGwmJih0LnN0YXRpY19sZW4rPWEqKGxbMipuKzFdK28pKSk7aWYoMCE9PWYpe2Rve2ZvcihpPWMtMTswPT09dC5ibF9jb3VudFtpXTspaS0tO3QuYmxfY291bnRbaV0tLSx0LmJsX2NvdW50W2krMV0rPTIsdC5ibF9jb3VudFtjXS0tLGYtPTJ9d2hpbGUoMDxmKTtmb3IoaT1jOzAhPT1pO2ktLSlmb3Iobj10LmJsX2NvdW50W2ldOzAhPT1uOykocj10LmhlYXBbLS1lXSk+cC5tYXhfY29kZXx8KHNbMipyKzFdIT1pJiYodC5vcHRfbGVuKz0oaS1zWzIqcisxXSkqc1syKnJdLHNbMipyKzFdPWkpLG4tLSl9fSh0KSxmdW5jdGlvbih0LGUsbil7dmFyIHIsaSxvLGE9W10scz0wO2ZvcihyPTE7cjw9ZDtyKyspYVtyXT1zPXMrbltyLTFdPDwxO2ZvcihpPTA7aTw9ZTtpKyspMCE9PShvPXRbMippKzFdKSYmKHRbMippXT1sKGFbb10rKyxvKSl9KGkscC5tYXhfY29kZSx0LmJsX2NvdW50KX19ZnVuY3Rpb24gZnQodCxlLG4scixpKXt0aGlzLnN0YXRpY190cmVlPXQsdGhpcy5leHRyYV9iaXRzPWUsdGhpcy5leHRyYV9iYXNlPW4sdGhpcy5lbGVtcz1yLHRoaXMubWF4X2xlbmd0aD1pfWN0Ll9sZW5ndGhfY29kZT1bMCwxLDIsMyw0LDUsNiw3LDgsOCw5LDksMTAsMTAsMTEsMTEsMTIsMTIsMTIsMTIsMTMsMTMsMTMsMTMsMTQsMTQsMTQsMTQsMTUsMTUsMTUsMTUsMTYsMTYsMTYsMTYsMTYsMTYsMTYsMTYsMTcsMTcsMTcsMTcsMTcsMTcsMTcsMTcsMTgsMTgsMTgsMTgsMTgsMTgsMTgsMTgsMTksMTksMTksMTksMTksMTksMTksMTksMjAsMjAsMjAsMjAsMjAsMjAsMjAsMjAsMjAsMjAsMjAsMjAsMjAsMjAsMjAsMjAsMjEsMjEsMjEsMjEsMjEsMjEsMjEsMjEsMjEsMjEsMjEsMjEsMjEsMjEsMjEsMjEsMjIsMjIsMjIsMjIsMjIsMjIsMjIsMjIsMjIsMjIsMjIsMjIsMjIsMjIsMjIsMjIsMjMsMjMsMjMsMjMsMjMsMjMsMjMsMjMsMjMsMjMsMjMsMjMsMjMsMjMsMjMsMjMsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjQsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjUsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjYsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjcsMjhdLGN0LmJhc2VfbGVuZ3RoPVswLDEsMiwzLDQsNSw2LDcsOCwxMCwxMiwxNCwxNiwyMCwyNCwyOCwzMiw0MCw0OCw1Niw2NCw4MCw5NiwxMTIsMTI4LDE2MCwxOTIsMjI0LDBdLGN0LmJhc2VfZGlzdD1bMCwxLDIsMyw0LDYsOCwxMiwxNiwyNCwzMiw0OCw2NCw5NiwxMjgsMTkyLDI1NiwzODQsNTEyLDc2OCwxMDI0LDE1MzYsMjA0OCwzMDcyLDQwOTYsNjE0NCw4MTkyLDEyMjg4LDE2Mzg0LDI0NTc2XSxjdC5kX2NvZGU9ZnVuY3Rpb24odCl7cmV0dXJuIHQ8MjU2P2VbdF06ZVsyNTYrKHQ+Pj43KV19LGN0LmV4dHJhX2xiaXRzPVswLDAsMCwwLDAsMCwwLDAsMSwxLDEsMSwyLDIsMiwyLDMsMywzLDMsNCw0LDQsNCw1LDUsNSw1LDBdLGN0LmV4dHJhX2RiaXRzPVswLDAsMCwwLDEsMSwyLDIsMywzLDQsNCw1LDUsNiw2LDcsNyw4LDgsOSw5LDEwLDEwLDExLDExLDEyLDEyLDEzLDEzXSxjdC5leHRyYV9ibGJpdHM9WzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMiwzLDddLGN0LmJsX29yZGVyPVsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XSxmdC5zdGF0aWNfbHRyZWU9WzEyLDgsMTQwLDgsNzYsOCwyMDQsOCw0NCw4LDE3Miw4LDEwOCw4LDIzNiw4LDI4LDgsMTU2LDgsOTIsOCwyMjAsOCw2MCw4LDE4OCw4LDEyNCw4LDI1Miw4LDIsOCwxMzAsOCw2Niw4LDE5NCw4LDM0LDgsMTYyLDgsOTgsOCwyMjYsOCwxOCw4LDE0Niw4LDgyLDgsMjEwLDgsNTAsOCwxNzgsOCwxMTQsOCwyNDIsOCwxMCw4LDEzOCw4LDc0LDgsMjAyLDgsNDIsOCwxNzAsOCwxMDYsOCwyMzQsOCwyNiw4LDE1NCw4LDkwLDgsMjE4LDgsNTgsOCwxODYsOCwxMjIsOCwyNTAsOCw2LDgsMTM0LDgsNzAsOCwxOTgsOCwzOCw4LDE2Niw4LDEwMiw4LDIzMCw4LDIyLDgsMTUwLDgsODYsOCwyMTQsOCw1NCw4LDE4Miw4LDExOCw4LDI0Niw4LDE0LDgsMTQyLDgsNzgsOCwyMDYsOCw0Niw4LDE3NCw4LDExMCw4LDIzOCw4LDMwLDgsMTU4LDgsOTQsOCwyMjIsOCw2Miw4LDE5MCw4LDEyNiw4LDI1NCw4LDEsOCwxMjksOCw2NSw4LDE5Myw4LDMzLDgsMTYxLDgsOTcsOCwyMjUsOCwxNyw4LDE0NSw4LDgxLDgsMjA5LDgsNDksOCwxNzcsOCwxMTMsOCwyNDEsOCw5LDgsMTM3LDgsNzMsOCwyMDEsOCw0MSw4LDE2OSw4LDEwNSw4LDIzMyw4LDI1LDgsMTUzLDgsODksOCwyMTcsOCw1Nyw4LDE4NSw4LDEyMSw4LDI0OSw4LDUsOCwxMzMsOCw2OSw4LDE5Nyw4LDM3LDgsMTY1LDgsMTAxLDgsMjI5LDgsMjEsOCwxNDksOCw4NSw4LDIxMyw4LDUzLDgsMTgxLDgsMTE3LDgsMjQ1LDgsMTMsOCwxNDEsOCw3Nyw4LDIwNSw4LDQ1LDgsMTczLDgsMTA5LDgsMjM3LDgsMjksOCwxNTcsOCw5Myw4LDIyMSw4LDYxLDgsMTg5LDgsMTI1LDgsMjUzLDgsMTksOSwyNzUsOSwxNDcsOSw0MDMsOSw4Myw5LDMzOSw5LDIxMSw5LDQ2Nyw5LDUxLDksMzA3LDksMTc5LDksNDM1LDksMTE1LDksMzcxLDksMjQzLDksNDk5LDksMTEsOSwyNjcsOSwxMzksOSwzOTUsOSw3NSw5LDMzMSw5LDIwMyw5LDQ1OSw5LDQzLDksMjk5LDksMTcxLDksNDI3LDksMTA3LDksMzYzLDksMjM1LDksNDkxLDksMjcsOSwyODMsOSwxNTUsOSw0MTEsOSw5MSw5LDM0Nyw5LDIxOSw5LDQ3NSw5LDU5LDksMzE1LDksMTg3LDksNDQzLDksMTIzLDksMzc5LDksMjUxLDksNTA3LDksNyw5LDI2Myw5LDEzNSw5LDM5MSw5LDcxLDksMzI3LDksMTk5LDksNDU1LDksMzksOSwyOTUsOSwxNjcsOSw0MjMsOSwxMDMsOSwzNTksOSwyMzEsOSw0ODcsOSwyMyw5LDI3OSw5LDE1MSw5LDQwNyw5LDg3LDksMzQzLDksMjE1LDksNDcxLDksNTUsOSwzMTEsOSwxODMsOSw0MzksOSwxMTksOSwzNzUsOSwyNDcsOSw1MDMsOSwxNSw5LDI3MSw5LDE0Myw5LDM5OSw5LDc5LDksMzM1LDksMjA3LDksNDYzLDksNDcsOSwzMDMsOSwxNzUsOSw0MzEsOSwxMTEsOSwzNjcsOSwyMzksOSw0OTUsOSwzMSw5LDI4Nyw5LDE1OSw5LDQxNSw5LDk1LDksMzUxLDksMjIzLDksNDc5LDksNjMsOSwzMTksOSwxOTEsOSw0NDcsOSwxMjcsOSwzODMsOSwyNTUsOSw1MTEsOSwwLDcsNjQsNywzMiw3LDk2LDcsMTYsNyw4MCw3LDQ4LDcsMTEyLDcsOCw3LDcyLDcsNDAsNywxMDQsNywyNCw3LDg4LDcsNTYsNywxMjAsNyw0LDcsNjgsNywzNiw3LDEwMCw3LDIwLDcsODQsNyw1Miw3LDExNiw3LDMsOCwxMzEsOCw2Nyw4LDE5NSw4LDM1LDgsMTYzLDgsOTksOCwyMjcsOF0sZnQuc3RhdGljX2R0cmVlPVswLDUsMTYsNSw4LDUsMjQsNSw0LDUsMjAsNSwxMiw1LDI4LDUsMiw1LDE4LDUsMTAsNSwyNiw1LDYsNSwyMiw1LDE0LDUsMzAsNSwxLDUsMTcsNSw5LDUsMjUsNSw1LDUsMjEsNSwxMyw1LDI5LDUsMyw1LDE5LDUsMTEsNSwyNyw1LDcsNSwyMyw1XSxmdC5zdGF0aWNfbF9kZXNjPW5ldyBmdChmdC5zdGF0aWNfbHRyZWUsY3QuZXh0cmFfbGJpdHMsMjU3LDI4NixkKSxmdC5zdGF0aWNfZF9kZXNjPW5ldyBmdChmdC5zdGF0aWNfZHRyZWUsY3QuZXh0cmFfZGJpdHMsMCwzMCxkKSxmdC5zdGF0aWNfYmxfZGVzYz1uZXcgZnQobnVsbCxjdC5leHRyYV9ibGJpdHMsMCwxOSw3KTtmdW5jdGlvbiBuKHQsZSxuLHIsaSl7dGhpcy5nb29kX2xlbmd0aD10LHRoaXMubWF4X2xhenk9ZSx0aGlzLm5pY2VfbGVuZ3RoPW4sdGhpcy5tYXhfY2hhaW49cix0aGlzLmZ1bmM9aX12YXIgcHQ9W25ldyBuKDAsMCwwLDAsMCksbmV3IG4oNCw0LDgsNCwxKSxuZXcgbig0LDUsMTYsOCwxKSxuZXcgbig0LDYsMzIsMzIsMSksbmV3IG4oNCw0LDE2LDE2LDIpLG5ldyBuKDgsMTYsMzIsMzIsMiksbmV3IG4oOCwxNiwxMjgsMTI4LDIpLG5ldyBuKDgsMzIsMTI4LDI1NiwyKSxuZXcgbigzMiwxMjgsMjU4LDEwMjQsMiksbmV3IG4oMzIsMjU4LDI1OCw0MDk2LDIpXSxkdD1bXCJuZWVkIGRpY3Rpb25hcnlcIixcInN0cmVhbSBlbmRcIixcIlwiLFwiXCIsXCJzdHJlYW0gZXJyb3JcIixcImRhdGEgZXJyb3JcIixcIlwiLFwiYnVmZmVyIGVycm9yXCIsXCJcIixcIlwiXTtmdW5jdGlvbiBndCh0LGUsbixyKXt2YXIgaT10WzIqZV0sbz10WzIqbl07cmV0dXJuIGk8b3x8aT09byYmcltlXTw9cltuXX1mdW5jdGlvbiByKCl7dmFyIGwsaCx1LGMsZixwLGQsZyxpLG0seSx2LHcsYSxiLHgsTixMLEEsUyxfLEYsUCxrLEksQyxCLGosRSxNLHMsTyxxLFQsUixELFUsbyx6LEgsVyxWPXRoaXMsRz1uZXcgY3QsWT1uZXcgY3QsSj1uZXcgY3Q7ZnVuY3Rpb24gWCgpe3ZhciB0O2Zvcih0PTA7dDwyODY7dCsrKXNbMip0XT0wO2Zvcih0PTA7dDwzMDt0KyspT1syKnRdPTA7Zm9yKHQ9MDt0PDE5O3QrKylxWzIqdF09MDtzWzUxMl09MSxWLm9wdF9sZW49Vi5zdGF0aWNfbGVuPTAsRD1vPTB9ZnVuY3Rpb24gSyh0LGUpe3ZhciBuLHIsaT0tMSxvPXRbMV0sYT0wLHM9NyxsPTQ7Zm9yKDA9PT1vJiYocz0xMzgsbD0zKSx0WzIqKGUrMSkrMV09NjU1MzUsbj0wO248PWU7bisrKXI9byxvPXRbMioobisxKSsxXSwrK2E8cyYmcj09b3x8KGE8bD9xWzIqcl0rPWE6MCE9PXI/KHIhPWkmJnFbMipyXSsrLHFbMzJdKyspOmE8PTEwP3FbMzRdKys6cVszNl0rKyxpPXIsbD0oYT0wKT09PW8/KHM9MTM4LDMpOnI9PW8/KHM9NiwzKToocz03LDQpKX1mdW5jdGlvbiBaKHQpe1YucGVuZGluZ19idWZbVi5wZW5kaW5nKytdPXR9ZnVuY3Rpb24gUSh0KXtaKDI1NSZ0KSxaKHQ+Pj44JjI1NSl9ZnVuY3Rpb24gJCh0LGUpe3ZhciBuLHI9ZTsxNi1yPFc/KFEoSHw9KG49dCk8PFcmNjU1MzUpLEg9bj4+PjE2LVcsVys9ci0xNik6KEh8PXQ8PFcmNjU1MzUsVys9cil9ZnVuY3Rpb24gdHQodCxlKXt2YXIgbj0yKnQ7JCg2NTUzNSZlW25dLDY1NTM1JmVbbisxXSl9ZnVuY3Rpb24gZXQodCxlKXt2YXIgbixyLGk9LTEsbz10WzFdLGE9MCxzPTcsbD00O2ZvcigwPT09byYmKHM9MTM4LGw9Myksbj0wO248PWU7bisrKWlmKHI9byxvPXRbMioobisxKSsxXSwhKCsrYTxzJiZyPT1vKSl7aWYoYTxsKWZvcig7dHQocixxKSwwIT0tLWE7KTtlbHNlIDAhPT1yPyhyIT1pJiYodHQocixxKSxhLS0pLHR0KDE2LHEpLCQoYS0zLDIpKTphPD0xMD8odHQoMTcscSksJChhLTMsMykpOih0dCgxOCxxKSwkKGEtMTEsNykpO2k9cixsPShhPTApPT09bz8ocz0xMzgsMyk6cj09bz8ocz02LDMpOihzPTcsNCl9fWZ1bmN0aW9uIG50KCl7MTY9PVc/KFEoSCksVz1IPTApOjg8PVcmJihaKDI1NSZIKSxIPj4+PTgsVy09OCl9ZnVuY3Rpb24gcnQodCxlKXt2YXIgbixyLGk7aWYoVi5wZW5kaW5nX2J1ZltVKzIqRF09dD4+PjgmMjU1LFYucGVuZGluZ19idWZbVSsyKkQrMV09MjU1JnQsVi5wZW5kaW5nX2J1ZltUK0RdPTI1NSZlLEQrKywwPT09dD9zWzIqZV0rKzoobysrLHQtLSxzWzIqKGN0Ll9sZW5ndGhfY29kZVtlXSsyNTYrMSldKyssT1syKmN0LmRfY29kZSh0KV0rKyksMD09KDgxOTEmRCkmJjI8Qil7Zm9yKG49OCpELHI9Xy1OLGk9MDtpPDMwO2krKyluKz1PWzIqaV0qKDUrY3QuZXh0cmFfZGJpdHNbaV0pO2lmKG4+Pj49MyxvPE1hdGguZmxvb3IoRC8yKSYmbjxNYXRoLmZsb29yKHIvMikpcmV0dXJuITB9cmV0dXJuIEQ9PVItMX1mdW5jdGlvbiBpdCh0LGUpe3ZhciBuLHIsaSxvLGE9MDtpZigwIT09RClmb3IoO249Vi5wZW5kaW5nX2J1ZltVKzIqYV08PDgmNjUyODB8MjU1JlYucGVuZGluZ19idWZbVSsyKmErMV0scj0yNTUmVi5wZW5kaW5nX2J1ZltUK2FdLGErKywwPT09bj90dChyLHQpOih0dCgoaT1jdC5fbGVuZ3RoX2NvZGVbcl0pKzI1NisxLHQpLDAhPT0obz1jdC5leHRyYV9sYml0c1tpXSkmJiQoci09Y3QuYmFzZV9sZW5ndGhbaV0sbyksdHQoaT1jdC5kX2NvZGUoLS1uKSxlKSwwIT09KG89Y3QuZXh0cmFfZGJpdHNbaV0pJiYkKG4tPWN0LmJhc2VfZGlzdFtpXSxvKSksYTxEOyk7dHQoMjU2LHQpLHo9dFs1MTNdfWZ1bmN0aW9uIG90KCl7ODxXP1EoSCk6MDxXJiZaKDI1NSZIKSxXPUg9MH1mdW5jdGlvbiBhdCh0LGUsbil7dmFyIHIsaSxvOyQoMCsobj8xOjApLDMpLHI9dCxpPWUsbz0hMCxvdCgpLHo9OCxvJiYoUShpKSxRKH5pKSksVi5wZW5kaW5nX2J1Zi5zZXQoZy5zdWJhcnJheShyLHIraSksVi5wZW5kaW5nKSxWLnBlbmRpbmcrPWl9ZnVuY3Rpb24gZSh0LGUsbil7dmFyIHIsaSxvPTA7MDxCPyhHLmJ1aWxkX3RyZWUoViksWS5idWlsZF90cmVlKFYpLG89ZnVuY3Rpb24oKXt2YXIgdDtmb3IoSyhzLEcubWF4X2NvZGUpLEsoTyxZLm1heF9jb2RlKSxKLmJ1aWxkX3RyZWUoViksdD0xODszPD10JiYwPT09cVsyKmN0LmJsX29yZGVyW3RdKzFdO3QtLSk7cmV0dXJuIFYub3B0X2xlbis9MyoodCsxKSs1KzUrNCx0fSgpLHI9Vi5vcHRfbGVuKzMrNz4+PjMsKGk9Vi5zdGF0aWNfbGVuKzMrNz4+PjMpPD1yJiYocj1pKSk6cj1pPWUrNSxlKzQ8PXImJi0xIT10P2F0KHQsZSxuKTppPT1yPygkKDIrKG4/MTowKSwzKSxpdChmdC5zdGF0aWNfbHRyZWUsZnQuc3RhdGljX2R0cmVlKSk6KCQoNCsobj8xOjApLDMpLGZ1bmN0aW9uKHQsZSxuKXt2YXIgcjtmb3IoJCh0LTI1Nyw1KSwkKGUtMSw1KSwkKG4tNCw0KSxyPTA7cjxuO3IrKykkKHFbMipjdC5ibF9vcmRlcltyXSsxXSwzKTtldChzLHQtMSksZXQoTyxlLTEpfShHLm1heF9jb2RlKzEsWS5tYXhfY29kZSsxLG8rMSksaXQocyxPKSksWCgpLG4mJm90KCl9ZnVuY3Rpb24gc3QodCl7ZSgwPD1OP046LTEsXy1OLHQpLE49XyxsLmZsdXNoX3BlbmRpbmcoKX1mdW5jdGlvbiBsdCgpe3ZhciB0LGUsbixyO2Rve2lmKDA9PT0ocj1pLVAtXykmJjA9PT1fJiYwPT09UClyPWY7ZWxzZSBpZigtMT09cilyLS07ZWxzZSBpZihmK2YtMjYyPD1fKXtmb3IoZy5zZXQoZy5zdWJhcnJheShmLGYrZiksMCksRi09ZixfLT1mLE4tPWYsbj10PXc7ZT02NTUzNSZ5Wy0tbl0seVtuXT1mPD1lP2UtZjowLDAhPS0tdDspO2ZvcihuPXQ9ZjtlPTY1NTM1Jm1bLS1uXSxtW25dPWY8PWU/ZS1mOjAsMCE9LS10Oyk7cis9Zn1pZigwPT09bC5hdmFpbF9pbilyZXR1cm47dD1sLnJlYWRfYnVmKGcsXytQLHIpLDM8PShQKz10KSYmKHY9KCh2PTI1NSZnW19dKTw8eF4yNTUmZ1tfKzFdKSZiKX13aGlsZShQPDI2MiYmMCE9PWwuYXZhaWxfaW4pfWZ1bmN0aW9uIGh0KHQpe3ZhciBlLG4scj1JLGk9XyxvPWssYT1mLTI2MjxfP18tKGYtMjYyKTowLHM9TSxsPWQsaD1fKzI1OCx1PWdbaStvLTFdLGM9Z1tpK29dO0U8PWsmJihyPj49MiksUDxzJiYocz1QKTtkb3tpZihnWyhlPXQpK29dPT1jJiZnW2Urby0xXT09dSYmZ1tlXT09Z1tpXSYmZ1srK2VdPT1nW2krMV0pe2krPTIsZSsrO2Rve313aGlsZShnWysraV09PWdbKytlXSYmZ1srK2ldPT1nWysrZV0mJmdbKytpXT09Z1srK2VdJiZnWysraV09PWdbKytlXSYmZ1srK2ldPT1nWysrZV0mJmdbKytpXT09Z1srK2VdJiZnWysraV09PWdbKytlXSYmZ1srK2ldPT1nWysrZV0mJmk8aCk7aWYobj0yNTgtKGgtaSksaT1oLTI1OCxvPG4pe2lmKEY9dCxzPD0obz1uKSlicmVhazt1PWdbaStvLTFdLGM9Z1tpK29dfX19d2hpbGUoKHQ9NjU1MzUmbVt0JmxdKT5hJiYwIT0tLXIpO3JldHVybiBvPD1QP286UH1mdW5jdGlvbiB1dCh0KXtyZXR1cm4gdC50b3RhbF9pbj10LnRvdGFsX291dD0wLHQubXNnPW51bGwsVi5wZW5kaW5nPTAsVi5wZW5kaW5nX291dD0wLGg9MTEzLGM9MCxHLmR5bl90cmVlPXMsRy5zdGF0X2Rlc2M9ZnQuc3RhdGljX2xfZGVzYyxZLmR5bl90cmVlPU8sWS5zdGF0X2Rlc2M9ZnQuc3RhdGljX2RfZGVzYyxKLmR5bl90cmVlPXEsSi5zdGF0X2Rlc2M9ZnQuc3RhdGljX2JsX2Rlc2MsVz1IPTAsej04LFgoKSxmdW5jdGlvbigpe3ZhciB0O2ZvcihpPTIqZix0PXlbdy0xXT0wO3Q8dy0xO3QrKyl5W3RdPTA7Qz1wdFtCXS5tYXhfbGF6eSxFPXB0W0JdLmdvb2RfbGVuZ3RoLE09cHRbQl0ubmljZV9sZW5ndGgsST1wdFtCXS5tYXhfY2hhaW4sTD1rPTIsdj1TPVA9Tj1fPTB9KCksMH1WLmRlcHRoPVtdLFYuYmxfY291bnQ9W10sVi5oZWFwPVtdLHM9W10sTz1bXSxxPVtdLFYucHFkb3duaGVhcD1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1WLmhlYXAscj1uW2VdLGk9ZTw8MTtpPD1WLmhlYXBfbGVuJiYoaTxWLmhlYXBfbGVuJiZndCh0LG5baSsxXSxuW2ldLFYuZGVwdGgpJiZpKyssIWd0KHQscixuW2ldLFYuZGVwdGgpKTspbltlXT1uW2ldLGU9aSxpPDw9MTtuW2VdPXJ9LFYuZGVmbGF0ZUluaXQ9ZnVuY3Rpb24odCxlLG4scixpLG8pe3JldHVybiByfHwocj04KSxpfHwoaT04KSxvfHwobz0wKSx0Lm1zZz1udWxsLC0xPT1lJiYoZT02KSxpPDF8fDk8aXx8OCE9cnx8bjw5fHwxNTxufHxlPDB8fDk8ZXx8bzwwfHwyPG8/LTI6KHQuZHN0YXRlPVYsZD0oZj0xPDwocD1uKSktMSxiPSh3PTE8PChhPWkrNykpLTEseD1NYXRoLmZsb29yKChhKzMtMSkvMyksZz1uZXcgVWludDhBcnJheSgyKmYpLG09W10seT1bXSxSPTE8PGkrNixWLnBlbmRpbmdfYnVmPW5ldyBVaW50OEFycmF5KDQqUiksdT00KlIsVT1NYXRoLmZsb29yKFIvMiksVD0zKlIsQj1lLGo9byx1dCh0KSl9LFYuZGVmbGF0ZUVuZD1mdW5jdGlvbigpe3JldHVybiA0MiE9aCYmMTEzIT1oJiY2NjYhPWg/LTI6KFYucGVuZGluZ19idWY9bnVsbCxnPW09eT1udWxsLFYuZHN0YXRlPW51bGwsMTEzPT1oPy0zOjApfSxWLmRlZmxhdGVQYXJhbXM9ZnVuY3Rpb24odCxlLG4pe3ZhciByPTA7cmV0dXJuLTE9PWUmJihlPTYpLGU8MHx8OTxlfHxuPDB8fDI8bj8tMjoocHRbQl0uZnVuYyE9cHRbZV0uZnVuYyYmMCE9PXQudG90YWxfaW4mJihyPXQuZGVmbGF0ZSgxKSksQiE9ZSYmKEM9cHRbQj1lXS5tYXhfbGF6eSxFPXB0W0JdLmdvb2RfbGVuZ3RoLE09cHRbQl0ubmljZV9sZW5ndGgsST1wdFtCXS5tYXhfY2hhaW4pLGo9bixyKX0sVi5kZWZsYXRlU2V0RGljdGlvbmFyeT1mdW5jdGlvbih0LGUsbil7dmFyIHIsaT1uLG89MDtpZighZXx8NDIhPWgpcmV0dXJuLTI7aWYoaTwzKXJldHVybiAwO2ZvcihmLTI2MjxpJiYobz1uLShpPWYtMjYyKSksZy5zZXQoZS5zdWJhcnJheShvLG8raSksMCksTj1fPWksdj0oKHY9MjU1JmdbMF0pPDx4XjI1NSZnWzFdKSZiLHI9MDtyPD1pLTM7cisrKXY9KHY8PHheMjU1JmdbcisyXSkmYixtW3ImZF09eVt2XSx5W3ZdPXI7cmV0dXJuIDB9LFYuZGVmbGF0ZT1mdW5jdGlvbih0LGUpe3ZhciBuLHIsaSxvLGEscztpZig0PGV8fGU8MClyZXR1cm4tMjtpZighdC5uZXh0X291dHx8IXQubmV4dF9pbiYmMCE9PXQuYXZhaWxfaW58fDY2Nj09aCYmNCE9ZSlyZXR1cm4gdC5tc2c9ZHRbNF0sLTI7aWYoMD09PXQuYXZhaWxfb3V0KXJldHVybiB0Lm1zZz1kdFs3XSwtNTtpZihsPXQsbz1jLGM9ZSw0Mj09aCYmKHI9OCsocC04PDw0KTw8OCwzPChpPShCLTEmMjU1KT4+MSkmJihpPTMpLHJ8PWk8PDYsMCE9PV8mJihyfD0zMiksaD0xMTMsWigocz1yKz0zMS1yJTMxKT4+OCYyNTUpLFooMjU1JnMpKSwwIT09Vi5wZW5kaW5nKXtpZihsLmZsdXNoX3BlbmRpbmcoKSwwPT09bC5hdmFpbF9vdXQpcmV0dXJuIGM9LTEsMH1lbHNlIGlmKDA9PT1sLmF2YWlsX2luJiZlPD1vJiY0IT1lKXJldHVybiBsLm1zZz1kdFs3XSwtNTtpZig2NjY9PWgmJjAhPT1sLmF2YWlsX2luKXJldHVybiB0Lm1zZz1kdFs3XSwtNTtpZigwIT09bC5hdmFpbF9pbnx8MCE9PVB8fDAhPWUmJjY2NiE9aCl7c3dpdGNoKGE9LTEscHRbQl0uZnVuYyl7Y2FzZSAwOmE9ZnVuY3Rpb24odCl7dmFyIGUsbj02NTUzNTtmb3IodS01PG4mJihuPXUtNSk7Oyl7aWYoUDw9MSl7aWYobHQoKSwwPT09UCYmMD09dClyZXR1cm4gMDtpZigwPT09UClicmVha31pZihfKz1QLGU9TituLCgoUD0wKT09PV98fGU8PV8pJiYoUD1fLWUsXz1lLHN0KCExKSwwPT09bC5hdmFpbF9vdXQpKXJldHVybiAwO2lmKGYtMjYyPD1fLU4mJihzdCghMSksMD09PWwuYXZhaWxfb3V0KSlyZXR1cm4gMH1yZXR1cm4gc3QoND09dCksMD09PWwuYXZhaWxfb3V0PzQ9PXQ/MjowOjQ9PXQ/MzoxfShlKTticmVhaztjYXNlIDE6YT1mdW5jdGlvbih0KXtmb3IodmFyIGUsbj0wOzspe2lmKFA8MjYyKXtpZihsdCgpLFA8MjYyJiYwPT10KXJldHVybiAwO2lmKDA9PT1QKWJyZWFrfWlmKDM8PVAmJih2PSh2PDx4XjI1NSZnW18rMl0pJmIsbj02NTUzNSZ5W3ZdLG1bXyZkXT15W3ZdLHlbdl09XyksMCE9PW4mJihfLW4mNjU1MzUpPD1mLTI2MiYmMiE9aiYmKEw9aHQobikpLDM8PUwpaWYoZT1ydChfLUYsTC0zKSxQLT1MLEw8PUMmJjM8PVApe2ZvcihMLS07dj0odjw8eF4yNTUmZ1srK18rMl0pJmIsbj02NTUzNSZ5W3ZdLG1bXyZkXT15W3ZdLHlbdl09XywwIT0tLUw7KTtfKyt9ZWxzZSBfKz1MLEw9MCx2PSgodj0yNTUmZ1tfXSk8PHheMjU1JmdbXysxXSkmYjtlbHNlIGU9cnQoMCwyNTUmZ1tfXSksUC0tLF8rKztpZihlJiYoc3QoITEpLDA9PT1sLmF2YWlsX291dCkpcmV0dXJuIDB9cmV0dXJuIHN0KDQ9PXQpLDA9PT1sLmF2YWlsX291dD80PT10PzI6MDo0PT10PzM6MX0oZSk7YnJlYWs7Y2FzZSAyOmE9ZnVuY3Rpb24odCl7Zm9yKHZhciBlLG4scj0wOzspe2lmKFA8MjYyKXtpZihsdCgpLFA8MjYyJiYwPT10KXJldHVybiAwO2lmKDA9PT1QKWJyZWFrfWlmKDM8PVAmJih2PSh2PDx4XjI1NSZnW18rMl0pJmIscj02NTUzNSZ5W3ZdLG1bXyZkXT15W3ZdLHlbdl09Xyksaz1MLEE9RixMPTIsMCE9PXImJms8QyYmKF8tciY2NTUzNSk8PWYtMjYyJiYoMiE9aiYmKEw9aHQocikpLEw8PTUmJigxPT1qfHwzPT1MJiY0MDk2PF8tRikmJihMPTIpKSwzPD1rJiZMPD1rKXtmb3Iobj1fK1AtMyxlPXJ0KF8tMS1BLGstMyksUC09ay0xLGstPTI7KytfPD1uJiYodj0odjw8eF4yNTUmZ1tfKzJdKSZiLHI9NjU1MzUmeVt2XSxtW18mZF09eVt2XSx5W3ZdPV8pLDAhPS0tazspO2lmKFM9MCxMPTIsXysrLGUmJihzdCghMSksMD09PWwuYXZhaWxfb3V0KSlyZXR1cm4gMH1lbHNlIGlmKDAhPT1TKXtpZigoZT1ydCgwLDI1NSZnW18tMV0pKSYmc3QoITEpLF8rKyxQLS0sMD09PWwuYXZhaWxfb3V0KXJldHVybiAwfWVsc2UgUz0xLF8rKyxQLS19cmV0dXJuIDAhPT1TJiYoZT1ydCgwLDI1NSZnW18tMV0pLFM9MCksc3QoND09dCksMD09PWwuYXZhaWxfb3V0PzQ9PXQ/MjowOjQ9PXQ/MzoxfShlKX1pZigyIT1hJiYzIT1hfHwoaD02NjYpLDA9PWF8fDI9PWEpcmV0dXJuIDA9PT1sLmF2YWlsX291dCYmKGM9LTEpLDA7aWYoMT09YSl7aWYoMT09ZSkkKDIsMyksdHQoMjU2LGZ0LnN0YXRpY19sdHJlZSksbnQoKSwxK3orMTAtVzw5JiYoJCgyLDMpLHR0KDI1NixmdC5zdGF0aWNfbHRyZWUpLG50KCkpLHo9NztlbHNlIGlmKGF0KDAsMCwhMSksMz09ZSlmb3Iobj0wO248dztuKyspeVtuXT0wO2lmKGwuZmx1c2hfcGVuZGluZygpLDA9PT1sLmF2YWlsX291dClyZXR1cm4gYz0tMSwwfX1yZXR1cm4gNCE9ZT8wOjF9fWZ1bmN0aW9uIGkoKXt0aGlzLm5leHRfaW5faW5kZXg9MCx0aGlzLm5leHRfb3V0X2luZGV4PTAsdGhpcy5hdmFpbF9pbj0wLHRoaXMudG90YWxfaW49MCx0aGlzLmF2YWlsX291dD0wLHRoaXMudG90YWxfb3V0PTB9aS5wcm90b3R5cGU9e2RlZmxhdGVJbml0OmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZHN0YXRlPW5ldyByLGV8fChlPWQpLHRoaXMuZHN0YXRlLmRlZmxhdGVJbml0KHRoaXMsdCxlKX0sZGVmbGF0ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kc3RhdGU/dGhpcy5kc3RhdGUuZGVmbGF0ZSh0aGlzLHQpOi0yfSxkZWZsYXRlRW5kOmZ1bmN0aW9uKCl7aWYoIXRoaXMuZHN0YXRlKXJldHVybi0yO3ZhciB0PXRoaXMuZHN0YXRlLmRlZmxhdGVFbmQoKTtyZXR1cm4gdGhpcy5kc3RhdGU9bnVsbCx0fSxkZWZsYXRlUGFyYW1zOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZHN0YXRlP3RoaXMuZHN0YXRlLmRlZmxhdGVQYXJhbXModGhpcyx0LGUpOi0yfSxkZWZsYXRlU2V0RGljdGlvbmFyeTpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmRzdGF0ZT90aGlzLmRzdGF0ZS5kZWZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLHQsZSk6LTJ9LHJlYWRfYnVmOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10aGlzLmF2YWlsX2luO3JldHVybiBuPHImJihyPW4pLDA9PT1yPzA6KHRoaXMuYXZhaWxfaW4tPXIsdC5zZXQodGhpcy5uZXh0X2luLnN1YmFycmF5KHRoaXMubmV4dF9pbl9pbmRleCx0aGlzLm5leHRfaW5faW5kZXgrciksZSksdGhpcy5uZXh0X2luX2luZGV4Kz1yLHRoaXMudG90YWxfaW4rPXIscil9LGZsdXNoX3BlbmRpbmc6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC5kc3RhdGUucGVuZGluZztlPnQuYXZhaWxfb3V0JiYoZT10LmF2YWlsX291dCksMCE9PWUmJih0Lm5leHRfb3V0LnNldCh0LmRzdGF0ZS5wZW5kaW5nX2J1Zi5zdWJhcnJheSh0LmRzdGF0ZS5wZW5kaW5nX291dCx0LmRzdGF0ZS5wZW5kaW5nX291dCtlKSx0Lm5leHRfb3V0X2luZGV4KSx0Lm5leHRfb3V0X2luZGV4Kz1lLHQuZHN0YXRlLnBlbmRpbmdfb3V0Kz1lLHQudG90YWxfb3V0Kz1lLHQuYXZhaWxfb3V0LT1lLHQuZHN0YXRlLnBlbmRpbmctPWUsMD09PXQuZHN0YXRlLnBlbmRpbmcmJih0LmRzdGF0ZS5wZW5kaW5nX291dD0wKSl9fTt2YXIgbz10LnppcHx8dDtvLkRlZmxhdGVyPW8uX2p6bGliX0RlZmxhdGVyPWZ1bmN0aW9uKHQpe3ZhciBzPW5ldyBpLGw9bmV3IFVpbnQ4QXJyYXkoNTEyKSxlPXQ/dC5sZXZlbDotMTt2b2lkIDA9PT1lJiYoZT0tMSkscy5kZWZsYXRlSW5pdChlKSxzLm5leHRfb3V0PWwsdGhpcy5hcHBlbmQ9ZnVuY3Rpb24odCxlKXt2YXIgbixyPVtdLGk9MCxvPTAsYT0wO2lmKHQubGVuZ3RoKXtzLm5leHRfaW5faW5kZXg9MCxzLm5leHRfaW49dCxzLmF2YWlsX2luPXQubGVuZ3RoO2Rve2lmKHMubmV4dF9vdXRfaW5kZXg9MCxzLmF2YWlsX291dD01MTIsMCE9cy5kZWZsYXRlKDApKXRocm93IG5ldyBFcnJvcihcImRlZmxhdGluZzogXCIrcy5tc2cpO3MubmV4dF9vdXRfaW5kZXgmJig1MTI9PXMubmV4dF9vdXRfaW5kZXg/ci5wdXNoKG5ldyBVaW50OEFycmF5KGwpKTpyLnB1c2gobmV3IFVpbnQ4QXJyYXkobC5zdWJhcnJheSgwLHMubmV4dF9vdXRfaW5kZXgpKSkpLGErPXMubmV4dF9vdXRfaW5kZXgsZSYmMDxzLm5leHRfaW5faW5kZXgmJnMubmV4dF9pbl9pbmRleCE9aSYmKGUocy5uZXh0X2luX2luZGV4KSxpPXMubmV4dF9pbl9pbmRleCl9d2hpbGUoMDxzLmF2YWlsX2lufHwwPT09cy5hdmFpbF9vdXQpO3JldHVybiBuPW5ldyBVaW50OEFycmF5KGEpLHIuZm9yRWFjaChmdW5jdGlvbih0KXtuLnNldCh0LG8pLG8rPXQubGVuZ3RofSksbn19LHRoaXMuZmx1c2g9ZnVuY3Rpb24oKXt2YXIgdCxlLG49W10scj0wLGk9MDtkb3tpZihzLm5leHRfb3V0X2luZGV4PTAscy5hdmFpbF9vdXQ9NTEyLDEhPSh0PXMuZGVmbGF0ZSg0KSkmJjAhPXQpdGhyb3cgbmV3IEVycm9yKFwiZGVmbGF0aW5nOiBcIitzLm1zZyk7MDw1MTItcy5hdmFpbF9vdXQmJm4ucHVzaChuZXcgVWludDhBcnJheShsLnN1YmFycmF5KDAscy5uZXh0X291dF9pbmRleCkpKSxpKz1zLm5leHRfb3V0X2luZGV4fXdoaWxlKDA8cy5hdmFpbF9pbnx8MD09PXMuYXZhaWxfb3V0KTtyZXR1cm4gcy5kZWZsYXRlRW5kKCksZT1uZXcgVWludDhBcnJheShpKSxuLmZvckVhY2goZnVuY3Rpb24odCl7ZS5zZXQodCxyKSxyKz10Lmxlbmd0aH0pLGV9fX0oXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGZ8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvd3x8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbCYmZ2xvYmFsfHxGdW5jdGlvbigncmV0dXJuIHR5cGVvZiB0aGlzID09PSBcIm9iamVjdFwiICYmIHRoaXMuY29udGVudCcpKCl8fEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSksKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmfHxcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3d8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWwmJmdsb2JhbHx8RnVuY3Rpb24oJ3JldHVybiB0eXBlb2YgdGhpcyA9PT0gXCJvYmplY3RcIiAmJiB0aGlzLmNvbnRlbnQnKSgpfHxGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkpLlJHQkNvbG9yPWZ1bmN0aW9uKHQpe3ZhciBlO3Q9dHx8XCJcIix0aGlzLm9rPSExLFwiI1wiPT10LmNoYXJBdCgwKSYmKHQ9dC5zdWJzdHIoMSw2KSksdD0odD10LnJlcGxhY2UoLyAvZyxcIlwiKSkudG9Mb3dlckNhc2UoKTt2YXIgbj17YWxpY2VibHVlOlwiZjBmOGZmXCIsYW50aXF1ZXdoaXRlOlwiZmFlYmQ3XCIsYXF1YTpcIjAwZmZmZlwiLGFxdWFtYXJpbmU6XCI3ZmZmZDRcIixhenVyZTpcImYwZmZmZlwiLGJlaWdlOlwiZjVmNWRjXCIsYmlzcXVlOlwiZmZlNGM0XCIsYmxhY2s6XCIwMDAwMDBcIixibGFuY2hlZGFsbW9uZDpcImZmZWJjZFwiLGJsdWU6XCIwMDAwZmZcIixibHVldmlvbGV0OlwiOGEyYmUyXCIsYnJvd246XCJhNTJhMmFcIixidXJseXdvb2Q6XCJkZWI4ODdcIixjYWRldGJsdWU6XCI1ZjllYTBcIixjaGFydHJldXNlOlwiN2ZmZjAwXCIsY2hvY29sYXRlOlwiZDI2OTFlXCIsY29yYWw6XCJmZjdmNTBcIixjb3JuZmxvd2VyYmx1ZTpcIjY0OTVlZFwiLGNvcm5zaWxrOlwiZmZmOGRjXCIsY3JpbXNvbjpcImRjMTQzY1wiLGN5YW46XCIwMGZmZmZcIixkYXJrYmx1ZTpcIjAwMDA4YlwiLGRhcmtjeWFuOlwiMDA4YjhiXCIsZGFya2dvbGRlbnJvZDpcImI4ODYwYlwiLGRhcmtncmF5OlwiYTlhOWE5XCIsZGFya2dyZWVuOlwiMDA2NDAwXCIsZGFya2toYWtpOlwiYmRiNzZiXCIsZGFya21hZ2VudGE6XCI4YjAwOGJcIixkYXJrb2xpdmVncmVlbjpcIjU1NmIyZlwiLGRhcmtvcmFuZ2U6XCJmZjhjMDBcIixkYXJrb3JjaGlkOlwiOTkzMmNjXCIsZGFya3JlZDpcIjhiMDAwMFwiLGRhcmtzYWxtb246XCJlOTk2N2FcIixkYXJrc2VhZ3JlZW46XCI4ZmJjOGZcIixkYXJrc2xhdGVibHVlOlwiNDgzZDhiXCIsZGFya3NsYXRlZ3JheTpcIjJmNGY0ZlwiLGRhcmt0dXJxdW9pc2U6XCIwMGNlZDFcIixkYXJrdmlvbGV0OlwiOTQwMGQzXCIsZGVlcHBpbms6XCJmZjE0OTNcIixkZWVwc2t5Ymx1ZTpcIjAwYmZmZlwiLGRpbWdyYXk6XCI2OTY5NjlcIixkb2RnZXJibHVlOlwiMWU5MGZmXCIsZmVsZHNwYXI6XCJkMTkyNzVcIixmaXJlYnJpY2s6XCJiMjIyMjJcIixmbG9yYWx3aGl0ZTpcImZmZmFmMFwiLGZvcmVzdGdyZWVuOlwiMjI4YjIyXCIsZnVjaHNpYTpcImZmMDBmZlwiLGdhaW5zYm9ybzpcImRjZGNkY1wiLGdob3N0d2hpdGU6XCJmOGY4ZmZcIixnb2xkOlwiZmZkNzAwXCIsZ29sZGVucm9kOlwiZGFhNTIwXCIsZ3JheTpcIjgwODA4MFwiLGdyZWVuOlwiMDA4MDAwXCIsZ3JlZW55ZWxsb3c6XCJhZGZmMmZcIixob25leWRldzpcImYwZmZmMFwiLGhvdHBpbms6XCJmZjY5YjRcIixpbmRpYW5yZWQ6XCJjZDVjNWNcIixpbmRpZ286XCI0YjAwODJcIixpdm9yeTpcImZmZmZmMFwiLGtoYWtpOlwiZjBlNjhjXCIsbGF2ZW5kZXI6XCJlNmU2ZmFcIixsYXZlbmRlcmJsdXNoOlwiZmZmMGY1XCIsbGF3bmdyZWVuOlwiN2NmYzAwXCIsbGVtb25jaGlmZm9uOlwiZmZmYWNkXCIsbGlnaHRibHVlOlwiYWRkOGU2XCIsbGlnaHRjb3JhbDpcImYwODA4MFwiLGxpZ2h0Y3lhbjpcImUwZmZmZlwiLGxpZ2h0Z29sZGVucm9keWVsbG93OlwiZmFmYWQyXCIsbGlnaHRncmV5OlwiZDNkM2QzXCIsbGlnaHRncmVlbjpcIjkwZWU5MFwiLGxpZ2h0cGluazpcImZmYjZjMVwiLGxpZ2h0c2FsbW9uOlwiZmZhMDdhXCIsbGlnaHRzZWFncmVlbjpcIjIwYjJhYVwiLGxpZ2h0c2t5Ymx1ZTpcIjg3Y2VmYVwiLGxpZ2h0c2xhdGVibHVlOlwiODQ3MGZmXCIsbGlnaHRzbGF0ZWdyYXk6XCI3Nzg4OTlcIixsaWdodHN0ZWVsYmx1ZTpcImIwYzRkZVwiLGxpZ2h0eWVsbG93OlwiZmZmZmUwXCIsbGltZTpcIjAwZmYwMFwiLGxpbWVncmVlbjpcIjMyY2QzMlwiLGxpbmVuOlwiZmFmMGU2XCIsbWFnZW50YTpcImZmMDBmZlwiLG1hcm9vbjpcIjgwMDAwMFwiLG1lZGl1bWFxdWFtYXJpbmU6XCI2NmNkYWFcIixtZWRpdW1ibHVlOlwiMDAwMGNkXCIsbWVkaXVtb3JjaGlkOlwiYmE1NWQzXCIsbWVkaXVtcHVycGxlOlwiOTM3MGQ4XCIsbWVkaXVtc2VhZ3JlZW46XCIzY2IzNzFcIixtZWRpdW1zbGF0ZWJsdWU6XCI3YjY4ZWVcIixtZWRpdW1zcHJpbmdncmVlbjpcIjAwZmE5YVwiLG1lZGl1bXR1cnF1b2lzZTpcIjQ4ZDFjY1wiLG1lZGl1bXZpb2xldHJlZDpcImM3MTU4NVwiLG1pZG5pZ2h0Ymx1ZTpcIjE5MTk3MFwiLG1pbnRjcmVhbTpcImY1ZmZmYVwiLG1pc3R5cm9zZTpcImZmZTRlMVwiLG1vY2Nhc2luOlwiZmZlNGI1XCIsbmF2YWpvd2hpdGU6XCJmZmRlYWRcIixuYXZ5OlwiMDAwMDgwXCIsb2xkbGFjZTpcImZkZjVlNlwiLG9saXZlOlwiODA4MDAwXCIsb2xpdmVkcmFiOlwiNmI4ZTIzXCIsb3JhbmdlOlwiZmZhNTAwXCIsb3JhbmdlcmVkOlwiZmY0NTAwXCIsb3JjaGlkOlwiZGE3MGQ2XCIscGFsZWdvbGRlbnJvZDpcImVlZThhYVwiLHBhbGVncmVlbjpcIjk4ZmI5OFwiLHBhbGV0dXJxdW9pc2U6XCJhZmVlZWVcIixwYWxldmlvbGV0cmVkOlwiZDg3MDkzXCIscGFwYXlhd2hpcDpcImZmZWZkNVwiLHBlYWNocHVmZjpcImZmZGFiOVwiLHBlcnU6XCJjZDg1M2ZcIixwaW5rOlwiZmZjMGNiXCIscGx1bTpcImRkYTBkZFwiLHBvd2RlcmJsdWU6XCJiMGUwZTZcIixwdXJwbGU6XCI4MDAwODBcIixyZWQ6XCJmZjAwMDBcIixyb3N5YnJvd246XCJiYzhmOGZcIixyb3lhbGJsdWU6XCI0MTY5ZTFcIixzYWRkbGVicm93bjpcIjhiNDUxM1wiLHNhbG1vbjpcImZhODA3MlwiLHNhbmR5YnJvd246XCJmNGE0NjBcIixzZWFncmVlbjpcIjJlOGI1N1wiLHNlYXNoZWxsOlwiZmZmNWVlXCIsc2llbm5hOlwiYTA1MjJkXCIsc2lsdmVyOlwiYzBjMGMwXCIsc2t5Ymx1ZTpcIjg3Y2VlYlwiLHNsYXRlYmx1ZTpcIjZhNWFjZFwiLHNsYXRlZ3JheTpcIjcwODA5MFwiLHNub3c6XCJmZmZhZmFcIixzcHJpbmdncmVlbjpcIjAwZmY3ZlwiLHN0ZWVsYmx1ZTpcIjQ2ODJiNFwiLHRhbjpcImQyYjQ4Y1wiLHRlYWw6XCIwMDgwODBcIix0aGlzdGxlOlwiZDhiZmQ4XCIsdG9tYXRvOlwiZmY2MzQ3XCIsdHVycXVvaXNlOlwiNDBlMGQwXCIsdmlvbGV0OlwiZWU4MmVlXCIsdmlvbGV0cmVkOlwiZDAyMDkwXCIsd2hlYXQ6XCJmNWRlYjNcIix3aGl0ZTpcImZmZmZmZlwiLHdoaXRlc21va2U6XCJmNWY1ZjVcIix5ZWxsb3c6XCJmZmZmMDBcIix5ZWxsb3dncmVlbjpcIjlhY2QzMlwifTtmb3IodmFyIHIgaW4gbil0PT1yJiYodD1uW3JdKTtmb3IodmFyIGk9W3tyZTovXnJnYlxcKChcXGR7MSwzfSksXFxzKihcXGR7MSwzfSksXFxzKihcXGR7MSwzfSlcXCkkLyxleGFtcGxlOltcInJnYigxMjMsIDIzNCwgNDUpXCIsXCJyZ2IoMjU1LDIzNCwyNDUpXCJdLHByb2Nlc3M6ZnVuY3Rpb24odCl7cmV0dXJuW3BhcnNlSW50KHRbMV0pLHBhcnNlSW50KHRbMl0pLHBhcnNlSW50KHRbM10pXX19LHtyZTovXihcXHd7Mn0pKFxcd3syfSkoXFx3ezJ9KSQvLGV4YW1wbGU6W1wiIzAwZmYwMFwiLFwiMzM2Njk5XCJdLHByb2Nlc3M6ZnVuY3Rpb24odCl7cmV0dXJuW3BhcnNlSW50KHRbMV0sMTYpLHBhcnNlSW50KHRbMl0sMTYpLHBhcnNlSW50KHRbM10sMTYpXX19LHtyZTovXihcXHd7MX0pKFxcd3sxfSkoXFx3ezF9KSQvLGV4YW1wbGU6W1wiI2ZiMFwiLFwiZjBmXCJdLHByb2Nlc3M6ZnVuY3Rpb24odCl7cmV0dXJuW3BhcnNlSW50KHRbMV0rdFsxXSwxNikscGFyc2VJbnQodFsyXSt0WzJdLDE2KSxwYXJzZUludCh0WzNdK3RbM10sMTYpXX19XSxvPTA7bzxpLmxlbmd0aDtvKyspe3ZhciBhPWlbb10ucmUscz1pW29dLnByb2Nlc3MsbD1hLmV4ZWModCk7bCYmKGU9cyhsKSx0aGlzLnI9ZVswXSx0aGlzLmc9ZVsxXSx0aGlzLmI9ZVsyXSx0aGlzLm9rPSEwKX10aGlzLnI9dGhpcy5yPDB8fGlzTmFOKHRoaXMucik/MDoyNTU8dGhpcy5yPzI1NTp0aGlzLnIsdGhpcy5nPXRoaXMuZzwwfHxpc05hTih0aGlzLmcpPzA6MjU1PHRoaXMuZz8yNTU6dGhpcy5nLHRoaXMuYj10aGlzLmI8MHx8aXNOYU4odGhpcy5iKT8wOjI1NTx0aGlzLmI/MjU1OnRoaXMuYix0aGlzLnRvUkdCPWZ1bmN0aW9uKCl7cmV0dXJuXCJyZ2IoXCIrdGhpcy5yK1wiLCBcIit0aGlzLmcrXCIsIFwiK3RoaXMuYitcIilcIn0sdGhpcy50b0hleD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuci50b1N0cmluZygxNiksZT10aGlzLmcudG9TdHJpbmcoMTYpLG49dGhpcy5iLnRvU3RyaW5nKDE2KTtyZXR1cm4gMT09dC5sZW5ndGgmJih0PVwiMFwiK3QpLDE9PWUubGVuZ3RoJiYoZT1cIjBcIitlKSwxPT1uLmxlbmd0aCYmKG49XCIwXCIrbiksXCIjXCIrdCtlK259fSxmdW5jdGlvbih0KXt2YXIgbj1cIitcIi5jaGFyQ29kZUF0KDApLHI9XCIvXCIuY2hhckNvZGVBdCgwKSxpPVwiMFwiLmNoYXJDb2RlQXQoMCksbz1cImFcIi5jaGFyQ29kZUF0KDApLGE9XCJBXCIuY2hhckNvZGVBdCgwKSxzPVwiLVwiLmNoYXJDb2RlQXQoMCksbD1cIl9cIi5jaGFyQ29kZUF0KDApLHU9ZnVuY3Rpb24odCl7dmFyIGU9dC5jaGFyQ29kZUF0KDApO3JldHVybiBlPT09bnx8ZT09PXM/NjI6ZT09PXJ8fGU9PT1sPzYzOmU8aT8tMTplPGkrMTA/ZS1pKzI2KzI2OmU8YSsyNj9lLWE6ZTxvKzI2P2UtbysyNjp2b2lkIDB9O3QuQVBJLlRURkZvbnQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBpKHQsZSxuKXt2YXIgcjtpZih0aGlzLnJhd0RhdGE9dCxyPXRoaXMuY29udGVudHM9bmV3IEoodCksdGhpcy5jb250ZW50cy5wb3M9NCxcInR0Y2ZcIj09PXIucmVhZFN0cmluZyg0KSl7aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwiTXVzdCBzcGVjaWZ5IGEgZm9udCBuYW1lIGZvciBUVEMgZmlsZXMuXCIpO3Rocm93IG5ldyBFcnJvcihcIkZvbnQgXCIrZStcIiBub3QgZm91bmQgaW4gVFRDIGZpbGUuXCIpfXIucG9zPTAsdGhpcy5wYXJzZSgpLHRoaXMuc3Vic2V0PW5ldyBQKHRoaXMpLHRoaXMucmVnaXN0ZXJUVEYoKX1yZXR1cm4gaS5vcGVuPWZ1bmN0aW9uKHQsZSxuLHIpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBuKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgaW4gVFRGRm9udC5vcGVuXCIpO3JldHVybiBuZXcgaShmdW5jdGlvbih0KXt2YXIgZSxuLHIsaSxvLGE7aWYoMDx0Lmxlbmd0aCU0KXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDRcIik7dmFyIHM9dC5sZW5ndGg7bz1cIj1cIj09PXQuY2hhckF0KHMtMik/MjpcIj1cIj09PXQuY2hhckF0KHMtMSk/MTowLGE9bmV3IFVpbnQ4QXJyYXkoMyp0Lmxlbmd0aC80LW8pLHI9MDxvP3QubGVuZ3RoLTQ6dC5sZW5ndGg7dmFyIGw9MDtmdW5jdGlvbiBoKHQpe2FbbCsrXT10fWZvcihuPWU9MDtlPHI7ZSs9NCxuKz0zKWgoKDE2NzExNjgwJihpPXUodC5jaGFyQXQoZSkpPDwxOHx1KHQuY2hhckF0KGUrMSkpPDwxMnx1KHQuY2hhckF0KGUrMikpPDw2fHUodC5jaGFyQXQoZSszKSkpKT4+MTYpLGgoKDY1MjgwJmkpPj44KSxoKDI1NSZpKTtyZXR1cm4gMj09PW8/aCgyNTUmKGk9dSh0LmNoYXJBdChlKSk8PDJ8dSh0LmNoYXJBdChlKzEpKT4+NCkpOjE9PT1vJiYoaCgoaT11KHQuY2hhckF0KGUpKTw8MTB8dSh0LmNoYXJBdChlKzEpKTw8NHx1KHQuY2hhckF0KGUrMikpPj4yKT4+OCYyNTUpLGgoMjU1JmkpKSxhfShuKSxlLHIpfSxpLnByb3RvdHlwZS5wYXJzZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmRpcmVjdG9yeT1uZXcgZSh0aGlzLmNvbnRlbnRzKSx0aGlzLmhlYWQ9bmV3IHAodGhpcyksdGhpcy5uYW1lPW5ldyBiKHRoaXMpLHRoaXMuY21hcD1uZXcgeSh0aGlzKSx0aGlzLnRvVW5pY29kZT1uZXcgTWFwLHRoaXMuaGhlYT1uZXcgZyh0aGlzKSx0aGlzLm1heHA9bmV3IHgodGhpcyksdGhpcy5obXR4PW5ldyBOKHRoaXMpLHRoaXMucG9zdD1uZXcgdih0aGlzKSx0aGlzLm9zMj1uZXcgbSh0aGlzKSx0aGlzLmxvY2E9bmV3IEYodGhpcyksdGhpcy5nbHlmPW5ldyBBKHRoaXMpLHRoaXMuYXNjZW5kZXI9dGhpcy5vczIuZXhpc3RzJiZ0aGlzLm9zMi5hc2NlbmRlcnx8dGhpcy5oaGVhLmFzY2VuZGVyLHRoaXMuZGVjZW5kZXI9dGhpcy5vczIuZXhpc3RzJiZ0aGlzLm9zMi5kZWNlbmRlcnx8dGhpcy5oaGVhLmRlY2VuZGVyLHRoaXMubGluZUdhcD10aGlzLm9zMi5leGlzdHMmJnRoaXMub3MyLmxpbmVHYXB8fHRoaXMuaGhlYS5saW5lR2FwLHRoaXMuYmJveD1bdGhpcy5oZWFkLnhNaW4sdGhpcy5oZWFkLnlNaW4sdGhpcy5oZWFkLnhNYXgsdGhpcy5oZWFkLnlNYXhdfSxpLnByb3RvdHlwZS5yZWdpc3RlclRURj1mdW5jdGlvbigpe3ZhciBpLHQsZSxuLHI7aWYodGhpcy5zY2FsZUZhY3Rvcj0xZTMvdGhpcy5oZWFkLnVuaXRzUGVyRW0sdGhpcy5iYm94PWZ1bmN0aW9uKCl7dmFyIHQsZSxuLHI7Zm9yKHI9W10sdD0wLGU9KG49dGhpcy5iYm94KS5sZW5ndGg7dDxlO3QrKylpPW5bdF0sci5wdXNoKE1hdGgucm91bmQoaSp0aGlzLnNjYWxlRmFjdG9yKSk7cmV0dXJuIHJ9LmNhbGwodGhpcyksdGhpcy5zdGVtVj0wLHRoaXMucG9zdC5leGlzdHM/KGU9MjU1JihuPXRoaXMucG9zdC5pdGFsaWNfYW5nbGUpLCEwJih0PW4+PjE2KSYmKHQ9LSgxKyg2NTUzNV50KSkpLHRoaXMuaXRhbGljQW5nbGU9Kyh0K1wiLlwiK2UpKTp0aGlzLml0YWxpY0FuZ2xlPTAsdGhpcy5hc2NlbmRlcj1NYXRoLnJvdW5kKHRoaXMuYXNjZW5kZXIqdGhpcy5zY2FsZUZhY3RvciksdGhpcy5kZWNlbmRlcj1NYXRoLnJvdW5kKHRoaXMuZGVjZW5kZXIqdGhpcy5zY2FsZUZhY3RvciksdGhpcy5saW5lR2FwPU1hdGgucm91bmQodGhpcy5saW5lR2FwKnRoaXMuc2NhbGVGYWN0b3IpLHRoaXMuY2FwSGVpZ2h0PXRoaXMub3MyLmV4aXN0cyYmdGhpcy5vczIuY2FwSGVpZ2h0fHx0aGlzLmFzY2VuZGVyLHRoaXMueEhlaWdodD10aGlzLm9zMi5leGlzdHMmJnRoaXMub3MyLnhIZWlnaHR8fDAsdGhpcy5mYW1pbHlDbGFzcz0odGhpcy5vczIuZXhpc3RzJiZ0aGlzLm9zMi5mYW1pbHlDbGFzc3x8MCk+PjgsdGhpcy5pc1NlcmlmPTE9PT0ocj10aGlzLmZhbWlseUNsYXNzKXx8Mj09PXJ8fDM9PT1yfHw0PT09cnx8NT09PXJ8fDc9PT1yLHRoaXMuaXNTY3JpcHQ9MTA9PT10aGlzLmZhbWlseUNsYXNzLHRoaXMuZmxhZ3M9MCx0aGlzLnBvc3QuaXNGaXhlZFBpdGNoJiYodGhpcy5mbGFnc3w9MSksdGhpcy5pc1NlcmlmJiYodGhpcy5mbGFnc3w9MiksdGhpcy5pc1NjcmlwdCYmKHRoaXMuZmxhZ3N8PTgpLDAhPT10aGlzLml0YWxpY0FuZ2xlJiYodGhpcy5mbGFnc3w9NjQpLHRoaXMuZmxhZ3N8PTMyLCF0aGlzLmNtYXAudW5pY29kZSl0aHJvdyBuZXcgRXJyb3IoXCJObyB1bmljb2RlIGNtYXAgZm9yIGZvbnRcIil9LGkucHJvdG90eXBlLmNoYXJhY3RlclRvR2x5cGg9ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuKG51bGwhPShlPXRoaXMuY21hcC51bmljb2RlKT9lLmNvZGVNYXBbdF06dm9pZCAwKXx8MH0saS5wcm90b3R5cGUud2lkdGhPZkdseXBoPWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBlPTFlMy90aGlzLmhlYWQudW5pdHNQZXJFbSx0aGlzLmhtdHguZm9yR2x5cGgodCkuYWR2YW5jZSplfSxpLnByb3RvdHlwZS53aWR0aE9mU3RyaW5nPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcixpLG8sYSxzO2ZvcihpPWE9bz0wLHM9KHQ9XCJcIit0KS5sZW5ndGg7MDw9cz9hPHM6czxhO2k9MDw9cz8rK2E6LS1hKXI9dC5jaGFyQ29kZUF0KGkpLG8rPXRoaXMud2lkdGhPZkdseXBoKHRoaXMuY2hhcmFjdGVyVG9HbHlwaChyKSkrbiooMWUzL2UpfHwwO3JldHVybiBvKihlLzFlMyl9LGkucHJvdG90eXBlLmxpbmVIZWlnaHQ9ZnVuY3Rpb24odCxlKXt2YXIgbjtyZXR1cm4gbnVsbD09ZSYmKGU9ITEpLG49ZT90aGlzLmxpbmVHYXA6MCwodGhpcy5hc2NlbmRlcituLXRoaXMuZGVjZW5kZXIpLzFlMyp0fSxpfSgpO3ZhciBoLEo9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3RoaXMuZGF0YT1udWxsIT10P3Q6W10sdGhpcy5wb3M9MCx0aGlzLmxlbmd0aD10aGlzLmRhdGEubGVuZ3RofXJldHVybiB0LnByb3RvdHlwZS5yZWFkQnl0ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGFbdGhpcy5wb3MrK119LHQucHJvdG90eXBlLndyaXRlQnl0ZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kYXRhW3RoaXMucG9zKytdPXR9LHQucHJvdG90eXBlLnJlYWRVSW50MzI9ZnVuY3Rpb24oKXtyZXR1cm4gMTY3NzcyMTYqdGhpcy5yZWFkQnl0ZSgpKyh0aGlzLnJlYWRCeXRlKCk8PDE2KSsodGhpcy5yZWFkQnl0ZSgpPDw4KSt0aGlzLnJlYWRCeXRlKCl9LHQucHJvdG90eXBlLndyaXRlVUludDMyPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLndyaXRlQnl0ZSh0Pj4+MjQmMjU1KSx0aGlzLndyaXRlQnl0ZSh0Pj4xNiYyNTUpLHRoaXMud3JpdGVCeXRlKHQ+PjgmMjU1KSx0aGlzLndyaXRlQnl0ZSgyNTUmdCl9LHQucHJvdG90eXBlLnJlYWRJbnQzMj1mdW5jdGlvbigpe3ZhciB0O3JldHVybiAyMTQ3NDgzNjQ4PD0odD10aGlzLnJlYWRVSW50MzIoKSk/dC00Mjk0OTY3Mjk2OnR9LHQucHJvdG90eXBlLndyaXRlSW50MzI9ZnVuY3Rpb24odCl7cmV0dXJuIHQ8MCYmKHQrPTQyOTQ5NjcyOTYpLHRoaXMud3JpdGVVSW50MzIodCl9LHQucHJvdG90eXBlLnJlYWRVSW50MTY9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkQnl0ZSgpPDw4fHRoaXMucmVhZEJ5dGUoKX0sdC5wcm90b3R5cGUud3JpdGVVSW50MTY9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMud3JpdGVCeXRlKHQ+PjgmMjU1KSx0aGlzLndyaXRlQnl0ZSgyNTUmdCl9LHQucHJvdG90eXBlLnJlYWRJbnQxNj1mdW5jdGlvbigpe3ZhciB0O3JldHVybiAzMjc2ODw9KHQ9dGhpcy5yZWFkVUludDE2KCkpP3QtNjU1MzY6dH0sdC5wcm90b3R5cGUud3JpdGVJbnQxNj1mdW5jdGlvbih0KXtyZXR1cm4gdDwwJiYodCs9NjU1MzYpLHRoaXMud3JpdGVVSW50MTYodCl9LHQucHJvdG90eXBlLnJlYWRTdHJpbmc9ZnVuY3Rpb24odCl7dmFyIGUsbixyO2ZvcihuPVtdLGU9cj0wOzA8PXQ/cjx0OnQ8cjtlPTA8PXQ/KytyOi0tciluW2VdPVN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5yZWFkQnl0ZSgpKTtyZXR1cm4gbi5qb2luKFwiXCIpfSx0LnByb3RvdHlwZS53cml0ZVN0cmluZz1mdW5jdGlvbih0KXt2YXIgZSxuLHIsaTtmb3IoaT1bXSxlPW49MCxyPXQubGVuZ3RoOzA8PXI/bjxyOnI8bjtlPTA8PXI/KytuOi0tbilpLnB1c2godGhpcy53cml0ZUJ5dGUodC5jaGFyQ29kZUF0KGUpKSk7cmV0dXJuIGl9LHQucHJvdG90eXBlLnJlYWRTaG9ydD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRJbnQxNigpfSx0LnByb3RvdHlwZS53cml0ZVNob3J0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLndyaXRlSW50MTYodCl9LHQucHJvdG90eXBlLnJlYWRMb25nTG9uZz1mdW5jdGlvbigpe3ZhciB0LGUsbixyLGksbyxhLHM7cmV0dXJuIHQ9dGhpcy5yZWFkQnl0ZSgpLGU9dGhpcy5yZWFkQnl0ZSgpLG49dGhpcy5yZWFkQnl0ZSgpLHI9dGhpcy5yZWFkQnl0ZSgpLGk9dGhpcy5yZWFkQnl0ZSgpLG89dGhpcy5yZWFkQnl0ZSgpLGE9dGhpcy5yZWFkQnl0ZSgpLHM9dGhpcy5yZWFkQnl0ZSgpLDEyOCZ0Py0xKig3MjA1NzU5NDAzNzkyNzk0MCooMjU1XnQpKzI4MTQ3NDk3NjcxMDY1NiooMjU1XmUpKzEwOTk1MTE2Mjc3NzYqKDI1NV5uKSs0Mjk0OTY3Mjk2KigyNTVecikrMTY3NzcyMTYqKDI1NV5pKSs2NTUzNiooMjU1Xm8pKzI1NiooMjU1XmEpKygyNTVecykrMSk6NzIwNTc1OTQwMzc5Mjc5NDAqdCsyODE0NzQ5NzY3MTA2NTYqZSsxMDk5NTExNjI3Nzc2Km4rNDI5NDk2NzI5NipyKzE2Nzc3MjE2KmkrNjU1MzYqbysyNTYqYStzfSx0LnByb3RvdHlwZS53cml0ZUxvbmdMb25nPWZ1bmN0aW9uKHQpe3ZhciBlLG47cmV0dXJuIGU9TWF0aC5mbG9vcih0LzQyOTQ5NjcyOTYpLG49NDI5NDk2NzI5NSZ0LHRoaXMud3JpdGVCeXRlKGU+PjI0JjI1NSksdGhpcy53cml0ZUJ5dGUoZT4+MTYmMjU1KSx0aGlzLndyaXRlQnl0ZShlPj44JjI1NSksdGhpcy53cml0ZUJ5dGUoMjU1JmUpLHRoaXMud3JpdGVCeXRlKG4+PjI0JjI1NSksdGhpcy53cml0ZUJ5dGUobj4+MTYmMjU1KSx0aGlzLndyaXRlQnl0ZShuPj44JjI1NSksdGhpcy53cml0ZUJ5dGUoMjU1Jm4pfSx0LnByb3RvdHlwZS5yZWFkSW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZEludDMyKCl9LHQucHJvdG90eXBlLndyaXRlSW50PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLndyaXRlSW50MzIodCl9LHQucHJvdG90eXBlLnJlYWQ9ZnVuY3Rpb24odCl7dmFyIGUsbjtmb3IoZT1bXSxuPTA7MDw9dD9uPHQ6dDxuOzA8PXQ/KytuOi0tbillLnB1c2godGhpcy5yZWFkQnl0ZSgpKTtyZXR1cm4gZX0sdC5wcm90b3R5cGUud3JpdGU9ZnVuY3Rpb24odCl7dmFyIGUsbixyLGk7Zm9yKGk9W10sbj0wLHI9dC5sZW5ndGg7bjxyO24rKyllPXRbbl0saS5wdXNoKHRoaXMud3JpdGVCeXRlKGUpKTtyZXR1cm4gaX0sdH0oKSxlPWZ1bmN0aW9uKCl7dmFyIGQ7ZnVuY3Rpb24gdCh0KXt2YXIgZSxuLHI7Zm9yKHRoaXMuc2NhbGFyVHlwZT10LnJlYWRJbnQoKSx0aGlzLnRhYmxlQ291bnQ9dC5yZWFkU2hvcnQoKSx0aGlzLnNlYXJjaFJhbmdlPXQucmVhZFNob3J0KCksdGhpcy5lbnRyeVNlbGVjdG9yPXQucmVhZFNob3J0KCksdGhpcy5yYW5nZVNoaWZ0PXQucmVhZFNob3J0KCksdGhpcy50YWJsZXM9e30sbj0wLHI9dGhpcy50YWJsZUNvdW50OzA8PXI/bjxyOnI8bjswPD1yPysrbjotLW4pZT17dGFnOnQucmVhZFN0cmluZyg0KSxjaGVja3N1bTp0LnJlYWRJbnQoKSxvZmZzZXQ6dC5yZWFkSW50KCksbGVuZ3RoOnQucmVhZEludCgpfSx0aGlzLnRhYmxlc1tlLnRhZ109ZX1yZXR1cm4gdC5wcm90b3R5cGUuZW5jb2RlPWZ1bmN0aW9uKHQpe3ZhciBlLG4scixpLG8sYSxzLGwsaCx1LGMsZixwO2ZvcihwIGluIGM9T2JqZWN0LmtleXModCkubGVuZ3RoLGE9TWF0aC5sb2coMiksaD0xNipNYXRoLmZsb29yKE1hdGgubG9nKGMpL2EpLGk9TWF0aC5mbG9vcihoL2EpLGw9MTYqYy1oLChuPW5ldyBKKS53cml0ZUludCh0aGlzLnNjYWxhclR5cGUpLG4ud3JpdGVTaG9ydChjKSxuLndyaXRlU2hvcnQoaCksbi53cml0ZVNob3J0KGkpLG4ud3JpdGVTaG9ydChsKSxyPTE2KmMscz1uLnBvcytyLG89bnVsbCxmPVtdLHQpZm9yKHU9dFtwXSxuLndyaXRlU3RyaW5nKHApLG4ud3JpdGVJbnQoZCh1KSksbi53cml0ZUludChzKSxuLndyaXRlSW50KHUubGVuZ3RoKSxmPWYuY29uY2F0KHUpLFwiaGVhZFwiPT09cCYmKG89cykscys9dS5sZW5ndGg7cyU0OylmLnB1c2goMCkscysrO3JldHVybiBuLndyaXRlKGYpLGU9Mjk4MTE0NjU1NC1kKG4uZGF0YSksbi5wb3M9bys4LG4ud3JpdGVVSW50MzIoZSksbi5kYXRhfSxkPWZ1bmN0aW9uKHQpe3ZhciBlLG4scixpO2Zvcih0PUwuY2FsbCh0KTt0Lmxlbmd0aCU0Oyl0LnB1c2goMCk7Zm9yKG49bmV3IEoodCkscj1lPTAsaT10Lmxlbmd0aDtyPGk7cis9NCllKz1uLnJlYWRVSW50MzIoKTtyZXR1cm4gNDI5NDk2NzI5NSZlfSx0fSgpLGM9e30uaGFzT3duUHJvcGVydHksZj1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbiBpbiBlKWMuY2FsbChlLG4pJiYodFtuXT1lW25dKTtmdW5jdGlvbiByKCl7dGhpcy5jb25zdHJ1Y3Rvcj10fXJldHVybiByLnByb3RvdHlwZT1lLnByb3RvdHlwZSx0LnByb3RvdHlwZT1uZXcgcix0Ll9fc3VwZXJfXz1lLnByb3RvdHlwZSx0fTtoPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXt2YXIgZTt0aGlzLmZpbGU9dCxlPXRoaXMuZmlsZS5kaXJlY3RvcnkudGFibGVzW3RoaXMudGFnXSx0aGlzLmV4aXN0cz0hIWUsZSYmKHRoaXMub2Zmc2V0PWUub2Zmc2V0LHRoaXMubGVuZ3RoPWUubGVuZ3RoLHRoaXMucGFyc2UodGhpcy5maWxlLmNvbnRlbnRzKSl9cmV0dXJuIHQucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKCl7fSx0LnByb3RvdHlwZS5lbmNvZGU9ZnVuY3Rpb24oKXt9LHQucHJvdG90eXBlLnJhdz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmV4aXN0cz8odGhpcy5maWxlLmNvbnRlbnRzLnBvcz10aGlzLm9mZnNldCx0aGlzLmZpbGUuY29udGVudHMucmVhZCh0aGlzLmxlbmd0aCkpOm51bGx9LHR9KCk7dmFyIHA9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3JldHVybiBlLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIGYoZSxoKSxlLnByb3RvdHlwZS50YWc9XCJoZWFkXCIsZS5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24odCl7cmV0dXJuIHQucG9zPXRoaXMub2Zmc2V0LHRoaXMudmVyc2lvbj10LnJlYWRJbnQoKSx0aGlzLnJldmlzaW9uPXQucmVhZEludCgpLHRoaXMuY2hlY2tTdW1BZGp1c3RtZW50PXQucmVhZEludCgpLHRoaXMubWFnaWNOdW1iZXI9dC5yZWFkSW50KCksdGhpcy5mbGFncz10LnJlYWRTaG9ydCgpLHRoaXMudW5pdHNQZXJFbT10LnJlYWRTaG9ydCgpLHRoaXMuY3JlYXRlZD10LnJlYWRMb25nTG9uZygpLHRoaXMubW9kaWZpZWQ9dC5yZWFkTG9uZ0xvbmcoKSx0aGlzLnhNaW49dC5yZWFkU2hvcnQoKSx0aGlzLnlNaW49dC5yZWFkU2hvcnQoKSx0aGlzLnhNYXg9dC5yZWFkU2hvcnQoKSx0aGlzLnlNYXg9dC5yZWFkU2hvcnQoKSx0aGlzLm1hY1N0eWxlPXQucmVhZFNob3J0KCksdGhpcy5sb3dlc3RSZWNQUEVNPXQucmVhZFNob3J0KCksdGhpcy5mb250RGlyZWN0aW9uSGludD10LnJlYWRTaG9ydCgpLHRoaXMuaW5kZXhUb0xvY0Zvcm1hdD10LnJlYWRTaG9ydCgpLHRoaXMuZ2x5cGhEYXRhRm9ybWF0PXQucmVhZFNob3J0KCl9LGUucHJvdG90eXBlLmVuY29kZT1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4oZT1uZXcgSikud3JpdGVJbnQodGhpcy52ZXJzaW9uKSxlLndyaXRlSW50KHRoaXMucmV2aXNpb24pLGUud3JpdGVJbnQodGhpcy5jaGVja1N1bUFkanVzdG1lbnQpLGUud3JpdGVJbnQodGhpcy5tYWdpY051bWJlciksZS53cml0ZVNob3J0KHRoaXMuZmxhZ3MpLGUud3JpdGVTaG9ydCh0aGlzLnVuaXRzUGVyRW0pLGUud3JpdGVMb25nTG9uZyh0aGlzLmNyZWF0ZWQpLGUud3JpdGVMb25nTG9uZyh0aGlzLm1vZGlmaWVkKSxlLndyaXRlU2hvcnQodGhpcy54TWluKSxlLndyaXRlU2hvcnQodGhpcy55TWluKSxlLndyaXRlU2hvcnQodGhpcy54TWF4KSxlLndyaXRlU2hvcnQodGhpcy55TWF4KSxlLndyaXRlU2hvcnQodGhpcy5tYWNTdHlsZSksZS53cml0ZVNob3J0KHRoaXMubG93ZXN0UmVjUFBFTSksZS53cml0ZVNob3J0KHRoaXMuZm9udERpcmVjdGlvbkhpbnQpLGUud3JpdGVTaG9ydCh0KSxlLndyaXRlU2hvcnQodGhpcy5nbHlwaERhdGFGb3JtYXQpLGUuZGF0YX0sZX0oKSxkPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChuLHQpe3ZhciBlLHIsaSxvLGEscyxsLGgsdSxjLGYscCxkLGcsbSx5LHYsdztzd2l0Y2godGhpcy5wbGF0Zm9ybUlEPW4ucmVhZFVJbnQxNigpLHRoaXMuZW5jb2RpbmdJRD1uLnJlYWRTaG9ydCgpLHRoaXMub2Zmc2V0PXQrbi5yZWFkSW50KCksdT1uLnBvcyxuLnBvcz10aGlzLm9mZnNldCx0aGlzLmZvcm1hdD1uLnJlYWRVSW50MTYoKSx0aGlzLmxlbmd0aD1uLnJlYWRVSW50MTYoKSx0aGlzLmxhbmd1YWdlPW4ucmVhZFVJbnQxNigpLHRoaXMuaXNVbmljb2RlPTM9PT10aGlzLnBsYXRmb3JtSUQmJjE9PT10aGlzLmVuY29kaW5nSUQmJjQ9PT10aGlzLmZvcm1hdHx8MD09PXRoaXMucGxhdGZvcm1JRCYmND09PXRoaXMuZm9ybWF0LHRoaXMuY29kZU1hcD17fSx0aGlzLmZvcm1hdCl7Y2FzZSAwOmZvcihzPW09MDttPDI1NjtzPSsrbSl0aGlzLmNvZGVNYXBbc109bi5yZWFkQnl0ZSgpO2JyZWFrO2Nhc2UgNDpmb3IoZj1uLnJlYWRVSW50MTYoKSxjPWYvMixuLnBvcys9NixpPWZ1bmN0aW9uKCl7dmFyIHQsZTtmb3IoZT1bXSxzPXQ9MDswPD1jP3Q8YzpjPHQ7cz0wPD1jPysrdDotLXQpZS5wdXNoKG4ucmVhZFVJbnQxNigpKTtyZXR1cm4gZX0oKSxuLnBvcys9MixkPWZ1bmN0aW9uKCl7dmFyIHQsZTtmb3IoZT1bXSxzPXQ9MDswPD1jP3Q8YzpjPHQ7cz0wPD1jPysrdDotLXQpZS5wdXNoKG4ucmVhZFVJbnQxNigpKTtyZXR1cm4gZX0oKSxsPWZ1bmN0aW9uKCl7dmFyIHQsZTtmb3IoZT1bXSxzPXQ9MDswPD1jP3Q8YzpjPHQ7cz0wPD1jPysrdDotLXQpZS5wdXNoKG4ucmVhZFVJbnQxNigpKTtyZXR1cm4gZX0oKSxoPWZ1bmN0aW9uKCl7dmFyIHQsZTtmb3IoZT1bXSxzPXQ9MDswPD1jP3Q8YzpjPHQ7cz0wPD1jPysrdDotLXQpZS5wdXNoKG4ucmVhZFVJbnQxNigpKTtyZXR1cm4gZX0oKSxyPSh0aGlzLmxlbmd0aC1uLnBvcyt0aGlzLm9mZnNldCkvMixhPWZ1bmN0aW9uKCl7dmFyIHQsZTtmb3IoZT1bXSxzPXQ9MDswPD1yP3Q8cjpyPHQ7cz0wPD1yPysrdDotLXQpZS5wdXNoKG4ucmVhZFVJbnQxNigpKTtyZXR1cm4gZX0oKSxzPXk9MCx3PWkubGVuZ3RoO3k8dztzPSsreSlmb3IoZz1pW3NdLGU9dj1wPWRbc107cDw9Zz92PD1nOmc8PXY7ZT1wPD1nPysrdjotLXYpMD09PWhbc10/bz1lK2xbc106MCE9PShvPWFbaFtzXS8yKyhlLXApLShjLXMpXXx8MCkmJihvKz1sW3NdKSx0aGlzLmNvZGVNYXBbZV09NjU1MzUmb31uLnBvcz11fXJldHVybiB0LmVuY29kZT1mdW5jdGlvbih0LGUpe3ZhciBuLHIsaSxvLGEscyxsLGgsdSxjLGYscCxkLGcsbSx5LHYsdyxiLHgsTixMLEEsUyxfLEYsUCxrLEksQyxCLGosRSxNLE8scSxULFIsRCxVLHosSCxXLFYsRyxZO3N3aXRjaChrPW5ldyBKLG89T2JqZWN0LmtleXModCkuc29ydChmdW5jdGlvbih0LGUpe3JldHVybiB0LWV9KSxlKXtjYXNlXCJtYWNyb21hblwiOmZvcihkPTAsZz1mdW5jdGlvbigpe3ZhciB0LGU7Zm9yKGU9W10scD10PTA7dDwyNTY7cD0rK3QpZS5wdXNoKDApO3JldHVybiBlfSgpLHk9ezA6MH0saT17fSxJPTAsRT1vLmxlbmd0aDtJPEU7SSsrKW51bGw9PXlbVz10W3I9b1tJXV1dJiYoeVtXXT0rK2QpLGlbcl09e29sZDp0W3JdLG5ldzp5W3Rbcl1dfSxnW3JdPXlbdFtyXV07cmV0dXJuIGsud3JpdGVVSW50MTYoMSksay53cml0ZVVJbnQxNigwKSxrLndyaXRlVUludDMyKDEyKSxrLndyaXRlVUludDE2KDApLGsud3JpdGVVSW50MTYoMjYyKSxrLndyaXRlVUludDE2KDApLGsud3JpdGUoZykse2NoYXJNYXA6aSxzdWJ0YWJsZTprLmRhdGEsbWF4R2x5cGhJRDpkKzF9O2Nhc2VcInVuaWNvZGVcIjpmb3IoRj1bXSx1PVtdLHk9e30sbj17fSxtPWw9bnVsbCxDPXY9MCxNPW8ubGVuZ3RoO0M8TTtDKyspbnVsbD09eVtiPXRbcj1vW0NdXV0mJih5W2JdPSsrdiksbltyXT17b2xkOmIsbmV3OnlbYl19LGE9eVtiXS1yLG51bGwhPW0mJmE9PT1sfHwobSYmdS5wdXNoKG0pLEYucHVzaChyKSxsPWEpLG09cjtmb3IobSYmdS5wdXNoKG0pLHUucHVzaCg2NTUzNSksRi5wdXNoKDY1NTM1KSxTPTIqKEE9Ri5sZW5ndGgpLEw9MipNYXRoLnBvdyhNYXRoLmxvZyhBKS9NYXRoLkxOMiwyKSxjPU1hdGgubG9nKEwvMikvTWF0aC5MTjIsTj0yKkEtTCxzPVtdLHg9W10sZj1bXSxwPUI9MCxPPUYubGVuZ3RoO0I8TztwPSsrQil7aWYoXz1GW3BdLGg9dVtwXSw2NTUzNT09PV8pe3MucHVzaCgwKSx4LnB1c2goMCk7YnJlYWt9aWYoMzI3Njg8PV8tKFA9bltfXS5uZXcpKWZvcihzLnB1c2goMCkseC5wdXNoKDIqKGYubGVuZ3RoK0EtcCkpLHI9aj1fO188PWg/ajw9aDpoPD1qO3I9Xzw9aD8rK2o6LS1qKWYucHVzaChuW3JdLm5ldyk7ZWxzZSBzLnB1c2goUC1fKSx4LnB1c2goMCl9Zm9yKGsud3JpdGVVSW50MTYoMyksay53cml0ZVVJbnQxNigxKSxrLndyaXRlVUludDMyKDEyKSxrLndyaXRlVUludDE2KDQpLGsud3JpdGVVSW50MTYoMTYrOCpBKzIqZi5sZW5ndGgpLGsud3JpdGVVSW50MTYoMCksay53cml0ZVVJbnQxNihTKSxrLndyaXRlVUludDE2KEwpLGsud3JpdGVVSW50MTYoYyksay53cml0ZVVJbnQxNihOKSx6PTAscT11Lmxlbmd0aDt6PHE7eisrKXI9dVt6XSxrLndyaXRlVUludDE2KHIpO2ZvcihrLndyaXRlVUludDE2KDApLEg9MCxUPUYubGVuZ3RoO0g8VDtIKyspcj1GW0hdLGsud3JpdGVVSW50MTYocik7Zm9yKFY9MCxSPXMubGVuZ3RoO1Y8UjtWKyspYT1zW1ZdLGsud3JpdGVVSW50MTYoYSk7Zm9yKEc9MCxEPXgubGVuZ3RoO0c8RDtHKyspdz14W0ddLGsud3JpdGVVSW50MTYodyk7Zm9yKFk9MCxVPWYubGVuZ3RoO1k8VTtZKyspZD1mW1ldLGsud3JpdGVVSW50MTYoZCk7cmV0dXJue2NoYXJNYXA6bixzdWJ0YWJsZTprLmRhdGEsbWF4R2x5cGhJRDp2KzF9fX0sdH0oKSx5PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gZS5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBmKGUsaCksZS5wcm90b3R5cGUudGFnPVwiY21hcFwiLGUucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKHQpe3ZhciBlLG4scjtmb3IodC5wb3M9dGhpcy5vZmZzZXQsdGhpcy52ZXJzaW9uPXQucmVhZFVJbnQxNigpLG49dC5yZWFkVUludDE2KCksdGhpcy50YWJsZXM9W10sdGhpcy51bmljb2RlPW51bGwscj0wOzA8PW4/cjxuOm48cjswPD1uPysrcjotLXIpZT1uZXcgZCh0LHRoaXMub2Zmc2V0KSx0aGlzLnRhYmxlcy5wdXNoKGUpLGUuaXNVbmljb2RlJiZudWxsPT10aGlzLnVuaWNvZGUmJih0aGlzLnVuaWNvZGU9ZSk7cmV0dXJuITB9LGUuZW5jb2RlPWZ1bmN0aW9uKHQsZSl7dmFyIG4scjtyZXR1cm4gbnVsbD09ZSYmKGU9XCJtYWNyb21hblwiKSxuPWQuZW5jb2RlKHQsZSksKHI9bmV3IEopLndyaXRlVUludDE2KDApLHIud3JpdGVVSW50MTYoMSksbi50YWJsZT1yLmRhdGEuY29uY2F0KG4uc3VidGFibGUpLG59LGV9KCksZz1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7cmV0dXJuIGUuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gZihlLGgpLGUucHJvdG90eXBlLnRhZz1cImhoZWFcIixlLnByb3RvdHlwZS5wYXJzZT1mdW5jdGlvbih0KXtyZXR1cm4gdC5wb3M9dGhpcy5vZmZzZXQsdGhpcy52ZXJzaW9uPXQucmVhZEludCgpLHRoaXMuYXNjZW5kZXI9dC5yZWFkU2hvcnQoKSx0aGlzLmRlY2VuZGVyPXQucmVhZFNob3J0KCksdGhpcy5saW5lR2FwPXQucmVhZFNob3J0KCksdGhpcy5hZHZhbmNlV2lkdGhNYXg9dC5yZWFkU2hvcnQoKSx0aGlzLm1pbkxlZnRTaWRlQmVhcmluZz10LnJlYWRTaG9ydCgpLHRoaXMubWluUmlnaHRTaWRlQmVhcmluZz10LnJlYWRTaG9ydCgpLHRoaXMueE1heEV4dGVudD10LnJlYWRTaG9ydCgpLHRoaXMuY2FyZXRTbG9wZVJpc2U9dC5yZWFkU2hvcnQoKSx0aGlzLmNhcmV0U2xvcGVSdW49dC5yZWFkU2hvcnQoKSx0aGlzLmNhcmV0T2Zmc2V0PXQucmVhZFNob3J0KCksdC5wb3MrPTgsdGhpcy5tZXRyaWNEYXRhRm9ybWF0PXQucmVhZFNob3J0KCksdGhpcy5udW1iZXJPZk1ldHJpY3M9dC5yZWFkVUludDE2KCl9LGV9KCksbT1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7cmV0dXJuIGUuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gZihlLGgpLGUucHJvdG90eXBlLnRhZz1cIk9TLzJcIixlLnByb3RvdHlwZS5wYXJzZT1mdW5jdGlvbihuKXtpZihuLnBvcz10aGlzLm9mZnNldCx0aGlzLnZlcnNpb249bi5yZWFkVUludDE2KCksdGhpcy5hdmVyYWdlQ2hhcldpZHRoPW4ucmVhZFNob3J0KCksdGhpcy53ZWlnaHRDbGFzcz1uLnJlYWRVSW50MTYoKSx0aGlzLndpZHRoQ2xhc3M9bi5yZWFkVUludDE2KCksdGhpcy50eXBlPW4ucmVhZFNob3J0KCksdGhpcy55U3Vic2NyaXB0WFNpemU9bi5yZWFkU2hvcnQoKSx0aGlzLnlTdWJzY3JpcHRZU2l6ZT1uLnJlYWRTaG9ydCgpLHRoaXMueVN1YnNjcmlwdFhPZmZzZXQ9bi5yZWFkU2hvcnQoKSx0aGlzLnlTdWJzY3JpcHRZT2Zmc2V0PW4ucmVhZFNob3J0KCksdGhpcy55U3VwZXJzY3JpcHRYU2l6ZT1uLnJlYWRTaG9ydCgpLHRoaXMueVN1cGVyc2NyaXB0WVNpemU9bi5yZWFkU2hvcnQoKSx0aGlzLnlTdXBlcnNjcmlwdFhPZmZzZXQ9bi5yZWFkU2hvcnQoKSx0aGlzLnlTdXBlcnNjcmlwdFlPZmZzZXQ9bi5yZWFkU2hvcnQoKSx0aGlzLnlTdHJpa2VvdXRTaXplPW4ucmVhZFNob3J0KCksdGhpcy55U3RyaWtlb3V0UG9zaXRpb249bi5yZWFkU2hvcnQoKSx0aGlzLmZhbWlseUNsYXNzPW4ucmVhZFNob3J0KCksdGhpcy5wYW5vc2U9ZnVuY3Rpb24oKXt2YXIgdCxlO2ZvcihlPVtdLHQ9MDt0PDEwOysrdCllLnB1c2gobi5yZWFkQnl0ZSgpKTtyZXR1cm4gZX0oKSx0aGlzLmNoYXJSYW5nZT1mdW5jdGlvbigpe3ZhciB0LGU7Zm9yKGU9W10sdD0wO3Q8NDsrK3QpZS5wdXNoKG4ucmVhZEludCgpKTtyZXR1cm4gZX0oKSx0aGlzLnZlbmRvcklEPW4ucmVhZFN0cmluZyg0KSx0aGlzLnNlbGVjdGlvbj1uLnJlYWRTaG9ydCgpLHRoaXMuZmlyc3RDaGFySW5kZXg9bi5yZWFkU2hvcnQoKSx0aGlzLmxhc3RDaGFySW5kZXg9bi5yZWFkU2hvcnQoKSwwPHRoaXMudmVyc2lvbiYmKHRoaXMuYXNjZW50PW4ucmVhZFNob3J0KCksdGhpcy5kZXNjZW50PW4ucmVhZFNob3J0KCksdGhpcy5saW5lR2FwPW4ucmVhZFNob3J0KCksdGhpcy53aW5Bc2NlbnQ9bi5yZWFkU2hvcnQoKSx0aGlzLndpbkRlc2NlbnQ9bi5yZWFkU2hvcnQoKSx0aGlzLmNvZGVQYWdlUmFuZ2U9ZnVuY3Rpb24oKXt2YXIgdCxlO2ZvcihlPVtdLHQ9MDt0PDI7Kyt0KWUucHVzaChuLnJlYWRJbnQoKSk7cmV0dXJuIGV9KCksMTx0aGlzLnZlcnNpb24pKXJldHVybiB0aGlzLnhIZWlnaHQ9bi5yZWFkU2hvcnQoKSx0aGlzLmNhcEhlaWdodD1uLnJlYWRTaG9ydCgpLHRoaXMuZGVmYXVsdENoYXI9bi5yZWFkU2hvcnQoKSx0aGlzLmJyZWFrQ2hhcj1uLnJlYWRTaG9ydCgpLHRoaXMubWF4Q29udGV4dD1uLnJlYWRTaG9ydCgpfSxlfSgpLHY9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe3JldHVybiBlLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIGYoZSxoKSxlLnByb3RvdHlwZS50YWc9XCJwb3N0XCIsZS5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24ocil7dmFyIHQsZSxuLGk7c3dpdGNoKHIucG9zPXRoaXMub2Zmc2V0LHRoaXMuZm9ybWF0PXIucmVhZEludCgpLHRoaXMuaXRhbGljQW5nbGU9ci5yZWFkSW50KCksdGhpcy51bmRlcmxpbmVQb3NpdGlvbj1yLnJlYWRTaG9ydCgpLHRoaXMudW5kZXJsaW5lVGhpY2tuZXNzPXIucmVhZFNob3J0KCksdGhpcy5pc0ZpeGVkUGl0Y2g9ci5yZWFkSW50KCksdGhpcy5taW5NZW1UeXBlNDI9ci5yZWFkSW50KCksdGhpcy5tYXhNZW1UeXBlNDI9ci5yZWFkSW50KCksdGhpcy5taW5NZW1UeXBlMT1yLnJlYWRJbnQoKSx0aGlzLm1heE1lbVR5cGUxPXIucmVhZEludCgpLHRoaXMuZm9ybWF0KXtjYXNlIDY1NTM2OmJyZWFrO2Nhc2UgMTMxMDcyOmZvcihlPXIucmVhZFVJbnQxNigpLHRoaXMuZ2x5cGhOYW1lSW5kZXg9W10sbj0wOzA8PWU/bjxlOmU8bjswPD1lPysrbjotLW4pdGhpcy5nbHlwaE5hbWVJbmRleC5wdXNoKHIucmVhZFVJbnQxNigpKTtmb3IodGhpcy5uYW1lcz1bXSxpPVtdO3IucG9zPHRoaXMub2Zmc2V0K3RoaXMubGVuZ3RoOyl0PXIucmVhZEJ5dGUoKSxpLnB1c2godGhpcy5uYW1lcy5wdXNoKHIucmVhZFN0cmluZyh0KSkpO3JldHVybiBpO2Nhc2UgMTUxNTUyOnJldHVybiBlPXIucmVhZFVJbnQxNigpLHRoaXMub2Zmc2V0cz1yLnJlYWQoZSk7Y2FzZSAxOTY2MDg6YnJlYWs7Y2FzZSAyNjIxNDQ6cmV0dXJuIHRoaXMubWFwPWZ1bmN0aW9uKCl7dmFyIHQsZSxuO2ZvcihuPVtdLHQ9MCxlPXRoaXMuZmlsZS5tYXhwLm51bUdseXBoczswPD1lP3Q8ZTplPHQ7MDw9ZT8rK3Q6LS10KW4ucHVzaChyLnJlYWRVSW50MzIoKSk7cmV0dXJuIG59LmNhbGwodGhpcyl9fSxlfSgpLHc9ZnVuY3Rpb24odCxlKXt0aGlzLnJhdz10LHRoaXMubGVuZ3RoPXQubGVuZ3RoLHRoaXMucGxhdGZvcm1JRD1lLnBsYXRmb3JtSUQsdGhpcy5lbmNvZGluZ0lEPWUuZW5jb2RpbmdJRCx0aGlzLmxhbmd1YWdlSUQ9ZS5sYW5ndWFnZUlEfSxiPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gZS5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBmKGUsaCksZS5wcm90b3R5cGUudGFnPVwibmFtZVwiLGUucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKHQpe3ZhciBlLG4scixpLG8sYSxzLGwsaCx1LGMsZjtmb3IodC5wb3M9dGhpcy5vZmZzZXQsdC5yZWFkU2hvcnQoKSxlPXQucmVhZFNob3J0KCksYT10LnJlYWRTaG9ydCgpLG49W10saT1oPTA7MDw9ZT9oPGU6ZTxoO2k9MDw9ZT8rK2g6LS1oKW4ucHVzaCh7cGxhdGZvcm1JRDp0LnJlYWRTaG9ydCgpLGVuY29kaW5nSUQ6dC5yZWFkU2hvcnQoKSxsYW5ndWFnZUlEOnQucmVhZFNob3J0KCksbmFtZUlEOnQucmVhZFNob3J0KCksbGVuZ3RoOnQucmVhZFNob3J0KCksb2Zmc2V0OnRoaXMub2Zmc2V0K2ErdC5yZWFkU2hvcnQoKX0pO2ZvcihzPXt9LGk9dT0wLGM9bi5sZW5ndGg7dTxjO2k9Kyt1KXI9bltpXSx0LnBvcz1yLm9mZnNldCxsPXQucmVhZFN0cmluZyhyLmxlbmd0aCksbz1uZXcgdyhsLHIpLG51bGw9PXNbZj1yLm5hbWVJRF0mJihzW2ZdPVtdKSxzW3IubmFtZUlEXS5wdXNoKG8pO3RoaXMuc3RyaW5ncz1zLHRoaXMuY29weXJpZ2h0PXNbMF0sdGhpcy5mb250RmFtaWx5PXNbMV0sdGhpcy5mb250U3ViZmFtaWx5PXNbMl0sdGhpcy51bmlxdWVTdWJmYW1pbHk9c1szXSx0aGlzLmZvbnROYW1lPXNbNF0sdGhpcy52ZXJzaW9uPXNbNV07dHJ5e3RoaXMucG9zdHNjcmlwdE5hbWU9c1s2XVswXS5yYXcucmVwbGFjZSgvW1xceDAwLVxceDE5XFx4ODAtXFx4ZmZdL2csXCJcIil9Y2F0Y2godCl7dGhpcy5wb3N0c2NyaXB0TmFtZT1zWzRdWzBdLnJhdy5yZXBsYWNlKC9bXFx4MDAtXFx4MTlcXHg4MC1cXHhmZl0vZyxcIlwiKX1yZXR1cm4gdGhpcy50cmFkZW1hcms9c1s3XSx0aGlzLm1hbnVmYWN0dXJlcj1zWzhdLHRoaXMuZGVzaWduZXI9c1s5XSx0aGlzLmRlc2NyaXB0aW9uPXNbMTBdLHRoaXMudmVuZG9yVXJsPXNbMTFdLHRoaXMuZGVzaWduZXJVcmw9c1sxMl0sdGhpcy5saWNlbnNlPXNbMTNdLHRoaXMubGljZW5zZVVybD1zWzE0XSx0aGlzLnByZWZlcnJlZEZhbWlseT1zWzE1XSx0aGlzLnByZWZlcnJlZFN1YmZhbWlseT1zWzE3XSx0aGlzLmNvbXBhdGlibGVGdWxsPXNbMThdLHRoaXMuc2FtcGxlVGV4dD1zWzE5XX0sZX0oKSx4PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gZS5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBmKGUsaCksZS5wcm90b3R5cGUudGFnPVwibWF4cFwiLGUucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKHQpe3JldHVybiB0LnBvcz10aGlzLm9mZnNldCx0aGlzLnZlcnNpb249dC5yZWFkSW50KCksdGhpcy5udW1HbHlwaHM9dC5yZWFkVUludDE2KCksdGhpcy5tYXhQb2ludHM9dC5yZWFkVUludDE2KCksdGhpcy5tYXhDb250b3Vycz10LnJlYWRVSW50MTYoKSx0aGlzLm1heENvbXBvc2l0ZVBvaW50cz10LnJlYWRVSW50MTYoKSx0aGlzLm1heENvbXBvbmVudENvbnRvdXJzPXQucmVhZFVJbnQxNigpLHRoaXMubWF4Wm9uZXM9dC5yZWFkVUludDE2KCksdGhpcy5tYXhUd2lsaWdodFBvaW50cz10LnJlYWRVSW50MTYoKSx0aGlzLm1heFN0b3JhZ2U9dC5yZWFkVUludDE2KCksdGhpcy5tYXhGdW5jdGlvbkRlZnM9dC5yZWFkVUludDE2KCksdGhpcy5tYXhJbnN0cnVjdGlvbkRlZnM9dC5yZWFkVUludDE2KCksdGhpcy5tYXhTdGFja0VsZW1lbnRzPXQucmVhZFVJbnQxNigpLHRoaXMubWF4U2l6ZU9mSW5zdHJ1Y3Rpb25zPXQucmVhZFVJbnQxNigpLHRoaXMubWF4Q29tcG9uZW50RWxlbWVudHM9dC5yZWFkVUludDE2KCksdGhpcy5tYXhDb21wb25lbnREZXB0aD10LnJlYWRVSW50MTYoKX0sZX0oKSxOPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gZS5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBmKGUsaCksZS5wcm90b3R5cGUudGFnPVwiaG10eFwiLGUucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKG4pe3ZhciB0LHIsaSxlLG8sYSxzO2ZvcihuLnBvcz10aGlzLm9mZnNldCx0aGlzLm1ldHJpY3M9W10sZT0wLGE9dGhpcy5maWxlLmhoZWEubnVtYmVyT2ZNZXRyaWNzOzA8PWE/ZTxhOmE8ZTswPD1hPysrZTotLWUpdGhpcy5tZXRyaWNzLnB1c2goe2FkdmFuY2U6bi5yZWFkVUludDE2KCksbHNiOm4ucmVhZEludDE2KCl9KTtmb3Iocj10aGlzLmZpbGUubWF4cC5udW1HbHlwaHMtdGhpcy5maWxlLmhoZWEubnVtYmVyT2ZNZXRyaWNzLHRoaXMubGVmdFNpZGVCZWFyaW5ncz1mdW5jdGlvbigpe3ZhciB0LGU7Zm9yKGU9W10sdD0wOzA8PXI/dDxyOnI8dDswPD1yPysrdDotLXQpZS5wdXNoKG4ucmVhZEludDE2KCkpO3JldHVybiBlfSgpLHRoaXMud2lkdGhzPWZ1bmN0aW9uKCl7dmFyIHQsZSxuLHI7Zm9yKHI9W10sdD0wLGU9KG49dGhpcy5tZXRyaWNzKS5sZW5ndGg7dDxlO3QrKylpPW5bdF0sci5wdXNoKGkuYWR2YW5jZSk7cmV0dXJuIHJ9LmNhbGwodGhpcyksdD10aGlzLndpZHRoc1t0aGlzLndpZHRocy5sZW5ndGgtMV0scz1bXSxvPTA7MDw9cj9vPHI6cjxvOzA8PXI/KytvOi0tbylzLnB1c2godGhpcy53aWR0aHMucHVzaCh0KSk7cmV0dXJuIHN9LGUucHJvdG90eXBlLmZvckdseXBoPWZ1bmN0aW9uKHQpe3JldHVybiB0IGluIHRoaXMubWV0cmljcz90aGlzLm1ldHJpY3NbdF06e2FkdmFuY2U6dGhpcy5tZXRyaWNzW3RoaXMubWV0cmljcy5sZW5ndGgtMV0uYWR2YW5jZSxsc2I6dGhpcy5sZWZ0U2lkZUJlYXJpbmdzW3QtdGhpcy5tZXRyaWNzLmxlbmd0aF19fSxlfSgpLEw9W10uc2xpY2UsQT1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7cmV0dXJuIGUuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gZihlLGgpLGUucHJvdG90eXBlLnRhZz1cImdseWZcIixlLnByb3RvdHlwZS5wYXJzZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5jYWNoZT17fX0sZS5wcm90b3R5cGUuZ2x5cGhGb3I9ZnVuY3Rpb24odCl7dmFyIGUsbixyLGksbyxhLHMsbCxoLHU7cmV0dXJuKHQ9dClpbiB0aGlzLmNhY2hlP3RoaXMuY2FjaGVbdF06KGk9dGhpcy5maWxlLmxvY2EsZT10aGlzLmZpbGUuY29udGVudHMsbj1pLmluZGV4T2YodCksMD09PShyPWkubGVuZ3RoT2YodCkpP3RoaXMuY2FjaGVbdF09bnVsbDooZS5wb3M9dGhpcy5vZmZzZXQrbixvPShhPW5ldyBKKGUucmVhZChyKSkpLnJlYWRTaG9ydCgpLGw9YS5yZWFkU2hvcnQoKSx1PWEucmVhZFNob3J0KCkscz1hLnJlYWRTaG9ydCgpLGg9YS5yZWFkU2hvcnQoKSx0aGlzLmNhY2hlW3RdPS0xPT09bz9uZXcgXyhhLGwsdSxzLGgpOm5ldyBTKGEsbyxsLHUscyxoKSx0aGlzLmNhY2hlW3RdKSl9LGUucHJvdG90eXBlLmVuY29kZT1mdW5jdGlvbih0LGUsbil7dmFyIHIsaSxvLGEscztmb3Iobz1bXSxpPVtdLGE9MCxzPWUubGVuZ3RoO2E8czthKyspcj10W2VbYV1dLGkucHVzaChvLmxlbmd0aCksciYmKG89by5jb25jYXQoci5lbmNvZGUobikpKTtyZXR1cm4gaS5wdXNoKG8ubGVuZ3RoKSx7dGFibGU6byxvZmZzZXRzOml9fSxlfSgpLFM9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSxuLHIsaSxvKXt0aGlzLnJhdz10LHRoaXMubnVtYmVyT2ZDb250b3Vycz1lLHRoaXMueE1pbj1uLHRoaXMueU1pbj1yLHRoaXMueE1heD1pLHRoaXMueU1heD1vLHRoaXMuY29tcG91bmQ9ITF9cmV0dXJuIHQucHJvdG90eXBlLmVuY29kZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJhdy5kYXRhfSx0fSgpLF89ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSxuLHIsaSl7dmFyIG8sYTtmb3IodGhpcy5yYXc9dCx0aGlzLnhNaW49ZSx0aGlzLnlNaW49bix0aGlzLnhNYXg9cix0aGlzLnlNYXg9aSx0aGlzLmNvbXBvdW5kPSEwLHRoaXMuZ2x5cGhJRHM9W10sdGhpcy5nbHlwaE9mZnNldHM9W10sbz10aGlzLnJhdzthPW8ucmVhZFNob3J0KCksdGhpcy5nbHlwaE9mZnNldHMucHVzaChvLnBvcyksdGhpcy5nbHlwaElEcy5wdXNoKG8ucmVhZFNob3J0KCkpLDMyJmE7KW8ucG9zKz0xJmE/NDoyLDEyOCZhP28ucG9zKz04OjY0JmE/by5wb3MrPTQ6OCZhJiYoby5wb3MrPTIpfXJldHVybiAxLDgsMzIsNjQsMTI4LHQucHJvdG90eXBlLmVuY29kZT1mdW5jdGlvbih0KXt2YXIgZSxuLHIsaSxvO2ZvcihuPW5ldyBKKEwuY2FsbCh0aGlzLnJhdy5kYXRhKSksZT1yPTAsaT0obz10aGlzLmdseXBoSURzKS5sZW5ndGg7cjxpO2U9KytyKW9bZV0sbi5wb3M9dGhpcy5nbHlwaE9mZnNldHNbZV07cmV0dXJuIG4uZGF0YX0sdH0oKSxGPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gZS5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBmKGUsaCksZS5wcm90b3R5cGUudGFnPVwibG9jYVwiLGUucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKHIpe3ZhciB0O3JldHVybiByLnBvcz10aGlzLm9mZnNldCx0PXRoaXMuZmlsZS5oZWFkLmluZGV4VG9Mb2NGb3JtYXQsdGhpcy5vZmZzZXRzPTA9PT10P2Z1bmN0aW9uKCl7dmFyIHQsZSxuO2ZvcihuPVtdLHQ9MCxlPXRoaXMubGVuZ3RoO3Q8ZTt0Kz0yKW4ucHVzaCgyKnIucmVhZFVJbnQxNigpKTtyZXR1cm4gbn0uY2FsbCh0aGlzKTpmdW5jdGlvbigpe3ZhciB0LGUsbjtmb3Iobj1bXSx0PTAsZT10aGlzLmxlbmd0aDt0PGU7dCs9NCluLnB1c2goci5yZWFkVUludDMyKCkpO3JldHVybiBufS5jYWxsKHRoaXMpfSxlLnByb3RvdHlwZS5pbmRleE9mPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm9mZnNldHNbdF19LGUucHJvdG90eXBlLmxlbmd0aE9mPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm9mZnNldHNbdCsxXS10aGlzLm9mZnNldHNbdF19LGUucHJvdG90eXBlLmVuY29kZT1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1uZXcgVWludDMyQXJyYXkodGhpcy5vZmZzZXRzLmxlbmd0aCkscj0wLGk9MCxvPTA7bzxuLmxlbmd0aDsrK28paWYobltvXT1yLGk8ZS5sZW5ndGgmJmVbaV09PW8peysraSxuW29dPXI7dmFyIGE9dGhpcy5vZmZzZXRzW29dLHM9dGhpcy5vZmZzZXRzW28rMV0tYTswPHMmJihyKz1zKX1mb3IodmFyIGw9bmV3IEFycmF5KDQqbi5sZW5ndGgpLGg9MDtoPG4ubGVuZ3RoOysraClsWzQqaCszXT0yNTUmbltoXSxsWzQqaCsyXT0oNjUyODAmbltoXSk+PjgsbFs0KmgrMV09KDE2NzExNjgwJm5baF0pPj4xNixsWzQqaF09KDQyNzgxOTAwODAmbltoXSk+PjI0O3JldHVybiBsfSxlfSgpLFA9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3RoaXMuZm9udD10LHRoaXMuc3Vic2V0PXt9LHRoaXMudW5pY29kZXM9e30sdGhpcy5uZXh0PTMzfXJldHVybiB0LnByb3RvdHlwZS5nZW5lcmF0ZUNtYXA9ZnVuY3Rpb24oKXt2YXIgdCxlLG4scixpO2ZvcihlIGluIHI9dGhpcy5mb250LmNtYXAudGFibGVzWzBdLmNvZGVNYXAsdD17fSxpPXRoaXMuc3Vic2V0KW49aVtlXSx0W2VdPXJbbl07cmV0dXJuIHR9LHQucHJvdG90eXBlLmdseXBoc0Zvcj1mdW5jdGlvbih0KXt2YXIgZSxuLHIsaSxvLGEscztmb3Iocj17fSxvPTAsYT10Lmxlbmd0aDtvPGE7bysrKXJbaT10W29dXT10aGlzLmZvbnQuZ2x5Zi5nbHlwaEZvcihpKTtmb3IoaSBpbiBlPVtdLHIpKG51bGwhPShuPXJbaV0pP24uY29tcG91bmQ6dm9pZCAwKSYmZS5wdXNoLmFwcGx5KGUsbi5nbHlwaElEcyk7aWYoMDxlLmxlbmd0aClmb3IoaSBpbiBzPXRoaXMuZ2x5cGhzRm9yKGUpKW49c1tpXSxyW2ldPW47cmV0dXJuIHJ9LHQucHJvdG90eXBlLmVuY29kZT1mdW5jdGlvbih0LGUpe3ZhciBuLHIsaSxvLGEscyxsLGgsdSxjLGYscCxkLGcsbTtmb3IociBpbiBuPXkuZW5jb2RlKHRoaXMuZ2VuZXJhdGVDbWFwKCksXCJ1bmljb2RlXCIpLG89dGhpcy5nbHlwaHNGb3IodCksZj17MDowfSxtPW4uY2hhck1hcClmWyhzPW1bcl0pLm9sZF09cy5uZXc7Zm9yKHAgaW4gYz1uLm1heEdseXBoSUQsbylwIGluIGZ8fChmW3BdPWMrKyk7cmV0dXJuIGg9ZnVuY3Rpb24odCl7dmFyIGUsbjtmb3IoZSBpbiBuPXt9LHQpblt0W2VdXT1lO3JldHVybiBufShmKSx1PU9iamVjdC5rZXlzKGgpLnNvcnQoZnVuY3Rpb24odCxlKXtyZXR1cm4gdC1lfSksZD1mdW5jdGlvbigpe3ZhciB0LGUsbjtmb3Iobj1bXSx0PTAsZT11Lmxlbmd0aDt0PGU7dCsrKWE9dVt0XSxuLnB1c2goaFthXSk7cmV0dXJuIG59KCksaT10aGlzLmZvbnQuZ2x5Zi5lbmNvZGUobyxkLGYpLGw9dGhpcy5mb250LmxvY2EuZW5jb2RlKGkub2Zmc2V0cyxkKSxnPXtjbWFwOnRoaXMuZm9udC5jbWFwLnJhdygpLGdseWY6aS50YWJsZSxsb2NhOmwsaG10eDp0aGlzLmZvbnQuaG10eC5yYXcoKSxoaGVhOnRoaXMuZm9udC5oaGVhLnJhdygpLG1heHA6dGhpcy5mb250Lm1heHAucmF3KCkscG9zdDp0aGlzLmZvbnQucG9zdC5yYXcoKSxuYW1lOnRoaXMuZm9udC5uYW1lLnJhdygpLGhlYWQ6dGhpcy5mb250LmhlYWQuZW5jb2RlKGUpfSx0aGlzLmZvbnQub3MyLmV4aXN0cyYmKGdbXCJPUy8yXCJdPXRoaXMuZm9udC5vczIucmF3KCkpLHRoaXMuZm9udC5kaXJlY3RvcnkuZW5jb2RlKGcpfSx0fSgpO3QuQVBJLlBERk9iamVjdD1mdW5jdGlvbigpe3ZhciBvO2Z1bmN0aW9uIGEoKXt9cmV0dXJuIG89ZnVuY3Rpb24odCxlKXtyZXR1cm4oQXJyYXkoZSsxKS5qb2luKFwiMFwiKSt0KS5zbGljZSgtZSl9LGEuY29udmVydD1mdW5jdGlvbihyKXt2YXIgaSx0LGUsbjtpZihBcnJheS5pc0FycmF5KHIpKXJldHVyblwiW1wiK2Z1bmN0aW9uKCl7dmFyIHQsZSxuO2ZvcihuPVtdLHQ9MCxlPXIubGVuZ3RoO3Q8ZTt0KyspaT1yW3RdLG4ucHVzaChhLmNvbnZlcnQoaSkpO3JldHVybiBufSgpLmpvaW4oXCIgXCIpK1wiXVwiO2lmKFwic3RyaW5nXCI9PXR5cGVvZiByKXJldHVyblwiL1wiK3I7aWYobnVsbCE9cj9yLmlzU3RyaW5nOnZvaWQgMClyZXR1cm5cIihcIityK1wiKVwiO2lmKHIgaW5zdGFuY2VvZiBEYXRlKXJldHVyblwiKEQ6XCIrbyhyLmdldFVUQ0Z1bGxZZWFyKCksNCkrbyhyLmdldFVUQ01vbnRoKCksMikrbyhyLmdldFVUQ0RhdGUoKSwyKStvKHIuZ2V0VVRDSG91cnMoKSwyKStvKHIuZ2V0VVRDTWludXRlcygpLDIpK28oci5nZXRVVENTZWNvbmRzKCksMikrXCJaKVwiO2lmKFwiW29iamVjdCBPYmplY3RdXCIhPT17fS50b1N0cmluZy5jYWxsKHIpKXJldHVyblwiXCIrcjtmb3IodCBpbiBlPVtcIjw8XCJdLHIpbj1yW3RdLGUucHVzaChcIi9cIit0K1wiIFwiK2EuY29udmVydChuKSk7cmV0dXJuIGUucHVzaChcIj4+XCIpLGUuam9pbihcIlxcblwiKX0sYX0oKX0obHQpLFxyXG4vKlxyXG4gICMgUE5HLmpzXHJcbiAgIyBDb3B5cmlnaHQgKGMpIDIwMTEgRGV2b24gR292ZXR0XHJcbiAgIyBNSVQgTElDRU5TRVxyXG4gICMgXHJcbiAgIyBcclxuICAqL1xyXG5OdD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZnx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93fHxcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsJiZnbG9iYWx8fEZ1bmN0aW9uKCdyZXR1cm4gdHlwZW9mIHRoaXMgPT09IFwib2JqZWN0XCIgJiYgdGhpcy5jb250ZW50JykoKXx8RnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpLEx0PWZ1bmN0aW9uKCl7dmFyIGgsbixyO2Z1bmN0aW9uIGkodCl7dmFyIGUsbixyLGksbyxhLHMsbCxoLHUsYyxmLHAsZDtmb3IodGhpcy5kYXRhPXQsdGhpcy5wb3M9OCx0aGlzLnBhbGV0dGU9W10sdGhpcy5pbWdEYXRhPVtdLHRoaXMudHJhbnNwYXJlbmN5PXt9LHRoaXMuYW5pbWF0aW9uPW51bGwsdGhpcy50ZXh0PXt9LGE9bnVsbDs7KXtzd2l0Y2goZT10aGlzLnJlYWRVSW50MzIoKSxoPWZ1bmN0aW9uKCl7dmFyIHQsZTtmb3IoZT1bXSx0PTA7dDw0OysrdCllLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLmRhdGFbdGhpcy5wb3MrK10pKTtyZXR1cm4gZX0uY2FsbCh0aGlzKS5qb2luKFwiXCIpKXtjYXNlXCJJSERSXCI6dGhpcy53aWR0aD10aGlzLnJlYWRVSW50MzIoKSx0aGlzLmhlaWdodD10aGlzLnJlYWRVSW50MzIoKSx0aGlzLmJpdHM9dGhpcy5kYXRhW3RoaXMucG9zKytdLHRoaXMuY29sb3JUeXBlPXRoaXMuZGF0YVt0aGlzLnBvcysrXSx0aGlzLmNvbXByZXNzaW9uTWV0aG9kPXRoaXMuZGF0YVt0aGlzLnBvcysrXSx0aGlzLmZpbHRlck1ldGhvZD10aGlzLmRhdGFbdGhpcy5wb3MrK10sdGhpcy5pbnRlcmxhY2VNZXRob2Q9dGhpcy5kYXRhW3RoaXMucG9zKytdO2JyZWFrO2Nhc2VcImFjVExcIjp0aGlzLmFuaW1hdGlvbj17bnVtRnJhbWVzOnRoaXMucmVhZFVJbnQzMigpLG51bVBsYXlzOnRoaXMucmVhZFVJbnQzMigpfHwxLzAsZnJhbWVzOltdfTticmVhaztjYXNlXCJQTFRFXCI6dGhpcy5wYWxldHRlPXRoaXMucmVhZChlKTticmVhaztjYXNlXCJmY1RMXCI6YSYmdGhpcy5hbmltYXRpb24uZnJhbWVzLnB1c2goYSksdGhpcy5wb3MrPTQsYT17d2lkdGg6dGhpcy5yZWFkVUludDMyKCksaGVpZ2h0OnRoaXMucmVhZFVJbnQzMigpLHhPZmZzZXQ6dGhpcy5yZWFkVUludDMyKCkseU9mZnNldDp0aGlzLnJlYWRVSW50MzIoKX0sbz10aGlzLnJlYWRVSW50MTYoKSxpPXRoaXMucmVhZFVJbnQxNigpfHwxMDAsYS5kZWxheT0xZTMqby9pLGEuZGlzcG9zZU9wPXRoaXMuZGF0YVt0aGlzLnBvcysrXSxhLmJsZW5kT3A9dGhpcy5kYXRhW3RoaXMucG9zKytdLGEuZGF0YT1bXTticmVhaztjYXNlXCJJREFUXCI6Y2FzZVwiZmRBVFwiOmZvcihcImZkQVRcIj09PWgmJih0aGlzLnBvcys9NCxlLT00KSx0PShudWxsIT1hP2EuZGF0YTp2b2lkIDApfHx0aGlzLmltZ0RhdGEsZj0wOzA8PWU/ZjxlOmU8ZjswPD1lPysrZjotLWYpdC5wdXNoKHRoaXMuZGF0YVt0aGlzLnBvcysrXSk7YnJlYWs7Y2FzZVwidFJOU1wiOnN3aXRjaCh0aGlzLnRyYW5zcGFyZW5jeT17fSx0aGlzLmNvbG9yVHlwZSl7Y2FzZSAzOmlmKHI9dGhpcy5wYWxldHRlLmxlbmd0aC8zLHRoaXMudHJhbnNwYXJlbmN5LmluZGV4ZWQ9dGhpcy5yZWFkKGUpLHRoaXMudHJhbnNwYXJlbmN5LmluZGV4ZWQubGVuZ3RoPnIpdGhyb3cgbmV3IEVycm9yKFwiTW9yZSB0cmFuc3BhcmVudCBjb2xvcnMgdGhhbiBwYWxldHRlIHNpemVcIik7aWYoMDwodT1yLXRoaXMudHJhbnNwYXJlbmN5LmluZGV4ZWQubGVuZ3RoKSlmb3IocD0wOzA8PXU/cDx1OnU8cDswPD11PysrcDotLXApdGhpcy50cmFuc3BhcmVuY3kuaW5kZXhlZC5wdXNoKDI1NSk7YnJlYWs7Y2FzZSAwOnRoaXMudHJhbnNwYXJlbmN5LmdyYXlzY2FsZT10aGlzLnJlYWQoZSlbMF07YnJlYWs7Y2FzZSAyOnRoaXMudHJhbnNwYXJlbmN5LnJnYj10aGlzLnJlYWQoZSl9YnJlYWs7Y2FzZVwidEVYdFwiOnM9KGM9dGhpcy5yZWFkKGUpKS5pbmRleE9mKDApLGw9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsYy5zbGljZSgwLHMpKSx0aGlzLnRleHRbbF09U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsYy5zbGljZShzKzEpKTticmVhaztjYXNlXCJJRU5EXCI6cmV0dXJuIGEmJnRoaXMuYW5pbWF0aW9uLmZyYW1lcy5wdXNoKGEpLHRoaXMuY29sb3JzPWZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuY29sb3JUeXBlKXtjYXNlIDA6Y2FzZSAzOmNhc2UgNDpyZXR1cm4gMTtjYXNlIDI6Y2FzZSA2OnJldHVybiAzfX0uY2FsbCh0aGlzKSx0aGlzLmhhc0FscGhhQ2hhbm5lbD00PT09KGQ9dGhpcy5jb2xvclR5cGUpfHw2PT09ZCxuPXRoaXMuY29sb3JzKyh0aGlzLmhhc0FscGhhQ2hhbm5lbD8xOjApLHRoaXMucGl4ZWxCaXRsZW5ndGg9dGhpcy5iaXRzKm4sdGhpcy5jb2xvclNwYWNlPWZ1bmN0aW9uKCl7c3dpdGNoKHRoaXMuY29sb3JzKXtjYXNlIDE6cmV0dXJuXCJEZXZpY2VHcmF5XCI7Y2FzZSAzOnJldHVyblwiRGV2aWNlUkdCXCJ9fS5jYWxsKHRoaXMpLHZvaWQodGhpcy5pbWdEYXRhPW5ldyBVaW50OEFycmF5KHRoaXMuaW1nRGF0YSkpO2RlZmF1bHQ6dGhpcy5wb3MrPWV9aWYodGhpcy5wb3MrPTQsdGhpcy5wb3M+dGhpcy5kYXRhLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJJbmNvbXBsZXRlIG9yIGNvcnJ1cHQgUE5HIGZpbGVcIil9fWkubG9hZD1mdW5jdGlvbih0LGUsbil7dmFyIHI7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmKG49ZSksKHI9bmV3IFhNTEh0dHBSZXF1ZXN0KS5vcGVuKFwiR0VUXCIsdCwhMCksci5yZXNwb25zZVR5cGU9XCJhcnJheWJ1ZmZlclwiLHIub25sb2FkPWZ1bmN0aW9uKCl7dmFyIHQ7cmV0dXJuIHQ9bmV3IGkobmV3IFVpbnQ4QXJyYXkoci5yZXNwb25zZXx8ci5tb3pSZXNwb25zZUFycmF5QnVmZmVyKSksXCJmdW5jdGlvblwiPT10eXBlb2YobnVsbCE9ZT9lLmdldENvbnRleHQ6dm9pZCAwKSYmdC5yZW5kZXIoZSksXCJmdW5jdGlvblwiPT10eXBlb2Ygbj9uKHQpOnZvaWQgMH0sci5zZW5kKG51bGwpfSxpLnByb3RvdHlwZS5yZWFkPWZ1bmN0aW9uKHQpe3ZhciBlLG47Zm9yKG49W10sZT0wOzA8PXQ/ZTx0OnQ8ZTswPD10PysrZTotLWUpbi5wdXNoKHRoaXMuZGF0YVt0aGlzLnBvcysrXSk7cmV0dXJuIG59LGkucHJvdG90eXBlLnJlYWRVSW50MzI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kYXRhW3RoaXMucG9zKytdPDwyNHx0aGlzLmRhdGFbdGhpcy5wb3MrK108PDE2fHRoaXMuZGF0YVt0aGlzLnBvcysrXTw8OHx0aGlzLmRhdGFbdGhpcy5wb3MrK119LGkucHJvdG90eXBlLnJlYWRVSW50MTY9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kYXRhW3RoaXMucG9zKytdPDw4fHRoaXMuZGF0YVt0aGlzLnBvcysrXX0saS5wcm90b3R5cGUuZGVjb2RlUGl4ZWxzPWZ1bmN0aW9uKEMpe3ZhciBCPXRoaXMucGl4ZWxCaXRsZW5ndGgvOCxqPW5ldyBVaW50OEFycmF5KHRoaXMud2lkdGgqdGhpcy5oZWlnaHQqQiksRT0wLE09dGhpcztpZihudWxsPT1DJiYoQz10aGlzLmltZ0RhdGEpLDA9PT1DLmxlbmd0aClyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7ZnVuY3Rpb24gdCh0LGUsbixyKXt2YXIgaSxvLGEscyxsLGgsdSxjLGYscCxkLGcsbSx5LHYsdyxiLHgsTixMLEEsUz1NYXRoLmNlaWwoKE0ud2lkdGgtdCkvbiksXz1NYXRoLmNlaWwoKE0uaGVpZ2h0LWUpL3IpLEY9TS53aWR0aD09UyYmTS5oZWlnaHQ9PV87Zm9yKHk9QipTLGc9Rj9qOm5ldyBVaW50OEFycmF5KHkqXyksaD1DLmxlbmd0aCxvPW09MDttPF8mJkU8aDspe3N3aXRjaChDW0UrK10pe2Nhc2UgMDpmb3Iocz1iPTA7Yjx5O3M9Yis9MSlnW28rK109Q1tFKytdO2JyZWFrO2Nhc2UgMTpmb3Iocz14PTA7eDx5O3M9eCs9MSlpPUNbRSsrXSxsPXM8Qj8wOmdbby1CXSxnW28rK109KGkrbCklMjU2O2JyZWFrO2Nhc2UgMjpmb3Iocz1OPTA7Tjx5O3M9Tis9MSlpPUNbRSsrXSxhPShzLXMlQikvQix2PW0mJmdbKG0tMSkqeSthKkIrcyVCXSxnW28rK109KHYraSklMjU2O2JyZWFrO2Nhc2UgMzpmb3Iocz1MPTA7TDx5O3M9TCs9MSlpPUNbRSsrXSxhPShzLXMlQikvQixsPXM8Qj8wOmdbby1CXSx2PW0mJmdbKG0tMSkqeSthKkIrcyVCXSxnW28rK109KGkrTWF0aC5mbG9vcigobCt2KS8yKSklMjU2O2JyZWFrO2Nhc2UgNDpmb3Iocz1BPTA7QTx5O3M9QSs9MSlpPUNbRSsrXSxhPShzLXMlQikvQixsPXM8Qj8wOmdbby1CXSwwPT09bT92PXc9MDoodj1nWyhtLTEpKnkrYSpCK3MlQl0sdz1hJiZnWyhtLTEpKnkrKGEtMSkqQitzJUJdKSx1PWwrdi13LGM9TWF0aC5hYnModS1sKSxwPU1hdGguYWJzKHUtdiksZD1NYXRoLmFicyh1LXcpLGY9Yzw9cCYmYzw9ZD9sOnA8PWQ/djp3LGdbbysrXT0oaStmKSUyNTY7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGZpbHRlciBhbGdvcml0aG06IFwiK0NbRS0xXSl9aWYoIUYpe3ZhciBQPSgoZSttKnIpKk0ud2lkdGgrdCkqQixrPW0qeTtmb3Iocz0wO3M8UztzKz0xKXtmb3IodmFyIEk9MDtJPEI7SSs9MSlqW1ArK109Z1trKytdO1ArPShuLTEpKkJ9fW0rK319cmV0dXJuIEM9KEM9bmV3IGt0KEMpKS5nZXRCeXRlcygpLDE9PU0uaW50ZXJsYWNlTWV0aG9kPyh0KDAsMCw4LDgpLHQoNCwwLDgsOCksdCgwLDQsNCw4KSx0KDIsMCw0LDQpLHQoMCwyLDIsNCksdCgxLDAsMiwyKSx0KDAsMSwxLDIpKTp0KDAsMCwxLDEpLGp9LGkucHJvdG90eXBlLmRlY29kZVBhbGV0dGU9ZnVuY3Rpb24oKXt2YXIgdCxlLG4scixpLG8sYSxzLGw7Zm9yKG49dGhpcy5wYWxldHRlLG89dGhpcy50cmFuc3BhcmVuY3kuaW5kZXhlZHx8W10saT1uZXcgVWludDhBcnJheSgoby5sZW5ndGh8fDApK24ubGVuZ3RoKSxyPTAsbi5sZW5ndGgsZT1hPXQ9MCxzPW4ubGVuZ3RoO2E8cztlPWErPTMpaVtyKytdPW5bZV0saVtyKytdPW5bZSsxXSxpW3IrK109bltlKzJdLGlbcisrXT1udWxsIT0obD1vW3QrK10pP2w6MjU1O3JldHVybiBpfSxpLnByb3RvdHlwZS5jb3B5VG9JbWFnZURhdGE9ZnVuY3Rpb24odCxlKXt2YXIgbixyLGksbyxhLHMsbCxoLHUsYyxmO2lmKHI9dGhpcy5jb2xvcnMsdT1udWxsLG49dGhpcy5oYXNBbHBoYUNoYW5uZWwsdGhpcy5wYWxldHRlLmxlbmd0aCYmKHU9bnVsbCE9KGY9dGhpcy5fZGVjb2RlZFBhbGV0dGUpP2Y6dGhpcy5fZGVjb2RlZFBhbGV0dGU9dGhpcy5kZWNvZGVQYWxldHRlKCkscj00LG49ITApLGg9KGk9dC5kYXRhfHx0KS5sZW5ndGgsYT11fHxlLG89cz0wLDE9PT1yKWZvcig7bzxoOylsPXU/NCplW28vNF06cyxjPWFbbCsrXSxpW28rK109YyxpW28rK109YyxpW28rK109YyxpW28rK109bj9hW2wrK106MjU1LHM9bDtlbHNlIGZvcig7bzxoOylsPXU/NCplW28vNF06cyxpW28rK109YVtsKytdLGlbbysrXT1hW2wrK10saVtvKytdPWFbbCsrXSxpW28rK109bj9hW2wrK106MjU1LHM9bH0saS5wcm90b3R5cGUuZGVjb2RlPWZ1bmN0aW9uKCl7dmFyIHQ7cmV0dXJuIHQ9bmV3IFVpbnQ4QXJyYXkodGhpcy53aWR0aCp0aGlzLmhlaWdodCo0KSx0aGlzLmNvcHlUb0ltYWdlRGF0YSh0LHRoaXMuZGVjb2RlUGl4ZWxzKCkpLHR9O3RyeXtuPU50LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikscj1uLmdldENvbnRleHQoXCIyZFwiKX1jYXRjaCh0KXtyZXR1cm4tMX1yZXR1cm4gaD1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4gci53aWR0aD10LndpZHRoLHIuaGVpZ2h0PXQuaGVpZ2h0LHIuY2xlYXJSZWN0KDAsMCx0LndpZHRoLHQuaGVpZ2h0KSxyLnB1dEltYWdlRGF0YSh0LDAsMCksKGU9bmV3IEltYWdlKS5zcmM9bi50b0RhdGFVUkwoKSxlfSxpLnByb3RvdHlwZS5kZWNvZGVGcmFtZXM9ZnVuY3Rpb24odCl7dmFyIGUsbixyLGksbyxhLHMsbDtpZih0aGlzLmFuaW1hdGlvbil7Zm9yKGw9W10sbj1vPTAsYT0ocz10aGlzLmFuaW1hdGlvbi5mcmFtZXMpLmxlbmd0aDtvPGE7bj0rK28pZT1zW25dLHI9dC5jcmVhdGVJbWFnZURhdGEoZS53aWR0aCxlLmhlaWdodCksaT10aGlzLmRlY29kZVBpeGVscyhuZXcgVWludDhBcnJheShlLmRhdGEpKSx0aGlzLmNvcHlUb0ltYWdlRGF0YShyLGkpLGUuaW1hZ2VEYXRhPXIsbC5wdXNoKGUuaW1hZ2U9aChyKSk7cmV0dXJuIGx9fSxpLnByb3RvdHlwZS5yZW5kZXJGcmFtZT1mdW5jdGlvbih0LGUpe3ZhciBuLHIsaTtyZXR1cm4gbj0ocj10aGlzLmFuaW1hdGlvbi5mcmFtZXMpW2VdLGk9cltlLTFdLDA9PT1lJiZ0LmNsZWFyUmVjdCgwLDAsdGhpcy53aWR0aCx0aGlzLmhlaWdodCksMT09PShudWxsIT1pP2kuZGlzcG9zZU9wOnZvaWQgMCk/dC5jbGVhclJlY3QoaS54T2Zmc2V0LGkueU9mZnNldCxpLndpZHRoLGkuaGVpZ2h0KToyPT09KG51bGwhPWk/aS5kaXNwb3NlT3A6dm9pZCAwKSYmdC5wdXRJbWFnZURhdGEoaS5pbWFnZURhdGEsaS54T2Zmc2V0LGkueU9mZnNldCksMD09PW4uYmxlbmRPcCYmdC5jbGVhclJlY3Qobi54T2Zmc2V0LG4ueU9mZnNldCxuLndpZHRoLG4uaGVpZ2h0KSx0LmRyYXdJbWFnZShuLmltYWdlLG4ueE9mZnNldCxuLnlPZmZzZXQpfSxpLnByb3RvdHlwZS5hbmltYXRlPWZ1bmN0aW9uKG4pe3ZhciByLGksbyxhLHMsdCxsPXRoaXM7cmV0dXJuIGk9MCx0PXRoaXMuYW5pbWF0aW9uLGE9dC5udW1GcmFtZXMsbz10LmZyYW1lcyxzPXQubnVtUGxheXMsKHI9ZnVuY3Rpb24oKXt2YXIgdCxlO2lmKHQ9aSsrJWEsZT1vW3RdLGwucmVuZGVyRnJhbWUobix0KSwxPGEmJmkvYTxzKXJldHVybiBsLmFuaW1hdGlvbi5fdGltZW91dD1zZXRUaW1lb3V0KHIsZS5kZWxheSl9KSgpfSxpLnByb3RvdHlwZS5zdG9wQW5pbWF0aW9uPWZ1bmN0aW9uKCl7dmFyIHQ7cmV0dXJuIGNsZWFyVGltZW91dChudWxsIT0odD10aGlzLmFuaW1hdGlvbik/dC5fdGltZW91dDp2b2lkIDApfSxpLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24odCl7dmFyIGUsbjtyZXR1cm4gdC5fcG5nJiZ0Ll9wbmcuc3RvcEFuaW1hdGlvbigpLHQuX3BuZz10aGlzLHQud2lkdGg9dGhpcy53aWR0aCx0LmhlaWdodD10aGlzLmhlaWdodCxlPXQuZ2V0Q29udGV4dChcIjJkXCIpLHRoaXMuYW5pbWF0aW9uPyh0aGlzLmRlY29kZUZyYW1lcyhlKSx0aGlzLmFuaW1hdGUoZSkpOihuPWUuY3JlYXRlSW1hZ2VEYXRhKHRoaXMud2lkdGgsdGhpcy5oZWlnaHQpLHRoaXMuY29weVRvSW1hZ2VEYXRhKG4sdGhpcy5kZWNvZGVQaXhlbHMoKSksZS5wdXRJbWFnZURhdGEobiwwLDApKX0saX0oKSxOdC5QTkc9THQ7XHJcbi8qXHJcbiAgICogRXh0cmFjdGVkIGZyb20gcGRmLmpzXHJcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2FuZHJlYXNnYWwvcGRmLmpzXHJcbiAgICpcclxuICAgKiBDb3B5cmlnaHQgKGMpIDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uXHJcbiAgICpcclxuICAgKiBDb250cmlidXRvcnM6IEFuZHJlYXMgR2FsIDxnYWxAbW96aWxsYS5jb20+XHJcbiAgICogICAgICAgICAgICAgICBDaHJpcyBHIEpvbmVzIDxjam9uZXNAbW96aWxsYS5jb20+XHJcbiAgICogICAgICAgICAgICAgICBTaGFvbiBCYXJtYW4gPHNoYW9uLmJhcm1hbkBnbWFpbC5jb20+XHJcbiAgICogICAgICAgICAgICAgICBWaXZpZW4gTmljb2xhcyA8MjFAdmluZ3RldHVuLm9yZz5cclxuICAgKiAgICAgICAgICAgICAgIEp1c3RpbiBEJ0FyY2FuZ2VsbyA8anVzdGluZGFyY0BnbWFpbC5jb20+XHJcbiAgICogICAgICAgICAgICAgICBZdXJ5IERlbGVuZGlrXHJcbiAgICpcclxuICAgKiBcclxuICAgKi9cclxudmFyIFB0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMucG9zPTAsdGhpcy5idWZmZXJMZW5ndGg9MCx0aGlzLmVvZj0hMSx0aGlzLmJ1ZmZlcj1udWxsfXJldHVybiB0LnByb3RvdHlwZT17ZW5zdXJlQnVmZmVyOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuYnVmZmVyLG49ZT9lLmJ5dGVMZW5ndGg6MDtpZih0PG4pcmV0dXJuIGU7Zm9yKHZhciByPTUxMjtyPHQ7KXI8PD0xO2Zvcih2YXIgaT1uZXcgVWludDhBcnJheShyKSxvPTA7bzxuOysrbylpW29dPWVbb107cmV0dXJuIHRoaXMuYnVmZmVyPWl9LGdldEJ5dGU6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5wb3M7dGhpcy5idWZmZXJMZW5ndGg8PXQ7KXtpZih0aGlzLmVvZilyZXR1cm4gbnVsbDt0aGlzLnJlYWRCbG9jaygpfXJldHVybiB0aGlzLmJ1ZmZlclt0aGlzLnBvcysrXX0sZ2V0Qnl0ZXM6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5wb3M7aWYodCl7dGhpcy5lbnN1cmVCdWZmZXIoZSt0KTtmb3IodmFyIG49ZSt0OyF0aGlzLmVvZiYmdGhpcy5idWZmZXJMZW5ndGg8bjspdGhpcy5yZWFkQmxvY2soKTt2YXIgcj10aGlzLmJ1ZmZlckxlbmd0aDtyPG4mJihuPXIpfWVsc2V7Zm9yKDshdGhpcy5lb2Y7KXRoaXMucmVhZEJsb2NrKCk7bj10aGlzLmJ1ZmZlckxlbmd0aH1yZXR1cm4gdGhpcy5wb3M9bix0aGlzLmJ1ZmZlci5zdWJhcnJheShlLG4pfSxsb29rQ2hhcjpmdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLnBvczt0aGlzLmJ1ZmZlckxlbmd0aDw9dDspe2lmKHRoaXMuZW9mKXJldHVybiBudWxsO3RoaXMucmVhZEJsb2NrKCl9cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5idWZmZXJbdGhpcy5wb3NdKX0sZ2V0Q2hhcjpmdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLnBvczt0aGlzLmJ1ZmZlckxlbmd0aDw9dDspe2lmKHRoaXMuZW9mKXJldHVybiBudWxsO3RoaXMucmVhZEJsb2NrKCl9cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5idWZmZXJbdGhpcy5wb3MrK10pfSxtYWtlU3ViU3RyZWFtOmZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9dCtlO3RoaXMuYnVmZmVyTGVuZ3RoPD1yJiYhdGhpcy5lb2Y7KXRoaXMucmVhZEJsb2NrKCk7cmV0dXJuIG5ldyBTdHJlYW0odGhpcy5idWZmZXIsdCxlLG4pfSxza2lwOmZ1bmN0aW9uKHQpe3R8fCh0PTEpLHRoaXMucG9zKz10fSxyZXNldDpmdW5jdGlvbigpe3RoaXMucG9zPTB9fSx0fSgpLGt0PWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQzMkFycmF5KXt2YXIgaz1uZXcgVWludDMyQXJyYXkoWzE2LDE3LDE4LDAsOCw3LDksNiwxMCw1LDExLDQsMTIsMywxMywyLDE0LDEsMTVdKSxJPW5ldyBVaW50MzJBcnJheShbMyw0LDUsNiw3LDgsOSwxMCw2NTU0Nyw2NTU0OSw2NTU1MSw2NTU1MywxMzEwOTEsMTMxMDk1LDEzMTA5OSwxMzExMDMsMTk2NjQzLDE5NjY1MSwxOTY2NTksMTk2NjY3LDI2MjIxMSwyNjIyMjcsMjYyMjQzLDI2MjI1OSwzMjc4MTEsMzI3ODQzLDMyNzg3NSwzMjc5MDcsMjU4LDI1OCwyNThdKSxDPW5ldyBVaW50MzJBcnJheShbMSwyLDMsNCw2NTU0MSw2NTU0MywxMzEwODEsMTMxMDg1LDE5NjYyNSwxOTY2MzMsMjYyMTc3LDI2MjE5MywzMjc3NDUsMzI3Nzc3LDM5MzM0NSwzOTM0MDksNDU5MDA5LDQ1OTEzNyw1MjQ4MDEsNTI1MDU3LDU5MDg0OSw1OTEzNjEsNjU3NDA5LDY1ODQzMyw3MjQ5OTMsNzI3MDQxLDc5NDYyNSw3OTg3MjEsODY4MzUzLDg3NjU0NV0pLEI9W25ldyBVaW50MzJBcnJheShbNDU5MDA4LDUyNDM2OCw1MjQzMDQsNTI0NTY4LDQ1OTAyNCw1MjQ0MDAsNTI0MzM2LDU5MDAxNiw0NTkwMTYsNTI0Mzg0LDUyNDMyMCw1ODk5ODQsNTI0Mjg4LDUyNDQxNiw1MjQzNTIsNTkwMDQ4LDQ1OTAxMiw1MjQzNzYsNTI0MzEyLDU4OTk2OCw0NTkwMjgsNTI0NDA4LDUyNDM0NCw1OTAwMzIsNDU5MDIwLDUyNDM5Miw1MjQzMjgsNTllNCw1MjQyOTYsNTI0NDI0LDUyNDM2MCw1OTAwNjQsNDU5MDEwLDUyNDM3Miw1MjQzMDgsNTI0NTcyLDQ1OTAyNiw1MjQ0MDQsNTI0MzQwLDU5MDAyNCw0NTkwMTgsNTI0Mzg4LDUyNDMyNCw1ODk5OTIsNTI0MjkyLDUyNDQyMCw1MjQzNTYsNTkwMDU2LDQ1OTAxNCw1MjQzODAsNTI0MzE2LDU4OTk3Niw0NTkwMzAsNTI0NDEyLDUyNDM0OCw1OTAwNDAsNDU5MDIyLDUyNDM5Niw1MjQzMzIsNTkwMDA4LDUyNDMwMCw1MjQ0MjgsNTI0MzY0LDU5MDA3Miw0NTkwMDksNTI0MzcwLDUyNDMwNiw1MjQ1NzAsNDU5MDI1LDUyNDQwMiw1MjQzMzgsNTkwMDIwLDQ1OTAxNyw1MjQzODYsNTI0MzIyLDU4OTk4OCw1MjQyOTAsNTI0NDE4LDUyNDM1NCw1OTAwNTIsNDU5MDEzLDUyNDM3OCw1MjQzMTQsNTg5OTcyLDQ1OTAyOSw1MjQ0MTAsNTI0MzQ2LDU5MDAzNiw0NTkwMjEsNTI0Mzk0LDUyNDMzMCw1OTAwMDQsNTI0Mjk4LDUyNDQyNiw1MjQzNjIsNTkwMDY4LDQ1OTAxMSw1MjQzNzQsNTI0MzEwLDUyNDU3NCw0NTkwMjcsNTI0NDA2LDUyNDM0Miw1OTAwMjgsNDU5MDE5LDUyNDM5MCw1MjQzMjYsNTg5OTk2LDUyNDI5NCw1MjQ0MjIsNTI0MzU4LDU5MDA2MCw0NTkwMTUsNTI0MzgyLDUyNDMxOCw1ODk5ODAsNDU5MDMxLDUyNDQxNCw1MjQzNTAsNTkwMDQ0LDQ1OTAyMyw1MjQzOTgsNTI0MzM0LDU5MDAxMiw1MjQzMDIsNTI0NDMwLDUyNDM2Niw1OTAwNzYsNDU5MDA4LDUyNDM2OSw1MjQzMDUsNTI0NTY5LDQ1OTAyNCw1MjQ0MDEsNTI0MzM3LDU5MDAxOCw0NTkwMTYsNTI0Mzg1LDUyNDMyMSw1ODk5ODYsNTI0Mjg5LDUyNDQxNyw1MjQzNTMsNTkwMDUwLDQ1OTAxMiw1MjQzNzcsNTI0MzEzLDU4OTk3MCw0NTkwMjgsNTI0NDA5LDUyNDM0NSw1OTAwMzQsNDU5MDIwLDUyNDM5Myw1MjQzMjksNTkwMDAyLDUyNDI5Nyw1MjQ0MjUsNTI0MzYxLDU5MDA2Niw0NTkwMTAsNTI0MzczLDUyNDMwOSw1MjQ1NzMsNDU5MDI2LDUyNDQwNSw1MjQzNDEsNTkwMDI2LDQ1OTAxOCw1MjQzODksNTI0MzI1LDU4OTk5NCw1MjQyOTMsNTI0NDIxLDUyNDM1Nyw1OTAwNTgsNDU5MDE0LDUyNDM4MSw1MjQzMTcsNTg5OTc4LDQ1OTAzMCw1MjQ0MTMsNTI0MzQ5LDU5MDA0Miw0NTkwMjIsNTI0Mzk3LDUyNDMzMyw1OTAwMTAsNTI0MzAxLDUyNDQyOSw1MjQzNjUsNTkwMDc0LDQ1OTAwOSw1MjQzNzEsNTI0MzA3LDUyNDU3MSw0NTkwMjUsNTI0NDAzLDUyNDMzOSw1OTAwMjIsNDU5MDE3LDUyNDM4Nyw1MjQzMjMsNTg5OTkwLDUyNDI5MSw1MjQ0MTksNTI0MzU1LDU5MDA1NCw0NTkwMTMsNTI0Mzc5LDUyNDMxNSw1ODk5NzQsNDU5MDI5LDUyNDQxMSw1MjQzNDcsNTkwMDM4LDQ1OTAyMSw1MjQzOTUsNTI0MzMxLDU5MDAwNiw1MjQyOTksNTI0NDI3LDUyNDM2Myw1OTAwNzAsNDU5MDExLDUyNDM3NSw1MjQzMTEsNTI0NTc1LDQ1OTAyNyw1MjQ0MDcsNTI0MzQzLDU5MDAzMCw0NTkwMTksNTI0MzkxLDUyNDMyNyw1ODk5OTgsNTI0Mjk1LDUyNDQyMyw1MjQzNTksNTkwMDYyLDQ1OTAxNSw1MjQzODMsNTI0MzE5LDU4OTk4Miw0NTkwMzEsNTI0NDE1LDUyNDM1MSw1OTAwNDYsNDU5MDIzLDUyNDM5OSw1MjQzMzUsNTkwMDE0LDUyNDMwMyw1MjQ0MzEsNTI0MzY3LDU5MDA3OCw0NTkwMDgsNTI0MzY4LDUyNDMwNCw1MjQ1NjgsNDU5MDI0LDUyNDQwMCw1MjQzMzYsNTkwMDE3LDQ1OTAxNiw1MjQzODQsNTI0MzIwLDU4OTk4NSw1MjQyODgsNTI0NDE2LDUyNDM1Miw1OTAwNDksNDU5MDEyLDUyNDM3Niw1MjQzMTIsNTg5OTY5LDQ1OTAyOCw1MjQ0MDgsNTI0MzQ0LDU5MDAzMyw0NTkwMjAsNTI0MzkyLDUyNDMyOCw1OTAwMDEsNTI0Mjk2LDUyNDQyNCw1MjQzNjAsNTkwMDY1LDQ1OTAxMCw1MjQzNzIsNTI0MzA4LDUyNDU3Miw0NTkwMjYsNTI0NDA0LDUyNDM0MCw1OTAwMjUsNDU5MDE4LDUyNDM4OCw1MjQzMjQsNTg5OTkzLDUyNDI5Miw1MjQ0MjAsNTI0MzU2LDU5MDA1Nyw0NTkwMTQsNTI0MzgwLDUyNDMxNiw1ODk5NzcsNDU5MDMwLDUyNDQxMiw1MjQzNDgsNTkwMDQxLDQ1OTAyMiw1MjQzOTYsNTI0MzMyLDU5MDAwOSw1MjQzMDAsNTI0NDI4LDUyNDM2NCw1OTAwNzMsNDU5MDA5LDUyNDM3MCw1MjQzMDYsNTI0NTcwLDQ1OTAyNSw1MjQ0MDIsNTI0MzM4LDU5MDAyMSw0NTkwMTcsNTI0Mzg2LDUyNDMyMiw1ODk5ODksNTI0MjkwLDUyNDQxOCw1MjQzNTQsNTkwMDUzLDQ1OTAxMyw1MjQzNzgsNTI0MzE0LDU4OTk3Myw0NTkwMjksNTI0NDEwLDUyNDM0Niw1OTAwMzcsNDU5MDIxLDUyNDM5NCw1MjQzMzAsNTkwMDA1LDUyNDI5OCw1MjQ0MjYsNTI0MzYyLDU5MDA2OSw0NTkwMTEsNTI0Mzc0LDUyNDMxMCw1MjQ1NzQsNDU5MDI3LDUyNDQwNiw1MjQzNDIsNTkwMDI5LDQ1OTAxOSw1MjQzOTAsNTI0MzI2LDU4OTk5Nyw1MjQyOTQsNTI0NDIyLDUyNDM1OCw1OTAwNjEsNDU5MDE1LDUyNDM4Miw1MjQzMTgsNTg5OTgxLDQ1OTAzMSw1MjQ0MTQsNTI0MzUwLDU5MDA0NSw0NTkwMjMsNTI0Mzk4LDUyNDMzNCw1OTAwMTMsNTI0MzAyLDUyNDQzMCw1MjQzNjYsNTkwMDc3LDQ1OTAwOCw1MjQzNjksNTI0MzA1LDUyNDU2OSw0NTkwMjQsNTI0NDAxLDUyNDMzNyw1OTAwMTksNDU5MDE2LDUyNDM4NSw1MjQzMjEsNTg5OTg3LDUyNDI4OSw1MjQ0MTcsNTI0MzUzLDU5MDA1MSw0NTkwMTIsNTI0Mzc3LDUyNDMxMyw1ODk5NzEsNDU5MDI4LDUyNDQwOSw1MjQzNDUsNTkwMDM1LDQ1OTAyMCw1MjQzOTMsNTI0MzI5LDU5MDAwMyw1MjQyOTcsNTI0NDI1LDUyNDM2MSw1OTAwNjcsNDU5MDEwLDUyNDM3Myw1MjQzMDksNTI0NTczLDQ1OTAyNiw1MjQ0MDUsNTI0MzQxLDU5MDAyNyw0NTkwMTgsNTI0Mzg5LDUyNDMyNSw1ODk5OTUsNTI0MjkzLDUyNDQyMSw1MjQzNTcsNTkwMDU5LDQ1OTAxNCw1MjQzODEsNTI0MzE3LDU4OTk3OSw0NTkwMzAsNTI0NDEzLDUyNDM0OSw1OTAwNDMsNDU5MDIyLDUyNDM5Nyw1MjQzMzMsNTkwMDExLDUyNDMwMSw1MjQ0MjksNTI0MzY1LDU5MDA3NSw0NTkwMDksNTI0MzcxLDUyNDMwNyw1MjQ1NzEsNDU5MDI1LDUyNDQwMyw1MjQzMzksNTkwMDIzLDQ1OTAxNyw1MjQzODcsNTI0MzIzLDU4OTk5MSw1MjQyOTEsNTI0NDE5LDUyNDM1NSw1OTAwNTUsNDU5MDEzLDUyNDM3OSw1MjQzMTUsNTg5OTc1LDQ1OTAyOSw1MjQ0MTEsNTI0MzQ3LDU5MDAzOSw0NTkwMjEsNTI0Mzk1LDUyNDMzMSw1OTAwMDcsNTI0Mjk5LDUyNDQyNyw1MjQzNjMsNTkwMDcxLDQ1OTAxMSw1MjQzNzUsNTI0MzExLDUyNDU3NSw0NTkwMjcsNTI0NDA3LDUyNDM0Myw1OTAwMzEsNDU5MDE5LDUyNDM5MSw1MjQzMjcsNTg5OTk5LDUyNDI5NSw1MjQ0MjMsNTI0MzU5LDU5MDA2Myw0NTkwMTUsNTI0MzgzLDUyNDMxOSw1ODk5ODMsNDU5MDMxLDUyNDQxNSw1MjQzNTEsNTkwMDQ3LDQ1OTAyMyw1MjQzOTksNTI0MzM1LDU5MDAxNSw1MjQzMDMsNTI0NDMxLDUyNDM2Nyw1OTAwNzldKSw5XSxqPVtuZXcgVWludDMyQXJyYXkoWzMyNzY4MCwzMjc2OTYsMzI3Njg4LDMyNzcwNCwzMjc2ODQsMzI3NzAwLDMyNzY5MiwzMjc3MDgsMzI3NjgyLDMyNzY5OCwzMjc2OTAsMzI3NzA2LDMyNzY4NiwzMjc3MDIsMzI3Njk0LDAsMzI3NjgxLDMyNzY5NywzMjc2ODksMzI3NzA1LDMyNzY4NSwzMjc3MDEsMzI3NjkzLDMyNzcwOSwzMjc2ODMsMzI3Njk5LDMyNzY5MSwzMjc3MDcsMzI3Njg3LDMyNzcwMywzMjc2OTUsMF0pLDVdO3JldHVybih0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFB0LnByb3RvdHlwZSkpLmdldEJpdHM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlLG49dGhpcy5jb2RlU2l6ZSxyPXRoaXMuY29kZUJ1ZixpPXRoaXMuYnl0ZXMsbz10aGlzLmJ5dGVzUG9zO248dDspdm9pZCAwPT09KGU9aVtvKytdKSYmRShcIkJhZCBlbmNvZGluZyBpbiBmbGF0ZSBzdHJlYW1cIikscnw9ZTw8bixuKz04O3JldHVybiBlPXImKDE8PHQpLTEsdGhpcy5jb2RlQnVmPXI+PnQsdGhpcy5jb2RlU2l6ZT1uLT10LHRoaXMuYnl0ZXNQb3M9byxlfSx0LnByb3RvdHlwZS5nZXRDb2RlPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10WzBdLG49dFsxXSxyPXRoaXMuY29kZVNpemUsaT10aGlzLmNvZGVCdWYsbz10aGlzLmJ5dGVzLGE9dGhpcy5ieXRlc1BvcztyPG47KXt2YXIgczt2b2lkIDA9PT0ocz1vW2ErK10pJiZFKFwiQmFkIGVuY29kaW5nIGluIGZsYXRlIHN0cmVhbVwiKSxpfD1zPDxyLHIrPTh9dmFyIGw9ZVtpJigxPDxuKS0xXSxoPWw+PjE2LHU9NjU1MzUmbDtyZXR1cm4oMD09cnx8cjxofHwwPT1oKSYmRShcIkJhZCBlbmNvZGluZyBpbiBmbGF0ZSBzdHJlYW1cIiksdGhpcy5jb2RlQnVmPWk+PmgsdGhpcy5jb2RlU2l6ZT1yLWgsdGhpcy5ieXRlc1Bvcz1hLHV9LHQucHJvdG90eXBlLmdlbmVyYXRlSHVmZm1hblRhYmxlPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10Lmxlbmd0aCxuPTAscj0wO3I8ZTsrK3IpdFtyXT5uJiYobj10W3JdKTtmb3IodmFyIGk9MTw8bixvPW5ldyBVaW50MzJBcnJheShpKSxhPTEscz0wLGw9MjthPD1uOysrYSxzPDw9MSxsPDw9MSlmb3IodmFyIGg9MDtoPGU7KytoKWlmKHRbaF09PWEpe3ZhciB1PTAsYz1zO2ZvcihyPTA7cjxhOysrcil1PXU8PDF8MSZjLGM+Pj0xO2ZvcihyPXU7cjxpO3IrPWwpb1tyXT1hPDwxNnxoOysrc31yZXR1cm5bbyxuXX0sdC5wcm90b3R5cGUucmVhZEJsb2NrPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUsbixyLGkpe2Zvcih2YXIgbz10LmdldEJpdHMobikrcjswPG8tLTspZVtsKytdPWl9dmFyIGU9dGhpcy5nZXRCaXRzKDMpO2lmKDEmZSYmKHRoaXMuZW9mPSEwKSwwIT0oZT4+PTEpKXt2YXIgbixyO2lmKDE9PWUpbj1CLHI9ajtlbHNlIGlmKDI9PWUpe2Zvcih2YXIgaT10aGlzLmdldEJpdHMoNSkrMjU3LG89dGhpcy5nZXRCaXRzKDUpKzEsYT10aGlzLmdldEJpdHMoNCkrNCxzPUFycmF5KGsubGVuZ3RoKSxsPTA7bDxhOylzW2tbbCsrXV09dGhpcy5nZXRCaXRzKDMpO2Zvcih2YXIgaD10aGlzLmdlbmVyYXRlSHVmZm1hblRhYmxlKHMpLHU9MCxjPShsPTAsaStvKSxmPW5ldyBBcnJheShjKTtsPGM7KXt2YXIgcD10aGlzLmdldENvZGUoaCk7MTY9PXA/dCh0aGlzLGYsMiwzLHUpOjE3PT1wP3QodGhpcyxmLDMsMyx1PTApOjE4PT1wP3QodGhpcyxmLDcsMTEsdT0wKTpmW2wrK109dT1wfW49dGhpcy5nZW5lcmF0ZUh1ZmZtYW5UYWJsZShmLnNsaWNlKDAsaSkpLHI9dGhpcy5nZW5lcmF0ZUh1ZmZtYW5UYWJsZShmLnNsaWNlKGksYykpfWVsc2UgRShcIlVua25vd24gYmxvY2sgdHlwZSBpbiBmbGF0ZSBzdHJlYW1cIik7Zm9yKHZhciBkPShfPXRoaXMuYnVmZmVyKT9fLmxlbmd0aDowLGc9dGhpcy5idWZmZXJMZW5ndGg7Oyl7dmFyIG09dGhpcy5nZXRDb2RlKG4pO2lmKG08MjU2KWQ8PWcrMSYmKGQ9KF89dGhpcy5lbnN1cmVCdWZmZXIoZysxKSkubGVuZ3RoKSxfW2crK109bTtlbHNle2lmKDI1Nj09bSlyZXR1cm4gdm9pZCh0aGlzLmJ1ZmZlckxlbmd0aD1nKTt2YXIgeT0obT1JW20tPTI1N10pPj4xNjswPHkmJih5PXRoaXMuZ2V0Qml0cyh5KSk7dT0oNjU1MzUmbSkreTttPXRoaXMuZ2V0Q29kZShyKSwwPCh5PShtPUNbbV0pPj4xNikmJih5PXRoaXMuZ2V0Qml0cyh5KSk7dmFyIHY9KDY1NTM1Jm0pK3k7ZDw9Zyt1JiYoZD0oXz10aGlzLmVuc3VyZUJ1ZmZlcihnK3UpKS5sZW5ndGgpO2Zvcih2YXIgdz0wO3c8dTsrK3csKytnKV9bZ109X1tnLXZdfX19ZWxzZXt2YXIgYix4PXRoaXMuYnl0ZXMsTj10aGlzLmJ5dGVzUG9zO3ZvaWQgMD09PShiPXhbTisrXSkmJkUoXCJCYWQgYmxvY2sgaGVhZGVyIGluIGZsYXRlIHN0cmVhbVwiKTt2YXIgTD1iO3ZvaWQgMD09PShiPXhbTisrXSkmJkUoXCJCYWQgYmxvY2sgaGVhZGVyIGluIGZsYXRlIHN0cmVhbVwiKSxMfD1iPDw4LHZvaWQgMD09PShiPXhbTisrXSkmJkUoXCJCYWQgYmxvY2sgaGVhZGVyIGluIGZsYXRlIHN0cmVhbVwiKTt2YXIgQT1iO3ZvaWQgMD09PShiPXhbTisrXSkmJkUoXCJCYWQgYmxvY2sgaGVhZGVyIGluIGZsYXRlIHN0cmVhbVwiKSwoQXw9Yjw8OCkhPSg2NTUzNSZ+TCkmJkUoXCJCYWQgdW5jb21wcmVzc2VkIGJsb2NrIGxlbmd0aCBpbiBmbGF0ZSBzdHJlYW1cIiksdGhpcy5jb2RlQnVmPTAsdGhpcy5jb2RlU2l6ZT0wO3ZhciBTPXRoaXMuYnVmZmVyTGVuZ3RoLF89dGhpcy5lbnN1cmVCdWZmZXIoUytMKSxGPVMrTDt0aGlzLmJ1ZmZlckxlbmd0aD1GO2Zvcih2YXIgUD1TO1A8RjsrK1Ape2lmKHZvaWQgMD09PShiPXhbTisrXSkpe3RoaXMuZW9mPSEwO2JyZWFrfV9bUF09Yn10aGlzLmJ5dGVzUG9zPU59fSx0fWZ1bmN0aW9uIEUodCl7dGhyb3cgbmV3IEVycm9yKHQpfWZ1bmN0aW9uIHQodCl7dmFyIGU9MCxuPXRbZSsrXSxyPXRbZSsrXTstMSE9biYmLTEhPXJ8fEUoXCJJbnZhbGlkIGhlYWRlciBpbiBmbGF0ZSBzdHJlYW1cIiksOCE9KDE1Jm4pJiZFKFwiVW5rbm93biBjb21wcmVzc2lvbiBtZXRob2QgaW4gZmxhdGUgc3RyZWFtXCIpLCgobjw8OCkrciklMzEhPTAmJkUoXCJCYWQgRkNIRUNLIGluIGZsYXRlIHN0cmVhbVwiKSwzMiZyJiZFKFwiRkRJQ1QgYml0IHNldCBpbiBmbGF0ZSBzdHJlYW1cIiksdGhpcy5ieXRlcz10LHRoaXMuYnl0ZXNQb3M9Mix0aGlzLmNvZGVTaXplPTAsdGhpcy5jb2RlQnVmPTAsUHQuY2FsbCh0aGlzKX19KCk7d2luZG93LnRtcD1rdH0pO3RyeXttb2R1bGUuZXhwb3J0cz1qc1BERn1jYXRjaCh0KXt9IiwiKGZ1bmN0aW9uICgkLCBqc1BERiwgaHRtbDJjYW52YXMpIHtcclxuXHJcbiAgICBsZXQgaW50ZXJhY3RpdmVfbmFtZSA9IGdldFBhcmFtZXRlckJ5TmFtZShcIm5hbWVcIik7XHJcbiAgICBsZXQgZG9sbHlVcmwgPSBEb2xseS5hcGlfdXJsKycvYXBpL3YxL2ludGVyYWN0aXZlcy8nO1xyXG5cclxuICAgIGZ1bmN0aW9uIGdldFBhcmFtZXRlckJ5TmFtZShuYW1lLCB1cmwpIHtcclxuICAgICAgICBpZiAoIXVybCkgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XHJcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW1xcXV0vZywgXCJcXFxcJCZcIik7XHJcbiAgICAgICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIls/Jl1cIiArIG5hbWUgKyBcIig9KFteJiNdKil8JnwjfCQpXCIpLFxyXG4gICAgICAgICAgICByZXN1bHRzID0gcmVnZXguZXhlYyh1cmwpO1xyXG4gICAgICAgIGlmICghcmVzdWx0cykgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgaWYgKCFyZXN1bHRzWzJdKSByZXR1cm4gJyc7XHJcbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzJdLnJlcGxhY2UoL1xcKy9nLCBcIiBcIikpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKGludGVyYWN0aXZlX25hbWUgPT09ICcnIHx8IGludGVyYWN0aXZlX25hbWUgPT09IG51bGwpIHtcclxuICAgICAgICBcclxuICAgICAgICAkKCcjY29zdC1wb29scy1pbnRlcmFjdGl2ZScpLmVtcHR5KCk7XHJcbiAgICAgICAgJCgnI2Nvc3QtcG9vbHMtaW50ZXJhY3RpdmUnKS5hcHBlbmQoJzxwPkFkZCB0aGUgdW5pcXVlIG5hbWUgb2YgdGhlIGRvbGx5IGludGVyYWN0aXZlLjwvcD4nKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgJGNvc3RJdGVtTmFtZSwgJHN0dWRlbnROYW1lLCAkY29zdEl0ZW1WYWx1ZSwgJGNvc3RJdGVtSWQsICRjb3N0RHJpdmVyLCAkY29zdEl0ZW1zLCAkY29zdEl0ZW1zTGlzdE5vZGUsICRjb3N0SXRlbXNDb3VudCwgJHRvdGFsLCAkc3R1ZGVudENvc3RQb29sRGVzaWduID0ge30sIGRhdGEgPSB7fSwgdXNlcklkLHN1Z2dlc3RlZENvc3RQb29sLCByZXRyeSA9IGZhbHNlO1xyXG5cclxuICAgIC8vZnVuY3Rpb24gZnJvbSBibG9nIHBvc3QgaHR0cHM6Ly9ibG9nLmFiZWxvdGVjaC5jb20vcG9zdHMvbnVtYmVyLWN1cnJlbmN5LWZvcm1hdHRpbmctamF2YXNjcmlwdC8gb24gZm9ybWF0dGluZyBudW1iZXJzIHRvIHN0cmluZ3Mgd2l0aCByZWd1bGFyIGV4cHJlc3Npb25zLiBAVG9tIFBhd2xha1xyXG4gICAgZnVuY3Rpb24gZm9ybWF0TnVtYmVyKG51bSkge1xyXG4gICAgICAgIHJldHVybiBudW0udG9TdHJpbmcoKS5yZXBsYWNlKC8oXFxkKSg/PShcXGR7M30pKyg/IVxcZCkpL2csICckMSwnKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjb252ZXJ0VG9OdW1iZXIoc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHN0cmluZy5yZXBsYWNlKC8sL2csICcnKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0U3R1ZGVudEFuc3dlcnMoaWQpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpZCA9PT0ga2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkU3R1ZGVudEpzb25TdHJpbmdUb0RPTShKU09OLnN0cmluZ2lmeShkYXRhW2tleV0uY29zdFBvb2xzKSwgJ1lvdXInLCAkKCcjc3RlcC0yIC5wb29sc19fcG9vbC1pdGVtLS1uby1vcGFjaXR5OmZpcnN0LWNoaWxkJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoJyNzZWxlY3Qtc3R1ZGVudCcpLmF0dHIoJ2RhdGEtdmFsdWUnLCBKU09OLnN0cmluZ2lmeShkYXRhW2tleV0uY29zdFBvb2xzKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkKCcjc2VsZWN0LXN0dWRlbnQnKS5hcHBlbmQoYDxvcHRpb24gdmFsdWU9XCIke2tleX1cIiBkYXRhLXZhbHVlPScke0pTT04uc3RyaW5naWZ5KGRhdGFba2V5XS5jb3N0UG9vbHMpfSc+JHtkYXRhW2tleV0uc3R1ZGVudH08L29wdGlvbj5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhZGRTdHVkZW50SnNvblN0cmluZ1RvRE9NKHN0cmluZywgbmFtZSwgcGFyZW50KSB7XHJcbiAgICAgICAgbGV0IGNvc3RQb29sRGVzaWduID0gSlNPTi5wYXJzZShzdHJpbmcpO1xyXG5cclxuICAgICAgICBwYXJlbnQuZW1wdHkoKTtcclxuICAgICAgICBwYXJlbnQuYXBwZW5kKGA8aDM+JHtuYW1lLnRyaW0oKX0gQ29zdCBQb29sczo8L2gzPmApO1xyXG5cclxuICAgICAgICBsZXQgeCA9IDE7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gY29zdFBvb2xEZXNpZ24pIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb3N0UG9vbERlc2lnbi5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGh0bWxTdHJpbmcgPSBgPGRpdiBjbGFzcz1cInBvb2xfX2NvbnRhaW5lcl9faXRlbS1saXN0XCI+PGg0PkNvc3QgUG9vbCAke3h9OjwvaDQ+YDtcclxuICAgICAgICAgICAgICAgIGxldCBpdGVtcyA9IGNvc3RQb29sRGVzaWduW2tleV07XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHRvdGFsID0gMDtcclxuICAgICAgICAgICAgICAgIGl0ZW1zLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbFN0cmluZyArPSBgIDxwPjxzcGFuPiR7ZWxlbWVudC5pdGVtTmFtZX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtlbGVtZW50LnZhbHVlfTwvc3Bhbj48L3A+IGA7XHJcbiAgICAgICAgICAgICAgICAgICAgdG90YWwgKz0gcGFyc2VJbnQoY29udmVydFRvTnVtYmVyKGVsZW1lbnQudmFsdWUpKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGh0bWxTdHJpbmcgKz0gYDxkaXYgY2xhc3M9XCJwb29sX19jb250YWluZXJfX2l0ZW0tbGlzdF9fdG90YWxcIj5cclxuICAgICAgICAgICAgICAgIDxwPjxzcGFuPlRvdGFsPC9zcGFuPjxzcGFuPiR7Zm9ybWF0TnVtYmVyKHRvdGFsKX08L3NwYW4+PC9wPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicG9vbF9fY29udGFpbmVyX19pdGVtLWxpc3RfX3RvdGFsIHBvb2xfX2NvbnRhaW5lcl9faXRlbS1saXN0X19jb3N0LWRyaXZlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwPjxzcGFuPkNvc3QgRHJpdmVyOjwvc3Bhbj4gJHtrZXl9PC9wPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+YFxyXG5cclxuICAgICAgICAgICAgICAgIGh0bWxTdHJpbmcgKz0gYDwvZGl2PmA7XHJcbiAgICAgICAgICAgICAgICBwYXJlbnQuYXBwZW5kKGh0bWxTdHJpbmcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHgrKztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcclxuXHJcbiAgICAgICAgdXNlcklkID0gRG9sbHkuY29va2llR2V0KGludGVyYWN0aXZlX25hbWUpO1xyXG5cclxuICAgICAgICBpZiAodXNlcklkKSB7XHJcbiAgICAgICAgICAgIERvbGx5LmFqYXhHZXQoZG9sbHlVcmwgKyBpbnRlcmFjdGl2ZV9uYW1lICsgXCIvZGF0YVwiLCBnZXREYXRhKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxldCBzdWdnZXN0ZWRDb3N0UG9vbE5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3RlcC0yIC5wb29scyA+IC5wb29sc19fcG9vbC1pdGVtLS1uby1vcGFjaXR5Omxhc3QtY2hpbGQnKTtcclxuICAgICAgICAgICAgc3VnZ2VzdGVkQ29zdFBvb2wgPSBzdWdnZXN0ZWRDb3N0UG9vbE5vZGUuY2xvbmVOb2RlKHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICQoJyNzdGVwLTEnKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICQoJyNzdGVwLTInKS5zaG93KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgJCgnI3N0ZXAtMScpLnNob3coKTtcclxuICAgICAgICAgICAgJCgnI3N0ZXAtMicpLmhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0RGF0YShyZXNwb25zZSkge1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiByZXNwb25zZSkge1xyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgZGF0YVtyZXNwb25zZVtrZXldLmlkXSA9IEpTT04ucGFyc2UocmVzcG9uc2Vba2V5XS5kYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBnZXRTdHVkZW50QW5zd2Vycyh1c2VySWQpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhZGRQb3B1cE1lc3NhZ2UobWVzc2FnZSwgdHlwZSwgdGltZSwgZSkge1xyXG5cclxuICAgICAgICB1c2VySWQgPSAkKGUuY3VycmVudFRhcmdldCkuYXR0cignaWQnKTtcclxuXHJcbiAgICAgICAgaWYgKHVzZXJJZCA9PT0gJ3N0YXJ0Jykge1xyXG5cclxuICAgICAgICAgICAgbGV0ICRwYXJlbnQgPSAkKGUuY3VycmVudFRhcmdldCkucGFyZW50cygnLmNlbnRlcicpO1xyXG5cclxuICAgICAgICAgICAgJHBhcmVudC5maW5kKCdoMicpLmFmdGVyKGA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtJHt0eXBlfVwiIHJvbGU9XCJhbGVydFwiPjxkaXYgY2xhc3M9XCJjbG9zZVwiIGRhdGEtZGlzbWlzcz1cImFsZXJ0XCIgYXJpYS1sYWJlbD1cIkNsb3NlXCI+PHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+w5c8L3NwYW4+PC9kaXY+PHA+JHttZXNzYWdlfTwvcD48L2Rpdj5gKTtcclxuXHJcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGRlbGV0ZUluZm9Ob3RpY2VzLCB0aW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCAkcGFyZW50ID0gJChlLmN1cnJlbnRUYXJnZXQpLnBhcmVudHMoJy5jYXJkJyk7XHJcblxyXG4gICAgICAgICAgICAkcGFyZW50LmZpbmQoJ2gyJykuYWZ0ZXIoYDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC0ke3R5cGV9XCIgcm9sZT1cImFsZXJ0XCI+PGRpdiBjbGFzcz1cImNsb3NlXCIgZGF0YS1kaXNtaXNzPVwiYWxlcnRcIiBhcmlhLWxhYmVsPVwiQ2xvc2VcIj48c3BhbiBhcmlhLWhpZGRlbj1cInRydWVcIj7Dlzwvc3Bhbj48L2Rpdj48cD4ke21lc3NhZ2V9PC9wPjwvZGl2PmApO1xyXG5cclxuICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZGVsZXRlSW5mb05vdGljZXMsIHRpbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJCgnLmFsZXJ0JykuZmFkZVRvKDMwMCwgMSk7XHJcbiAgICAgICAgJChcImh0bWwsIGJvZHlcIikuYW5pbWF0ZSh7IHNjcm9sbFRvcDogMCB9LCBcInNsb3dcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZmFkZSgpIHtcclxuICAgICAgICAkKCcuYWxlcnQnKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICAkKGVsZW1lbnQpLnJlbW92ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRlbGV0ZUluZm9Ob3RpY2VzKCkge1xyXG4gICAgICAgICQoJy5hbGVydCcpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICQoZWxlbWVudCkuZmFkZVRvKDMwMCwgMCk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZhZGUsIDQwMCk7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlbW92ZUNvc3RJdGVtKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICRjb3N0SXRlbXNMaXN0Tm9kZSA9ICQoZS5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKCcucG9vbF9fY29udGFpbmVyX19pdGVtLWxpc3QnKTtcclxuXHJcbiAgICAgICAgJGNvc3RJdGVtSWQgPSAkKGUuY3VycmVudFRhcmdldCkucGFyZW50KCdwJykuYXR0cignZGF0YS1pZCcpO1xyXG4gICAgICAgICRjb3N0SXRlbVZhbHVlID0gY29udmVydFRvTnVtYmVyKCQoZS5jdXJyZW50VGFyZ2V0KS5wYXJlbnQoJ3AnKS5maW5kKCdzcGFuOm50aC1jaGlsZCgyKScpLnRleHQoKSk7XHJcblxyXG4gICAgICAgICRjb3N0SXRlbXNDb3VudCA9ICRjb3N0SXRlbXNMaXN0Tm9kZS5maW5kKCc+cCcpLmxlbmd0aDtcclxuXHJcbiAgICAgICAgaWYgKCRjb3N0SXRlbXNDb3VudCA8PSAxKSB7XHJcbiAgICAgICAgICAgIC8vcmVtb3ZlIHAgYW5kIHRvdGFsXHJcbiAgICAgICAgICAgICQoZS5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKCcucG9vbF9fY29udGFpbmVyX19pdGVtLWxpc3QnKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy9yZW1vdmUgcFxyXG4gICAgICAgICAgICAkdG90YWwgPSBwYXJzZUludCgkY29zdEl0ZW1zTGlzdE5vZGUuZmluZCgnLnBvb2xfX2NvbnRhaW5lcl9faXRlbS1saXN0X190b3RhbCcpLmF0dHIoJ2RhdGEtdmFsdWUnKSkgLSAkY29zdEl0ZW1WYWx1ZTtcclxuXHJcbiAgICAgICAgICAgICRjb3N0SXRlbXNMaXN0Tm9kZS5maW5kKCcucG9vbF9fY29udGFpbmVyX19pdGVtLWxpc3RfX3RvdGFsJykuYXR0cignZGF0YS12YWx1ZScsICR0b3RhbCk7XHJcbiAgICAgICAgICAgICRjb3N0SXRlbXNMaXN0Tm9kZS5maW5kKCcucG9vbF9fY29udGFpbmVyX19pdGVtLWxpc3RfX3RvdGFsJykuYXR0cignZGF0YS12YWx1ZScsICR0b3RhbCk7XHJcblxyXG4gICAgICAgICAgICAkY29zdEl0ZW1zTGlzdE5vZGUuZmluZCgnLnBvb2xfX2NvbnRhaW5lcl9faXRlbS1saXN0X190b3RhbCcpLmh0bWwoYDxwPjxzcGFuPlRvdGFsPC9zcGFuPjxzcGFuPiR7Zm9ybWF0TnVtYmVyKCR0b3RhbCl9PC9zcGFuPjwvcD5gKTtcclxuXHJcbiAgICAgICAgICAgICQoZS5jdXJyZW50VGFyZ2V0KS5wYXJlbnQoJ3AnKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICRjb3N0SXRlbXNMaXN0Tm9kZS5maW5kKCcucG9vbF9fY29udGFpbmVyX19pdGVtLWxpc3RfX3RvdGFsID4gcCcpLmZhZGVUbygzMDAsIDEpO1xyXG4gICAgICAgICAgICAvL25ldyB0b3RhbFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJChgLnBvb2xfX2NvbnRhaW5lcl9faGVhZGVyIHNlbGVjdCBvcHRpb25bdmFsdWU9JHskY29zdEl0ZW1JZH1dYCkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgJChlbGVtZW50KS5zaG93KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVDb3N0SXRlbWxpc3QoKSB7XHJcbiAgICAgICAgbGV0ICRjaGVjaztcclxuICAgICAgICAkKCcucG9vbHNfX3Bvb2wtaXRlbTpmaXJzdC1jaGlsZCAucG9vbF9fY29udGFpbmVyX19oZWFkZXInKS5maW5kKCdvcHRpb24nKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKCQoZWxlbWVudCkuY3NzKCdkaXNwbGF5JykgIT09ICdub25lJykge1xyXG4gICAgICAgICAgICAgICAgJGNoZWNrID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoJGNoZWNrID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlQ29zdERyaXZlcigpIHtcclxuICAgICAgICBsZXQgJGNoZWNrO1xyXG5cclxuICAgICAgICAkKCcucG9vbF9fY29udGFpbmVyJykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICgkKGVsZW1lbnQpLmZpbmQoJy5wb29sX19jb250YWluZXJfX2l0ZW0tbGlzdCcpLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAkY29zdERyaXZlciA9ICQoZWxlbWVudCkubmV4dCgpLmZpbmQoJ2lucHV0W3R5cGU9dGV4dF0nKS52YWwoKS50cmltKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCRjb3N0RHJpdmVyID09PSBudWxsIHx8ICRjb3N0RHJpdmVyID09PSAnJyB8fCAkY29zdERyaXZlciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGNoZWNrID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICgkY2hlY2sgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcG9zdERvbmUocmVzcG9uc2UpIHtcclxuICAgICAgICB1c2VySWQgPSByZXNwb25zZS5pZDtcclxuICAgICAgICBEb2xseS5jb29raWVTZXQoaW50ZXJhY3RpdmVfbmFtZSwgdXNlcklkLCA1MDApO1xyXG4gICAgICAgIC8vc3VjY2Vzc1xyXG4gICAgICAgIERvbGx5LmFqYXhHZXQoZG9sbHlVcmwgKyBpbnRlcmFjdGl2ZV9uYW1lICsgXCIvZGF0YVwiLCBnZXREYXRhKTtcclxuICAgICAgICAvL2dldCByZXF1ZXN0IGZvciB0aGUgbGlzdCBvZiBzdHVkZW50cyAmIHRoZWlyIGRlc2lnbnNcclxuXHJcblxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHN1Ym1pdFN0dWRlbnRBbnN3ZXJUb0RhdGFiYXNlKGRhdGEpIHtcclxuXHJcbiAgICAgICAgbGV0IHBvc3RfZGF0YSA9IHsgXCJkYXRhXCI6IGRhdGEgfTtcclxuXHJcbiAgICAgICAgRG9sbHkuYWpheFBvc3QoZG9sbHlVcmwgKyBpbnRlcmFjdGl2ZV9uYW1lICsgXCIvZGF0YVwiLCBwb3N0X2RhdGEsIHBvc3REb25lKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlRGF0YVN0cmluZygpe1xyXG4gICAgICAgICRzdHVkZW50Q29zdFBvb2xEZXNpZ24uY29zdFBvb2xzID0ge307XHJcblxyXG4gICAgICAgICQoJyNzdGVwLTEgLnBvb2xfX2NvbnRhaW5lcl9faXRlbS1saXN0JykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCAkbmFtZSA9ICQoZWxlbWVudCkucGFyZW50cygnLnBvb2xfX2NvbnRhaW5lcicpLm5leHQoKS5maW5kKCdpbnB1dFt0eXBlPXRleHRdJykudmFsKCk7XHJcbiAgICAgICAgICAgICRzdHVkZW50Q29zdFBvb2xEZXNpZ24uY29zdFBvb2xzWyRuYW1lXSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgJChlbGVtZW50KS5maW5kKCc+cCcpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGNvc3RJdGVtID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiAkKGVsZW1lbnQpLmF0dHIoJ2RhdGEtaWQnKSxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJChlbGVtZW50KS5maW5kKCdzcGFuOm50aC1jaGlsZCgyKScpLnRleHQoKS50cmltKCksXHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbU5hbWU6ICQoZWxlbWVudCkuZmluZCgnc3BhbjpmaXJzdC1jaGlsZCcpLnRleHQoKS50cmltKClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAkc3R1ZGVudENvc3RQb29sRGVzaWduLmNvc3RQb29sc1skbmFtZV0ucHVzaChjb3N0SXRlbSk7XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy9mb3JtIHN1Ym1pc3Npb25cclxuICAgIGZ1bmN0aW9uIHJlYWR5VG9Qb3N0KGUpIHtcclxuXHJcbiAgICAgICAgY3JlYXRlRGF0YVN0cmluZygpO1xyXG5cclxuICAgICAgICBsZXQganNvblN0cmluZyA9IEpTT04uc3RyaW5naWZ5KCRzdHVkZW50Q29zdFBvb2xEZXNpZ24pO1xyXG4gICAgICAgIGxldCBkb21TdHJpbmcgPSBKU09OLnN0cmluZ2lmeSgkc3R1ZGVudENvc3RQb29sRGVzaWduLmNvc3RQb29scyk7XHJcblxyXG4gICAgICAgIHN1Ym1pdFN0dWRlbnRBbnN3ZXJUb0RhdGFiYXNlKGpzb25TdHJpbmcpO1xyXG4gICAgICAgIGFkZFN0dWRlbnRKc29uU3RyaW5nVG9ET00oZG9tU3RyaW5nLCAnWW91cicsICQoJyNzdGVwLTIgLnBvb2xzIC5wb29sc19fcG9vbC1pdGVtLS1uby1vcGFjaXR5OmZpcnN0LWNoaWxkJykpO1xyXG5cclxuICAgICAgICAkKCcjc3RlcC0xJykuaGlkZSgpO1xyXG4gICAgICAgICQoJyNzdGVwLTInKS5zaG93KCk7XHJcbiAgICAgICAgbGV0IHN1Z2dlc3RlZENvc3RQb29sTm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzdGVwLTIgLnBvb2xzID4gLnBvb2xzX19wb29sLWl0ZW0tLW5vLW9wYWNpdHk6bGFzdC1jaGlsZCcpO1xyXG4gICAgICAgIHN1Z2dlc3RlZENvc3RQb29sID0gc3VnZ2VzdGVkQ29zdFBvb2xOb2RlLmNsb25lTm9kZSh0cnVlKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgaW5pdCgpO1xyXG5cclxuICAgIC8vb24gY2hhbmdlIHBvb2xzIGRyb3Bkb3duXHJcbiAgICAkKCcjc3RlcC0xIC5wb29sX19jb250YWluZXJfX2hlYWRlciBzZWxlY3QnKS5jaGFuZ2UoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICB2YXIgJGNvdW50VmlzaWJsZUNvc3RJdGVtcyA9IDA7XHJcbiAgICAgICAgJCh0aGlzKS5maW5kKCdvcHRpb24nKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICAvLyBlbGVtZW50ID09IHRoaXNcclxuICAgICAgICAgICAgaWYgKCQoZWxlbWVudCkuY3NzKCdkaXNwbGF5JykgIT09ICdub25lJykge1xyXG4gICAgICAgICAgICAgICAgJGNvdW50VmlzaWJsZUNvc3RJdGVtcysrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRjb3N0SXRlbU5hbWUgPSAkKHRoaXMpLmNoaWxkcmVuKFwib3B0aW9uOnNlbGVjdGVkXCIpLnRleHQoKTtcclxuICAgICAgICAkY29zdEl0ZW1JZCA9IHBhcnNlSW50KCQodGhpcykudmFsKCkpO1xyXG4gICAgICAgICRjb3N0SXRlbVZhbHVlID0gcGFyc2VJbnQoJCh0aGlzKS5jaGlsZHJlbihcIm9wdGlvbjpzZWxlY3RlZFwiKS5hdHRyKCdkYXRhLXZhbHVlJykpO1xyXG4gICAgICAgICRjb3N0SXRlbXNMaXN0Tm9kZSA9ICQodGhpcykucGFyZW50cygnLnBvb2xfX2NvbnRhaW5lcl9faGVhZGVyJykubmV4dCgpO1xyXG5cclxuICAgICAgICBpZiAoQm9vbGVhbigkY29zdEl0ZW1zTGlzdE5vZGUuY2hpbGRyZW4oJy5wb29sX19jb250YWluZXJfX2l0ZW0tbGlzdF9fdG90YWwnKS5sZW5ndGgpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAvL2NoYW5nZSB0b3RhbFxyXG4gICAgICAgICAgICAkKGA8ZGl2IGNsYXNzPVwicG9vbF9fY29udGFpbmVyX19pdGVtLWxpc3RcIj48cCBkYXRhLWlkPVwiJHskY29zdEl0ZW1JZH1cIj48c3Bhbj4keyRjb3N0SXRlbU5hbWV9PC9zcGFuPjxzcGFuPiR7Zm9ybWF0TnVtYmVyKCRjb3N0SXRlbVZhbHVlKX08L3NwYW4+PHNwYW4gY2xhc3M9XCJwb29sX19jb250YWluZXJfX2RlbGV0ZVwiPjxpIGNsYXNzPVwiZmEgZmEtdGltZXNcIj48L2k+PC9zcGFuPjwvcD48ZGl2IGRhdGEtdmFsdWU9XCIkeyRjb3N0SXRlbVZhbHVlfVwiIGNsYXNzPVwicG9vbF9fY29udGFpbmVyX19pdGVtLWxpc3RfX3RvdGFsXCI+PHA+PHNwYW4+VG90YWw8L3NwYW4+PHNwYW4+JHtmb3JtYXROdW1iZXIoJGNvc3RJdGVtVmFsdWUpfTwvc3Bhbj48L3A+PC9kaXY+PC9kaXY+YCkuYXBwZW5kVG8oJCh0aGlzKS5wYXJlbnRzKCcucG9vbF9fY29udGFpbmVyJykpO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgJHRvdGFsID0gcGFyc2VJbnQoJGNvc3RJdGVtc0xpc3ROb2RlLmNoaWxkcmVuKCcucG9vbF9fY29udGFpbmVyX19pdGVtLWxpc3RfX3RvdGFsJykuYXR0cignZGF0YS12YWx1ZScpKSArICRjb3N0SXRlbVZhbHVlO1xyXG5cclxuICAgICAgICAgICAgJGNvc3RJdGVtc0xpc3ROb2RlLmNoaWxkcmVuKCcucG9vbF9fY29udGFpbmVyX19pdGVtLWxpc3RfX3RvdGFsJykuYXR0cignZGF0YS12YWx1ZScsICR0b3RhbCk7XHJcbiAgICAgICAgICAgICRjb3N0SXRlbXNMaXN0Tm9kZS5jaGlsZHJlbignLnBvb2xfX2NvbnRhaW5lcl9faXRlbS1saXN0X190b3RhbCcpLmh0bWwoYDxwPjxzcGFuPlRvdGFsPC9zcGFuPjxzcGFuPiR7Zm9ybWF0TnVtYmVyKCR0b3RhbCl9PC9zcGFuPjwvcD5gKTtcclxuXHJcbiAgICAgICAgICAgICRjb3N0SXRlbXMgPSBgPHAgZGF0YS1pZD1cIiR7JGNvc3RJdGVtSWR9XCI+PHNwYW4+JHskY29zdEl0ZW1OYW1lfTwvc3Bhbj48c3Bhbj4ke2Zvcm1hdE51bWJlcigkY29zdEl0ZW1WYWx1ZSl9PC9zcGFuPjxzcGFuIGNsYXNzPVwicG9vbF9fY29udGFpbmVyX19kZWxldGVcIj48aSBjbGFzcz1cImZhIGZhLXRpbWVzXCI+PC9pPjwvc3Bhbj48L3A+YCArICQodGhpcykucGFyZW50cygnLnBvb2xfX2NvbnRhaW5lcl9faGVhZGVyJykubmV4dCgpLmh0bWwoKTtcclxuXHJcbiAgICAgICAgICAgICQodGhpcykucGFyZW50cygnLnBvb2xfX2NvbnRhaW5lcl9faGVhZGVyJykubmV4dCgpLmh0bWwoJGNvc3RJdGVtcyk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJCgnLnBvb2xfX2NvbnRhaW5lcl9faGVhZGVyIHNlbGVjdCBvcHRpb25bdmFsdWU9JyArICRjb3N0SXRlbUlkICsgJ10nKS5oaWRlKCk7XHJcbiAgICAgICAgJCh0aGlzKS52YWwoXCIwXCIpO1xyXG5cclxuICAgICAgICAkKCcucG9vbF9fY29udGFpbmVyX19pdGVtLWxpc3QgcCcpLmZhZGVUbygzMDAsIDEpO1xyXG5cclxuICAgICAgICAkKCcucG9vbF9fY29udGFpbmVyX19kZWxldGUnKS5jbGljayhmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgcmVtb3ZlQ29zdEl0ZW0oZXZlbnQpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgIC8vb24gY2hhbmdlIC0gc2VsZWN0IHBlZXIgcG9vbCBkZXNpZ25cclxuICAgICQoJyNzdGVwLTIgI3NlbGVjdC1zdHVkZW50JykuY2hhbmdlKGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGxldCBzdHJpbmcgPSAkKHRoaXMpLmNoaWxkcmVuKFwib3B0aW9uOnNlbGVjdGVkXCIpLmF0dHIoJ2RhdGEtdmFsdWUnKTtcclxuICAgICAgICBsZXQgc3R1ZGVudE5hbWUgPSAkKHRoaXMpLmNoaWxkcmVuKFwib3B0aW9uOnNlbGVjdGVkXCIpLnRleHQoKTtcclxuICAgICAgICBhZGRTdHVkZW50SnNvblN0cmluZ1RvRE9NKHN0cmluZywgc3R1ZGVudE5hbWUsICQoJyNzdGVwLTIgLnBvb2xzIC5wb29sc19fcG9vbC1pdGVtLS1uby1vcGFjaXR5Omxhc3QtY2hpbGQnKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBzdGFydCBhY3Rpdml0eVxyXG4gICAgJCgnI3N0YXJ0JykuY2xpY2soZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICRzdHVkZW50TmFtZSA9ICQoZS5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKCcuaW5wdXQtZ3JvdXAnKS5maW5kKCdpbnB1dFt0eXBlPXRleHRdJykudmFsKCkudHJpbSgpO1xyXG5cclxuICAgICAgICBpZiAoJHN0dWRlbnROYW1lID09PSBudWxsIHx8ICRzdHVkZW50TmFtZSA9PT0gJycgfHwgJHN0dWRlbnROYW1lID09PSB1bmRlZmluZWQpIHtcclxuXHJcbiAgICAgICAgICAgIGFkZFBvcHVwTWVzc2FnZSgnV2UgbmVlZCB5b3VyIG5hbWUgYmVmb3JlIHlvdSBjYW4gc3RhcnQgdGhlIGFjdGl2aXR5LicsICdkYW5nZXInLCA1MDAwLCBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICRzdHVkZW50Q29zdFBvb2xEZXNpZ24uc3R1ZGVudCA9ICRzdHVkZW50TmFtZTtcclxuICAgICAgICAgICAgJCgnI3N0ZXAtMSBwIHNwYW4nKS5odG1sKCRzdHVkZW50TmFtZSk7XHJcblxyXG4gICAgICAgICAgICAkKGUuY3VycmVudFRhcmdldCkucGFyZW50cygnLmNhcmRfX2FsZXJ0Jykuc2xpZGVUb2dnbGUoe1xyXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDQwMFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBcclxuXHJcbiAgICAvLyBzdWJtaXQgZm9ybVxyXG4gICAgJCgnI3N1Ym1pdC1jb3N0LXBvb2wtZGVzaWduJykuY2xpY2soZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHZhbGlkYXRlQ29zdEl0ZW1saXN0KCkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGFkZFBvcHVwTWVzc2FnZSgnUGxlYXNlIGFkZCBlYWNoIGNvc3QgaXRlbSBpbnRvIGEgY29zdCBwb29sIGJlZm9yZSBzdWJtaXR0aW5nLicsICdkYW5nZXInLCA1MDAwLCBlKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHZhbGlkYXRlQ29zdERyaXZlcigpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBhZGRQb3B1cE1lc3NhZ2UoJ1BsZWFzZSB0eXBlIGEgY29zdCBkcml2ZXIgZm9yIGVhY2ggY29zdCBwb29sIGJlZm9yZSBzdWJtaXR0aW5nLicsICdkYW5nZXInLCA1MDAwLCBlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZihyZXRyeSA9PT0gdHJ1ZSl7XHJcbiAgICAgICAgICAgICAgICBjcmVhdGVEYXRhU3RyaW5nKCk7ICAgXHJcbiAgICAgICAgICAgICAgICB2YXIgcHV0X2RhdGEgPSB7XCJkYXRhXCI6IEpTT04uc3RyaW5naWZ5KCRzdHVkZW50Q29zdFBvb2xEZXNpZ24pfTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHVzZXJJZCk7XHJcbiAgICAgICAgICAgICAgICBEb2xseS5hamF4UHV0KGRvbGx5VXJsK2ludGVyYWN0aXZlX25hbWUrXCIvZGF0YS9cIit1c2VySWQsIHB1dF9kYXRhLCBwdXREb25lKTtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHB1dERvbmUocmVzcG9uc2Upe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCcjc3RlcC0xJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoJyNzdGVwLTInKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zdERvbmUocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL2Vsc2UgZG8gdGhpcyBmdW5jdGlvblxyXG4gICAgICAgICAgICAgICAgcmVhZHlUb1Bvc3QoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gY2xlYXJDb3N0UG9vbHMoKXtcclxuICAgICAgICAkKCcjc3RlcC0xIC5wb29sX19jb250YWluZXJfX2l0ZW0tbGlzdCcpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICQoZWxlbWVudCkucmVtb3ZlKCk7XHJcbiAgICAgICAgIH0pO1xyXG4gICAgICAgICAkKCcjc3RlcC0xIC5wb29sX19jb250YWluZXJfX2hlYWRlciBzZWxlY3Qgb3B0aW9uOm5vdCgjc3RlcC0xIC5wb29sX19jb250YWluZXJfX2hlYWRlciBzZWxlY3Qgb3B0aW9uOmZpcnN0LWNoaWxkKScpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAkKGVsZW1lbnQpLnNob3coKTsgICAgICAgICAgICBcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAkKCcjY2xlYXItY29zdC1wb29scycpLmNsaWNrKGZ1bmN0aW9uIChlKSB7IFxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBjbGVhckNvc3RQb29scygpO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICAgICQoJyNSZXRyeScpLmNsaWNrKGZ1bmN0aW9uIChlKSB7IFxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBjb25zb2xlLmxvZygnaGkgdGhlcmUnKTtcclxuICAgICAgICByZXRyeSA9IHRydWU7XHJcbiAgICAgICAgY2xlYXJDb3N0UG9vbHMoKTtcclxuICAgICAgICAkKCcjc3RlcC0xIC5jYXJkX19hbGVydCcpLmhpZGUoKTtcclxuICAgICAgICAkKCcjc3RlcC0xJykuc2hvdygpO1xyXG4gICAgICAgICQoJyNzdGVwLTInKS5oaWRlKCk7XHJcbiAgICAgICAgXHJcbiAgICB9KTtcclxuXHJcbiAgICAkKCcjZG93bmxvYWQnKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzdGVwLTIgLnBvb2xzID4gLnBvb2xzX19wb29sLWl0ZW0tLW5vLW9wYWNpdHk6bGFzdC1jaGlsZCcpLnJlbW92ZSgpO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzdGVwLTIgLnBvb2xzJykuYXBwZW5kKHN1Z2dlc3RlZENvc3RQb29sKTtcclxuXHJcbiAgICAgICAgbGV0IHR3b1NlY3Rpb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3N0ZXAtMiAucG9vbHMgLnBvb2xzX19wb29sLWl0ZW0nKTtcclxuXHJcbiAgICAgICAgdmFyIGh0bWxFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgICAgIHR3b1NlY3Rpb25zLmZvckVhY2goc2VjdGlvbiA9PiB7XHJcbiAgICAgICAgICAgIGxldCBkdXBsaWNhdGUgPSBzZWN0aW9uLmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgICAgICAgaHRtbEVsZW1lbnQuYXBwZW5kKGR1cGxpY2F0ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaHRtbEVsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHlsZScsJ2Rpc3BsYXk6IGZsZXg7d2lkdGg6IDgwMHB4O2p1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtwb3NpdGlvbjphYnNvbHV0ZTsnKTtcclxuICAgICAgICBcclxuICAgICAgICB0d29TZWN0aW9uc1swXS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywnbWFyZ2luLXJpZ2h0OjIwcHg7Jyk7XHJcblxyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaHRtbEVsZW1lbnQpO1xyXG5cclxuICAgICAgICAvLyBmb3VuZCBvbiBzdGFjayBvdmVyZmxvdy4gaGFuZGxlYmFyOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3VzZXJzLzQyOTc1NjIvYmFwdHdhZWxzP3RhYj1wcm9maWxlIGJsZXNzIGhpbSA6KVxyXG4gICAgICAgIGh0bWwyY2FudmFzKGh0bWxFbGVtZW50KS50aGVuKGNhbnZhcyA9PiB7XHJcblxyXG4gICAgICAgICAgICBsZXQgcGRmID0gbmV3IGpzUERGKCdwJywgJ3B0JywgJ2E0Jyk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBodG1sRWxlbWVudC5jbGllbnRIZWlnaHQgLyA5ODA7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgLy8hIFRoaXMgaXMgYWxsIGp1c3QgaHRtbDJjYW52YXMgc3R1ZmZcclxuICAgICAgICAgICAgICAgIHZhciBzcmNJbWcgPSBjYW52YXM7XHJcbiAgICAgICAgICAgICAgICB2YXIgc1ggPSAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNZID0gOTgwICogaTsgLy8gc3RhcnQgOTgwIHBpeGVscyBkb3duIGZvciBldmVyeSBuZXcgcGFnZVxyXG4gICAgICAgICAgICAgICAgdmFyIHNXaWR0aCA9IDEyNTA7XHJcbiAgICAgICAgICAgICAgICB2YXIgc0hlaWdodCA9IDk4MDtcclxuICAgICAgICAgICAgICAgIHZhciBkWCA9IDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgZFkgPSAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRXaWR0aCA9IDEyNTA7XHJcbiAgICAgICAgICAgICAgICB2YXIgZEhlaWdodCA9IDk4MDtcclxuXHJcbiAgICAgICAgICAgICAgICB3aW5kb3cub25lUGFnZUNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgb25lUGFnZUNhbnZhcy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgMTI1MCk7Ly9cclxuICAgICAgICAgICAgICAgIG9uZVBhZ2VDYW52YXMuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCA5ODApOy8vNzgwXHJcbiAgICAgICAgICAgICAgICB2YXIgY3R4ID0gb25lUGFnZUNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgICAgICAgICAgICAgLy8gZGV0YWlscyBvbiB0aGlzIHVzYWdlIG9mIHRoaXMgZnVuY3Rpb246IFxyXG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NhbnZhc19BUEkvVHV0b3JpYWwvVXNpbmdfaW1hZ2VzI1NsaWNpbmdcclxuICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2Uoc3JjSW1nLCBzWCwgc1ksIHNXaWR0aCwgc0hlaWdodCwgZFgsIGRZLCBkV2lkdGgsIGRIZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcclxuICAgICAgICAgICAgICAgIHZhciBjYW52YXNEYXRhVVJMID0gb25lUGFnZUNhbnZhcy50b0RhdGFVUkwoXCJpbWFnZS9wbmdcIiwgMS4wKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBvbmVQYWdlQ2FudmFzLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IG9uZVBhZ2VDYW52YXMuY2xpZW50SGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vISBJZiB3ZSdyZSBvbiBhbnl0aGluZyBvdGhlciB0aGFuIHRoZSBmaXJzdCBwYWdlLFxyXG4gICAgICAgICAgICAgICAgLy8gYWRkIGFub3RoZXIgcGFnZVxyXG4gICAgICAgICAgICAgICAgaWYgKGkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGRmLmFkZFBhZ2UoNjEyLCA3OTEpOyAvLzguNVwiIHggMTFcIiBpbiBwdHMgKGluKjcyKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8hIG5vdyB3ZSBkZWNsYXJlIHRoYXQgd2UncmUgd29ya2luZyBvbiB0aGF0IHBhZ2VcclxuICAgICAgICAgICAgICAgIHBkZi5zZXRQYWdlKGkgKyAxKTtcclxuICAgICAgICAgICAgICAgIC8vISBub3cgd2UgYWRkIGNvbnRlbnQgdG8gdGhhdCBwYWdlIVxyXG4gICAgICAgICAgICAgICAgcGRmLmFkZEltYWdlKGNhbnZhc0RhdGFVUkwsICdQTkcnLCAyMCwgNDAsICh3aWR0aCAqIC42MiksIChoZWlnaHQgKiAuNjIpKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8hIGFmdGVyIHRoZSBmb3IgbG9vcCBpcyBmaW5pc2hlZCBydW5uaW5nLCB3ZSBzYXZlIHRoZSBwZGYuXHJcbiAgICAgICAgICAgIHBkZi5zYXZlKCdjb3N0IHBvb2xzLnBkZicpO1xyXG4gICAgICAgICAgICBodG1sRWxlbWVudC5yZW1vdmUoKTtcclxuXHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG5cclxufSkoJCwganNQREYsIGh0bWwyY2FudmFzKTsiXX0=
